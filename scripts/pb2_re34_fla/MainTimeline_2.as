package pb2_re34_fla
{
   import CPMStar.*;
   import com.adobe.crypto.MD5;
   import com.adobe.images.*;
   import com.hurlant.util.*;
   import com.jac.mouse.*;
   import fl.motion.*;
   import flash.accessibility.*;
   import flash.display.*;
   import flash.errors.*;
   import flash.events.*;
   import flash.external.*;
   import flash.filters.*;
   import flash.geom.*;
   import flash.media.*;
   import flash.net.*;
   import flash.net.drm.*;
   import flash.system.*;
   import flash.text.*;
   import flash.text.ime.*;
   import flash.ui.*;
   import flash.utils.*;
   
   public dynamic class MainTimeline extends MovieClip
   {
      
      public var a_1:MovieClip;
      
      public var a_2:MovieClip;
      
      public var a_3:MovieClip;
      
      public var a_6:MovieClip;
      
      public var ach_done:SimpleButton;
      
      public var ach_txt:TextField;
      
      public var achives:SimpleButton;
      
      public var adBox:MovieClip;
      
      public var ap_1:MovieClip;
      
      public var ap_2:MovieClip;
      
      public var arms0_next:SimpleButton;
      
      public var arms0_prev:SimpleButton;
      
      public var arms1_next:SimpleButton;
      
      public var arms1_prev:SimpleButton;
      
      public var back1:SimpleButton;
      
      public var back1e1:SimpleButton;
      
      public var back1e2:SimpleButton;
      
      public var back2:SimpleButton;
      
      public var back3:SimpleButton;
      
      public var beep_1:MovieClip;
      
      public var body0_next:SimpleButton;
      
      public var body0_prev:SimpleButton;
      
      public var body1_next:SimpleButton;
      
      public var body1_prev:SimpleButton;
      
      public var bt_1:MovieClip;
      
      public var bt_2:MovieClip;
      
      public var c_1:MovieClip;
      
      public var camp_list:MovieClip;
      
      public var camp_score:MovieClip;
      
      public var cap:TextField;
      
      public var ch_n:TextField;
      
      public var char0:TextField;
      
      public var char0_next:SimpleButton;
      
      public var char0_prev:SimpleButton;
      
      public var char1_next:SimpleButton;
      
      public var char1_prev:SimpleButton;
      
      public var chat_win:MovieClip;
      
      public var click_reg:MovieClip;
      
      public var cm_1:MovieClip;
      
      public var cmap_canc:SimpleButton;
      
      public var cmap_crt:SimpleButton;
      
      public var cmap_pl:SimpleButton;
      
      public var cmid:TextField;
      
      public var code_win:MovieClip;
      
      public var conmenu:MovieClip;
      
      public var conmenu_set:MovieClip;
      
      public var cont_apply_state:SimpleButton;
      
      public var cont_back1:SimpleButton;
      
      public var cont_back_progress:SimpleButton;
      
      public var conti:SimpleButton;
      
      public var conti_loading:SimpleButton;
      
      public var creds:TextField;
      
      public var csh_1:MovieClip;
      
      public var cur_1:MovieClip;
      
      public var cust_back1:SimpleButton;
      
      public var cust_m:SimpleButton;
      
      public var darkness:MovieClip;
      
      public var dch_0:MovieClip;
      
      public var dch_1:MovieClip;
      
      public var dch_2:MovieClip;
      
      public var dif_easy:SimpleButton;
      
      public var dif_extreme:SimpleButton;
      
      public var dif_extreme_text:TextField;
      
      public var dif_hard:SimpleButton;
      
      public var dif_normal:SimpleButton;
      
      public var earth:MovieClip;
      
      public var eq_pcg:SimpleButton;
      
      public var eq_pcg2:SimpleButton;
      
      public var equipment:SimpleButton;
      
      public var equipment2:SimpleButton;
      
      public var errmenu:MovieClip;
      
      public var errmenu_mp:MovieClip;
      
      public var error_game_state:TextField;
      
      public var errtxt:TextField;
      
      public var exp_1:MovieClip;
      
      public var exp_2:MovieClip;
      
      public var exp_3:MovieClip;
      
      public var exp_bar:MovieClip;
      
      public var exp_bar_shadow:MovieClip;
      
      public var flike:SimpleButton;
      
      public var flike2:SimpleButton;
      
      public var flike4:SimpleButton;
      
      public var flikee:SimpleButton;
      
      public var flogin:TextField;
      
      public var fpassword:TextField;
      
      public var fps_no:MovieClip;
      
      public var frr_1:MovieClip;
      
      public var frr_2:MovieClip;
      
      public var frr_3:MovieClip;
      
      public var game:MovieClip;
      
      public var game_state_text:TextField;
      
      public var gamechatbox2:MovieClip;
      
      public var gamedeaths:TextField;
      
      public var gamedeaths_hint:TextField;
      
      public var gamefps:TextField;
      
      public var gamefps_hint:TextField;
      
      public var gamekills:TextField;
      
      public var gamekills_hint:TextField;
      
      public var gamemenu:MovieClip;
      
      public var gameversion:TextField;
      
      public var ggg:MovieClip;
      
      public var ggpp:MovieClip;
      
      public var graphics_3d:MovieClip;
      
      public var graphics_3d_front:MovieClip;
      
      public var gupd_gname:TextField;
      
      public var gupd_mid:TextField;
      
      public var head0_next:SimpleButton;
      
      public var head0_prev:SimpleButton;
      
      public var head1_next:SimpleButton;
      
      public var head1_prev:SimpleButton;
      
      public var herolist:MovieClip;
      
      public var hf_1:MovieClip;
      
      public var hf_2:MovieClip;
      
      public var hi_1:MovieClip;
      
      public var hintf:MovieClip;
      
      public var hit_1:MovieClip;
      
      public var hp_box:MovieClip;
      
      public var ifupdated:TextField;
      
      public var intro_base:MovieClip;
      
      public var intro_btcb:SimpleButton;
      
      public var intro_graph:MovieClip;
      
      public var intro_vers:TextField;
      
      public var joinmenu_mp:MovieClip;
      
      public var kd_no:MovieClip;
      
      public var lags:MovieClip;
      
      public var legs0_next:SimpleButton;
      
      public var legs0_prev:SimpleButton;
      
      public var legs1_next:SimpleButton;
      
      public var legs1_prev:SimpleButton;
      
      public var list:MovieClip;
      
      public var list2:MovieClip;
      
      public var list3:MovieClip;
      
      public var loa:TextField;
      
      public var loa2:TextField;
      
      public var load_error_field:TextField;
      
      public var lobbyopen:SimpleButton;
      
      public var lobbywindow:MovieClip;
      
      public var login_cancel:SimpleButton;
      
      public var login_guest:SimpleButton;
      
      public var login_login:SimpleButton;
      
      public var m2_1:MovieClip;
      
      public var m2_1x:MovieClip;
      
      public var m_1:MovieClip;
      
      public var m_1x:MovieClip;
      
      public var map_preview_big:MovieClip;
      
      public var map_preview_big_lobby:MovieClip;
      
      public var map_quickpick:MovieClip;
      
      public var mapname_lobby:TextField;
      
      public var match_lobby:TextField;
      
      public var mdialog:MovieClip;
      
      public var menu_back2:SimpleButton;
      
      public var menu_buttons:MovieClip;
      
      public var menu_buttons2:MovieClip;
      
      public var menu_fail_faq:SimpleButton;
      
      public var menu_fail_mp:SimpleButton;
      
      public var menu_mold:SimpleButton;
      
      public var menu_noback:SimpleButton;
      
      public var menu_pb1:SimpleButton;
      
      public var menu_start2:SimpleButton;
      
      public var mp_auto_con_1:MovieClip;
      
      public var mp_auto_con_2:MovieClip;
      
      public var mpcoverup:MovieClip;
      
      public var mq_1:MovieClip;
      
      public var msgtxt:TextField;
      
      public var mupd:MovieClip;
      
      public var mw_1:MovieClip;
      
      public var myCursor:MovieClip;
      
      public var n_1:MovieClip;
      
      public var need_heal:MovieClip;
      
      public var need_slot:SimpleButton;
      
      public var new_active:MovieClip;
      
      public var next_lev:SimpleButton;
      
      public var nnew:SimpleButton;
      
      public var no_proxy:MovieClip;
      
      public var nodif_cancel:SimpleButton;
      
      public var nologin_cancel:SimpleButton;
      
      public var nologin_start:SimpleButton;
      
      public var nrg:MovieClip;
      
      public var opensimplegui:SimpleButton;
      
      public var opt_controls:SimpleButton;
      
      public var opt_export_progress:SimpleButton;
      
      public var os_1:MovieClip;
      
      public var p_1:MovieClip;
      
      public var p_2:MovieClip;
      
      public var pauze:MovieClip;
      
      public var pb0:MovieClip;
      
      public var pb1:MovieClip;
      
      public var pb2:MovieClip;
      
      public var pb3:MovieClip;
      
      public var pb4:MovieClip;
      
      public var pcg:MovieClip;
      
      public var ph_1:MovieClip;
      
      public var ph_2:MovieClip;
      
      public var physics_win:MovieClip;
      
      public var pnumbers:TextField;
      
      public var q_1:MovieClip;
      
      public var qmenu:MovieClip;
      
      public var ran_1:MovieClip;
      
      public var ran_2:MovieClip;
      
      public var rec_1:MovieClip;
      
      public var rmmatch:MovieClip;
      
      public var rready:MovieClip;
      
      public var rrefresh:SimpleButton;
      
      public var runner:MovieClip;
      
      public var s_1:MovieClip;
      
      public var sc_down1:SimpleButton;
      
      public var sc_down2:SimpleButton;
      
      public var sc_scrool:SimpleButton;
      
      public var sc_scroolBBB:MovieClip;
      
      public var sc_up1:SimpleButton;
      
      public var sc_up2:SimpleButton;
      
      public var screenf:MovieClip;
      
      public var screenfade_1:MovieClip;
      
      public var se_1:MovieClip;
      
      public var server_list_box:MovieClip;
      
      public var server_lobby:TextField;
      
      public var simplegui:MovieClip;
      
      public var skin0:MovieClip;
      
      public var skin1:MovieClip;
      
      public var sky:MovieClip;
      
      public var team_blue:MovieClip;
      
      public var team_red:MovieClip;
      
      public var tinted_hp_prog:MovieClip;
      
      public var title_quickpick:MovieClip;
      
      public var tooltip_dif:TextField;
      
      public var tooltip_dif2:TextField;
      
      public var tooltip_dif3:TextField;
      
      public var tt_1:MovieClip;
      
      public var txt:TextField;
      
      public var ui_full:MovieClip;
      
      public var ui_mini:MovieClip;
      
      public var ui_no:MovieClip;
      
      public var uibackground:MovieClip;
      
      public var uibg_1:MovieClip;
      
      public var updateinfo:TextField;
      
      public var v_1:MovieClip;
      
      public var v_1x:MovieClip;
      
      public var vehhp:MovieClip;
      
      public var vi_1:MovieClip;
      
      public var weps:MovieClip;
      
      public var whitesimple:MovieClip;
      
      public var whitness:MovieClip;
      
      public var winupdateinfo:MovieClip;
      
      public var GAME_VERSION:String;
      
      public var GAME_VERSION_SIMPLE:String;
      
      public var trapAllKeysEnabled:Boolean;
      
      public var proper_scale_mode:String;
      
      public var proper_stage_align:String;
      
      public var only_global_loader:*;
      
      public var http_probability:int;
      
      public var https_probability:int;
      
      public var myRequest:URLRequest;
      
      public var myRequest_parallel:URLRequest;
      
      public var myLoader:*;
      
      public var myRateLoader:*;
      
      public var myDeRateLoader:*;
      
      public var myLoader2:*;
      
      public var myLoader2noserver:*;
      
      public var mySaveLoadLoader:*;
      
      public var myServerLoader:*;
      
      public var myVariables:URLVariables;
      
      public var myVariables_parallel:URLVariables;
      
      public var myReportLoader:*;
      
      public var MP_server:String;
      
      public var MP_alt_server:String;
      
      public var MP_exp_server:String;
      
      public var MP_mrate_server:String;
      
      public var MP_screenshot_server:String;
      
      public var MP_public_stat_server:String;
      
      public var NetworkLoad_triesleft:int;
      
      public var NetworkLoad_complete:Boolean;
      
      public var NetworkLoad_failed:Boolean;
      
      public var NetworkSave_triesleft:int;
      
      public var NetworkSave_data:String;
      
      public var my_so:*;
      
      public var edidumb:int;
      
      public var _flash_version:Number;
      
      public var _fullInfo:String;
      
      public var _osSplitArr:Array;
      
      public var _versionSplitArr:Array;
      
      public var _versionInfo:Number;
      
      public var intro_first:Boolean;
      
      public var myMenu:ContextMenu;
      
      public var theDate:Date;
      
      public var spec_debug:Boolean;
      
      public var loaded:Number;
      
      public var total:Number;
      
      public var ldd:Boolean;
      
      public var percent:Number;
      
      public var lastperc:Number;
      
      public var times:Number;
      
      public var totalseconds:Number;
      
      public var waitfor:Number;
      
      public var pass:Boolean;
      
      public var death_cam:int;
      
      public var fir:int;
      
      public var pType:String;
      
      public var CPMStarContentSpotID:String;
      
      public var ad:DisplayObject;
      
      public var intro_glowings:Array;
      
      public var rifle_glow:MovieClip;
      
      public var intro_speculars:Array;
      
      public var sinus:Number;
      
      public var main_y:Number;
      
      public var USE_HTML_WHEEL_EVENTS:Boolean;
      
      public var mh:String;
      
      public var serversList:Array;
      
      public var map_quick_picks_max:int;
      
      public var map_qp_ani:*;
      
      public var title_qp_ani:*;
      
      public var map_qp_sp:String;
      
      public var map_qp_mp:String;
      
      public var title_qp_mp:String;
      
      public var time_start:Array;
      
      public var intervalId:uint;
      
      public var IntervalCounter:uint;
      
      public var IntervalStopCount:uint;
      
      public var game_socket_passed:Boolean;
      
      public var connectTime:int;
      
      public var connectTimeIntervalId:uint;
      
      public var online_players:String;
      
      public var MP_gamever:String;
      
      public var MP_mainserver_name:String;
      
      public var MP_mainserver_ip:String;
      
      public var MP_mainserver_port:int;
      
      public var proxySelection:int;
      
      public var lobby_chat_intervalId:uint;
      
      public var lobby_chat_list_intervalId:uint;
      
      public var lobby_chat_enabled:Boolean;
      
      public var lobby_chat_log:String;
      
      public var lobby_chat_last_sent:int;
      
      public var patternMasks:Object;
      
      public var patternUnMasks:Object;
      
      public var CHATLOG_SIZE:int;
      
      public var frames_display:int;
      
      public var prev_frames:int;
      
      public var in_car:Boolean;
      
      public var fps_counter:Boolean;
      
      public var kd_counter:Boolean;
      
      public var ui_bg:Boolean;
      
      public var proxyTimeout:Boolean;
      
      public var proxyServers:Array;
      
      public var limb_breaking_allowed:Boolean;
      
      public var kinetic_through_walls:Boolean;
      
      public var kinetic_range:int;
      
      public var custompage:Boolean;
      
      public var lastCursorX:Number;
      
      public var lastCursorY:Number;
      
      public var cursorSmoothFactor:Number;
      
      public var isGameScaleSet:Boolean;
      
      public var forced_cursor:*;
      
      public var cursor_selected:*;
      
      public var cursor_static:*;
      
      public var chatHistory:Array;
      
      public var currentHistoryIndex:int;
      
      public var SP_OWN_EXP:Boolean;
      
      public var action_draw:Object;
      
      public var current_draw:Sprite;
      
      public var waters:Array;
      
      public var bgs:Array;
      
      public var reflect_distance:Number;
      
      public var global_collision:Boolean;
      
      public var FIX_GUN_DESYNCHRONIZATION:Boolean;
      
      public var fall_impact_stability:Boolean;
      
      public var fall_impact_height:Number;
      
      public var ambient_sounds:Boolean;
      
      public var chat_bubble:*;
      
      public var Experiment_Perf:*;
      
      public var graphics_texture_front0:Sprite;
      
      public var graphics_texture_front0_toggled:*;
      
      public var override_login_password:Boolean;
      
      public var def_login:*;
      
      public var def_password:*;
      
      public var menu_hue:Number;
      
      public var LAST_ERROR:String;
      
      public var gamechatbox_text:String;
      
      public var normal_spine_length:Number;
      
      public var normal_shoulder_length:Number;
      
      public var TRIGGER_PLAYER_INITIATOR:int;
      
      public var TRIGGER_PLAYER_KILLER:int;
      
      public var TRIGGER_PROJECTILE_POWER:Number;
      
      public var GAMEPLAY_MODIFICATIONS:String;
      
      public var ANONYMOUS_MODE:Boolean;
      
      public var ALLOW_VAR_SYNC:Boolean;
      
      public var ALLOW_LIGHT_BREAK:Boolean;
      
      public var NAIVE_HIT_CONFIRMATION:Boolean;
      
      public var GLOBAL_REGEN_SPEED:Number;
      
      public var GLOBAL_REGEN_DELAY:Number;
      
      public var FREEZE_OFFSCREEN_ENTITIES:Boolean;
      
      public var GLOBAL_FALL_DAMAGE_MULT:Number;
      
      public var GLOBAL_FALL_SENSITIVITY_MULT:Number;
      
      public var GLOBAL_FALL_DAMAGE_MULT_LIMBS:Number;
      
      public var BOOST_MULT:Number;
      
      public var BOOST_HIGH_PHYSICS:Number;
      
      public var BOOST_LOW_PHYSICS:Number;
      
      public var custom_songs:Vector.<Object>;
      
      public var custom_images:Vector.<Object>;
      
      public var allow_screenshoting:Boolean;
      
      public var images_expected:int;
      
      public var images_loaded:int;
      
      public var images_data_loaded:int;
      
      public var images_ready_to_render:int;
      
      public var images_finished_loading:int;
      
      public var song_with_callback_allowed:*;
      
      public var gametim:uint;
      
      public var gtlt:int;
      
      public var gtrec:int;
      
      public var gtwi:int;
      
      public var _mp_ping_rl:int;
      
      public var a_int:int;
      
      public var mc:MovieClip;
      
      public var mcc:MovieClip;
      
      public var allow_unlag_fps:Boolean;
      
      public var i:int;
      
      public var i2:int;
      
      public var i3:int;
      
      public var i4:int;
      
      public var i5:int;
      
      public var i6:int;
      
      public var i7:int;
      
      public var spawn_text_for:int;
      
      public var GUEST_ACCESS:Boolean;
      
      public var MP_default_set:int;
      
      public var MP_enc_deaths:int;
      
      public var MP_real_deaths:int;
      
      public var MP_enc_restarts:int;
      
      public var MP_gbd:int;
      
      public var MP_last_message_patience:int;
      
      public var MP_last_message:int;
      
      public var MP_BAD_WORDS_SAID:int;
      
      public var MP_last_linked:int;
      
      public var MP_myspecials:Array;
      
      public var MP_myspecials_total:int;
      
      public var MP_assigning_special:int;
      
      public var MP_specials:Array;
      
      public var MP_start_grenades_count:int;
      
      public var MP_start_grenades_port_count:int;
      
      public var MP_start_grenades_sh_count:int;
      
      public var ENEMY_SENDER_i:int;
      
      public var ENEMY_SENDER_last:int;
      
      public var ENEMY_SENDER_lowestping:Boolean;
      
      public var ENTER_TICKED:Boolean;
      
      public var SP_unlimit_framerate:Boolean;
      
      public var MP_startbarrels:Array;
      
      public var PSYCHOBLOOD_MODE:int;
      
      public var FRAMERATE:int;
      
      public var ui_type:int;
      
      public var PREDEF_TEAMS:Array;
      
      public var PREDEF_COLORS:Array;
      
      public var PREDEF_COLORS_ALT:Array;
      
      public var WATER_NAME:String;
      
      public var ACID_NAME:String;
      
      public var c_str:String;
      
      public var c_i:int;
      
      public var c_i2:int;
      
      public var pres_left:*;
      
      public var pres_right:*;
      
      public var pres_top:*;
      
      public var pres_bottom:*;
      
      public var pres_ok:Boolean;
      
      public var BAD_WORDS_PATTERN:String;
      
      public var BAD_WORDS:Array;
      
      public var LAST_VOTE:int;
      
      public var MP_login_name:String;
      
      public var LAST_BADGE:int;
      
      public var CREDITS_BY_GAME_END:Boolean;
      
      public var BADGES_ENABLED:Boolean;
      
      public var BADGES_TOTAL:int;
      
      public var BADGE_STAT:Array;
      
      public var BADGE_STAT_MAX:Array;
      
      public var BADGE_TITLE:Array;
      
      public var BADGE_REACHED:Array;
      
      public var MP_socket:Socket;
      
      public var MP_game_socket:Socket;
      
      public var ss_info:s_info;
      
      public var ss_info_off:s_info_off;
      
      public var ss_info_act:s_info_act;
      
      public var MP_SERVER_IP:String;
      
      public var MP_SERVER_NAME:String;
      
      public var MP_login_auto_try:Boolean;
      
      public var MP_SERVER_PORT:int;
      
      public var MP_SERVER_GOT:String;
      
      public var CURRENT_HINT:String;
      
      public var THIS_HINT:String;
      
      public var PITIMER:Number;
      
      public var SHAKEAMMOUT:Number;
      
      public var LAST_SERVER_UID:int;
      
      public var MP_errored_out:Boolean;
      
      public var MP_SERVER_GOT_CUR:String;
      
      public var received_packets:Object;
      
      public var MP_last_received_packet:int;
      
      public var MP_game_last_received_packet:int;
      
      public var spawn:Boolean;
      
      public var allowedText:String;
      
      public var FIRST_TIME:Boolean;
      
      public var game_scale:Number;
      
      public var lgame_scale:Number;
      
      public var hscreenX:Number;
      
      public var hscreenY:Number;
      
      public var screenX:Number;
      
      public var screenY:Number;
      
      public var lock_camera_region:Object;
      
      public var lock_camera_intensity:Number;
      
      public var MP_game_server:String;
      
      public var MP_game_port:int;
      
      public var MP_spectator:Boolean;
      
      public var MP_room:String;
      
      public var MP_room_name:String;
      
      public var MP_map_name:String;
      
      public var MP_pass:String;
      
      public var MP_channel:String;
      
      public var MP_channel_name:String;
      
      public var MP_region_name:String;
      
      public var MP_myid:int;
      
      public var MP_team:int;
      
      public var MP_total:int;
      
      public var MP_mode:Boolean;
      
      public var MP_clan:String;
      
      public var MP_last_clear_shot_time:*;
      
      public var temp_ignore_gun_pick:Vector.<Object>;
      
      public var MP_favor_the_shooter:Boolean;
      
      public var MP_allow_client_side_kills:Boolean;
      
      public var temp_keep_dmg_belows:Vector.<Object>;
      
      public var CASUAL_MODE:Boolean;
      
      public var NOBASE:Boolean;
      
      public var PLAZMA_GAME:Boolean;
      
      public var AUTO_REVIVE:Boolean;
      
      public var STRICT_MODE:Boolean;
      
      public var MEAT_MODE:Boolean;
      
      public var PRO_BOTS:Boolean;
      
      public var ARCADE_GAME_MODE:Boolean;
      
      public var KINETIC_MODULE_ENABLED:Boolean;
      
      public var LEVELS_TOTAL:int;
      
      public var LEVELS_PASSED:int;
      
      public var CMPG_THIS_LEVEL:int;
      
      public var AWARD:Boolean;
      
      public var MP_last_chat:String;
      
      public var MP_ping1:int;
      
      public var MP_ping2:int;
      
      public var MP_pwarn:Boolean;
      
      public var MP_ping_last:int;
      
      public var INLAG:Boolean;
      
      public var MP_ready:Boolean;
      
      public var MP_type:int;
      
      public var MP_half_bot:Boolean;
      
      public var MP_let_alive_players_hear_dead:Boolean;
      
      public var MP_allow_leaderboard_details:Boolean;
      
      public var MP_kills_in_a_row:int;
      
      public var MP_kills_in_a_row_top:int;
      
      public var LEVEL_END_FORCE:String;
      
      public var CMPG_name:String;
      
      public var EXOS_NAME:String;
      
      public var NOIR_NAME:String;
      
      public var PROXY_NAME:String;
      
      public var CMPG_money:int;
      
      public var MP_nick:String;
      
      public var SUPER_COMPUTER:Boolean;
      
      public var RAGDOLL_COLLIDE:Boolean;
      
      public var IM_A_CHEATER:Boolean;
      
      public var LITE_PHYS:Boolean;
      
      public var AUTO_PICK_NEW_WEPS:Boolean;
      
      public var SOFT_SCREEN:Boolean;
      
      public var SCREEN_EFFECTS:Boolean;
      
      public var VIOLENCE:Boolean;
      
      public var ALTCUR:Boolean;
      
      public var CENSORESHIP:Boolean;
      
      public var DISPLAY_CHAT:int;
      
      public var FX_VOLUME:Number;
      
      public var MUSIC_VOLUME:Number;
      
      public var CUSTOM_MUSIC_VOLUME:Number;
      
      public var CUR_MUSIC_VOLUME:Number;
      
      public var MUSIC_COLDDOWN:int;
      
      public var HQ:Boolean;
      
      public var MQ:Boolean;
      
      public var MOUSE_WHEEL:Boolean;
      
      public var OVERSCROLL:Boolean;
      
      public var EASY_MODE:Boolean;
      
      public var LOW_HPS:Boolean;
      
      public var RECONNECT_ON_LOST_CONNECTION:Boolean;
      
      public var BEEP_ON_DEATH:Boolean;
      
      public var HIT_SOUNDS:Boolean;
      
      public var SCREEN_FADE_EFFECTS:Boolean;
      
      public var SHOW_EXP_BAR:int;
      
      public var MP_AUTO_LOGIN:Boolean;
      
      public var GSPEED:Number;
      
      public var GSPEED2:Number;
      
      public var WSPEED:Number;
      
      public var DEFAULT_FPS:Number;
      
      public var MP_fps:Number;
      
      public var MP_pl:Number;
      
      public var MP_pbug:int;
      
      public var max_after_impact_speed:Number;
      
      public var MP_app:Boolean;
      
      public var MP_giveguns:Boolean;
      
      public var temp2:Array;
      
      public var temp:*;
      
      public var ch_total:int;
      
      public var ch_links:Array;
      
      public var ch_names:Array;
      
      public var ch_pass:Array;
      
      public var ch_app:Array;
      
      public var ch_map:Array;
      
      public var ch_regions:Array;
      
      public var ch_netcode:Array;
      
      public var chat_lastid:int;
      
      public var skin_model:Array;
      
      public var skin_color_head:Array;
      
      public var skin_color_body:Array;
      
      public var skin_color_arms:Array;
      
      public var skin_color_legs:Array;
      
      public var clrs:Array;
      
      public var matrix:Array;
      
      public var inventoryA:Array;
      
      public var inventoryB:Array;
      
      public var inventoryC:Array;
      
      public var inventoryD:Array;
      
      public var curA:String;
      
      public var curB:String;
      
      public var armorA:int;
      
      public var armorB:int;
      
      public var MPclr:*;
      
      public var FIRST_RUN:Boolean;
      
      public var save_i:int;
      
      public var NONMUTE:Boolean;
      
      public var s_channel:Array;
      
      public var vol3d:Array;
      
      public var max_channels:int;
      
      public var last_channel:int;
      
      public var vol:*;
      
      public var vol2:*;
      
      public var vol2Custom:*;
      
      public var DEFAULT_MAP:*;
      
      public var smod:Number;
      
      public var smod2:Number;
      
      public var dist_to_face:Number;
      
      public var s_chat:chat;
      
      public var s_badge_earned:badge_earned;
      
      public var s_coolbuddy2:coolbuddy2;
      
      public var s_mission_done:mission_done;
      
      public var s_team_switch:team_switch;
      
      public var s_corvett_die:corvett_die;
      
      public var s_test_sound:test_sound;
      
      public var s_hint_appear:hint_appear;
      
      public var s_hint_disappear:hint_disappear;
      
      public var s_ship_incoming:ship_incoming;
      
      public var s_ship_explosion:ship_explosion;
      
      public var s_robo_bug_jump:robo_bug_jump;
      
      public var s_robo_bug_launch:robo_bug_launch;
      
      public var s_robo_bug_hit:robo_bug_hit;
      
      public var s_s_gun_rayrifle:s_gun_rayrifle;
      
      public var m_dist:int;
      
      public var momove:Boolean;
      
      public var debug_screen:Shape;
      
      public var DEBUG_MODE:Boolean;
      
      public var lastcurx:int;
      
      public var lastcury:int;
      
      public var lastcurmove:int;
      
      public var str3:String;
      
      public var str4:*;
      
      public var str5:String;
      
      public var last_psi:int;
      
      public var shadowbmp:Bitmap;
      
      public var dying_after:Number;
      
      public var HUNT_LOST:int;
      
      public var MP_teamkills:int;
      
      public var MP_round:int;
      
      public var MP_gamestate:int;
      
      public var tooltip_updated:Boolean;
      
      public var gamechat_input_text:String;
      
      public var MP_playerstotal:int;
      
      public var PLAYER_WIDTH:Number;
      
      public var MP_start_x:Number;
      
      public var MP_start_y:Number;
      
      public var MP_force_disconnect:Boolean;
      
      public var MP_chat_input:Boolean;
      
      public var MP_chat_input_for:String;
      
      public var MP_custom_events:String;
      
      public var MP_deaths:int;
      
      public var MP_kills:int;
      
      public var hero:Array;
      
      public var hpwarning:Boolean;
      
      public var hpbeepch:SoundChannel;
      
      public var hp_warn_max:Number;
      
      public var s_hp_warn:hp_warn;
      
      public var s_hp_dead:hp_dead;
      
      public var gravitatorch:SoundChannel;
      
      public var s_gravitator:gravitator2;
      
      public var wind_base:Number;
      
      public var musch:SoundChannel;
      
      public var s_gameplay_song:gameplay_song;
      
      public var main_song_ch:SoundChannel;
      
      public var s_main_song:main_song;
      
      public var am_base_ch:SoundChannel;
      
      public var s_am_base:am_base;
      
      public var am_wind_ch:SoundChannel;
      
      public var s_am_wind:am_wind;
      
      public var timeshiftch:SoundChannel;
      
      public var s_slow_down:slow_down;
      
      public var s_slow_up:slow_up;
      
      public var upd_weps_i:*;
      
      public var upd_weps_i2:int;
      
      public var grenades_total:int;
      
      public var grenades_port_total:int;
      
      public var grenades_sh_total:int;
      
      public var cwp:*;
      
      public var cwp_d:Number;
      
      public var c_sim_rt:int;
      
      public var c_sim_rt2:int;
      
      public var c_sim_stress:Boolean;
      
      public var g_minx:int;
      
      public var g_miny:int;
      
      public var g_maxx:int;
      
      public var g_maxy:int;
      
      public var OpenTop:Boolean;
      
      public var system_non_stop:Boolean;
      
      public var stoped_by_focus:Boolean;
      
      public var last_gun_b4_psi:int;
      
      public var mini_scenario_cur:int;
      
      public var mini_scenario_phase:Number;
      
      public var fps_last:uint;
      
      public var fps_ticks:uint;
      
      public var fps_now:uint;
      
      public var fps_delta:uint;
      
      public var fps_fps:Number;
      
      public var color_player:*;
      
      public var color_friendly:*;
      
      public var color_enemy:*;
      
      public var color_player_over:*;
      
      public var color_friendly_over:*;
      
      public var color_enemy_over:*;
      
      public var firstframe:Boolean;
      
      public var g_scale_outcar:Number;
      
      public var s_t_switch1:t_switch1;
      
      public var s_t_switch2:t_switch2;
      
      public var s_t_switch_denied:t_switch_denied;
      
      public var s_t_door1_start:t_door1_start;
      
      public var s_t_door1_stop:t_door1_stop;
      
      public var s_step1:step1;
      
      public var s_step2:step2;
      
      public var s_step3:step3;
      
      public var s_step4:step4;
      
      public var s_robo_step1:robo_step1;
      
      public var s_robo_step2:robo_step2;
      
      public var s_robo_step3:robo_step3;
      
      public var s_robo_step4:robo_step4;
      
      public var s_body0:body0;
      
      public var s_body1:body1;
      
      public var s_body2:body2;
      
      public var s_body3:body3;
      
      public var s_metal0:metal_hor;
      
      public var s_metal1:metal_ver1;
      
      public var s_metal2:metal_ver2;
      
      public var s_metal3:metal_ver3;
      
      public var s_metal_gib:metal_gib;
      
      public var s_steel_low:steel_low;
      
      public var s_steel_med:steel_med;
      
      public var s_steel_hor:steel_hor;
      
      public var s_steel_hard:steel_hard;
      
      public var s_glass1:glass1;
      
      public var s_glass2:glass2;
      
      public var s_barrel:barrel;
      
      public var s_barrel2:barrel2;
      
      public var s_enemy_hurt1:enemy_hurt1;
      
      public var s_enemy_hurt_1:enemy_hurt_1;
      
      public var s_enemy_hurt_2:enemy_hurt_2;
      
      public var s_enemy_hurt_3:enemy_hurt_3;
      
      public var s_enemy_die1:enemy_die1;
      
      public var s_enemy_die_1:enemy_die_1;
      
      public var s_enemy_die_2:enemy_die_2;
      
      public var s_enemy_die_3:enemy_die_3;
      
      public var s_enemy_die_4:enemy_die_4;
      
      public var s_enemy_alert:enemy_alert;
      
      public var s_usurpation_hurt:usurpation_hurt;
      
      public var s_usurpation_death2:usurpation_death2;
      
      public var s_usurpation_death3:usurpation_death3;
      
      public var s_usurpation_alert:usurpation_alert;
      
      public var s_usurpation_dying:usurpation_dying;
      
      public var s_noir_die:noir_die;
      
      public var s_noir_hurt1:noir_hurt1;
      
      public var s_noir_hurt2:noir_hurt2;
      
      public var s_teleport:teleport_spawn;
      
      public var s_portnade_explode:portnade_explode;
      
      public var s_portnade_act2:portnade_act2;
      
      public var s_shnade_act:shnade_act;
      
      public var s_shnade_explode:shnade_explode;
      
      public var s_shnade_hit:shnade_hit;
      
      public var s_shnade_hit_low:shnade_hit_low;
      
      public var s_shnade_offline:shnade_offline;
      
      public var s_bounce_bullet:bounce_bullet;
      
      public var s_wea_rail_alt2:wea_rail_alt2;
      
      public var s_wea_android_sniper:wea_android_sniper;
      
      public var s_wea_crossfire2:wea_crossfire2;
      
      public var s_wea_incompetence_archetype_27xx_fire:wea_incompetence_archetype_27xx_fire;
      
      public var s_wea_thetoppestkek_shotgun_nxs25:wea_thetoppestkek_shotgun_nxs25;
      
      public var s_wea_moonhawk_railgun:wea_moonhawk_railgun;
      
      public var s_dart4:dart4;
      
      public var s_wea_glhf:wea_glhf;
      
      public var s_wea_lazyrain_gravy_rl:*;
      
      public var s_wea_m202:wea_m202;
      
      public var s_wea_android_shotgun:wea_android_shotgun;
      
      public var s_wea_plasma_shotgun:wea_plasma_shotgun;
      
      public var s_wea_ditzy_cs_ik:wea_ditzy_cs_ik;
      
      public var s_wea_ditzy_cs_ik2:wea_ditzy_cs_ik2;
      
      public var s_wea_ph01:wea_ph01;
      
      public var s_wea_rail_toxic2:wea_rail_toxic2;
      
      public var s_wea_auto_sg2:wea_auto_sg2;
      
      public var s_wea_darkstar_rl3:wea_darkstar_rl3;
      
      public var s_wea_alien_rail_sg:wea_alien_rail_sg;
      
      public var s_wea_bison:wea_bison;
      
      public var s_wea_phanx:wea_phanx;
      
      public var s_wea_ditzy_energy_rifle:wea_ditzy_energy_rifle;
      
      public var s_wea_rifle_nade:wea_rifle_nade;
      
      public var s_wea_revolver5:wea_revolver5;
      
      public var s_wea_android_railgun:wea_android_railgun;
      
      public var s_wea_plasma_smg:wea_plasma_smg;
      
      public var s_wea_acid_gl3:wea_acid_gl3;
      
      public var s_grenade_wet:grenade_wet;
      
      public var s_hit_dmg:hit_dmg;
      
      public var s_hit_dmg2:hit_dmg2;
      
      public var s_hit_dmg3:hit_dmg3;
      
      public var s_hit_frag:hit_frag;
      
      public var s_sd_death:sd_death;
      
      public var s_sd_hurt1:sd_hurt1;
      
      public var s_sd_hurt2:sd_hurt2;
      
      public var s_sd_welcome2:sd_welcome2;
      
      public var s_wea_lmg:wea_lmg;
      
      public var s_exp_level:exp_level;
      
      public var s_exp_tick:exp_tick;
      
      public var s_exp_event_stop:exp_event_stop;
      
      public var s_android_miner_die:android_miner_die;
      
      public var s_android_miner_enemy_down:android_miner_enemy_down;
      
      public var s_android_miner_welcome2:android_miner_welcome2;
      
      public var s_android_miner_hurt:android_miner_hurt;
      
      public var s_reakhohsha_welcome1:reakhohsha_welcome1;
      
      public var s_reakhohsha_welcome2:reakhohsha_welcome2;
      
      public var s_reakhohsha_hurt1:reakhohsha_hurt1;
      
      public var s_reakhohsha_hurt2:reakhohsha_hurt2;
      
      public var s_reakhohsha_hurt3:reakhohsha_hurt3;
      
      public var s_reakhohsha_death3:reakhohsha_death3;
      
      public var s_hexagon_welcome1:hexagon_welcome1;
      
      public var s_hexagon_welcome2:hexagon_welcome2;
      
      public var s_hexagon_welcome3:hexagon_welcome3;
      
      public var s_hexagon_death1:hexagon_death1;
      
      public var s_hexagon_death2:hexagon_death2;
      
      public var s_hexagon_pain1:hexagon_pain1;
      
      public var s_hexagon_pain2:hexagon_pain2;
      
      public var s_hexagon_pain3:hexagon_pain3;
      
      public var s_hexagon_pain4:hexagon_pain4;
      
      public var s_beam1:beam1;
      
      public var s_beam5:beam5;
      
      public var s_beam1_recharge:beam1_recharge;
      
      public var s_beam1_rechargeB:beam1_rechargeB;
      
      public var s_beam5_recharge:beam5_recharge;
      
      public var s_beam5_rechargeB:beam5_rechargeB;
      
      public var s_wea_roxxar_rifle:wea_roxxar_rifle;
      
      public var s_wea_moonhawk_smg2:wea_moonhawk_smg2;
      
      public var s_orakin_death1:orakin_death1;
      
      public var s_orakin_death2:orakin_death2;
      
      public var s_orakin_hurt:orakin_hurt;
      
      public var s_orakin_welcome:orakin_welcome;
      
      public var s_arrin_death1:arrin_death1;
      
      public var s_arrin_hurt1:arrin_hurt1;
      
      public var s_arrin_hurt2:arrin_hurt2;
      
      public var s_arrin_dying:arrin_dying;
      
      public var s_arrin_welcome1:arrin_welcome1;
      
      public var s_arrin_welcome2:arrin_welcome2;
      
      public var s_arrin_welcome3:arrin_welcome3;
      
      public var s_Grosk_death1:Grosk_death1;
      
      public var s_Grosk_death2:Grosk_death2;
      
      public var s_Grosk_hurt1:Grosk_hurt1;
      
      public var s_Grosk_hurt2:Grosk_hurt2;
      
      public var s_Grosk_hurt3:Grosk_hurt3;
      
      public var s_Grosk_dying1:Grosk_dying1;
      
      public var s_Grosk_dying2:Grosk_dying2;
      
      public var s_Grosk_welcome1:Grosk_welcome1;
      
      public var s_Grosk_welcome2:Grosk_welcome2;
      
      public var s_Grosk_welcome3:Grosk_welcome3;
      
      public var s_Grosk_welcome4:Grosk_welcome4;
      
      public var s_Grosk_welcome5:Grosk_welcome5;
      
      public var s_Grosk_edown1:Grosk_edown1;
      
      public var s_Grosk_edown2:Grosk_edown2;
      
      public var s_Grosk_edown3:Grosk_edown3;
      
      public var s_drohnenfem_death1:drohnenfem_death1;
      
      public var s_drohnenfem_death2:drohnenfem_death2;
      
      public var s_drohnenfem_death3:drohnenfem_death3;
      
      public var s_drohnenfem_hurt1:drohnenfem_hurt1;
      
      public var s_drohnenfem_hurt2:drohnenfem_hurt2;
      
      public var s_drohnenfem_hurt3:drohnenfem_hurt3;
      
      public var s_drohnenfem_dying1:drohnenfem_dying1;
      
      public var s_drohnenfem_welcome1:drohnenfem_welcome1;
      
      public var s_drohnenfem_welcome2:drohnenfem_welcome2;
      
      public var s_drohnenfem_welcome3:drohnenfem_welcome3;
      
      public var s_drohnenfem_edown1:drohnenfem_edown1;
      
      public var s_drohnenfem_edown2:drohnenfem_edown2;
      
      public var s_drohnenfem_edown3:drohnenfem_edown3;
      
      public var s_drohnentroop_death1:drohnentroop_death1;
      
      public var s_drohnentroop_death2:drohnentroop_death2;
      
      public var s_drohnentroop_death3:drohnentroop_death3;
      
      public var s_drohnentroop_hurt1:drohnentroop_hurt1;
      
      public var s_drohnentroop_hurt2:drohnentroop_hurt2;
      
      public var s_drohnentroop_hurt3:drohnentroop_hurt3;
      
      public var s_drohnentroop_dying1:drohnentroop_dying1;
      
      public var s_drohnentroop_welcome1:drohnentroop_welcome1;
      
      public var s_drohnentroop_welcome2:drohnentroop_welcome2;
      
      public var s_drohnentroop_welcome3:drohnentroop_welcome3;
      
      public var s_drohnentroop_edown1:drohnentroop_edown1;
      
      public var s_drohnentroop_edown2:drohnentroop_edown2;
      
      public var s_drohnentroop_edown3:drohnentroop_edown3;
      
      public var s_serkova_death1:serkova_death1;
      
      public var s_serkova_hurt1:serkova_hurt1;
      
      public var s_serkova_welcome1:serkova_welcome1;
      
      public var s_serkova_welcome2:serkova_welcome2;
      
      public var s_serkova_welcome3:serkova_welcome3;
      
      public var s_serkova_edown1:serkova_edown1;
      
      public var s_serkova_edown2:serkova_edown2;
      
      public var s_ferro_death1:ferro_death1;
      
      public var s_ferro_death2:ferro_death2;
      
      public var s_ferro_hurt1:ferro_hurt1;
      
      public var s_ferro_hurt2:ferro_hurt2;
      
      public var s_ferro_welcome1:ferro_welcome1;
      
      public var s_ferro_welcome2:ferro_welcome2;
      
      public var s_ferro_welcome3:ferro_welcome3;
      
      public var s_ferro_edown1:ferro_edown1;
      
      public var s_ferro_edown2:ferro_edown2;
      
      public var s_ferro_edown3:ferro_edown3;
      
      public var s_elurra_death1:elurra_death1;
      
      public var s_elurra_hurt1:elurra_hurt1;
      
      public var s_elurra_hurt2:elurra_hurt2;
      
      public var s_elurra_dying1:elurra_dying1;
      
      public var s_elurra_welcome1:elurra_welcome1;
      
      public var s_elurra_welcome2:elurra_welcome2;
      
      public var s_elurra_welcome3:elurra_welcome3;
      
      public var s_elurra_edown1:elurra_edown1;
      
      public var s_elurra_edown2:elurra_edown2;
      
      public var s_phantom_death1:phantom_death1;
      
      public var s_phantom_welcome1:phantom_welcome1;
      
      public var s_phantom_welcome2:phantom_welcome2;
      
      public var s_phantom_edown1:phantom_edown1;
      
      public var s_fail_shot:fail_shot;
      
      public var s_psi1:sou_blade_swing1;
      
      public var s_psi2:sou_blade_swing2;
      
      public var s_psi3:sou_blade_swing3;
      
      public var s_water_splash1:water_splash1;
      
      public var s_water_splash2:water_splash2;
      
      public var s_water_splash3:water_splash3;
      
      public var s_blood_hit:blood_hit;
      
      public var s_blood_hit_sword:blood_hit_sword;
      
      public var s_blood_head:blood_head;
      
      public var s_blood_head2:blood_head2;
      
      public var s_blood_body:blood_body;
      
      public var s_blood_body2:blood_body2;
      
      public var s_blood_leg_arm:blood_leg_arm;
      
      public var s_body_fall:body_fall;
      
      public var s_metal_hit:metal_hit;
      
      public var s_wea1:wea1;
      
      public var s_wea2:wea2;
      
      public var s_wea_pickup:wea_pickup;
      
      public var s_charged_explosion:charged_explosion;
      
      public var s_silenced:silenced;
      
      public var s_wea_sniper:wea_sniper;
      
      public var s_wea_minigun2:wea_mingun2;
      
      public var s_wea_plasmagun:wea_plasmagun;
      
      public var s_wea_apistol:wea_apistol;
      
      public var s_wea_pistol:wea_pistol;
      
      public var s_wea_pistol2:wea_pistol2;
      
      public var s_wea_shotgun:wea_shotgun;
      
      public var s_wea_rifle:wea_rifle;
      
      public var s_wea_rocket:wea_rocket_launch;
      
      public var s_wea_railgun:wea_railgun;
      
      public var s_wea_railgun2:wea_rail_alt;
      
      public var s_wea_mingun:wea_mingun;
      
      public var s_wea_gl:wea_gl;
      
      public var s_wea_vehcannon:wea_vehcannon;
      
      public var s_wea_impulse:wea_impulse;
      
      public var s_wea_rail_alt:wea_rail_alt;
      
      public var s_wea_energy:wea_energy;
      
      public var s_wea_evil_shot:wea_evil_shot;
      
      public var s_wea_rifle_alt:wea_rifle_alt;
      
      public var s_wea_shotgun_alt:wea_shotgun_alt;
      
      public var s_wea_defibrillator:wea_defibrillator;
      
      public var s_wea_vehminigun:wea_vehminigun;
      
      public var s_wea_real_shotgun:wea_real_shotgun;
      
      public var s_wea_real_shotgun_r:wea_real_shotgun_r;
      
      public var s_wea_real_rifle:wea_real_rifle;
      
      public var s_walker_step:walker_step;
      
      public var s_walker_phase1:walker_phase1;
      
      public var s_walker_phase2:walker_phase2;
      
      public var s_walker_die:walker_die;
      
      public var s_capsule_hit1:capsule_hit1;
      
      public var s_capsule_hit2:capsule_hit2;
      
      public var s_explode1:explode1;
      
      public var s_explode2:explode2;
      
      public var s_explode_bfg:explode_bfg;
      
      public var s_reload:reload;
      
      public var s_rl_reload:rl_reload;
      
      public var s_hero_death1:hero_death1;
      
      public var s_hero_death2:hero_death2;
      
      public var s_hero_pain1:hero_pain1;
      
      public var s_hero_pain2:hero_pain2;
      
      public var s_hero_pain3:hero_pain3;
      
      public var s_hero_pain4:hero_pain4;
      
      public var s_android2_die:android2_die;
      
      public var s_android2_hurt:android2_hurt;
      
      public var s_android2_welcome2:android2_welcome2;
      
      public var s_android_die_1:android_die_1;
      
      public var s_android_die:android_die;
      
      public var s_android_welcome1:android_welcome1;
      
      public var s_android_welcome2:android_welcome2;
      
      public var s_android_welcome3:android_welcome3;
      
      public var s_android_hurt:android_hurt;
      
      public var s_android_enemy_down1:android_enemy_down1;
      
      public var s_android_welcome:android_welcome;
      
      public var s_f_death1:f_death1;
      
      public var s_f_death2:f_death2;
      
      public var s_f_death3:f_death3;
      
      public var s_f_pain2:f_pain2;
      
      public var s_f_pain3:f_pain3;
      
      public var s_f_pain4:f_pain4;
      
      public var s_f_welcome1:f_welcome1;
      
      public var s_g_death1:g_death1;
      
      public var s_g_death2:g_death2;
      
      public var s_g_death3:g_death3;
      
      public var s_g_pain1:g_pain1;
      
      public var s_g_pain2:g_pain2;
      
      public var s_g_pain3:g_pain3;
      
      public var s_g_welcome1:g_welcome1;
      
      public var s_fp_death1:fp_death1;
      
      public var s_fp_death2:fp_death2;
      
      public var s_fp_death3:fp_death3;
      
      public var s_fp_pain2:fp_pain2;
      
      public var s_fp_pain3:fp_pain3;
      
      public var s_fp_pain4:fp_pain4;
      
      public var s_fp_welcome1:fp_welcome1;
      
      public var s_marine_death1:marine_death1;
      
      public var s_marine_death2:marine_death2;
      
      public var s_marine_death3:marine_death3;
      
      public var s_marine_pain1:marine_hurt1;
      
      public var s_marine_pain2:marine_hurt2;
      
      public var s_marine_pain3:marine_hurt3;
      
      public var s_marine_alert:marine_alert;
      
      public var s_marine_alert2:marine_alert2;
      
      public var s_marine_alert3:marine_alert3;
      
      public var s_marine_alert4:marine_alert4;
      
      public var s_marine_dying:marine_dying;
      
      public var s_slicer_alert:slicer_alert;
      
      public var s_slicer_die:slicer_die;
      
      public var s_hero_welcome1:hero_welcome1;
      
      public var s_hero_welcome2:hero_welcome2;
      
      public var s_hero_welcome3:hero_welcome3;
      
      public var s_grenade:grenade;
      
      public var s_grenade_act:grenade_act;
      
      public var s_nade_throw:nade_throw;
      
      public var s_explode_underwater:explode_underwater;
      
      public var s_plasma_explosion:plasma_explosion;
      
      public var s_box_low:box_ver1;
      
      public var s_box_med:box_ver2;
      
      public var s_box_hor:box_hor;
      
      public var s_box_hard:box_ver3;
      
      public var s_box_die:box_die;
      
      public var s_drone_die:drone_die;
      
      public var s_drone_hurt:drone_hurt;
      
      public var src:Sound;
      
      public var voices:Object;
      
      public var hit_frame_damage:Number;
      
      public var hit_frags:Vector.<Object>;
      
      public var hit_frags_timer:Number;
      
      public var expl_hurt_full:Boolean;
      
      public var joint_cycle:int;
      
      public var hpmax:Number;
      
      public var maxbulletlife:Number;
      
      public var boxx:Array;
      
      public var boxy:Array;
      
      public var boxw:Array;
      
      public var boxh:Array;
      
      public var boxmat:Array;
      
      public var bgx:Array;
      
      public var bgy:Array;
      
      public var bgw:Array;
      
      public var bgh:Array;
      
      public var bg_cast:Array;
      
      public var pushx:Array;
      
      public var pushy:Array;
      
      public var pushtox:Array;
      
      public var pushtoy:Array;
      
      public var pushstab:Array;
      
      public var pushdamage:Array;
      
      public var pushw:Array;
      
      public var pushh:Array;
      
      public var flare:Array;
      
      public var flare_power:Array;
      
      public var flarestotal:int;
      
      public var wax:Array;
      
      public var way:Array;
      
      public var waw:Array;
      
      public var wah:Array;
      
      public var wadamage:Array;
      
      public var wa_friction:Array;
      
      public var ax:Array;
      
      public var ay:Array;
      
      public var lax:Array;
      
      public var lay:Array;
      
      public var atox:Array;
      
      public var atoy:Array;
      
      public var aio:Array;
      
      public var aof:Array;
      
      public var arad:Array;
      
      public var around:Array;
      
      public var amat:Array;
      
      public var atim:Array;
      
      public var acollided:Array;
      
      public var ainwater:Array;
      
      public var ablood:Array;
      
      public var aactive:Array;
      
      public var ainwater_shape:Array;
      
      public var atom_first_position_corrections:Vector.<Object>;
      
      public var pspeed:Number;
      
      public var weapon_penetration_factor:Number;
      
      public var rocket_speed_mult:Number;
      
      public var grenade_speed_mult:Number;
      
      public var plasma_speed_mult:Number;
      
      public var chtypa:Array;
      
      public var chP:Array;
      
      public var chC:Array;
      
      public var chdef:Array;
      
      public var chdamp:Array;
      
      public var chio:Array;
      
      public var chtsilp:Array;
      
      public var atotal:int;
      
      public var chtotal:int;
      
      public var startatotal:int;
      
      public var startchtotal:int;
      
      public var bounce:Number;
      
      public var friction:Number;
      
      public var gravity:Number;
      
      public var barrels:Array;
      
      public var guns:Array;
      
      public var mens:Array;
      
      public var vehicles:Array;
      
      public var doors:Array;
      
      public var decors:Array;
      
      public var triggers:Array;
      
      public var timers:Array;
      
      public var regions:Array;
      
      public var attachments:Array;
      
      public var _root:MovieClip;
      
      public var regionstotal:int;
      
      public var triggerstotal:int;
      
      public var timerstotal:int;
      
      public var doorstotal:int;
      
      public var bgstotal:int;
      
      public var playerstotal:int;
      
      public var boxestotal:int;
      
      public var lampstotal:int;
      
      public var watertotal:int;
      
      public var gunstotal:int;
      
      public var pushstotal:int;
      
      public var vehiclestotal:int;
      
      public var barrelstotal:int;
      
      public var decorstotal:int;
      
      public var str:String;
      
      public var cx:Number;
      
      public var cy:Number;
      
      public var xx:Number;
      
      public var yy:Number;
      
      public var u:Number;
      
      public var v:Number;
      
      public var u2:Number;
      
      public var v2:Number;
      
      public var mc2:MovieClip;
      
      public var mc3:MovieClip;
      
      public var ok:Boolean;
      
      public var ok2:Boolean;
      
      public var ok3:Boolean;
      
      public var hup:Boolean;
      
      public var bugs:Boolean;
      
      public var injured:Boolean;
      
      public var fire:Boolean;
      
      public var sitmax:Number;
      
      public var key_left:Boolean;
      
      public var key_right:Boolean;
      
      public var key_up:Boolean;
      
      public var key_down:Boolean;
      
      public var key_grenade:Boolean;
      
      public var key_pick:Boolean;
      
      public var key_alt:Boolean;
      
      public var key_grab:Boolean;
      
      public var key_kinetic:Boolean;
      
      public var key_fall:Boolean;
      
      public var key_ctrl:Boolean;
      
      public var cinetic_target:int;
      
      public var key_zoom_out:*;
      
      public var key_zoom_in:*;
      
      public var timeshift:int;
      
      public var energy_max:Number;
      
      public var energy:Number;
      
      public var ALLOW_TIMESHIFT:Boolean;
      
      public var joint_align:int;
      
      public var puls:Array;
      
      public var pulscur:int;
      
      public var pulsmax:int;
      
      public var xx2:Number;
      
      public var yy2:Number;
      
      public var x3:Number;
      
      public var y3:Number;
      
      public var x4:Number;
      
      public var y4:Number;
      
      public var retux:Number;
      
      public var retuy:Number;
      
      public var rx:Number;
      
      public var ry:Number;
      
      public var surf_lnk:Array;
      
      public var surf_lnk_to:Array;
      
      public var ef:Array;
      
      public var nextef:int;
      
      public var maxef:int;
      
      public var eftemp:Number;
      
      public var effcolor:int;
      
      public var shnades:Array;
      
      public var shnades_total:int;
      
      public var shnades_next:int;
      
      public var lamps_x:Array;
      
      public var lamps_y:Array;
      
      public var lamps_power:Array;
      
      public var lamps_power2:Array;
      
      public var lamps_skips:int;
      
      public var lamps_sprites:Array;
      
      public var tr:*;
      
      public var tr2:*;
      
      public var tr3:int;
      
      public var hurt_x4:*;
      
      public var hurt_y4:*;
      
      public var hurt_xx2:*;
      
      public var hurt_yy2:Number;
      
      public var n2:int;
      
      public var chat_i:int;
      
      public var chat_i2:int;
      
      public var chat_i3:int;
      
      public var chat_xx:Number;
      
      public var alert_tes:Number;
      
      public var minX:Number;
      
      public var maxX:Number;
      
      public var minY:Number;
      
      public var maxY:Number;
      
      public var a_rectangleMinX:Number;
      
      public var a_rectangleMinY:Number;
      
      public var a_rectangleMaxX:Number;
      
      public var a_rectangleMaxY:Number;
      
      public var b:Number;
      
      public var dx:Number;
      
      public var tmp2:Number;
      
      public var thispulspeed:Number;
      
      public var a_p1x:Number;
      
      public var a_p1y:Number;
      
      public var a_p2x:Number;
      
      public var a_p2y:Number;
      
      public var tracer_ok:Boolean;
      
      public var NextMapTemp:String;
      
      public var render_minX:int;
      
      public var render_minY:int;
      
      public var render_maxX:int;
      
      public var render_maxY:int;
      
      public var rnd:Number;
      
      public var Disable_next_click:Boolean;
      
      public var FORCE_SNOW:Boolean;
      
      public var flakes_total:int;
      
      public var flakes:Vector.<DisplayObject>;
      
      public var flakes_spreadout:Number;
      
      public var flakes_letitsnow:Boolean;
      
      public var vtr_i2:int;
      
      public var ef_xx:*;
      
      public var ef_yy:Number;
      
      public var nextpuli:int;
      
      public var nextpulf:Boolean;
      
      public var nextsh_i:int;
      
      public var nextsh_i2:int;
      
      public var cr_i4:int;
      
      public var crjoint_cycle:int;
      
      public var mcz:MovieClip;
      
      public var mShape:Sprite;
      
      public var step_size:int;
      
      public var bmpData:BitmapData;
      
      public var bmpData_backed:BitmapData;
      
      public var lightmap_ma:Matrix;
      
      public var optimalupd:Boolean;
      
      public var all_doors:Array;
      
      public var NearBoxBSP_stepsize:int;
      
      public var NearBoxBSP:Vector.<Vector.<Vector.<int>>>;
      
      public var NearBoxBSP_empty:Vector.<int>;
      
      public var NearBoxBSP_width:int;
      
      public var NearBoxBSP_height:int;
      
      public var NearBoxBSP_left:Number;
      
      public var NearBoxBSP_right:Number;
      
      public var NearBoxBSP_top:Number;
      
      public var NearBoxBSP_bottom:Number;
      
      public var synonym_uid:Array;
      
      public var synonym_id:Array;
      
      public var user_says_id:int;
      
      public var user_says_text:String;
      
      public var user_says_trigger:int;
      
      public var SHOW_FRAG_MESSAGES:Boolean;
      
      public var trigger_to_key_binds_down:Object;
      
      public var trigger_to_key_binds_up:Object;
      
      public var on_user_connected_trigger:int;
      
      public var mxnds1:int;
      
      public var mxnds2:int;
      
      public var mxnds3:int;
      
      public var tnds:int;
      
      public var stable:*;
      
      public var unstable:int;
      
      public var unstable_m:String;
      
      public var MP_start_guns_total:int;
      
      public var qpack_pattern:Array;
      
      public var qpack_pattern_length:int;
      
      public var qpack_pattern_simcalc:int;
      
      public var qpack_base:String;
      
      public var INTRUDER_DATABASE:Object;
      
      public var INTRUDER_DATABASE_length:int;
      
      public var ENABLE_LEVEL_LOGIC_ERRORS:Boolean;
      
      public var trigger_loops:int;
      
      public var level_variables:Object;
      
      public var dm_slots_on_spawn:Array;
      
      public var dm_max_guns_on_spawn:int;
      
      public var session_variables:Object;
      
      public var session_variables_source_id:Object;
      
      public var hurt_i4:int;
      
      public var is2:int;
      
      public var allow:Boolean;
      
      public var explx:*;
      
      public var exply:Number;
      
      public var temp_tb:Number;
      
      public var alert_i5:int;
      
      public var pb2Bullet:*;
      
      public var atom_pos_buffer:*;
      
      public var tracer_i4:int;
      
      public var TraceLine_lasttime:uint;
      
      public var tracer_i5:int;
      
      public var tracep:int;
      
      public var NO_PSI:Boolean;
      
      public var START_CUSTOM_MAP:Boolean;
      
      public var CUR_CUSTOM_MAP:String;
      
      public var CACHED_MAPS:Array;
      
      public var CUR_LOADING:String;
      
      public var GET_TRIES:int;
      
      public var MP_send:String;
      
      public var MP_waiting_for_answer:Boolean;
      
      public var last_net_error:*;
      
      public var trans:Number;
      
      public var minus_trans:Number;
      
      public var players_online:int;
      
      public var temp_str:String;
      
      public var connection_lost_ping:int;
      
      public var MP_get_done_STR:String;
      
      public var MP_get_done_HAP:Boolean;
      
      public var array:Array;
      
      public var param:Array;
      
      public var array2:Array;
      
      public var array3:Array;
      
      public var last_mp_param:Array;
      
      public var exec_measures_len:uint;
      
      public var exec_measures_rate:uint;
      
      public var exec_measures_rate_passed:uint;
      
      public var exec_measures_tot:Vector.<uint>;
      
      public var exec_measures_calls:Vector.<uint>;
      
      public var exec_measures_peak:Vector.<uint>;
      
      public var exec_measures_start:Vector.<uint>;
      
      public var LITE_PHYS_tim:Boolean;
      
      public var LITE_PHYS_from:int;
      
      public var LITE_PHYS_notfrom:int;
      
      public var LITE_PHYS_size:int;
      
      public var extra_low_mult:Number;
      
      public var offset_balance:Number;
      
      public var temp_coef:Number;
      
      public var f_ok:Boolean;
      
      public var near_atom:Vector.<int>;
      
      public var f_min:Number;
      
      public var phys_stress:int;
      
      public var phys_got_stress:Boolean;
      
      public var last_key_code:int;
      
      public var keys_are_being_pressed:Boolean;
      
      public var let_scroll_last:int;
      
      public var game_focus_ever_lost:Boolean;
      
      public var maximum_hit_delay_time:*;
      
      public var hit_retry_time:*;
      
      public var possible_bullet_data:Vector.<Object>;
      
      public var vc_cache:Array;
      
      public var vc_fresh:Boolean;
      
      public var vs_salt:int;
      
      public var mouse_x:Number;
      
      public var mouse_y:Number;
      
      public var temp_fps:int;
      
      public var set_timeouts:Vector.<Object>;
      
      public var respawn_logic_last_addr:int;
      
      public var gravitatorTransform:SoundTransform;
      
      public var musTransform:SoundTransform;
      
      public var am_base_Transform:SoundTransform;
      
      public var am_wind_Transform:SoundTransform;
      
      public var main_song_Transform:SoundTransform;
      
      public var grav_working:Boolean;
      
      public var mus_working:Boolean;
      
      public var am_base_working:Boolean;
      
      public var am_wind_working:Boolean;
      
      public var main_song_working:Boolean;
      
      public var talkerch:SoundChannel;
      
      public var multiplayer_repsawn_timer_speed:Number;
      
      public var dti:int;
      
      public var voice_pressure:Number;
      
      public var FUN_NICE_BULLETS:int;
      
      public var FUN_SPENT_BULLETS:int;
      
      public var FUN_DAMAGE_MADE:Number;
      
      public var FUN_HEADSHOTS_MADE:int;
      
      public var FUN_DAMAGE_TAKEN:Number;
      
      public var FUN_TIME_SPEND:Number;
      
      public var FUN_ELEMINATED:Number;
      
      public var FORCE_CUSTOM_MAP:Boolean;
      
      public var EXP_TYPE_DEATH_IN_APPROVED:int;
      
      public var EXP_TYPE_SYNC_SKILL_POINTS:int;
      
      public var EXP_TYPE_PLAYING_CAMPAIGN:int;
      
      public var EXP_TYPE_PLAYING_CUSTOM:int;
      
      public var EXP_TYPE_PLAYING_CUSTOM_MP:int;
      
      public var EXP_TYPE_PLAYING_IN_APPROVED:int;
      
      public var EXP_TYPE_BEAT_CUSTOM:int;
      
      public var EXP_TYPE_HEAL_AND_TEAMMATE_SURVIVED_IN_APPROVED:int;
      
      public var EXP_TYPE_KILL_IN_APPROVED:int;
      
      public var EXP_TYPE_KILL_ENEMY_NON_PLAYER:int;
      
      public var EXP_TYPE_BEAT_CAMPAIGN_LEVEL:int;
      
      public var EXP_TYPE_KILL_TEAMMATE_MP:int;
      
      public var EXP_TYPE_CHECK_OUT_MULTIPLAYER:int;
      
      public var EXP_TYPE_SYNC:int;
      
      public var EXP_TYPE_KILL_PLAYER_USING_GRENADE_IN_APPROVED:int;
      
      public var EXP_TYPE_KILL_PLAYER_WITH_HEADSHOT_IN_APPROVED:int;
      
      public var EXP_TYPE_KILL_PLAYER_USING_WALL_OR_ACID_IN_APPROVED:int;
      
      public var EXP_TYPE_KILL_PLAYER_USING_SWORDS_IN_APPROVED:int;
      
      public var EXP_TYPE_KILL_PLAYER_WITHOUT_LEGS_IN_APPROVED:int;
      
      public var EXP_TYPE_KILL_PLAYER_WITH_DEFIBRILLATOR_IN_APPROVED:int;
      
      public var EXP_TYPE_BREAK_ALIVE_PLAYERS_ARMS_IN_APPROVED:int;
      
      public var EXP_TYPE_BREAK_ALIVE_PLAYERS_LEGS_IN_APPROVED:int;
      
      public var EXP_TYPE_KILL_PLAYER_MIDAIR_IN_APPROVED:int;
      
      public var EXP_TYPE_TRY_CUSTOM:int;
      
      public var EXP_TYPE_STREAK:int;
      
      public var EXP_TYPE_LEGEND:int;
      
      public var EXP_TYPE_AFK_KILL:int;
      
      public var exp_titles:Vector.<String>;
      
      public var exp_tried_custom_maps:Object;
      
      public var exp_points:Number;
      
      public var exp_points_target:Number;
      
      public var exp_timer:uint;
      
      public var SKILL_POINTS_SCALE:Number;
      
      public var exp_first_sync_await:Boolean;
      
      public var exp_last_level:Number;
      
      public var exp_points_per_level:Number;
      
      public var exp_min_level:int;
      
      public var exp_max_level:int;
      
      public var exp_max_level_this_time:int;
      
      public var myExpLoader:*;
      
      public var exp_alive:Boolean;
      
      public var exp_mp_enter_once:Boolean;
      
      public var exp_scheduled:Vector.<Object>;
      
      public var exp_busy:Boolean;
      
      public var skill_points_tim:uint;
      
      public var skill_points_change_expect_tries:int;
      
      public var can_get_exp_for_level:Boolean;
      
      public var exp_heal_tracked_players:Array;
      
      public var myMPlayerInfoLoader:*;
      
      public var player_info_busy:Boolean;
      
      public var exp_legens:Object;
      
      public var last_server_list_str:String;
      
      public var menu_buttons_tot:int;
      
      public var allow_mp_connect:Boolean;
      
      public var m:int;
      
      public var lm_active:int;
      
      public var m_active:int;
      
      public var m_time:Number;
      
      public var m_hold:int;
      
      public var earth_pos1:Number;
      
      public var new_nick:*;
      
      public var new_nick2:String;
      
      public var newString:String;
      
      public var pattern_no_nix:String;
      
      public var blink_main:int;
      
      public var MUSIC_START:int;
      
      public var TROOPS_GONE:Boolean;
      
      public var menu_hue_timeout:*;
      
      public var camp_btn:Array;
      
      public var gunsA:*;
      
      public var gunsAt:*;
      
      public var gunsAl:*;
      
      public var gunsB:*;
      
      public var gunsBt:*;
      
      public var gunsBl:*;
      
      public var STOP_SCROLL:Boolean;
      
      public var credits_low_limit:Number;
      
      public var credits_high_limit:Number;
      
      public var credits_stop_frames:Number;
      
      public var credits_target_offset:Number;
      
      public var listVisible:Boolean;
      
      public var coverup_active:Boolean;
      
      public var server_cur:int;
      
      public var servers_uid:Array;
      
      public var CUR_SERVER_NAME:String;
      
      public var login_warned:Boolean;
      
      public var auto_proceed:Boolean;
      
      public var last_loaded_sever_uid:*;
      
      public var servers_name:Array;
      
      public var servers_ip:Array;
      
      public var servers_port:Array;
      
      public var gm_ranked:String;
      
      public var gm_type:int;
      
      public var gm_max:int;
      
      public var MPLIST_GAMENAME:*;
      
      public var MPLIST_MAPID:*;
      
      public var MPLIST_MODE:*;
      
      public var MPLIST_PUBLIC:*;
      
      public var MPLIST_APPROVED:*;
      
      public var MPLIST_RANKED:*;
      
      public var MPLIST_WITH_FRIENDS:*;
      
      public var MPLIST_NO_ENEMIES:*;
      
      public var MPLIST_HIDE_FULL:*;
      
      public var rech_started:*;
      
      public var MP_slot_reset:Boolean;
      
      public var MP_slot_try:int;
      
      public var got_map_data:Boolean;
      
      public var myTimer_loading:Timer;
      
      public var hero_list_frame_offset:int;
      
      public var hero_list_scale:*;
      
      public var format:TextFormat;
      
      public var TIME_PLAYED_MULTI:int;
      
      public var nonblockrate:Boolean;
      
      public var TakeScreenShot_allow:Boolean;
      
      public var TakeScreenShot_delay:int;
      
      public var uncncld:Boolean;
      
      public var achive_obj:*;
      
      public var INTRO_DONE:Boolean;
      
      public var test:*;
      
      public var inter_progress:*;
      
      public var game_state_timer:*;
      
      public var __animFactory_menu_buttonsaf1:AnimatorFactory3D;
      
      public var __animArray_menu_buttonsaf1:Array;
      
      public var ____motion_menu_buttonsaf1_mat3DVec__:Vector.<Number>;
      
      public var ____motion_menu_buttonsaf1_matArray__:Array;
      
      public var __motion_menu_buttonsaf1:MotionBase;
      
      public var __animFactory_menu_buttons2af1:AnimatorFactory3D;
      
      public var __animArray_menu_buttons2af1:Array;
      
      public var ____motion_menu_buttons2af1_mat3DVec__:Vector.<Number>;
      
      public var ____motion_menu_buttons2af1_matArray__:Array;
      
      public var __motion_menu_buttons2af1:MotionBase;
      
      public function MainTimeline()
      {
         super();
         addFrameScript(0,this.frame1,1,this.frame2,3,this.frame4,4,this.frame5,5,this.frame6,6,this.frame7,7,this.frame8,8,this.frame9,9,this.frame10,10,this.frame11,11,this.frame12,12,this.frame13,13,this.frame14,14,this.frame15,15,this.frame16,16,this.frame17,17,this.frame18,18,this.frame19,19,this.frame20,20,this.frame21,21,this.frame22,22,this.frame23,23,this.frame24);
         addEventListener(Event.ADDED_TO_STAGE,this.__setPerspectiveProjection_);
         if(this.__animFactory_menu_buttonsaf1 == null)
         {
            this.__animArray_menu_buttonsaf1 = new Array();
            this.__motion_menu_buttonsaf1 = new MotionBase();
            this.__motion_menu_buttonsaf1.duration = 1;
            this.__motion_menu_buttonsaf1.overrideTargetTransform();
            this.__motion_menu_buttonsaf1.addPropertyArray("blendMode",["normal"]);
            this.__motion_menu_buttonsaf1.addPropertyArray("cacheAsBitmap",[false]);
            this.__motion_menu_buttonsaf1.addPropertyArray("opaqueBackground",[null]);
            this.__motion_menu_buttonsaf1.addPropertyArray("visible",[true]);
            this.__motion_menu_buttonsaf1.is3D = true;
            this.__motion_menu_buttonsaf1.motion_internal::spanStart = 3;
            this.____motion_menu_buttonsaf1_matArray__ = new Array();
            this.____motion_menu_buttonsaf1_mat3DVec__ = new Vector.<Number>(16);
            this.____motion_menu_buttonsaf1_mat3DVec__[0] = 0.604228;
            this.____motion_menu_buttonsaf1_mat3DVec__[1] = 0.010887;
            this.____motion_menu_buttonsaf1_mat3DVec__[2] = 0.796737;
            this.____motion_menu_buttonsaf1_mat3DVec__[3] = 0;
            this.____motion_menu_buttonsaf1_mat3DVec__[4] = -0.021959;
            this.____motion_menu_buttonsaf1_mat3DVec__[5] = 0.999754;
            this.____motion_menu_buttonsaf1_mat3DVec__[6] = 0.002992;
            this.____motion_menu_buttonsaf1_mat3DVec__[7] = 0;
            this.____motion_menu_buttonsaf1_mat3DVec__[8] = -0.796509;
            this.____motion_menu_buttonsaf1_mat3DVec__[9] = -0.019304;
            this.____motion_menu_buttonsaf1_mat3DVec__[10] = 0.604318;
            this.____motion_menu_buttonsaf1_mat3DVec__[11] = 0;
            this.____motion_menu_buttonsaf1_mat3DVec__[12] = -40.754143;
            this.____motion_menu_buttonsaf1_mat3DVec__[13] = 171.169342;
            this.____motion_menu_buttonsaf1_mat3DVec__[14] = 74.118408;
            this.____motion_menu_buttonsaf1_mat3DVec__[15] = 1;
            this.____motion_menu_buttonsaf1_matArray__.push(new Matrix3D(this.____motion_menu_buttonsaf1_mat3DVec__));
            this.__motion_menu_buttonsaf1.addPropertyArray("matrix3D",this.____motion_menu_buttonsaf1_matArray__);
            this.__animArray_menu_buttonsaf1.push(this.__motion_menu_buttonsaf1);
            this.__animFactory_menu_buttonsaf1 = new AnimatorFactory3D(null,this.__animArray_menu_buttonsaf1);
            this.__animFactory_menu_buttonsaf1.sceneName = "Scene 1";
            this.__animFactory_menu_buttonsaf1.addTargetInfo(this,"menu_buttons",0,true,0,true,null,-1);
         }
         if(this.__animFactory_menu_buttons2af1 == null)
         {
            this.__animArray_menu_buttons2af1 = new Array();
            this.__motion_menu_buttons2af1 = new MotionBase();
            this.__motion_menu_buttons2af1.duration = 1;
            this.__motion_menu_buttons2af1.overrideTargetTransform();
            this.__motion_menu_buttons2af1.addPropertyArray("blendMode",["normal"]);
            this.__motion_menu_buttons2af1.addPropertyArray("cacheAsBitmap",[false]);
            this.__motion_menu_buttons2af1.addPropertyArray("opaqueBackground",[null]);
            this.__motion_menu_buttons2af1.addPropertyArray("visible",[true]);
            this.__motion_menu_buttons2af1.is3D = true;
            this.__motion_menu_buttons2af1.motion_internal::spanStart = 3;
            this.____motion_menu_buttons2af1_matArray__ = new Array();
            this.____motion_menu_buttons2af1_mat3DVec__ = new Vector.<Number>(16);
            this.____motion_menu_buttons2af1_mat3DVec__[0] = 0.604228;
            this.____motion_menu_buttons2af1_mat3DVec__[1] = 0.010887;
            this.____motion_menu_buttons2af1_mat3DVec__[2] = 0.796737;
            this.____motion_menu_buttons2af1_mat3DVec__[3] = 0;
            this.____motion_menu_buttons2af1_mat3DVec__[4] = -0.021959;
            this.____motion_menu_buttons2af1_mat3DVec__[5] = 0.999754;
            this.____motion_menu_buttons2af1_mat3DVec__[6] = 0.002992;
            this.____motion_menu_buttons2af1_mat3DVec__[7] = 0;
            this.____motion_menu_buttons2af1_mat3DVec__[8] = -0.796509;
            this.____motion_menu_buttons2af1_mat3DVec__[9] = -0.019304;
            this.____motion_menu_buttons2af1_mat3DVec__[10] = 0.604318;
            this.____motion_menu_buttons2af1_mat3DVec__[11] = 0;
            this.____motion_menu_buttons2af1_mat3DVec__[12] = -47.500088;
            this.____motion_menu_buttons2af1_mat3DVec__[13] = 170.84906;
            this.____motion_menu_buttons2af1_mat3DVec__[14] = 72.27739;
            this.____motion_menu_buttons2af1_mat3DVec__[15] = 1;
            this.____motion_menu_buttons2af1_matArray__.push(new Matrix3D(this.____motion_menu_buttons2af1_mat3DVec__));
            this.__motion_menu_buttons2af1.addPropertyArray("matrix3D",this.____motion_menu_buttons2af1_matArray__);
            this.__animArray_menu_buttons2af1.push(this.__motion_menu_buttons2af1);
            this.__animFactory_menu_buttons2af1 = new AnimatorFactory3D(null,this.__animArray_menu_buttons2af1);
            this.__animFactory_menu_buttons2af1.sceneName = "Scene 1";
            this.__animFactory_menu_buttons2af1.addTargetInfo(this,"menu_buttons2",0,true,0,true,null,-1);
         }
      }
      
      public function setTrapAllKeys(param1:Boolean) : void
      {
         this.trapAllKeysEnabled = param1;
         this.updateTrapAllKeys();
      }
      
      public function updateTrapAllKeys() : void
      {
         try
         {
            if(this.trapAllKeysEnabled)
            {
               fscommand("trapallkeys","true");
            }
            else
            {
               fscommand("trapallkeys","false");
            }
         }
         catch(e:Error)
         {
         }
      }
      
      public function GetNewURLLoader() : *
      {
         var r:* = undefined;
         var loader:* = undefined;
         var my_last_url_request:* = undefined;
         var DataUpdater:* = undefined;
         var errorHandler:* = undefined;
         DataUpdater = function():*
         {
            if(loader.bytesLoaded > 0)
            {
               if(my_last_url_request.url.indexOf("https://") !== -1)
               {
                  ++https_probability;
               }
               else
               {
                  ++http_probability;
               }
            }
            r.data = loader.data;
            r.bytesLoaded = loader.bytesLoaded;
            r.bytesTotal = loader.bytesTotal;
            r.dataFormat = loader.dataFormat;
         };
         errorHandler = function(param1:*):*
         {
            var e:* = param1;
            setTimeout(function():*
            {
               var _loc1_:* = my_last_url_request.url.split("https://").join("http://");
               if(_loc1_ != my_last_url_request.url)
               {
                  my_last_url_request.url = my_last_url_request.url.split("https://").join("http://");
                  r.load(my_last_url_request);
               }
            },1000);
         };
         r = new Object();
         loader = new URLLoader();
         my_last_url_request = null;
         r.load = function(param1:*):*
         {
            var url_request:* = param1;
            my_last_url_request = url_request;
            try
            {
               loader.load(url_request);
            }
            catch(e:*)
            {
               errorHandler();
            }
         };
         r.close = function():*
         {
            loader.close();
         };
         r.addEventListener = function(param1:*, param2:*):*
         {
            loader.addEventListener(param1,param2);
         };
         r.removeEventListener = function(param1:*, param2:*):*
         {
            loader.removeEventListener(param1,param2);
         };
         r.addEventListener(Event.COMPLETE,DataUpdater);
         r.addEventListener(IOErrorEvent.IO_ERROR,errorHandler);
         r.addEventListener(SecurityErrorEvent.SECURITY_ERROR,errorHandler);
         return r;
      }
      
      public function NetworkLoad() : void
      {
         if(this.loaderInfo.parameters.l != undefined && this.loaderInfo.parameters.l != "")
         {
            this.NetworkLoad_triesleft = 10;
            this.NetworkLoad_complete = false;
            this.NetworkLoad_failed = false;
            this.NetworkLoadNow();
         }
         else
         {
            this.NetworkLoad_complete = true;
         }
      }
      
      public function NetworkLoadNow() : void
      {
         if(this.NetworkLoad_triesleft > 0)
         {
            this.myRequest = new URLRequest(this.MP_server);
            this.myVariables = new URLVariables();
            this.myVariables.rq = "load";
            this.myVariables.l = this.loaderInfo.parameters.l;
            this.myVariables.p = this.loaderInfo.parameters.p;
            this.myRequest.method = URLRequestMethod.POST;
            this.myRequest.data = this.myVariables;
            this.mySaveLoadLoader.addEventListener(Event.COMPLETE,this.NetworkLoadOk);
            this.mySaveLoadLoader.addEventListener(IOErrorEvent.IO_ERROR,this.NetworkLoadError);
            this.mySaveLoadLoader.load(this.myRequest);
         }
      }
      
      public function LoadSaveDataFromString(param1:String, param2:Boolean = true) : void
      {
         var vars:Array = null;
         var i:int = 0;
         var pair:Array = null;
         var n:String = null;
         var v:* = undefined;
         var mySaveLoadLoader_data:String = param1;
         var with_history:Boolean = param2;
         if(mySaveLoadLoader_data != "x" && mySaveLoadLoader_data.indexOf("Error: ") != 0)
         {
            if(mySaveLoadLoader_data != ".")
            {
               vars = String(mySaveLoadLoader_data).split(";");
               i = 0;
               for(; i < vars.length; i++)
               {
                  pair = vars[i].split("=");
                  n = String(pair[0]).split("^1").join(";").split("^2").join("=");
                  v = String(pair[1]).split("^1").join(";").split("^2").join("=");
                  if(v == "undefined" || v == "NaN")
                  {
                     if(this.my_so.data[n] + "" != "undefined")
                     {
                        if(this.my_so.data[n] + "" != "NaN")
                        {
                           continue;
                        }
                     }
                     v = 0;
                  }
                  else if(v == "true")
                  {
                     v = true;
                  }
                  else if(v == "false")
                  {
                     v = false;
                  }
                  else if(Number(v) + "" != "NaN")
                  {
                     v = Number(v);
                  }
                  if(!(!with_history && (n == "first_uid" || n == "first_login")))
                  {
                     if(n.indexOf("skin_allowed") != 0)
                     {
                        this.my_so.data[n] = v;
                     }
                  }
               }
               try
               {
                  this.my_so.flush();
               }
               catch(e:Error)
               {
                  LAST_ERROR = "Warning: Save data might be not available without account (Flash Player and/or web browser issue).";
               }
            }
            else
            {
               this.load_error_field.text = "Response: " + mySaveLoadLoader_data;
            }
         }
         else
         {
            this.load_error_field.text = "Response: " + mySaveLoadLoader_data;
         }
      }
      
      public function NetworkLoadOk(param1:Event) : void
      {
         var e:Event = param1;
         this.mySaveLoadLoader.removeEventListener(Event.COMPLETE,this.NetworkLoadOk);
         this.mySaveLoadLoader.removeEventListener(IOErrorEvent.IO_ERROR,this.NetworkLoadError);
         try
         {
            if(!this.NetworkLoad_complete)
            {
               this.LoadSaveDataFromString(this.mySaveLoadLoader.data);
            }
            this.NetworkLoad_complete = true;
         }
         catch(err:*)
         {
            load_error_field.text = "LoadSaveDataFromString decode error (" + NetworkLoad_triesleft + "): " + err;
         }
      }
      
      public function NetworkLoadError(param1:IOErrorEvent) : void
      {
         this.mySaveLoadLoader.removeEventListener(Event.COMPLETE,this.NetworkLoadOk);
         this.mySaveLoadLoader.removeEventListener(IOErrorEvent.IO_ERROR,this.NetworkLoadError);
         --this.NetworkLoad_triesleft;
         this.NetworkLoad_failed = true;
         this.NetworkLoadNow();
         this.load_error_field.text = "IOErrorEvent (" + this.NetworkLoad_triesleft + "," + this.myVariables.l + "): " + param1;
      }
      
      public function ProduceSaveString(param1:Boolean = true) : String
      {
         var _loc3_:* = undefined;
         var _loc4_:String = null;
         var _loc5_:* = undefined;
         var _loc2_:* = "";
         for(_loc3_ in this.my_so.data)
         {
            _loc4_ = _loc3_.split(";").join("^1").split("=").join("^2");
            _loc5_ = String(this.my_so.data[_loc3_]).split(";").join("^1").split("=").join("^2");
            if(!(!param1 && (_loc4_ == "first_uid" || _loc4_ == "first_login")))
            {
               if(!(_loc4_.indexOf("skin_allowed") == 0 || _loc5_ == "NaN" || _loc5_ == "undefined"))
               {
                  _loc2_ += _loc4_;
                  _loc2_ += "=";
                  _loc2_ += _loc5_;
                  _loc2_ += ";";
               }
            }
         }
         return _loc2_;
      }
      
      public function NetworkSave() : void
      {
         var _loc1_:String = null;
         if(this.loaderInfo.parameters.l != undefined && this.loaderInfo.parameters.l != "")
         {
            this.NetworkSave_triesleft = 10;
            _loc1_ = this.ProduceSaveString();
            this.NetworkSave_data = _loc1_;
            this.NetworkSaveNow();
         }
      }
      
      public function NetworkSaveNow() : void
      {
         if(this.NetworkSave_triesleft > 0)
         {
            this.myRequest = new URLRequest(this.MP_server);
            this.myVariables = new URLVariables();
            this.myVariables.rq = "save";
            this.myVariables.l = this.loaderInfo.parameters.l;
            this.myVariables.p = this.loaderInfo.parameters.p;
            this.myVariables.str = this.NetworkSave_data;
            this.myRequest.method = URLRequestMethod.POST;
            this.myRequest.data = this.myVariables;
            this.mySaveLoadLoader.addEventListener(Event.COMPLETE,this.NetworkSaveOk);
            this.mySaveLoadLoader.addEventListener(IOErrorEvent.IO_ERROR,this.NetworkSaveError);
            this.mySaveLoadLoader.load(this.myRequest);
         }
      }
      
      public function NetworkSaveOk(param1:Event) : void
      {
         this.mySaveLoadLoader.removeEventListener(Event.COMPLETE,this.NetworkSaveOk);
         this.mySaveLoadLoader.removeEventListener(IOErrorEvent.IO_ERROR,this.NetworkSaveError);
      }
      
      public function NetworkSaveError(param1:IOErrorEvent) : void
      {
         this.mySaveLoadLoader.removeEventListener(Event.COMPLETE,this.NetworkSaveOk);
         this.mySaveLoadLoader.removeEventListener(IOErrorEvent.IO_ERROR,this.NetworkSaveError);
         --this.NetworkSave_triesleft;
         this.NetworkSaveNow();
      }
      
      public function edumb() : void
      {
         if(stage.numChildren > 1)
         {
            stage.removeChildAt(1);
            SoundMixer.stopAll();
            if(currentFrame > 1)
            {
               this.CreateRestoreLoopSounds();
            }
         }
      }
      
      public function kedumb() : void
      {
         if(this.edidumb != -1)
         {
            clearInterval(this.edidumb);
            this.edidumb = -1;
         }
      }
      
      public function version_hash(param1:String) : String
      {
         var _loc2_:ByteArray = new ByteArray();
         _loc2_.writeMultiByte(param1,"iso-8859-1");
         var _loc3_:ByteArray = stage.loaderInfo.bytes;
         var _loc4_:uint = 0;
         var _loc5_:uint = uint(_loc3_.length - 2);
         var _loc6_:uint = 3;
         while(_loc6_ < _loc5_)
         {
            _loc2_[_loc4_] = (_loc2_[_loc4_] + 3540 + (_loc2_[_loc4_] % 4 + 1) * (_loc3_[_loc6_] - _loc3_[_loc6_ - 1] + _loc3_[_loc6_ + 2] - _loc3_[_loc6_ + 1])) % 256;
            if(++_loc4_ >= _loc2_.length)
            {
               _loc4_ = 0;
            }
            _loc6_ += 4;
         }
         var _loc7_:String = "";
         _loc4_ = 0;
         while(_loc4_ < _loc2_.length)
         {
            _loc7_ += _loc2_[_loc4_] + ".";
            _loc4_++;
         }
         return _loc7_;
      }
      
      public function firtim() : *
      {
         if(currentFrame == 1)
         {
            this.totalseconds = getTimer() / 1000;
            if(this.loaded < 1)
            {
               this.loaded = 1;
            }
            this.waitfor = Math.round(this.totalseconds / this.loaded * (this.total - this.loaded));
            if(this.waitfor < 0)
            {
               this.waitfor = 0;
            }
            if(this.waitfor < 60)
            {
               this.loa2.htmlText = this.waitfor + " seconds";
            }
            else if(this.waitfor / 60 < 60)
            {
               this.loa2.htmlText = Math.floor(this.waitfor / 60) + " minutes " + (this.waitfor - Math.floor(this.waitfor / 60) * 60) + " seconds";
            }
         }
      }
      
      public function handleProgress(param1:Event) : void
      {
         if(currentFrame == 1)
         {
            this.loaded = stage.loaderInfo.bytesLoaded;
            this.percent = Math.round(this.loaded / this.total * 100);
            if(this.percent > 100)
            {
               this.percent = 100;
            }
            if(this.percent < 0)
            {
               this.percent = 0;
            }
            if(this.lastperc != this.percent)
            {
               this.times = 10;
            }
            else
            {
               --this.times;
            }
            if(this.times > 0)
            {
               this.loa.htmlText = "<B><FONT COLOR=\"#FFFFFF\">.:</FONT></B> " + this.percent + " <B><FONT COLOR=\"#FFFFFF\">:.</FONT></B>";
            }
            else if(this.times > -5)
            {
               this.loa.htmlText = "<B><FONT COLOR=\"#AAAAAA\">.:</FONT></B> " + this.percent + " <B><FONT COLOR=\"#AAAAAA\">:.</FONT></B>";
            }
            else if(this.times > -40)
            {
               this.loa.htmlText = "<B><FONT>.:</FONT></B> " + this.percent + " <B><FONT>:.<FONT></B>";
            }
            else
            {
               this.loa.htmlText = "<B><FONT COLOR=\"#FF0000\">.:</FONT></B> " + this.percent + " <B><FONT COLOR=\"#FF0000\">:.</FONT></B>";
            }
            Mouse.show();
            if(this.framesLoaded == this.totalFrames)
            {
               if(this.pass)
               {
                  if(this.adBox.alpha > 0)
                  {
                     this.adBox.alpha -= 0.1 * 30 / stage.frameRate;
                     this.intro_btcb.alpha -= 0.1 * 30 / stage.frameRate;
                     this.conti.alpha -= 0.1 * 30 / stage.frameRate;
                  }
                  else
                  {
                     if(AdLoader.cpmstar_loaded_object != null)
                     {
                        AdLoader.cpmstar_loaded_object.unloadAndStop();
                     }
                     removeChild(this.adBox);
                     AdLoader.cpmstar_loaded_object = null;
                     AdLoader.context = null;
                     clearInterval(this.fir);
                     SoundMixer.stopAll();
                     SoundMixer.soundTransform = new SoundTransform(1,0);
                     gotoAndStop("intro");
                  }
               }
               else
               {
                  this.loa.visible = false;
                  this.loa2.visible = false;
                  if(this.NetworkLoad_complete)
                  {
                     this.conti_loading.visible = false;
                     this.conti.visible = true;
                  }
                  else
                  {
                     this.conti_loading.visible = true;
                     this.conti.visible = false;
                  }
                  this.darkness.visible = false;
                  this.darkness.alpha = 0;
               }
            }
            else if(this.darkness.alpha > 0)
            {
               this.darkness.alpha -= 0.05;
            }
            else
            {
               this.darkness.visible = false;
            }
            this.lastperc = this.percent;
         }
         if(currentFrame <= 2)
         {
            this.IntroThink();
         }
         else
         {
            removeEventListener(Event.ENTER_FRAME,this.handleProgress);
         }
      }
      
      public function IntroThink() : void
      {
         var _loc1_:MovieClip = null;
         var _loc2_:Number = NaN;
         var _loc3_:MovieClip = null;
         if(this.intro_first)
         {
            this.main_y = this.intro_base.hero.y;
            this.intro_first = false;
            this.sinus = 0;
         }
         else
         {
            this.intro_base.hero.rotationZ = -0.2 + Math.sin(this.sinus) * 0.2;
            this.intro_base.hero.y = this.main_y + 0.2 + Math.cos(this.sinus) * 0.2;
            this.sinus += 0.08 * 30 / stage.frameRate;
            this.intro_base.hero.intro_head.rotationZ = -this.intro_base.hero.rotationZ;
            this.intro_base.hero.intro_arm1.rotationZ = this.intro_base.hero.intro_arm2.rotationZ = -this.intro_base.hero.rotationZ;
            this.intro_base.hero.intro_gun.rotationZ = -this.intro_base.hero.rotationZ * 0.5;
            if(this.intro_glowings.length > 0)
            {
               for each(_loc1_ in this.intro_glowings)
               {
                  _loc2_ = 0.3;
                  _loc2_ -= _loc1_.y * 0.005;
                  _loc1_.alpha = (_loc1_.alpha * 2 + Math.random() * _loc2_) * 0.33;
                  if(_loc1_.parent == this.intro_base.hero)
                  {
                     _loc1_.rotationZ = -this.intro_base.hero.rotationZ;
                  }
                  else
                  {
                     _loc1_.rotationZ = -this.intro_base.hero.rotationZ - _loc1_.parent.rotationZ;
                  }
               }
            }
            if(this.rifle_glow != null)
            {
               this.rifle_glow.alpha = (this.rifle_glow.alpha + Math.pow(Math.sin(this.sinus) * 0.3 + 0.3 + Math.random() * 0.4,4)) * 0.5;
               this.rifle_glow.rotationZ = -this.intro_base.hero.rotationZ - this.rifle_glow.parent.rotationZ;
            }
            if(this.intro_speculars.length > 0)
            {
               for each(_loc3_ in this.intro_speculars)
               {
                  _loc3_.alpha = Math.pow(Math.sin(this.sinus) * 0.5 + 0.5,1);
               }
            }
         }
      }
      
      public function register_glow(param1:MovieClip) : void
      {
         if(this.intro_glowings == null)
         {
            this.intro_glowings = new Array();
         }
         this.intro_glowings.push(param1);
      }
      
      public function register_glow2(param1:MovieClip) : void
      {
         this.rifle_glow = param1;
      }
      
      public function register_specular(param1:MovieClip) : void
      {
         if(this.intro_speculars == null)
         {
            this.intro_speculars = new Array();
         }
         this.intro_speculars.push(param1);
      }
      
      public function getTextFromJavaScript(param1:*) : void
      {
         var _loc2_:Array = null;
         var _loc3_:Event = null;
         if(param1 != "term")
         {
            if(param1 == "html_wheel_events")
            {
               this.USE_HTML_WHEEL_EVENTS = true;
            }
            else
            {
               _loc2_ = param1.split(":");
               if(_loc2_[0] == "rt")
               {
                  if(_loc2_[2] == "sp")
                  {
                     if(currentFrameLabel == "menu")
                     {
                        removeEventListener(Event.ENTER_FRAME,this.onEnterFrame2);
                     }
                     gotoAndStop("custom");
                     this.FORCE_CUSTOM_MAP = true;
                     this.CUR_CUSTOM_MAP = _loc2_[1];
                     gotoAndStop("difch");
                  }
                  else if(_loc2_[2] == "mp")
                  {
                  }
               }
               else if(_loc2_[0] == "w")
               {
                  if(this.USE_HTML_WHEEL_EVENTS)
                  {
                     _loc3_ = new MouseEvent(MouseEvent.MOUSE_WHEEL);
                     _loc3_.delta = int(_loc2_[1]);
                     this.onMouseWheelEvent(_loc3_);
                  }
               }
            }
         }
      }
      
      public function resetChatHistory() : void
      {
         this.chatHistory = [];
         this.currentHistoryIndex = -1;
      }
      
      public function updateTxt2(param1:MovieClip) : void
      {
         var _loc2_:Array = null;
         var _loc3_:String = null;
         switch(this.SHOW_EXP_BAR)
         {
            case 1:
               param1.gui.txt2.alpha = param1.idd == this.MP_myid ? 0.75 : 0.5;
               param1.gui.txt2.visible = true;
               if(param1.custom_tag != "")
               {
                  param1.gui.txt2.htmlText = param1.custom_tag;
               }
               else if(param1.info_text != "")
               {
                  param1.gui.txt2.htmlText = param1.info_text;
               }
               else
               {
                  param1.gui.txt2.visible = false;
               }
               break;
            case 2:
               param1.gui.txt2.alpha = param1.idd == this.MP_myid ? 0.75 : 0.5;
               param1.gui.txt2.visible = true;
               if(param1.custom_tag != "" && param1.info_text != "")
               {
                  _loc2_ = param1.info_text.split("> ");
                  _loc3_ = _loc2_[_loc2_.length - 1];
                  param1.gui.txt2.htmlText = param1.custom_tag + " - " + _loc3_;
               }
               else if(param1.info_text != "")
               {
                  param1.gui.txt2.htmlText = param1.info_text;
               }
               else if(param1.custom_tag != "")
               {
                  param1.gui.txt2.htmlText = param1.custom_tag;
               }
               else
               {
                  param1.gui.txt2.visible = false;
               }
               break;
            case 3:
               param1.gui.txt2.alpha = param1.idd == this.MP_myid ? 0.75 : 0.5;
               param1.gui.txt2.visible = true;
               if(param1.info_text != "")
               {
                  param1.gui.txt2.htmlText = param1.info_text;
               }
         }
      }
      
      public function unmaskTag(param1:String) : String
      {
         var _loc2_:String = null;
         for(_loc2_ in this.patternMasks)
         {
            if(param1.indexOf(this.patternMasks[_loc2_]) >= 0)
            {
               param1 = param1.split(this.patternMasks[_loc2_]).join(_loc2_);
            }
         }
         return param1;
      }
      
      public function replaceSymbols(param1:String) : String
      {
         while(param1 != param1.replace("[eq]","="))
         {
            param1 = param1.replace("[eq]","=");
         }
         while(param1 != param1.replace("[i]","|"))
         {
            param1 = param1.replace("[i]","|");
         }
         while(param1 != param1.replace("[dc]",";"))
         {
            param1 = param1.replace("[dc]",";");
         }
         while(param1 != param1.replace("[lt]","<"))
         {
            param1 = param1.replace("[lt]","<");
         }
         while(param1 != param1.replace("[gt]",">"))
         {
            param1 = param1.replace("[gt]",">");
         }
         while(param1 != param1.replace("[2q]","\""))
         {
            param1 = param1.replace("[2q]","\"");
         }
         while(param1 != param1.replace("[sl]","/"))
         {
            param1 = param1.replace("[sl]","/");
         }
         while(param1 != param1.replace("[rsl]","\\"))
         {
            param1 = param1.replace("[rsl]","\\");
         }
         return param1;
      }
      
      public function refreshServer() : void
      {
         if(this.proxySelection >= this.proxyServers.length)
         {
            this.proxySelection = 0;
         }
         this.MP_SERVER_IP = this.proxyServers[this.proxySelection].ip;
         this.MP_SERVER_PORT = parseInt(this.proxyServers[this.proxySelection].port);
      }
      
      public function TraceLinePlayer(param1:Number, param2:Number, param3:Number, param4:Number) : Boolean
      {
         var _loc5_:Number = NaN;
         this.tracer_i4 = 0;
         while(this.tracer_i4 < this.playerstotal)
         {
            if(this.mens[this.tracer_i4].visible)
            {
               this.a_rectangleMinX = Number(this.mens[this.tracer_i4].x) - 30;
               this.a_rectangleMinY = Number(this.mens[this.tracer_i4].y) - 102;
               this.a_rectangleMaxX = Number(this.mens[this.tracer_i4].x) + 30;
               this.a_rectangleMaxY = Number(this.mens[this.tracer_i4].y) + 50 - this.sitmax * Number(this.mens[this.tracer_i4].sit);
               if(!(param1 < this.a_rectangleMinX && param3 < this.a_rectangleMinX))
               {
                  if(!(param1 > this.a_rectangleMaxX && param3 > this.a_rectangleMaxX))
                  {
                     if(!(param2 < this.a_rectangleMinY && param4 < this.a_rectangleMinY))
                     {
                        if(!(param2 > this.a_rectangleMaxY && param4 > this.a_rectangleMaxY))
                        {
                           if(param1 > param3)
                           {
                              this.minX = param3;
                              this.maxX = param1;
                           }
                           else
                           {
                              this.minX = param1;
                              this.maxX = param3;
                           }
                           if(this.maxX > this.a_rectangleMaxX)
                           {
                              this.maxX = this.a_rectangleMaxX;
                           }
                           if(this.minX < this.a_rectangleMinX)
                           {
                              this.minX = this.a_rectangleMinX;
                           }
                           this.minY = param2;
                           this.maxY = param4;
                           this.dx = param3 - param1;
                           if(this.Math_abs(this.dx) > 1e-7)
                           {
                              _loc5_ = (param4 - param2) / this.dx;
                              this.b = param2 - Number(_loc5_) * param1;
                              this.minY = Number(_loc5_) * this.minX + this.b;
                              this.maxY = Number(_loc5_) * this.maxX + this.b;
                           }
                           if(this.minY > this.maxY)
                           {
                              this.tmp2 = this.maxY;
                              this.maxY = this.minY;
                              this.minY = this.tmp2;
                           }
                           if(this.maxY > this.a_rectangleMaxY)
                           {
                              this.maxY = this.a_rectangleMaxY;
                           }
                           if(this.minY < this.a_rectangleMinY)
                           {
                              this.minY = this.a_rectangleMinY;
                           }
                           if(this.minX <= this.maxX && this.minY <= this.maxY)
                           {
                              return false;
                           }
                        }
                     }
                  }
               }
            }
            ++this.tracer_i4;
         }
         return true;
      }
      
      public function maskChatInput(param1:String) : String
      {
         var _loc2_:String = null;
         for(_loc2_ in this.patternMasks)
         {
            if(param1.indexOf(_loc2_) >= 0)
            {
               param1 = param1.split(_loc2_).join(this.patternMasks[_loc2_]);
            }
         }
         return param1;
      }
      
      public function unmaskChatInput(param1:String) : String
      {
         var _loc2_:String = null;
         for(_loc2_ in this.patternUnMasks)
         {
            if(param1.indexOf(this.patternUnMasks[_loc2_]) >= 0)
            {
               param1 = param1.split(this.patternUnMasks[_loc2_]).join(_loc2_);
            }
         }
         return param1;
      }
      
      public function getFriendlist() : void
      {
         this.MP_socket_send("rq=list");
      }
      
      public function enableLobbyChat() : void
      {
         if(this.lobby_chat_enabled)
         {
            this.disableLobbyChat();
         }
         this.lobby_chat_enabled = true;
         this.getFriendlist();
         this.lobby_chat_intervalId = setInterval(this.getLobbyMessages,500);
         this.lobby_chat_list_intervalId = setInterval(this.getFriendlist,5000);
      }
      
      public function disableLobbyChat() : void
      {
         this.lobby_chat_enabled = false;
         this.lobbywindow.visible = false;
         clearInterval(this.lobby_chat_intervalId);
         clearInterval(this.lobby_chat_list_intervalId);
      }
      
      public function sendLobbyMessage() : void
      {
         var glow_timeout:int = 0;
         if(getTimer() - this.lobby_chat_last_sent > 3000 && this.lobbywindow.chatinput.text != "" && this.lobbywindow.chatinput_glow.currentFrame == 1)
         {
            if(this.lobbywindow.chatinput.text == "-clear")
            {
               this.lobby_chat_log = "";
               this.lobbywindow.chatmessages.htmlText = "";
            }
            else
            {
               this.MP_socket_send("rq=mchat&action=send&text=" + this.maskChatInput(this.lobbywindow.chatinput.text));
               this.lobby_chat_last_sent = getTimer();
            }
            this.lobbywindow.chatinput.text = "";
         }
         else if(this.lobbywindow.chatinput_glow.currentFrame == 1)
         {
            glow_timeout = 3000 - (getTimer() - this.lobby_chat_last_sent);
            if(glow_timeout < 2000)
            {
               glow_timeout = 2000;
            }
            this.lobbywindow.chatinput_glow.play();
            setTimeout(function():*
            {
               lobbywindow.chatinput_glow.gotoAndStop(1);
            },glow_timeout);
         }
      }
      
      public function getLobbyMessages() : void
      {
         if(this.lobbywindow.visible)
         {
            this.MP_socket_send("rq=mchat&action=get");
         }
      }
      
      public function updatePingInfo() : void
      {
         var _loc1_:int = 0;
         var _loc2_:* = undefined;
         var _loc3_:int = 0;
         if(currentLabel == "channel")
         {
            _loc1_ = 1;
            while(_loc1_ < this.list2.numChildren)
            {
               _loc2_ = this.list2.getChildAt(_loc1_);
               _loc3_ = 0;
               while(_loc3_ < this.serversList.length)
               {
                  if(this.serversList[_loc3_][0] == _loc2_.servertxt.text)
                  {
                     _loc2_.pingtxt.text = this.Censored(this.serversList[_loc3_][3]);
                  }
                  _loc3_++;
               }
               _loc1_++;
            }
         }
      }
      
      public function ConnectToMpServer() : void
      {
         if(!this.MP_socket.connected)
         {
            Security.loadPolicyFile("xmlsocket://" + this.MP_SERVER_IP + ":" + this.MP_SERVER_PORT);
            this.MP_socket.connect(this.MP_SERVER_IP,this.MP_SERVER_PORT);
         }
      }
      
      public function fetch_lobby_server() : void
      {
         this.myRequest = new URLRequest(this.MP_server);
         this.myVariables = new URLVariables();
         this.myVariables.rq = "lobby_server";
         this.myRequest.method = URLRequestMethod.POST;
         this.myRequest.data = this.myVariables;
         this.myLoader.addEventListener(Event.COMPLETE,this.lobby_server_done);
         this.myLoader.addEventListener(IOErrorEvent.IO_ERROR,this.lobby_server_failed);
         this.myLoader.load(this.myRequest);
      }
      
      public function fetch_proxy_server() : void
      {
      }
      
      public function populateProxies() : void
      {
      }
      
      public function lobby_server_failed(param1:IOErrorEvent) : void
      {
         this.myLoader.removeEventListener(Event.COMPLETE,this.lobby_server_done);
         this.myLoader.removeEventListener(IOErrorEvent.IO_ERROR,this.lobby_server_failed);
         if(currentLabel == "loginform")
         {
            this.LAST_ERROR = "Can\'t connect to lobby server,Please check net or Try again.";
            this.errtxt.text = "CAN\'T CONNECT TO LOBBY SERVER";
            gotoAndStop("menu");
         }
      }
      
      public function MP_UpdateServerList(param1:Boolean = false) : void
      {
         var mc:* = undefined;
         var l:int = 0;
         var i:int = 0;
         var hide:Boolean = param1;
         this.server_list_box.removeChildren(0);
         mc = new server_list_item();
         this.server_list_box.addChild(mc);
         this.server_list_box["server_btn0"] = mc;
         this.server_list_box["server_btn0"].gotoAndStop(2);
         this.server_list_box["server_btn0"].y = i * 18;
         this.server_list_box["server_btn0"].txt.mouseEnabled = false;
         this.server_list_box["server_btn0"].txt.text = this.proxyServers[this.proxySelection].name;
         l = 1;
         i = 0;
         while(i < this.proxyServers.length)
         {
            if(i != this.proxySelection)
            {
               mc = new server_list_item();
               this.server_list_box.addChild(mc);
               this.server_list_box["server_btn" + l] = mc;
               this.server_list_box["server_btn" + l].gotoAndStop(1);
               this.server_list_box["server_btn" + l].y = l * 18;
               this.server_list_box["server_btn" + l].txt.mouseEnabled = false;
               this.server_list_box["server_btn" + l].txt.text = this.proxyServers[i].name;
               (function():*
               {
                  var i2:* = undefined;
                  i2 = i;
                  server_list_box["server_btn" + l].clickable_area.addEventListener(MouseEvent.CLICK,function(param1:*):*
                  {
                     PlaySound_full(ss_info_act);
                     proxySelection = i2;
                     refreshServer();
                     MP_UpdateServerList(true);
                     SaveGame();
                     MP_SwitchServer();
                  });
               })();
               l += 1;
            }
            i++;
         }
         if(hide)
         {
            this.server_list_box.removeChildren(1);
         }
      }
      
      public function lobby_server_done(param1:Event) : void
      {
         var _loc5_:Object = null;
         this.myLoader.removeEventListener(Event.COMPLETE,this.lobby_server_done);
         this.myLoader.removeEventListener(IOErrorEvent.IO_ERROR,this.lobby_server_failed);
         var _loc2_:Array = this.myLoader.data.split("|");
         this.proxyServers = [];
         this.MP_gamever = _loc2_[0];
         this.MP_mainserver_name = _loc2_[1];
         this.MP_mainserver_ip = _loc2_[2];
         this.MP_mainserver_port = parseInt(_loc2_[3]);
         var _loc3_:Object = {
            "name":this.MP_mainserver_name,
            "ip":this.MP_mainserver_ip,
            "port":this.MP_mainserver_port
         };
         this.proxyServers.push(_loc3_);
         var _loc4_:int = 4;
         while(_loc4_ < _loc2_.length)
         {
            if(_loc4_ + 2 < _loc2_.length)
            {
               _loc5_ = {
                  "name":_loc2_[_loc4_],
                  "ip":_loc2_[_loc4_ + 1],
                  "port":parseInt(_loc2_[_loc4_ + 2])
               };
               this.proxyServers.push(_loc5_);
            }
            _loc4_ += 3;
         }
         this.refreshServer();
         if(currentLabel == "loginform")
         {
            this.MP_UpdateServerList();
         }
         this.ConnectToMpServer();
      }
      
      public function proxy_server_failed(param1:IOErrorEvent) : void
      {
         this.myLoader2noserver.removeEventListener(Event.COMPLETE,this.proxy_server_done);
         this.myLoader2noserver.removeEventListener(IOErrorEvent.IO_ERROR,this.proxy_server_failed);
      }
      
      public function proxy_server_done(param1:Event) : void
      {
         this.myLoader2noserver.removeEventListener(Event.COMPLETE,this.proxy_server_done);
         this.myLoader2noserver.removeEventListener(IOErrorEvent.IO_ERROR,this.proxy_server_failed);
         this.populateProxies(this.myLoader2noserver.data);
         this.refreshServer();
         this.ConnectToMpServer();
      }
      
      public function connectTime_display() : void
      {
         var _loc1_:* = undefined;
         var _loc2_:* = undefined;
         var _loc3_:* = undefined;
         var _loc4_:* = undefined;
         if(this.joinmenu_mp)
         {
            _loc1_ = Math.floor(this.connectTime / 60 / 60);
            _loc2_ = Math.floor(this.connectTime / 60 - _loc1_ * 60);
            _loc3_ = Math.floor(this.connectTime - _loc2_ * 60 - _loc1_ * 60 * 60);
            _loc4_ = "";
            this.temp = _loc1_;
            if(_loc1_ < 10)
            {
               _loc4_ += "0";
            }
            _loc4_ += this.temp + ":";
            this.temp = _loc2_;
            if(_loc2_ < 10)
            {
               _loc4_ += "0";
            }
            _loc4_ += this.temp + ":";
            this.temp = _loc3_;
            if(_loc3_ < 10)
            {
               _loc4_ += "0";
            }
            _loc4_ += this.temp;
            this.joinmenu_mp.timetxt.text = _loc4_;
         }
         ++this.connectTime;
      }
      
      public function ping() : void
      {
         var _loc1_:Socket = null;
         if(this.IntervalCounter < this.IntervalStopCount)
         {
            _loc1_ = new Socket();
            _loc1_.addEventListener(Event.CONNECT,this.ping_Connect);
            _loc1_.addEventListener(ProgressEvent.SOCKET_DATA,this.ping_SocketData);
            _loc1_.addEventListener(SecurityErrorEvent.SECURITY_ERROR,this.ping_securityErrorHandler);
            _loc1_.addEventListener(IOErrorEvent.IO_ERROR,this.ping_ioErrorHandler);
            this.serversList[this.IntervalCounter][4] = _loc1_;
            _loc1_.connect(this.serversList[this.IntervalCounter][1],parseInt(this.serversList[this.IntervalCounter][2],10));
            ++this.IntervalCounter;
         }
      }
      
      public function ping_sendRequest(param1:Socket) : void
      {
         var timer_start_num:* = undefined;
         var _current_sock:Socket = param1;
         var str:* = "@1";
         try
         {
            for(timer_start_num in this.serversList)
            {
               if(this.serversList[timer_start_num][4] == _current_sock)
               {
                  this.time_start[timer_start_num] = getTimer();
                  break;
               }
            }
            _current_sock.writeUTFBytes(str);
         }
         catch(e:IOError)
         {
         }
         _current_sock.flush();
      }
      
      public function ping_Connect(param1:Event) : void
      {
         this.ping_sendRequest(param1.currentTarget);
      }
      
      public function ping_SocketData(param1:ProgressEvent) : void
      {
         var _loc5_:* = undefined;
         var _loc2_:int = int(getTimer());
         var _loc3_:Socket = param1.currentTarget;
         var _loc4_:int = int(null);
         for(_loc5_ in this.serversList)
         {
            if(this.serversList[_loc5_][4] == _loc3_)
            {
               _loc4_ = _loc5_;
               break;
            }
         }
         if(this.IntervalCounter == this.IntervalStopCount)
         {
            clearInterval(this.intervalId);
         }
         var _loc6_:* = String(_loc2_ - this.time_start[_loc4_]) + " ms";
         if(_loc4_ != null)
         {
            this.serversList[_loc4_][3] = _loc6_;
         }
         this.updatePingInfo();
         _loc3_.close();
         _loc3_.removeEventListener(Event.CONNECT,this.ping_Connect);
         _loc3_.removeEventListener(ProgressEvent.SOCKET_DATA,this.ping_SocketData);
         _loc3_.removeEventListener(SecurityErrorEvent.SECURITY_ERROR,this.ping_securityErrorHandler);
         _loc3_.removeEventListener(IOErrorEvent.IO_ERROR,this.ping_ioErrorHandler);
         _loc3_ = null;
      }
      
      public function ping_ioErrorHandler(param1:IOErrorEvent) : void
      {
         var _loc4_:* = undefined;
         var _loc2_:Socket = param1.currentTarget;
         current_ping = "N/A";
         var _loc3_:int = int(null);
         for(_loc4_ in this.serversList)
         {
            if(this.serversList[_loc4_][4] != undefined && this.serversList[_loc4_][4] == _loc2_)
            {
               _loc3_ = _loc4_;
            }
         }
         if(Boolean(_loc3_) && Boolean(this.ggg))
         {
            this.ggg["server" + _loc3_.toString()].enabled = false;
            this.ggg["server" + _loc3_.toString()].mouseEnabled = false;
            this.ggg["server" + _loc3_.toString()].alpha = 0.5;
         }
      }
      
      public function ping_securityErrorHandler(param1:SecurityErrorEvent) : void
      {
         var _loc4_:* = undefined;
         var _loc2_:Socket = param1.currentTarget;
         current_ping = "N/A";
         var _loc3_:int = int(null);
         for(_loc4_ in this.serversList)
         {
            if(this.serversList[_loc4_][4] != undefined && this.serversList[_loc4_][4] == _loc2_)
            {
               _loc3_ = _loc4_;
            }
         }
         if(Boolean(_loc3_) && Boolean(this.ggg))
         {
            this.ggg["server" + _loc3_.toString()].enabled = false;
            this.ggg["server" + _loc3_.toString()].mouseEnabled = false;
            this.ggg["server" + _loc3_.toString()].alpha = 0.5;
         }
      }
      
      public function connectToGameServer(param1:String, param2:int) : void
      {
         var MP_host:String = param1;
         var MP_port:int = param2;
         this.MP_game_socket.connect(MP_host,MP_port);
         setTimeout(function():*
         {
            if(!MP_game_socket.connected)
            {
               connectToGameServer(MP_host,MP_port);
            }
         },1000);
      }
      
      public function connect_to_region(param1:Boolean = false) : void
      {
         var create_match:Boolean = param1;
         this.joinmenu_mp.visible = true;
         this.game_socket_passed = false;
         this.joinmenu_mp.b_close2.alpha = 0.5;
         this.joinmenu_mp.b_close2.mouseEnabled = false;
         if(this.MP_game_socket.connected)
         {
            this.MP_game_socket.close();
         }
         setTimeout(function():*
         {
            if(!game_socket_passed)
            {
               joinmenu_mp.b_close2.alpha = 1;
               joinmenu_mp.b_close2.mouseEnabled = true;
            }
         },5000);
         this.joinmenu_mp.txt.text = "Creating match\nPlease wait..";
         if(this.connectTimeIntervalId)
         {
            clearInterval(this.connectTimeIntervalId);
         }
         this.joinmenu_mp.timetxt.text = "00:00:00";
         this.connectTime = 0;
         this.connectTime_display();
         this.connectTimeIntervalId = setInterval(this.connectTime_display,1000);
         if(create_match)
         {
            setTimeout(function():*
            {
               joinmenu_mp.txt.text = "Connecting..";
               connectToGameServer(MP_game_server,MP_game_port);
            },1000);
         }
         else
         {
            this.joinmenu_mp.txt.text = "Connecting..";
            this.connectToGameServer(this.MP_game_server,this.MP_game_port);
         }
      }
      
      public function RememberMapID(param1:*, param2:*) : void
      {
         var _loc3_:* = undefined;
         param1 = param1.split("&").join("");
         param1 = param1.split(",").join("+");
         param1 = param1.split("=").join("");
         param1 = param1.toLowerCase();
         if(param2 == 1)
         {
            _loc3_ = this.map_qp_sp.split(",");
         }
         if(param2 == 2)
         {
            _loc3_ = this.map_qp_mp.split(",");
         }
         if(_loc3_.indexOf(param1) != -1)
         {
            _loc3_.splice(_loc3_.indexOf(param1),1);
         }
         _loc3_.unshift(param1);
         if(_loc3_.length > 20)
         {
            _loc3_ = _loc3_.slice(0,20);
         }
         if(param2 == 1)
         {
            this.map_qp_sp = _loc3_.join(",");
         }
         if(param2 == 2)
         {
            this.map_qp_mp = _loc3_.join(",");
         }
         this.SaveGame();
      }
      
      public function CallQuickPick(param1:*, param2:*, param3:*, param4:*) : void
      {
         var flip:* = undefined;
         var maps:* = undefined;
         var appear:* = undefined;
         var i:* = undefined;
         var x:* = param1;
         var y:* = param2;
         var map_group:* = param3;
         var paste_target:* = param4;
         var SaveBack:* = function():*
         {
            if(map_group == 1)
            {
               map_qp_sp = maps.join(",");
            }
            if(map_group == 2)
            {
               map_qp_mp = maps.join(",");
            }
            SaveGame();
         };
         if(this.map_quickpick.visible)
         {
            return;
         }
         this.map_quickpick.gotoAndStop(2);
         this.map_quickpick.gotoAndStop(1);
         this.map_quickpick.visible = true;
         this.map_quickpick.alpha = 0;
         this.map_quickpick.x = x;
         this.map_quickpick.y = y;
         flip = map_group == 1;
         if(flip)
         {
            this.map_quickpick.scaleY = -1;
         }
         else
         {
            this.map_quickpick.scaleY = 1;
         }
         maps = null;
         if(map_group == 1)
         {
            maps = this.map_qp_sp.split(",");
         }
         if(map_group == 2)
         {
            maps = this.map_qp_mp.split(",");
         }
         appear = true;
         while(maps.indexOf("") != -1)
         {
            maps.splice(maps.indexOf(""),1);
         }
         i = 0;
         while(i < this.map_quick_picks_max)
         {
            if(i < maps.length)
            {
               (function(param1:*):*
               {
                  var list_element:* = param1;
                  list_element.visible = true;
                  list_element.txt.text = maps[i].split("+").join(",");
                  if(flip)
                  {
                     list_element.scaleY = -1;
                     list_element.y = i * 18 + 5 + 18;
                  }
                  else
                  {
                     list_element.scaleY = 1;
                     list_element.y = i * 18 + 5;
                  }
                  list_element.map_id = maps[i];
                  NoMouse2(list_element.txt);
                  list_element.btn.addEventListener(MouseEvent.CLICK,function():*
                  {
                     paste_target.text = list_element.map_id.split("+").join(",");
                     appear = false;
                  });
                  list_element.del.addEventListener(MouseEvent.CLICK,function():*
                  {
                     maps.splice(maps.indexOf(list_element.map_id),1);
                     SaveBack();
                     var _loc1_:* = map_quickpick.alpha;
                     map_quickpick.visible = false;
                     CallQuickPick(x,y,map_group,paste_target);
                     map_quickpick.alpha = _loc1_;
                     stage.stageFocusRect = false;
                     stage.focus = map_quickpick;
                  });
               })(this.map_quickpick["qp" + i]);
            }
            else
            {
               this.map_quickpick["qp" + i].visible = false;
            }
            i++;
         }
         this.map_quickpick.bg.scaleY = (maps.length * 18 + 10) / 136;
         if(this.map_qp_ani != -1)
         {
            clearInterval(this.map_qp_ani);
            this.map_qp_ani = -1;
         }
         this.map_qp_ani = setInterval(function():*
         {
            if(appear)
            {
               if(map_quickpick.alpha < 1)
               {
                  map_quickpick.alpha = Math.min(1,map_quickpick.alpha + 0.2);
               }
               if(stage.focus != paste_target)
               {
                  if(stage.focus != map_quickpick)
                  {
                     if(stage.focus != map_quickpick.bg)
                     {
                        if(stage.focus != map_quickpick.qp0)
                        {
                           if(stage.focus != map_quickpick.qp1)
                           {
                              if(stage.focus != map_quickpick.qp2)
                              {
                                 if(stage.focus != map_quickpick.qp3)
                                 {
                                    if(stage.focus != map_quickpick.qp4)
                                    {
                                       if(stage.focus != map_quickpick.qp5)
                                       {
                                          if(stage.focus != map_quickpick.qp6)
                                          {
                                             if(stage.focus != map_quickpick.qp0.btn)
                                             {
                                                if(stage.focus != map_quickpick.qp1.btn)
                                                {
                                                   if(stage.focus != map_quickpick.qp2.btn)
                                                   {
                                                      if(stage.focus != map_quickpick.qp3.btn)
                                                      {
                                                         if(stage.focus != map_quickpick.qp4.btn)
                                                         {
                                                            if(stage.focus != map_quickpick.qp5.btn)
                                                            {
                                                               if(stage.focus != map_quickpick.qp6.btn)
                                                               {
                                                                  if(stage.focus != map_quickpick.qp0.del)
                                                                  {
                                                                     if(stage.focus != map_quickpick.qp1.del)
                                                                     {
                                                                        if(stage.focus != map_quickpick.qp2.del)
                                                                        {
                                                                           if(stage.focus != map_quickpick.qp3.del)
                                                                           {
                                                                              if(stage.focus != map_quickpick.qp4.del)
                                                                              {
                                                                                 if(stage.focus != map_quickpick.qp5.del)
                                                                                 {
                                                                                    if(stage.focus != map_quickpick.qp6.del)
                                                                                    {
                                                                                       appear = false;
                                                                                    }
                                                                                 }
                                                                              }
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
            else if(map_quickpick.alpha > 0)
            {
               map_quickpick.alpha = Math.max(0,map_quickpick.alpha - 0.2);
            }
            else
            {
               clearInterval(map_qp_ani);
               map_qp_ani = -1;
               map_quickpick.visible = false;
               stage.stageFocusRect = true;
            }
         },16);
      }
      
      public function RememberTitle(param1:*) : void
      {
         var _loc3_:* = undefined;
         var _loc2_:* = param1.split(",").join("\x01");
         _loc3_ = this.title_qp_mp.split(",");
         if(_loc3_.indexOf(_loc2_) != -1)
         {
            _loc3_.splice(_loc3_.indexOf(_loc2_),1);
         }
         _loc3_.unshift(_loc2_);
         if(_loc3_.length > 20)
         {
            _loc3_ = _loc3_.slice(0,20);
         }
         this.title_qp_mp = _loc3_.join(",");
         this.SaveGame();
      }
      
      public function CallQuickTitlePick(param1:*, param2:*, param3:*) : void
      {
         var titles:* = undefined;
         var appear:* = undefined;
         var i:* = undefined;
         var x:* = param1;
         var y:* = param2;
         var paste_target:* = param3;
         var SaveBack:* = function():*
         {
            title_qp_mp = titles.join(",");
            SaveGame();
         };
         if(this.title_quickpick.visible)
         {
            return;
         }
         this.title_quickpick.gotoAndStop(2);
         this.title_quickpick.gotoAndStop(1);
         this.title_quickpick.visible = true;
         this.title_quickpick.alpha = 0;
         this.title_quickpick.x = x;
         this.title_quickpick.y = y;
         titles = this.title_qp_mp.split(",");
         appear = true;
         while(titles.indexOf("") != -1)
         {
            titles.splice(titles.indexOf(""),1);
         }
         i = 0;
         while(i < this.map_quick_picks_max)
         {
            if(i < titles.length)
            {
               (function(param1:*):*
               {
                  var list_element:* = param1;
                  list_element.visible = true;
                  list_element.txt.text = titles[i].split("\x01").join(",");
                  list_element.scaleY = 1;
                  list_element.y = i * 18 + 5;
                  list_element.map_id = titles[i];
                  NoMouse2(list_element.txt);
                  list_element.btn.addEventListener(MouseEvent.CLICK,function():*
                  {
                     paste_target.text = list_element.map_id.split("\x01").join(",");
                     appear = false;
                  });
                  list_element.del.addEventListener(MouseEvent.CLICK,function():*
                  {
                     titles.splice(titles.indexOf(list_element.map_id),1);
                     SaveBack();
                     var _loc1_:* = title_quickpick.alpha;
                     title_quickpick.visible = false;
                     CallQuickTitlePick(x,y,paste_target);
                     title_quickpick.alpha = _loc1_;
                     stage.stageFocusRect = false;
                     stage.focus = title_quickpick;
                  });
               })(this.title_quickpick["qp" + i]);
            }
            else
            {
               this.title_quickpick["qp" + i].visible = false;
            }
            i++;
         }
         this.title_quickpick.bg.scaleY = (titles.length * 18 + 10) / 136;
         if(this.title_qp_ani != -1)
         {
            clearInterval(this.title_qp_ani);
            this.title_qp_ani = -1;
         }
         this.title_qp_ani = setInterval(function():*
         {
            if(appear)
            {
               if(title_quickpick.alpha < 1)
               {
                  title_quickpick.alpha = Math.min(1,title_quickpick.alpha + 0.2);
               }
               if(stage.focus != paste_target)
               {
                  if(stage.focus != title_quickpick)
                  {
                     if(stage.focus != title_quickpick.bg)
                     {
                        if(stage.focus != title_quickpick.qp0)
                        {
                           if(stage.focus != title_quickpick.qp1)
                           {
                              if(stage.focus != title_quickpick.qp2)
                              {
                                 if(stage.focus != title_quickpick.qp3)
                                 {
                                    if(stage.focus != title_quickpick.qp4)
                                    {
                                       if(stage.focus != title_quickpick.qp5)
                                       {
                                          if(stage.focus != title_quickpick.qp6)
                                          {
                                             if(stage.focus != title_quickpick.qp0.btn)
                                             {
                                                if(stage.focus != title_quickpick.qp1.btn)
                                                {
                                                   if(stage.focus != title_quickpick.qp2.btn)
                                                   {
                                                      if(stage.focus != title_quickpick.qp3.btn)
                                                      {
                                                         if(stage.focus != title_quickpick.qp4.btn)
                                                         {
                                                            if(stage.focus != title_quickpick.qp5.btn)
                                                            {
                                                               if(stage.focus != title_quickpick.qp6.btn)
                                                               {
                                                                  if(stage.focus != title_quickpick.qp0.del)
                                                                  {
                                                                     if(stage.focus != title_quickpick.qp1.del)
                                                                     {
                                                                        if(stage.focus != title_quickpick.qp2.del)
                                                                        {
                                                                           if(stage.focus != title_quickpick.qp3.del)
                                                                           {
                                                                              if(stage.focus != title_quickpick.qp4.del)
                                                                              {
                                                                                 if(stage.focus != title_quickpick.qp5.del)
                                                                                 {
                                                                                    if(stage.focus != title_quickpick.qp6.del)
                                                                                    {
                                                                                       appear = false;
                                                                                    }
                                                                                 }
                                                                              }
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
            else if(title_quickpick.alpha > 0)
            {
               title_quickpick.alpha = Math.max(0,title_quickpick.alpha - 0.2);
            }
            else
            {
               clearInterval(title_qp_ani);
               title_qp_ani = -1;
               title_quickpick.visible = false;
               stage.stageFocusRect = true;
            }
         },16);
      }
      
      public function cet(param1:String, param2:String, param3:int) : String
      {
         var n:Vector.<int> = null;
         var str:String = param1;
         var hash:String = param2;
         var len:int = param3;
         try
         {
            if(str.length != len || hash != MD5.hash(str))
            {
               this.unstable = 9;
               this.unstable_m = this.CUR_SERVER_NAME + "." + this.MP_room_name + "." + this.MP_map_name + " :: che(" + str + ", " + hash + ", " + len + ")";
               if(Math.random() > 0.8)
               {
                  return "";
               }
               if(Math.random() > 0.8)
               {
                  n = new Vector.<int>(-1);
               }
            }
            return str;
         }
         catch(e:Error)
         {
            n = new Vector.<int>(-1);
         }
         return "";
      }
      
      public function GET_LITE_PHYS() : Boolean
      {
         if(this.MP_mode)
         {
            if(this.MP_app)
            {
               return false;
            }
         }
         return this.LITE_PHYS;
      }
      
      public function SetMCFrame(param1:MovieClip, param2:int, param3:int = 0) : void
      {
         if(param1.isPlaying || param3 == 0 && param1.currentFrame != param2 || param3 > 0 && Math.abs(param1.currentFrame - param2) >= param3)
         {
            param1.gotoAndStop(param2);
         }
      }
      
      public function GCTime() : void
      {
         System.pauseForGCIfCollectionImminent(0.1);
      }
      
      public function CustomImageRegister(param1:int, param2:int, param3:int) : void
      {
         var loader:Loader;
         var img_req_vars:URLVariables;
         var request:URLRequest;
         var variables:*;
         var img:Object = null;
         var img_req:URLRequest = null;
         var completeHandler:* = undefined;
         var id:int = param1;
         var width:int = param2;
         var height:int = param3;
         completeHandler = function(param1:Event):void
         {
            var html:String = null;
            var event:Event = param1;
            try
            {
               html = event.target.data;
               if(html == "no")
               {
                  allow_screenshoting = false;
               }
               ++images_loaded;
            }
            catch(e:*)
            {
               SpawnLevelLogicErrorIfNeeded(e,"CustomImageApprovalStatus");
            }
         };
         if(this.custom_images.length > 4000)
         {
            throw new Error("No more than 2000 custom images are allowed per level.");
         }
         img = {};
         ++this.images_expected;
         img.id = id;
         img.bitmap = null;
         img.bitmap_data = null;
         img.load_callbacks = new Vector.<Function>();
         img.load_callback_params = new Vector.<Object>();
         img.width = width;
         img.height = height;
         loader = new Loader();
         loader.contentLoaderInfo.addEventListener(Event.COMPLETE,function(param1:Event):void
         {
            var i:int = 0;
            var event:Event = param1;
            ++images_finished_loading;
            try
            {
               images_data_loaded += LoaderInfo(event.target).bytesTotal;
               if(images_data_loaded > 1024 * 1024 * 10)
               {
                  throw new Error("Attempted to download too much image data (" + images_data_loaded + " out of allowed " + 1024 * 1024 * 10 + " bytes)");
               }
               img.bitmap = Bitmap(LoaderInfo(event.target).content);
               img.bitmap_data = img.bitmap.bitmapData;
               i = 0;
               while(i < img.load_callbacks.length)
               {
                  img.load_callbacks[i](img.load_callback_params[i]);
                  i++;
               }
               img.load_callback_params = null;
               img.load_callbacks = null;
               ++images_ready_to_render;
            }
            catch(e:*)
            {
               SpawnLevelLogicErrorIfNeeded(e,"CustomImageData");
            }
         });
         if(this.https_probability >= this.http_probability)
         {
            img_req = new URLRequest("https://www.plazmaburst2.com/mimage_cache.php?image_id=" + id);
         }
         else
         {
            img_req = new URLRequest("http://www.plazmaburst2.com/mimage_cache.php?image_id=" + id);
         }
         img_req_vars = new URLVariables();
         if(this.def_login != undefined && this.def_login != "")
         {
            img_req_vars.l = this.def_login;
            img_req_vars.p = this.def_password;
         }
         img_req.data = img_req_vars;
         loader.load(img_req);
         request = new URLRequest("https://www.plazmaburst2.com/mimage_cache.php?image_id=" + id + "&approved_status_only=1");
         variables = this.GetNewURLLoader();
         variables.addEventListener(Event.COMPLETE,completeHandler);
         try
         {
            variables.load(request);
         }
         catch(error:Error)
         {
            throw new Error("Unable to load URL: " + error);
         }
         this.custom_images.push(img);
      }
      
      public function FindCustomImageObject(param1:int) : Object
      {
         var _loc2_:int = 0;
         while(_loc2_ < this.custom_images.length)
         {
            if(this.custom_images[_loc2_].id == param1)
            {
               return this.custom_images[_loc2_];
            }
            _loc2_++;
         }
         return null;
      }
      
      public function CustomSongRegister(param1:String, param2:Number, param3:Boolean = false, param4:* = undefined) : void
      {
         var completeHandler:*;
         var s:Object = null;
         var request:URLRequest = null;
         var variables:* = undefined;
         var parts:Array = null;
         var url_cache:String = null;
         var url:String = param1;
         var volume_scale:Number = param2;
         var loop:Boolean = param3;
         var callback:* = param4;
         url = url.split("http://").join("https://");
         s = {};
         if(this.custom_songs.length >= 8)
         {
            throw new Error("Too many songs (you can\'t have more than 8 on one map)");
         }
         s.url = url;
         s.sound = new Sound();
         s.channel = new SoundChannel();
         s.volume = 0;
         s.volume_scale = Math.max(0,Math.min(2,volume_scale));
         if(callback != undefined && callback != -1)
         {
            s.callback = callback;
         }
         else
         {
            s.callback = -1;
         }
         s.loadingSince = getTimer();
         s.loop = loop;
         if(!(url.length == 0 || url == "0"))
         {
            if(url.indexOf("https://freemusicarchive.org") == 0)
            {
               completeHandler = function(param1:Event):void
               {
                  var html:String = null;
                  var title_download:int = 0;
                  var href:int = 0;
                  var last_quote:* = undefined;
                  var final_url:String = null;
                  var event:Event = param1;
                  try
                  {
                     html = event.target.data;
                     title_download = int(html.indexOf("\" title=\"Download\""));
                     if(title_download === -1)
                     {
                        throw new Error("Song does not appear available right now (" + url + ").");
                     }
                     href = int(html.lastIndexOf("href=\"",title_download));
                     last_quote = html.indexOf("\"",href + 6);
                     final_url = html.slice(href + 6,last_quote);
                     if(https_probability >= http_probability)
                     {
                        s.sound.load(new URLRequest(final_url));
                     }
                     else
                     {
                        s.sound.load(new URLRequest(final_url.split("https://").join("http://")));
                     }
                  }
                  catch(e:*)
                  {
                     SpawnLevelLogicErrorIfNeeded(e,"Song");
                  }
               };
               request = new URLRequest(url);
               variables = this.GetNewURLLoader();
               variables.addEventListener(Event.COMPLETE,completeHandler);
               try
               {
                  variables.load(request);
               }
               catch(error:Error)
               {
                  throw new Error("Unable to load URL: " + error);
               }
            }
            else
            {
               if(url.indexOf("https://www.newgrounds.com/audio/") != 0)
               {
                  throw new Error("Unknown song source");
               }
               completeHandler = function(param1:Event):void
               {
                  var html:String = null;
                  var parts:Array = null;
                  var cache_version:String = null;
                  var event:Event = param1;
                  try
                  {
                     html = event.target.data;
                     if(html != "ok")
                     {
                        throw new Error(html);
                     }
                     parts = url.split("/");
                     cache_version = "&2";
                     if(https_probability >= http_probability)
                     {
                        s.sound.load(new URLRequest("https://www.plazmaburst2.com/msong_cache.php?verify=0&resource=newgrounds&song_id=" + parts[parts.length - 1] + cache_version));
                     }
                     else
                     {
                        s.sound.load(new URLRequest("http://www.plazmaburst2.com/msong_cache.php?verify=0&resource=newgrounds&song_id=" + parts[parts.length - 1] + cache_version));
                     }
                  }
                  catch(e:*)
                  {
                     SpawnLevelLogicErrorIfNeeded(e,"Song");
                  }
               };
               parts = url.split("/");
               url_cache = "https://www.plazmaburst2.com/msong_cache.php?verify=1&resource=newgrounds&song_id=" + parts[parts.length - 1] + "&" + Math.random();
               request = new URLRequest(url_cache);
               variables = this.GetNewURLLoader();
               variables.addEventListener(Event.COMPLETE,completeHandler);
               try
               {
                  variables.load(request);
               }
               catch(error:Error)
               {
                  throw new Error("Unable to load URL: " + error);
               }
            }
         }
         this.custom_songs.push(s);
      }
      
      public function CustomSongPlay(param1:int) : void
      {
         var inter:* = undefined;
         var fade_mode:Boolean = false;
         var SongSwitch:* = undefined;
         var id:int = param1;
         SongSwitch = function():void
         {
            var i:int = 0;
            var new_ch:* = undefined;
            var that:* = undefined;
            var SongCallback:* = undefined;
            if(custom_songs.length == 0)
            {
               clearInterval(inter);
               return;
            }
            if(fade_mode)
            {
               ok = true;
               i = 0;
               while(i < custom_songs.length)
               {
                  if(custom_songs[i].volume > 0)
                  {
                     custom_songs[i].volume -= 0.02;
                     ok = false;
                  }
                  i++;
               }
               if(ok)
               {
                  fade_mode = false;
               }
            }
            else
            {
               if(id >= 0)
               {
                  custom_songs[id].volume = 1;
                  if(custom_songs[id].channel)
                  {
                     custom_songs[id].channel.stop();
                  }
                  new_ch = null;
                  if(custom_songs[id].sound.bytesTotal > 0 || custom_songs[id].sound.bytesTotal == 0 && custom_songs[id].sound.bytesLoaded > 0 && custom_songs[id].sound.bytesLoaded >= custom_songs[id].sound.bytesTotal)
                  {
                     new_ch = custom_songs[id].sound.play(0,custom_songs[id].loop ? 999 : 0);
                  }
                  else if(custom_songs[id].sound.bytesTotal == 0)
                  {
                     SpawnLevelLogicErrorIfNeeded(new Error("Song file size is 0 bytes, connection error saved to server cache instead of actual song? Or not loaded yet?"),"Song");
                  }
                  if(new_ch == null)
                  {
                     if(custom_songs[id].sound.bytesTotal != 0 || getTimer() < custom_songs[id].loadingSince + 15000)
                     {
                        return;
                     }
                  }
                  else
                  {
                     SongCallback = function(param1:Event):*
                     {
                        that.channel.removeEventListener(Event.SOUND_COMPLETE,SongCallback);
                        if(that == song_with_callback_allowed)
                        {
                           if(that.callback != -1)
                           {
                              EXEC_TRIGGER(that.callback);
                           }
                        }
                     };
                     custom_songs[id].channel = new_ch;
                     that = custom_songs[id];
                     that.channel.addEventListener(Event.SOUND_COMPLETE,SongCallback);
                  }
               }
               clearInterval(inter);
            }
            CustomSongUpdateVolumes();
         };
         this.song_with_callback_allowed = this.custom_songs[id];
         fade_mode = true;
         inter = setInterval(SongSwitch,16);
      }
      
      public function CustomSongUpdateVolumes() : void
      {
         var _loc2_:* = undefined;
         var _loc1_:int = 0;
         while(_loc1_ < this.custom_songs.length)
         {
            _loc2_ = new SoundTransform();
            _loc2_.volume = this.custom_songs[_loc1_].volume * this.CUSTOM_MUSIC_VOLUME * this.custom_songs[_loc1_].volume_scale;
            this.custom_songs[_loc1_].channel.soundTransform = _loc2_;
            _loc1_++;
         }
      }
      
      public function DropGameTimer() : void
      {
         this.MP_spectator = false;
         var _loc1_:int = 0;
         while(_loc1_ < this.custom_songs.length)
         {
            if(this.custom_songs[_loc1_])
            {
               if(this.custom_songs[_loc1_].channel)
               {
                  this.custom_songs[_loc1_].channel.stop();
               }
            }
            _loc1_++;
         }
         this.custom_songs.length = 0;
         removeEventListener(Event.ENTER_FRAME,this.onEnterFrame);
         if(this.MP_mode)
         {
            clearInterval(this.gametim);
         }
         stage.removeEventListener(MouseEvent.RIGHT_MOUSE_DOWN,this.r_down);
      }
      
      public function StartGameTimer() : void
      {
         addEventListener(Event.ENTER_FRAME,this.onEnterFrame);
         if(this.MP_mode)
         {
            this.gametim = setInterval(this.onEnterFrame_alt,this.gtwi);
            this.gtlt = getTimer();
         }
         stage.addEventListener(MouseEvent.RIGHT_MOUSE_DOWN,this.r_down);
      }
      
      public function UnlagFPS() : void
      {
         if(this.allow_unlag_fps)
         {
            this.allow_unlag_fps = false;
            removeEventListener(Event.ENTER_FRAME,this.onEnterFrame);
            stage.frameRate = stage.frameRate;
            addEventListener(Event.ENTER_FRAME,this.onEnterFrame);
         }
      }
      
      public function onEnterFrame_alt() : void
      {
         this.UnlagFPS();
         if(getTimer() > this.gtlt + 40)
         {
            if(this.MP_mode)
            {
               this.onEnterFrame(null);
            }
         }
      }
      
      public function ManageGameTimer() : void
      {
         this.gtlt = getTimer();
      }
      
      public function UpdateFramerate() : void
      {
         stage.frameRate = this.FRAMERATE == 1 ? 20 : (this.FRAMERATE == 2 ? 30 : 60);
      }
      
      public function AskForCache(param1:MovieClip) : void
      {
      }
      
      public function decode(param1:String) : String
      {
         var _loc2_:* = "";
         this.i = 0;
         while(this.i < param1.length)
         {
            if(param1.charAt(this.i) == ";")
            {
               _loc2_ += "|";
            }
            else
            {
               _loc2_ += String.fromCharCode(param1.charCodeAt(this.i) - 1);
            }
            ++this.i;
         }
         return _loc2_;
      }
      
      public function Censored(param1:String, param2:Boolean = false, param3:Boolean = false) : String
      {
         if(this.CENSORESHIP || param2)
         {
            this.ok2 = true;
            while(this.ok2)
            {
               this.ok2 = false;
               this.c_i = 0;
               while(this.c_i < this.BAD_WORDS.length)
               {
                  this.c_str = param1.toLowerCase();
                  this.c_i2 = this.c_str.indexOf(this.BAD_WORDS[this.c_i]);
                  if(this.c_i2 != -1)
                  {
                     param1 = param1.substr(0,this.c_i2) + " [ censored ] " + param1.substr(this.c_i2 + this.BAD_WORDS[this.c_i].length,param1.length - this.c_i2 - this.BAD_WORDS[this.c_i].length);
                     this.ok2 = true;
                  }
                  ++this.c_i;
               }
            }
         }
         return param1;
      }
      
      public function UpdateTeamTable() : *
      {
         if(this.MP_type == 3)
         {
            this.team_blue.visible = true;
            this.team_red.visible = true;
            this.team_blue.gotoAndStop(1);
            this.team_red.gotoAndStop(1);
            if(this.mens[this.MP_myid].team == 13)
            {
               this.team_blue.gotoAndStop(3);
            }
            else
            {
               this.team_red.gotoAndStop(3);
            }
         }
         else
         {
            this.team_blue.visible = false;
            this.team_red.visible = false;
         }
      }
      
      public function addBadge(param1:int, param2:String, param3:int) : void
      {
         this.BADGE_STAT[param1] = 0;
         this.BADGE_STAT_MAX[param1] = param3;
         this.BADGE_TITLE[param1] = param2;
         this.BADGE_REACHED[param1] = false;
      }
      
      public function incBadge(param1:int) : void
      {
         if(this.BADGES_ENABLED)
         {
            if(!this.FORCE_CUSTOM_MAP)
            {
               if(!this.BADGE_REACHED[param1])
               {
                  if(!this.MP_mode)
                  {
                     ++this.BADGE_STAT[param1];
                     if(this.BADGE_STAT[param1] >= this.BADGE_STAT_MAX[param1])
                     {
                        this.BADGE_STAT[param1] = this.BADGE_STAT_MAX[param1];
                        this.BADGE_REACHED[param1] = true;
                        this.PlaySound_full(this.s_badge_earned);
                        this.DialogSay("Achievement unlocked \'\'" + this.BADGE_TITLE[param1] + "\'\'","#00FF00");
                        this.LAST_BADGE = getTimer();
                     }
                     this.SaveGame();
                  }
               }
            }
         }
      }
      
      public function MP_s_closeHandler(param1:Event) : void
      {
         if(this.lobby_chat_enabled)
         {
            this.disableLobbyChat();
         }
         this.MP_socket.close();
         if(currentLabel == "loginform")
         {
            if(this.proxyTimeout)
            {
               this.errtxt.text = "";
               this.msgtxt.text = "RECONNECTING TO " + this.proxyServers[this.proxySelection].name;
            }
            else
            {
               ERROR = "Connection lost during connection";
               this.errtxt.text = "CONNECTION LOST DURING CONNECTION";
               this.msgtxt.text = "";
            }
         }
         if(currentLabel == "channel")
         {
            this.LAST_ERROR = "Connection lost during match browsing";
            gotoAndStop("menu");
         }
      }
      
      public function MP_s_connectHandler(param1:Event) : void
      {
         var event2:Event = param1;
         this.MP_errored_out = false;
         this.MP_socket_send("Glad to meet you! :D");
         if(currentLabel == "loginform")
         {
            this.login_login.alpha = 1;
            this.login_login.enabled = true;
            this.login_guest.alpha = 1;
            this.login_guest.enabled = true;
            this.msgtxt.text = "";
            if(this.auto_proceed)
            {
               setTimeout(function():*
               {
                  proceed();
               },1000);
            }
         }
         setTimeout(function():*
         {
            MP_socket_send("rq=player_count");
         },100);
      }
      
      public function MP_game_connectHandler(param1:Event) : void
      {
         var event2:Event = param1;
         this.MP_game_socket_send("Glad to meet you! :D");
         setTimeout(function():*
         {
            proceed_join();
         },1000);
      }
      
      public function MP_s_ioErrorHandler(param1:IOErrorEvent) : void
      {
         if(currentLabel == "loginform" && !this.proxyTimeout)
         {
            this.errtxt.text = "CONNECTION ERROR";
            this.msgtxt.text = "";
         }
      }
      
      public function MP_game_ioErrorHandler(param1:IOErrorEvent) : void
      {
         if(currentLabel == "channel")
         {
            this.MP_game_socket.close();
            this.joinmenu_mp.visible = false;
            if(this.connectTimeIntervalId)
            {
               clearInterval(this.connectTimeIntervalId);
            }
            this.errmenu_mp.visible = false;
         }
      }
      
      public function MP_socket_send(param1:String) : void
      {
         if(this.DEBUG_MODE)
         {
         }
         if(this.MP_last_received_packet != -1)
         {
            param1 += "&_pck=" + this.MP_last_received_packet;
         }
         this.MP_socket.writeUTFBytes(param1);
         this.MP_socket.flush();
      }
      
      public function MP_game_socket_send(param1:String) : void
      {
         if(this.DEBUG_MODE)
         {
         }
         if(this.MP_game_last_received_packet != -1)
         {
            param1 += "&_pck=" + this.MP_game_last_received_packet;
         }
         this.MP_game_socket.writeUTFBytes(param1);
         this.MP_game_socket.flush();
      }
      
      public function MP_s_socketDataHandler(param1:ProgressEvent) : void
      {
         var is_game_socket:Boolean = false;
         var last_slash:int = 0;
         var sign:int = 0;
         var first_tilda:int = 0;
         var second_tilda:int = 0;
         var last_tilda:int = 0;
         var replace_info:String = null;
         var parts:Array = null;
         var packet_id:int = 0;
         var key:* = undefined;
         var a:* = undefined;
         var ret:String = null;
         var xml:XML = null;
         var b:* = undefined;
         var c:* = undefined;
         var bookInfo:XML = null;
         var bookInfo2:XML = null;
         var firsttag:Boolean = false;
         var gamelist_start:Array = null;
         var region_id:int = 0;
         var newMessages:Boolean = false;
         var chatlog_length:int = 0;
         var login_color:* = undefined;
         var msg_htmltext:String = null;
         var new_lobby_chat_log:* = undefined;
         var newServers:Boolean = false;
         var server_id:int = 0;
         var server_info:Array = null;
         var a_join:Array = null;
         var event4:ProgressEvent = param1;
         try
         {
            is_game_socket = false;
            if(event4.currentTarget == this.MP_game_socket)
            {
               is_game_socket = true;
            }
            this.NetCodeError("GOT " + event4.currentTarget.bytesAvailable + " bytes");
            this.MP_SERVER_GOT_CUR = event4.currentTarget.readUTFBytes(event4.currentTarget.bytesAvailable);
            this.MP_SERVER_GOT += this.MP_SERVER_GOT_CUR;
            if(this.MP_SERVER_GOT.charAt(this.MP_SERVER_GOT.length - 1) == "@")
            {
               this.MP_SERVER_GOT = this.MP_SERVER_GOT.slice(0,-1);
               if(this.DEBUG_MODE)
               {
               }
               while(true)
               {
                  sign = int(this.MP_SERVER_GOT.lastIndexOf("~"));
                  if(sign == -1)
                  {
                     break;
                  }
                  first_tilda = int(this.MP_SERVER_GOT.indexOf("`",sign + 1));
                  if(first_tilda == -1)
                  {
                     throw new Error("Error: Message is incomplete");
                  }
                  second_tilda = int(this.MP_SERVER_GOT.indexOf("`",first_tilda + 1));
                  if(second_tilda == -1)
                  {
                     throw new Error("Error: Message is incomplete");
                  }
                  last_tilda = int(this.MP_SERVER_GOT.indexOf("`",second_tilda + 1));
                  if(last_tilda == -1)
                  {
                     throw new Error("Error: Message is incomplete");
                  }
                  replace_info = this.MP_SERVER_GOT.substring(sign + 1,last_tilda);
                  parts = replace_info.split("`");
                  if(this.received_packets[parts[0]] == undefined)
                  {
                     throw new Error("Packet " + parts[0] + " has been forgotten too early. New packet ID is: " + packet_id);
                  }
                  this.MP_SERVER_GOT = this.MP_SERVER_GOT.slice(0,sign) + this.received_packets[parts[0]].substr(parts[1],parts[2]) + this.MP_SERVER_GOT.slice(last_tilda + 1);
               }
               if(this.DEBUG_MODE)
               {
               }
               last_slash = int(this.MP_SERVER_GOT.lastIndexOf("/"));
               if(last_slash == -1)
               {
                  throw new Error("Network protocol requires slash at the end right before packet ID");
               }
               packet_id = Number(this.MP_SERVER_GOT.slice(last_slash + 1));
               if(this.DEBUG_MODE)
               {
               }
               if(!is_game_socket)
               {
                  this.MP_last_received_packet = packet_id;
               }
               else
               {
                  this.MP_game_last_received_packet = packet_id;
               }
               this.received_packets[packet_id] = this.MP_SERVER_GOT;
               this.MP_SERVER_GOT = this.MP_SERVER_GOT.substring(0,last_slash);
               this.MP_SERVER_GOT = this.MP_SERVER_GOT.split("[^\']").join("`");
               this.MP_SERVER_GOT = this.MP_SERVER_GOT.split("[^sw]").join("~");
               this.MP_SERVER_GOT = this.MP_SERVER_GOT.split("[^at]").join("@");
               for each(key in this.received_packets)
               {
                  if(Number(key) < packet_id - 4)
                  {
                     delete this.received_packets[key];
                  }
               }
               if(this.DEBUG_MODE)
               {
               }
               if(this.MP_SERVER_GOT.charAt(0) == "$")
               {
                  if((currentLabel == "channel" || currentLabel == "gaming") && !is_game_socket)
                  {
                     this.MP_SERVER_GOT = this.MP_SERVER_GOT.slice(1,this.MP_SERVER_GOT.length);
                  }
                  else
                  {
                     this.MP_SERVER_GOT = "";
                  }
               }
               if(currentLabel == "loginform")
               {
                  a = this.MP_SERVER_GOT.split("|");
                  if(a[0] == "ok")
                  {
                     this.MP_login_auto_try = false;
                     this.MP_nick = this.replace("[^I]","|",a[1]);
                     this.skin_model[2] = new int(a[2]);
                     this.skin_model[3] = new int(a[3]);
                     this.MP_clan = a[4];
                     this.MP_channel = "0";
                     this.MP_channel_name = "Match browser";
                     gotoAndStop("channel");
                  }
                  else if(a[0] == "badlogin")
                  {
                     this.errtxt.text = "LOGIN IS INCORRECT";
                     this.MP_login_auto_try = false;
                     this.login_login.alpha = 1;
                     this.login_login.enabled = true;
                     this.login_guest.alpha = 1;
                     this.login_guest.enabled = true;
                     this.MP_errored_out = true;
                     setTimeout(function():*
                     {
                        if(MP_errored_out)
                        {
                           MP_ReconnectToServer();
                        }
                     },2000);
                  }
                  else if(a[0] == "badpassword")
                  {
                     this.errtxt.text = "WRONG PASSWORD";
                     this.MP_login_auto_try = false;
                     this.login_login.alpha = 1;
                     this.login_login.enabled = true;
                     this.login_guest.alpha = 1;
                     this.login_guest.enabled = true;
                     this.MP_errored_out = true;
                     setTimeout(function():*
                     {
                        if(MP_errored_out)
                        {
                           MP_ReconnectToServer();
                        }
                     },2000);
                  }
                  else if(a[0] == "badversion")
                  {
                     this.errtxt.text = "GAME VERSION MISMATCH. RESTART GAME OR DOWNLOAD NEW GAME VERSION FROM WEBSITE";
                     this.MP_login_auto_try = false;
                  }
                  else if(a[0] == "banaccount")
                  {
                     this.errtxt.text = "YOUR ACCOUNT DISABLED FOR SOME REASON. VISIT YOUR PROFILE FOR MORE INFORMATION";
                     this.MP_login_auto_try = false;
                  }
                  else if(a[0] == "banip")
                  {
                     this.errtxt.text = "YOU HAVE NO PERMISSION FOR MULTIPLAYER MODE";
                     this.MP_login_auto_try = false;
                  }
                  else if(a[0] == "verification")
                  {
                     this.errtxt.text = "YOUR ACCOUNT IS NOT VERIFICATED VIA E-MAIL";
                     this.MP_login_auto_try = false;
                     this.login_login.alpha = 1;
                     this.login_login.enabled = true;
                     this.login_guest.alpha = 1;
                     this.login_guest.enabled = true;
                  }
                  else if(a[0] == "full")
                  {
                     this.errtxt.text = "THIS SERVER IS FULL. TRY TO CONNECT TO ANOTHER SERVER OR MAKE ANOTHER ATTEMPT LATER";
                     this.MP_login_auto_try = false;
                     this.login_login.alpha = 1;
                     this.login_login.enabled = true;
                     this.login_guest.alpha = 1;
                     this.login_guest.enabled = true;
                  }
                  else if(a[0] == "chcking")
                  {
                     this.errtxt.text = "PENDING VERIFICATION, PLEASE WAIT...";
                     setTimeout(function():*
                     {
                        if(MP_socket.connected)
                        {
                           if(Boolean(flogin) && Boolean(fpassword))
                           {
                              MP_login_auto_try = true;
                              if(!GUEST_ACCESS)
                              {
                                 MP_socket_send("l=" + flogin.text + "&p=" + fpassword.text + "&v=" + GAME_VERSION + "&h=" + mh + "&rq=login");
                              }
                              else
                              {
                                 MP_socket_send("l=.guest&p=.guest&v=" + GAME_VERSION + "&h=" + mh + "&rq=login");
                              }
                           }
                           else if(errtxt)
                           {
                              errtxt.text = "COULD NOT FIND LOGIN FORM? OK THIS SHOULD NOT HAPPEN...";
                           }
                        }
                        else
                        {
                           MP_login_auto_try = false;
                        }
                     },100);
                  }
                  else if(a[0] == "playing")
                  {
                     ret = a[1];
                     while(ret.length < 2)
                     {
                        ret = "0" + ret;
                     }
                     this.online_players = ret + " Players";
                     this.pnumbers.text = this.online_players;
                  }
                  else
                  {
                     this.errtxt.text = a[0];
                     this.MP_login_auto_try = false;
                     this.login_login.alpha = 1;
                     this.login_login.enabled = true;
                     this.login_guest.alpha = 1;
                     this.login_guest.enabled = true;
                  }
               }
               else if(currentLabel == "mp_root")
               {
                  this.list.visible = true;
                  xml = new XML("<r>" + this.MP_SERVER_GOT + "</r>");
                  for each(bookInfo in xml.children())
                  {
                     a = bookInfo.name();
                     b = new Array();
                     for each(bookInfo2 in bookInfo.attributes())
                     {
                        b["#" + bookInfo2.name()] = bookInfo2;
                     }
                     if(a == "o2")
                     {
                        if(this.ch_total == 0)
                        {
                           this.temp = this.list.ch0;
                        }
                        else
                        {
                           this.temp = this.list.addChild(new mp_room_list());
                        }
                        this.temp.y = 23 * this.ch_total;
                        this.temp.txt.text = b["#n"];
                        this.NoMouse2(this.temp.txt);
                        this.temp.gotoAndStop(1);
                        this.temp.addEventListener(MouseEvent.CLICK,this.ch_clk);
                        this.ch_links[this.ch_total] = b["#f"];
                        this.ch_names[this.ch_total] = b["#n"];
                        ++this.ch_total;
                     }
                  }
               }
               else if((currentLabel == "channel" || currentLabel == "gaming") && this.MP_SERVER_GOT.charAt(0) == "<" && !is_game_socket)
               {
                  if(currentLabel == "channel")
                  {
                     this.list2.addEventListener(MouseEvent.CLICK,this.gl_clk);
                  }
                  firsttag = true;
                  xml = new XML("<r>" + this.MP_SERVER_GOT + "</r>");
                  gamelist_start = ["s","c","j"];
                  if(gamelist_start.indexOf(this.MP_SERVER_GOT.charAt(1)) >= 0)
                  {
                     for each(bookInfo in xml.children())
                     {
                        a = bookInfo.name();
                        b = new Array();
                        for each(bookInfo2 in bookInfo.attributes())
                        {
                           b["#" + bookInfo2.name()] = bookInfo2;
                        }
                        if(a == "st")
                        {
                           this.i = 0;
                           while(this.i < this.ch_total)
                           {
                              this.temp2[this.i].visible = false;
                              ++this.i;
                           }
                           this.ch_total = 0;
                           this.list2.visible = true;
                        }
                        if(a == "o")
                        {
                           if(this.ch_total == 0)
                           {
                              this.temp = this.list2.ch0;
                           }
                           else
                           {
                              this.temp = this.list2.addChild(new mp_room_list2());
                           }
                           this.temp.removematch_pic.visible = false;
                           this.temp.removematch.visible = false;
                           this.temp.visible = true;
                           if(this.MP_clan == "1")
                           {
                              this.temp.removematch_pic.visible = true;
                              this.temp.removematch.visible = true;
                              this.temp.removematch.addEventListener(MouseEvent.MOUSE_OVER,function():*
                              {
                                 PlaySound_full(ss_info);
                              });
                           }
                           this.temp2[this.ch_total] = this.temp;
                           this.temp.y = 32 * this.ch_total;
                           this.temp.gotoAndStop(1);
                           if(b["#a"] == "2")
                           {
                              this.temp.gotoAndStop(2);
                           }
                           if(b["#emptymatch"] == "yes")
                           {
                              this.temp.gotoAndStop(7);
                           }
                           if(b["#i"] == "yes")
                           {
                              this.temp.gotoAndStop(3);
                           }
                           if(b["#e"] == "yes")
                           {
                              this.temp.gotoAndStop(4);
                           }
                           if(b["#tour"] == "yes")
                           {
                              this.temp.gotoAndStop(5);
                           }
                           if(b["#fullmatch"] == "yes")
                           {
                              this.temp.gotoAndStop(6);
                           }
                           this.temp.txt.text = this.Censored(b["#n"]);
                           this.temp.txt2.text = this.Censored(b["#t"]);
                           if(b["#p"] == "yes")
                           {
                              this.temp.txt3.text = "private";
                           }
                           else
                           {
                              this.temp.txt3.text = "public";
                           }
                           this.temp.txt4.text = this.Censored(b["#m"]);
                           this.NoMouse2(this.temp.txt);
                           this.NoMouse2(this.temp.txt2);
                           this.NoMouse2(this.temp.txt3);
                           this.NoMouse2(this.temp.txt4);
                           this.NoMouse2(this.temp.txt5);
                           this.NoMouse2(this.temp.txt6);
                           this.NoMouse2(this.temp.txt7);
                           this.NoMouse2(this.temp.txt8);
                           this.NoMouse2(this.temp.mpmode);
                           this.NoMouse2(this.temp.phymode);
                           this.NoMouse2(this.temp.servertxt);
                           this.NoMouse2(this.temp.pingtxt);
                           if(b["#a"] != null)
                           {
                              if(b["#a"] == "0")
                              {
                                 this.temp.txt5.text = "no";
                              }
                              else
                              {
                                 this.temp.txt5.text = "yes";
                              }
                           }
                           if(b["#g"] != null)
                           {
                              this.temp.txt6.text = "?";
                              if(b["#g"] == 1)
                              {
                                 this.temp.txt6.text = "DM";
                              }
                              if(b["#g"] == 2)
                              {
                                 this.temp.txt6.text = "COOP";
                              }
                              if(b["#g"] == 3)
                              {
                                 this.temp.txt6.text = "TDM";
                              }
                              if(b["#g"] == 4)
                              {
                                 this.temp.txt6.text = "1V1";
                              }
                              if(b["#g"] == 5)
                              {
                                 this.temp.txt6.text = "CTP";
                              }
                              if(b["#mods"] == "1")
                              {
                                 this.temp.txt6.text += " *guns";
                              }
                           }
                           if(b["#q"] != null)
                           {
                              this.temp.txt7.text = this.Censored(b["#q"]);
                           }
                           if(b["#s"] != null)
                           {
                              this.temp.txt8.text = this.Censored(b["#s"]);
                           }
                           if(b["#r"] != null)
                           {
                              region_id = int(parseInt(b["#r"]));
                              if(this.serversList.length > region_id)
                              {
                                 this.temp.servertxt.text = this.Censored(this.serversList[region_id][0]);
                                 this.temp.pingtxt.text = this.Censored(this.serversList[region_id][3]);
                              }
                           }
                           if(b["#c"] != null)
                           {
                              if(b["#c"] == 0)
                              {
                                 this.temp.mpmode.text = "Classic";
                              }
                              if(b["#c"] == 1)
                              {
                                 this.temp.mpmode.text = "New NetCode";
                              }
                           }
                           if(b["#phy"] != null)
                           {
                              if(b["#phy"] == 0)
                              {
                                 this.temp.phymode.text = "Classic";
                              }
                              if(b["#phy"] == 1)
                              {
                                 this.temp.phymode.text = "New Physics";
                              }
                           }
                           this.ch_links[this.ch_total] = b["#f"];
                           this.ch_names[this.ch_total] = b["#n"];
                           this.ch_app[this.ch_total] = b["#phy"];
                           this.ch_netcode[this.ch_total] = b["#c"];
                           this.ch_pass[this.ch_total] = b["#p"];
                           this.ch_map[this.ch_total] = b["#m"];
                           this.ch_regions[this.ch_total] = region_id;
                           (function():*
                           {
                              var loader:*;
                              var where_to_add:* = undefined;
                              where_to_add = temp.img_placeholder;
                              if(where_to_add.current_animator_cancel != undefined)
                              {
                                 where_to_add.current_animator_cancel();
                              }
                              while(temp.img_placeholder.numChildren > 0)
                              {
                                 temp.img_placeholder.removeChildAt(0);
                              }
                              NoMouse(where_to_add);
                              loader = new Loader();
                              loader.contentLoaderInfo.addEventListener(Event.COMPLETE,function(param1:Event):void
                              {
                                 var bitmap:* = undefined;
                                 var loc_tim:* = undefined;
                                 var img_inter:* = undefined;
                                 var event:Event = param1;
                                 bitmap = Bitmap(LoaderInfo(event.target).content);
                                 bitmap.pixelSnapping = PixelSnapping.NEVER;
                                 bitmap.smoothing = true;
                                 bitmap.scaleX = 0.25;
                                 bitmap.scaleY = 0.25;
                                 bitmap.alpha = 0.2;
                                 bitmap.y = -10;
                                 loc_tim = 0;
                                 where_to_add.current_animator_cancel = function():*
                                 {
                                    clearInterval(img_inter);
                                    where_to_add.current_animator_cancel = undefined;
                                 };
                                 img_inter = setInterval(function():*
                                 {
                                    if(currentLabel != "channel")
                                    {
                                       if(where_to_add.current_animator_cancel != undefined)
                                       {
                                          where_to_add.current_animator_cancel();
                                       }
                                       return;
                                    }
                                    if(bitmap.alpha < 0.7)
                                    {
                                       bitmap.alpha = Math.min(0.7,bitmap.alpha + 0.2);
                                    }
                                    bitmap.y = -10 + Math.sin(loc_tim) * 10;
                                    loc_tim += 0.0066;
                                 },16);
                                 where_to_add.addChild(bitmap);
                              });
                              loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR,function(param1:IOErrorEvent):*
                              {
                              });
                              if(https_probability >= http_probability)
                              {
                                 loader.load(new URLRequest("https://www.plazmaburst2.com/map_preview_by_id.php?id=" + b["#m"]));
                              }
                              else
                              {
                                 loader.load(new URLRequest("http://www.plazmaburst2.com/map_preview_by_id.php?id=" + b["#m"]));
                              }
                           })();
                           ++this.ch_total;
                        }
                        if(a == "cok")
                        {
                           chat_msg.type = TextFieldType.INPUT;
                           chat_send.enabled = true;
                        }
                        if(a == "jrm")
                        {
                           this.list2.removeEventListener(MouseEvent.CLICK,this.gl_clk);
                           this.MP_room = b["#to"];
                           removeEventListener(Event.ENTER_FRAME,this.onEnterFrame_ac2);
                           this.connect_to_region(true);
                        }
                     }
                  }
                  else if(this.MP_SERVER_GOT.charAt(1) === "m")
                  {
                     newMessages = false;
                     for each(bookInfo in xml.children())
                     {
                        b = new Array();
                        for each(bookInfo2 in bookInfo.attributes())
                        {
                           b["#" + bookInfo2.name()] = bookInfo2;
                        }
                        if(b["#b"] != undefined)
                        {
                           if(b["#b"] == "1")
                           {
                              this.lobby_chat_log = "";
                              this.lobbywindow.chatmessages.htmlText = "";
                           }
                        }
                        if(b["#t"] != null)
                        {
                           login_color = "#78DBE2";
                           if(b["#a"] == "yes")
                           {
                              login_color = "#DA0E0E";
                           }
                           msg_htmltext = "<FONT COLOR=\"" + login_color + "\">" + b["#f"] + "</FONT>" + ": " + this.unmaskChatInput(b["#t"]) + "\n";
                           this.lobby_chat_log += msg_htmltext;
                           newMessages = true;
                        }
                     }
                     this.lobbywindow.chatmessages.htmlText = this.lobby_chat_log;
                     if(newMessages && this.lobbywindow.chatmessages.numLines > 13)
                     {
                        this.lobbywindow.chatmessages.scrollV = this.lobbywindow.chatmessages.numLines;
                     }
                     chatlog_length = int(this.lobby_chat_log.split("\n").length);
                     if(chatlog_length > this.CHATLOG_SIZE)
                     {
                        new_lobby_chat_log = this.lobby_chat_log.split("\n").slice(chatlog_length - this.CHATLOG_SIZE - 1,-1).join("\n");
                        this.lobbywindow.chatmessages.htmlText = new_lobby_chat_log;
                     }
                  }
                  else if(this.MP_SERVER_GOT.charAt(1) === "o")
                  {
                     this.lobbywindow.onlinelist.htmlText = "";
                     for each(bookInfo in xml.children())
                     {
                        b = new Array();
                        for each(bookInfo2 in bookInfo.attributes())
                        {
                           b["#" + bookInfo2.name()] = bookInfo2;
                        }
                        if(b["#a"] == "yes")
                        {
                           this.lobbywindow.onlinelist.htmlText += "<FONT COLOR=\"#DA0E0E\">" + b["#l"] + "</FONT>\n";
                        }
                        else if(b["#f"] == "yes")
                        {
                           this.lobbywindow.onlinelist.htmlText += "<FONT COLOR=\"#00FF00\">" + b["#l"] + "</FONT>\n";
                        }
                        else if(b["#m"] == "yes")
                        {
                           this.lobbywindow.onlinelist.htmlText += "<FONT COLOR=\"#7B7B7B\">" + b["#l"] + "</FONT>\n";
                        }
                        else
                        {
                           this.lobbywindow.onlinelist.htmlText += "<FONT COLOR=\"#00FFFF\">" + b["#l"] + "</FONT>\n";
                        }
                     }
                  }
                  else if(this.MP_SERVER_GOT.charAt(1) === "a")
                  {
                     newServers = false;
                     for each(bookInfo in xml.children())
                     {
                        b = new Array();
                        for each(bookInfo2 in bookInfo.attributes())
                        {
                           b["#" + bookInfo2.name()] = bookInfo2;
                        }
                        server_id = int(parseInt(b["#i"]));
                        if(server_id >= 0 && server_id <= 5)
                        {
                           server_info = [b["#n"],b["#h"],parseInt(b["#p"])];
                           if(this.serversList[server_id] == undefined)
                           {
                              newServers = true;
                           }
                           else if(server_info != this.serversList[server_id].slice(0,2))
                           {
                              newServers = true;
                           }
                           if(newServers)
                           {
                              this.serversList[server_id] = server_info;
                              this.serversList[server_id][3] = "..";
                              this.ggg["servertxt" + server_id.toString()].text = b["#n"];
                              this.ggg["servertxt" + server_id.toString()].mouseEnabled = false;
                           }
                        }
                     }
                     if(newServers)
                     {
                        if(this.intervalId)
                        {
                           clearInterval(this.intervalId);
                        }
                        this.GL_Refresh();
                        this.IntervalCounter = 0;
                        this.IntervalStopCount = this.serversList.length;
                        this.ping();
                        this.intervalId = setInterval(this.ping,1000);
                     }
                  }
               }
               else if(currentLabel == "channel" && is_game_socket && this.MP_SERVER_GOT != "")
               {
                  if(!this.game_socket_passed)
                  {
                     a_join = this.MP_SERVER_GOT.split("|");
                     if(a_join[0] == "ok")
                     {
                        this.MP_login_auto_try = false;
                        this.MP_nick = this.replace("[^I]","|",a_join[1]);
                        this.skin_model[2] = new int(a_join[2]);
                        this.skin_model[3] = new int(a_join[3]);
                        this.game_socket_passed = true;
                        if(this.connectTimeIntervalId)
                        {
                           clearInterval(this.connectTimeIntervalId);
                        }
                        gotoAndStop("room");
                     }
                     else if(a_join[0] == "chcking")
                     {
                        if(this.joinmenu_mp)
                        {
                           this.joinmenu_mp.statusText.text = "PENDING VERIFICATION, PLEASE WAIT...";
                        }
                        setTimeout(function():*
                        {
                           if(MP_game_socket.connected)
                           {
                              if(!GUEST_ACCESS)
                              {
                                 MP_game_socket_send("l=" + def_login + "&p=" + def_password + "&v=" + GAME_VERSION + "&h=" + mh + "&rq=login");
                              }
                              else
                              {
                                 MP_game_socket_send("l=.guest&p=.guest&v=" + GAME_VERSION + "&h=" + mh + "&rq=login");
                              }
                           }
                        },1000);
                     }
                     else if(this.joinmenu_mp)
                     {
                        this.joinmenu_mp.statusText.text = a[0];
                     }
                  }
               }
               else if(currentLabel == "gaming")
               {
                  this.MP_get_done_STR = this.MP_SERVER_GOT;
                  this.MP_get_done_HAP = true;
               }
               else if(currentLabel == "room")
               {
                  if(this.MP_SERVER_GOT.charAt(0) == "&")
                  {
                     this.MP_get_done_pre(this.MP_SERVER_GOT);
                  }
               }
               else if(currentLabel == "menu")
               {
                  a = this.MP_SERVER_GOT.split("|");
                  if(a[0] == "playing")
                  {
                     ret = a[1];
                     while(ret.length < 2)
                     {
                        ret = "0" + ret;
                     }
                     this.online_players = ret + " Players";
                  }
               }
               this.MP_SERVER_GOT = "";
            }
         }
         catch(e:*)
         {
            NetCodeError("PROGRESS " + e);
         }
      }
      
      public function MP_s_securityErrorHandler(param1:SecurityErrorEvent) : void
      {
         var _loc2_:String = null;
         var _loc3_:Array = null;
         var _loc4_:Array = null;
         var _loc5_:String = null;
         var _loc6_:Number = NaN;
         if(currentLabel == "loginform")
         {
            this.errtxt.text = "CAN\'T REACH SELECTED SERVER. IN CASE IF THIS PROBLEM IS PERMANENT FOR YOU - PLEASE CONTACT DEVELOPER";
            this.msgtxt.text = "";
            _loc2_ = Capabilities.version;
            _loc3_ = _loc2_.split(" ");
            _loc4_ = _loc3_[1].split(",");
            _loc5_ = _loc3_[0];
            _loc6_ = Number(_loc4_[0]);
            this.myRequest = new URLRequest(this.MP_server);
            this.myVariables = new URLVariables();
            this.myVariables.rq = "noserver";
            this.myVariables.str = this.MP_SERVER_IP + ":" + this.MP_SERVER_PORT + " :: " + param1.toString() + " :: " + "Flash Player version: " + this._flash_version + " :: OS: " + _loc5_ + " :: Security.sandboxType = " + Security.sandboxType;
            this.myRequest.method = URLRequestMethod.POST;
            this.myRequest.data = this.myVariables;
            this.myLoader2noserver.load(this.myRequest);
         }
      }
      
      public function MP_game_securityErrorHandler(param1:SecurityErrorEvent) : void
      {
      }
      
      public function IgnoreGunPickTemp(param1:*) : void
      {
         var _loc2_:int = 0;
         while(_loc2_ < this.temp_ignore_gun_pick.length)
         {
            if(this.temp_ignore_gun_pick[_loc2_].mc == param1)
            {
               this.temp_ignore_gun_pick[_loc2_].timer = getTimer();
               return;
            }
            _loc2_++;
         }
         this.temp_ignore_gun_pick.push({
            "mc":param1,
            "timer":getTimer()
         });
      }
      
      public function IgnoreGunPickTempCanI(param1:*) : Boolean
      {
         var _loc2_:int = 0;
         while(_loc2_ < this.temp_ignore_gun_pick.length)
         {
            if(this.temp_ignore_gun_pick[_loc2_].mc == param1)
            {
               if(getTimer() < this.temp_ignore_gun_pick[_loc2_].timer + 1000)
               {
                  return false;
               }
               this.temp_ignore_gun_pick.splice(_loc2_,1);
               break;
            }
            _loc2_++;
         }
         return true;
      }
      
      public function ApplyLoweredHP(param1:*, param2:*, param3:*, param4:*) : void
      {
         var _loc5_:int = 0;
         while(_loc5_ < this.temp_keep_dmg_belows.length)
         {
            if(this.temp_keep_dmg_belows[_loc5_].mc == param1)
            {
               this.temp_keep_dmg_belows[_loc5_].timer = getTimer();
               this.temp_keep_dmg_belows[_loc5_].hea = Math.min(param2,this.temp_keep_dmg_belows[_loc5_].hea);
               this.temp_keep_dmg_belows[_loc5_].min_hp = Math.max(param4,this.temp_keep_dmg_belows[_loc5_].min_hp);
               if(this.temp_keep_dmg_belows[_loc5_].min_hp > param2)
               {
                  this.temp_keep_dmg_belows[_loc5_].min_hp = param2;
               }
               if(param3)
               {
                  this.temp_keep_dmg_belows[_loc5_].dying = param3;
               }
               return;
            }
            _loc5_++;
         }
         this.temp_keep_dmg_belows.push({
            "mc":param1,
            "timer":getTimer(),
            "hea":param2,
            "min_hp":param4,
            "dying":param3
         });
      }
      
      public function GetPlayerTempAffectionObj(param1:*) : Object
      {
         var _loc2_:int = 0;
         while(_loc2_ < this.temp_keep_dmg_belows.length)
         {
            if(this.temp_keep_dmg_belows[_loc2_].mc == param1)
            {
               if(getTimer() < this.temp_keep_dmg_belows[_loc2_].timer + param1.ping * 3 + this.mens[this.MP_myid].ping * 3 + 150)
               {
                  return this.temp_keep_dmg_belows[_loc2_];
               }
               this.temp_keep_dmg_belows.splice(_loc2_,1);
               break;
            }
            _loc2_++;
         }
         return null;
      }
      
      public function AdjustToPlayerAllowedHP(param1:*, param2:*) : Number
      {
         var _loc3_:Object = this.GetPlayerTempAffectionObj(param1);
         if(_loc3_ == null)
         {
            return param2;
         }
         if(param2 > _loc3_.hea)
         {
            param2 = _loc3_.hea;
         }
         if(param2 < _loc3_.min_hp)
         {
            param2 = _loc3_.min_hp;
         }
         return param2;
      }
      
      public function GetPlayerShouldBeDying(param1:*) : Boolean
      {
         var _loc2_:Object = this.GetPlayerTempAffectionObj(param1);
         if(_loc2_ == null)
         {
            return false;
         }
         return _loc2_.dying;
      }
      
      public function GetPlayerAllowLimbHPStabChange(param1:*) : Boolean
      {
         var _loc2_:Object = this.GetPlayerTempAffectionObj(param1);
         if(_loc2_ == null)
         {
            return true;
         }
         return false;
      }
      
      public function IncludeRegenInHPLimit(param1:*, param2:*) : void
      {
         var _loc3_:Object = this.GetPlayerTempAffectionObj(param1);
         if(_loc3_ == null)
         {
            return;
         }
         _loc3_.hea += param2;
      }
      
      public function AllowExtraBulletClassSync(param1:MovieClip) : Boolean
      {
         return param1.cclass == 1 || param1.cclass == 4 || param1.cclass == 5 || param1.cclass == 6 && param1.nadekind != 1 && param1.nadekind != 2 && param1.nadekind != 3;
      }
      
      public function SyncBulletApprox(param1:*) : void
      {
         if(this.MP_mode)
         {
            if(param1.master == this.MP_myid)
            {
               if(this.AllowExtraBulletClassSync(param1))
               {
                  this.MP_custom_events += ";t|" + [this.MP_myid,this.r2(param1.x),this.r2(param1.y),param1.currentFrame * (param1.visible ? 1 : -1)].join("#");
               }
            }
         }
      }
      
      public function AddItemToHero1(param1:String, param2:int) : void
      {
         var _loc3_:* = this.inventoryA.length;
         this.inventoryA[_loc3_] = new Object();
         this.inventoryA[_loc3_].mdl = param1;
         this.inventoryA[_loc3_].upg = param2;
      }
      
      public function AddItemToHero2(param1:String, param2:int) : void
      {
         var _loc3_:* = this.inventoryB.length;
         this.inventoryB[_loc3_] = new Object();
         this.inventoryB[_loc3_].mdl = param1;
         this.inventoryB[_loc3_].upg = param2;
      }
      
      public function AddItemToHero3(param1:String, param2:int) : void
      {
         var _loc3_:* = this.inventoryC.length;
         this.inventoryC[_loc3_] = new Object();
         this.inventoryC[_loc3_].mdl = param1;
         this.inventoryC[_loc3_].upg = param2;
      }
      
      public function AddItemToHero4(param1:String, param2:int) : void
      {
         var _loc3_:* = this.inventoryD.length;
         this.inventoryD[_loc3_] = new Object();
         this.inventoryD[_loc3_].mdl = param1;
         this.inventoryD[_loc3_].upg = param2;
      }
      
      public function RestoreLimbColor(param1:MovieClip) : void
      {
         param1.filters = new Array(this.clrs[0]);
      }
      
      public function UpdatePlayerColorSP(param1:MovieClip, param2:int) : void
      {
         if(!this.MP_mode)
         {
            if(param2 == 0 || param2 == 1)
            {
               if(this.skin_color_head[param2] != 0)
               {
                  param1.head.filters = new Array(this.clrs[this.skin_color_head[param2]]);
                  param1.body.filters = new Array(this.clrs[this.skin_color_body[param2]]);
               }
               else
               {
                  param1.head.filters = [];
                  param1.body.filters = [];
               }
               if(this.skin_color_arms[param2] != 0)
               {
                  param1.arm1.upper.filters = new Array(this.clrs[this.skin_color_arms[param2]]);
                  param1.arm1.lower.filters = new Array(this.clrs[this.skin_color_arms[param2]]);
                  param1.arm2.upper.filters = new Array(this.clrs[this.skin_color_arms[param2]]);
                  param1.arm2.lower.filters = new Array(this.clrs[this.skin_color_arms[param2]]);
               }
               else
               {
                  param1.arm1.upper.filters = [];
                  param1.arm1.lower.filters = [];
                  param1.arm2.upper.filters = [];
                  param1.arm2.lower.filters = [];
               }
               if(this.skin_color_legs[param2] != 0)
               {
                  param1.leg1.upper.filters = new Array(this.clrs[this.skin_color_legs[param2]]);
                  param1.leg1.middle.filters = new Array(this.clrs[this.skin_color_legs[param2]]);
                  param1.leg1.lower.filters = new Array(this.clrs[this.skin_color_legs[param2]]);
                  param1.leg2.upper.filters = new Array(this.clrs[this.skin_color_legs[param2]]);
                  param1.leg2.middle.filters = new Array(this.clrs[this.skin_color_legs[param2]]);
                  param1.leg2.lower.filters = new Array(this.clrs[this.skin_color_legs[param2]]);
                  param1.toe.filters = new Array(this.clrs[this.skin_color_legs[param2]]);
               }
               else
               {
                  param1.leg1.upper.filters = [];
                  param1.leg1.middle.filters = [];
                  param1.leg1.lower.filters = [];
                  param1.leg2.upper.filters = [];
                  param1.leg2.middle.filters = [];
                  param1.leg2.lower.filters = [];
                  param1.toe.filters = [];
               }
            }
         }
      }
      
      public function BlueHue(param1:String) : ColorMatrixFilter
      {
         var _loc3_:* = undefined;
         var _loc4_:* = undefined;
         var _loc5_:Number = NaN;
         var _loc6_:* = undefined;
         var _loc2_:ColorMatrixFilter = new ColorMatrixFilter();
         if(param1 != "-")
         {
            if(!isNaN(parseInt(param1,10)) && this.clrs[parseInt(param1,10)] != undefined)
            {
               _loc2_ = this.clrs[int(param1)];
            }
            else
            {
               _loc3_ = this.MPclr[param1][0];
               _loc4_ = this.MPclr[param1][1];
               _loc5_ = Number(this.MPclr[param1][2]);
               _loc6_ = new Array();
               _loc6_ = _loc6_.concat([_loc3_ * 0.3,_loc3_ * 0.4 + _loc4_ * 0.2,_loc3_ * 0.6 + _loc5_ * 0.2,0,0]);
               _loc6_ = _loc6_.concat([_loc4_ * 0.3 + _loc3_ * 0.2,_loc4_ * 0.4,_loc4_ * 0.6 + _loc5_ * 0.2,0,0]);
               _loc6_ = _loc6_.concat([_loc5_ * 0.3 + _loc3_ * 0.2,_loc5_ * 0.4 + _loc4_ * 0.2,_loc5_ * 0.6,0,0]);
               _loc6_ = _loc6_.concat([0,0,0,1,0]);
               _loc2_.matrix = _loc6_;
            }
         }
         return _loc2_;
      }
      
      public function UpdatePlayerColorMP(param1:MovieClip, param2:Boolean = false) : void
      {
         var _loc3_:Array = null;
         var _loc4_:Array = null;
         var _loc5_:Array = null;
         var _loc6_:Array = null;
         if(param1.palette[0] != "-")
         {
            _loc3_ = new Array(this.BlueHue(param1.palette[0]));
         }
         else
         {
            _loc3_ = [];
         }
         if(param1.palette[1] != "-")
         {
            _loc4_ = new Array(this.BlueHue(param1.palette[1]));
         }
         else
         {
            _loc4_ = [];
         }
         if(param1.palette[2] != "-")
         {
            _loc6_ = new Array(this.BlueHue(param1.palette[2]));
         }
         else
         {
            _loc6_ = [];
         }
         if(param1.palette[3] != "-")
         {
            _loc5_ = new Array(this.BlueHue(param1.palette[3]));
         }
         else
         {
            _loc5_ = [];
         }
         param1.head.filters = _loc3_;
         param1.body.filters = _loc5_;
         param1.arm1.upper.filters = _loc4_;
         param1.arm1.lower.filters = _loc4_;
         param1.arm2.upper.filters = _loc4_;
         param1.arm2.lower.filters = _loc4_;
         param1.leg1.upper.filters = _loc6_;
         param1.leg1.middle.filters = _loc6_;
         param1.leg1.lower.filters = _loc6_;
         param1.leg2.upper.filters = _loc6_;
         param1.leg2.middle.filters = _loc6_;
         param1.leg2.lower.filters = _loc6_;
         param1.toe.filters = _loc6_;
      }
      
      public function LoadGame() : void
      {
         if(this.my_so.data.plays == undefined || this.my_so.data.plays == 0 || this.my_so.data.plays == NaN)
         {
            this.FIRST_RUN = true;
            this.my_so.data.plays = 1;
            this.FIRST_TIME = true;
            this.my_so.data["skin_model" + 0] = 40;
            this.my_so.data["skin_model" + 1] = 60;
            this.my_so.data["skin_model" + 2] = 2;
            this.my_so.data["armorA"] = 0;
            this.my_so.data["armorB"] = 0;
            this.my_so.data["curA"] = 0;
            this.my_so.data["curB"] = 0;
            this.my_so.data["last_mp"] = this.loaderInfo.parameters.default_server != undefined ? int(this.loaderInfo.parameters.default_server) : 0;
            this.my_so.data["psychoblood_mode"] = 1;
            this.my_so.data["framerate"] = 3;
            this.i = 0;
            while(this.i < this.BADGES_TOTAL)
            {
               this.my_so.data["bdg" + this.i] = 0;
               ++this.i;
            }
            this.my_so.data["cmpg_nick"] = "";
            this.my_so.data["lvls_passed"] = 0;
            this.my_so.data["money"] = 200;
            this.i = 0;
            while(this.i < 3)
            {
               this.my_so.data["skin_color_head" + this.i] = 0;
               this.my_so.data["skin_color_body" + this.i] = 0;
               this.my_so.data["skin_color_arms" + this.i] = 0;
               this.my_so.data["skin_color_legs" + this.i] = 0;
               ++this.i;
            }
            this.my_so.data["inv1_len"] = 3;
            this.my_so.data["inv1_0mdl"] = "gun_pistol";
            this.my_so.data["inv1_1mdl"] = "gun_rifle";
            this.my_so.data["inv1_2mdl"] = "gun_shotgun";
            this.my_so.data["inv1_3mdl"] = "item_grenade";
            this.my_so.data["inv1_4mdl"] = "item_grenade";
            this.my_so.data["inv1_5mdl"] = "item_grenade";
            this.my_so.data["inv1_0upg"] = 0;
            this.my_so.data["inv1_1upg"] = 0;
            this.my_so.data["inv1_2upg"] = 0;
            this.my_so.data["inv1_3upg"] = 0;
            this.my_so.data["inv1_4upg"] = 0;
            this.my_so.data["inv1_5upg"] = 0;
            this.my_so.data["inv2_len"] = 1;
            this.my_so.data["inv2_0mdl"] = "gun_real_shotgun";
            this.my_so.data["inv2_0upg"] = 0;
            this.my_so.data["MP_default_set"] = 1;
            this.my_so.data["mouse_wheel"] = true;
            this.my_so.data["OVERSCROLL"] = true;
            this.my_so.data["RECONNECT_ON_LOST_CONNECTION"] = true;
            this.my_so.data["BEEP_ON_DEATH"] = true;
            this.my_so.data["HIT_SOUNDS"] = false;
            this.my_so.data["SCREEN_FADE_EFFECTS"] = true;
            this.my_so.data["SHOW_EXP_BAR"] = 1;
            this.my_so.data["MP_AUTO_LOGIN"] = false;
            this.my_so.data["super_computer"] = false;
            this.my_so.data["ragdoll_collide"] = false;
            this.my_so.data["im_a_cheater"] = false;
            this.my_so.data["lite_phys"] = false;
            this.my_so.data["auto_pick_new_weps"] = true;
            this.my_so.data["soft_screen"] = true;
            this.my_so.data["screen_effects"] = true;
            this.my_so.data["violence"] = true;
            this.my_so.data["altcur"] = true;
            this.my_so.data["ui_bg"] = false;
            this.my_so.data["censoreship"] = true;
            this.my_so.data["display_chat"] = 2;
            this.my_so.data["fx_vol"] = 0.0833;
            this.my_so.data["music_vol"] = 0.0833;
            this.my_so.data["CUSTOM_MUSIC_VOLUME"] = 0.0833;
            this.my_so.data["hq"] = true;
            this.my_so.data["easy_mode"] = false;
            this.my_so.data["pro_bots"] = false;
            this.my_so.data["LOW_HPS"] = false;
            this.my_so.data["hints"] = true;
            this.my_so.data["tooltips"] = true;
            this.my_so.data["menu_hue"] = 0;
            this.my_so.data["map_qp_sp"] = "";
            this.my_so.data["map_qp_mp"] = "";
         }
         else
         {
            ++this.my_so.data.plays;
            this.FIRST_RUN = false;
         }
         this.skin_model[0] = int(this.my_so.data["skin_model" + 0]);
         this.skin_model[1] = int(this.my_so.data["skin_model" + 1]);
         this.skin_model[2] = int(this.my_so.data["skin_model" + 2]);
         this.armorA = int(this.my_so.data["armorA"]);
         this.armorB = int(this.my_so.data["armorB"]);
         this.curA = this.my_so.data["curA"];
         this.curB = this.my_so.data["curB"];
         this.LAST_SERVER_UID = int(this.my_so.data["last_mp"]);
         this.CMPG_money = int(this.my_so.data["money"]);
         this.CMPG_name = String(this.my_so.data["cmpg_nick"]);
         this.LEVELS_PASSED = int(this.my_so.data["lvls_passed"]);
         this.i = 0;
         while(this.i < 3)
         {
            this.skin_color_head[this.i] = int(this.my_so.data["skin_color_head" + this.i]);
            this.skin_color_body[this.i] = int(this.my_so.data["skin_color_body" + this.i]);
            this.skin_color_arms[this.i] = int(this.my_so.data["skin_color_arms" + this.i]);
            this.skin_color_legs[this.i] = int(this.my_so.data["skin_color_legs" + this.i]);
            ++this.i;
         }
         this.i = 0;
         while(this.i < this.BADGES_TOTAL)
         {
            this.BADGE_STAT[this.i] = this.my_so.data["bdg" + this.i];
            if(this.BADGE_STAT[this.i] >= this.BADGE_STAT_MAX[this.i])
            {
               this.BADGE_REACHED[this.i] = true;
            }
            else
            {
               this.BADGE_REACHED[this.i] = false;
            }
            ++this.i;
         }
         this.inventoryA = new Array();
         this.inventoryB = new Array();
         this.i2 = int(this.my_so.data["inv1_len"]);
         this.i = 0;
         while(this.i < this.i2)
         {
            this.AddItemToHero1(this.my_so.data["inv1_" + this.i + "mdl"],int(this.my_so.data["inv1_" + this.i + "upg"]));
            ++this.i;
         }
         this.i2 = int(this.my_so.data["inv2_len"]);
         this.i = 0;
         while(this.i < this.i2)
         {
            this.AddItemToHero2(this.my_so.data["inv2_" + this.i + "mdl"],int(this.my_so.data["inv2_" + this.i + "upg"]));
            ++this.i;
         }
         this.SUPER_COMPUTER = Boolean(this.my_so.data["super_computer"]);
         this.RAGDOLL_COLLIDE = Boolean(this.my_so.data["ragdoll_collide"]);
         this.IM_A_CHEATER = this.my_so.data["im_a_cheater"];
         this.LITE_PHYS = Boolean(this.my_so.data["lite_phys"]);
         this.AUTO_PICK_NEW_WEPS = Boolean(this.my_so.data["auto_pick_new_weps"]);
         this.SOFT_SCREEN = Boolean(this.my_so.data["soft_screen"]);
         this.SCREEN_EFFECTS = Boolean(this.my_so.data["screen_effects"]);
         this.VIOLENCE = Boolean(this.my_so.data["violence"]);
         this.ALTCUR = Boolean(this.my_so.data["altcur"]);
         this.ui_bg = Boolean(this.my_so.data["ui_bg"]);
         this.CENSORESHIP = Boolean(this.my_so.data["censoreship"]);
         if(this.my_so.data["display_chat"] == undefined)
         {
            this.DISPLAY_CHAT = 2;
         }
         else if(this.my_so.data["display_chat"] is Boolean)
         {
            this.DISPLAY_CHAT = this.my_so.data["display_chat"] ? 2 : 1;
         }
         else
         {
            this.DISPLAY_CHAT = int(this.my_so.data["display_chat"]);
         }
         if(this.my_so.data["psychoblood_mode"] == undefined)
         {
            this.PSYCHOBLOOD_MODE = 2;
         }
         else
         {
            this.PSYCHOBLOOD_MODE = int(this.my_so.data["psychoblood_mode"]);
         }
         if(this.my_so.data["framerate"] == undefined)
         {
            this.FRAMERATE = 3;
         }
         else
         {
            this.FRAMERATE = int(this.my_so.data["framerate"]);
         }
         this.UpdateFramerate();
         this.FX_VOLUME = Number(this.my_so.data["fx_vol"]);
         this.MUSIC_VOLUME = Number(this.my_so.data["music_vol"]);
         this.CUSTOM_MUSIC_VOLUME = Number(this.my_so.data["CUSTOM_MUSIC_VOLUME"]);
         this.HQ = Boolean(this.my_so.data["hq"]);
         this.MQ = Boolean(this.my_so.data["mq"]);
         this.EASY_MODE = Boolean(this.my_so.data["easy_mode"]);
         this.LOW_HPS = Boolean(this.my_so.data["LOW_HPS"]);
         this.PRO_BOTS = Boolean(this.my_so.data["pro_bots"]);
         HINTS = Boolean(this.my_so.data["hints"]);
         TOOLTIPS = Boolean(this.my_so.data["tooltips"]);
         if(this.my_so.data["mouse_wheel"] == undefined)
         {
            this.MOUSE_WHEEL = true;
         }
         else
         {
            this.MOUSE_WHEEL = Boolean(this.my_so.data["mouse_wheel"]);
         }
         if(this.my_so.data["OVERSCROLL"] == undefined)
         {
            this.OVERSCROLL = true;
         }
         else
         {
            this.OVERSCROLL = Boolean(this.my_so.data["OVERSCROLL"]);
         }
         if(this.my_so.data["RECONNECT_ON_LOST_CONNECTION"] == undefined)
         {
            this.RECONNECT_ON_LOST_CONNECTION = true;
         }
         else
         {
            this.RECONNECT_ON_LOST_CONNECTION = Boolean(this.my_so.data["RECONNECT_ON_LOST_CONNECTION"]);
         }
         if(this.my_so.data["BEEP_ON_DEATH"] == undefined)
         {
            this.BEEP_ON_DEATH = true;
         }
         else
         {
            this.BEEP_ON_DEATH = Boolean(this.my_so.data["BEEP_ON_DEATH"]);
         }
         if(this.my_so.data["HIT_SOUNDS"] == undefined)
         {
            this.HIT_SOUNDS = false;
         }
         else
         {
            this.HIT_SOUNDS = Boolean(this.my_so.data["HIT_SOUNDS"]);
         }
         if(this.my_so.data["SCREEN_FADE_EFFECTS"] == undefined)
         {
            this.SCREEN_FADE_EFFECTS = true;
         }
         else
         {
            this.SCREEN_FADE_EFFECTS = Boolean(this.my_so.data["SCREEN_FADE_EFFECTS"]);
         }
         if(this.my_so.data["SHOW_EXP_BAR"] == undefined)
         {
            this.SHOW_EXP_BAR = 1;
         }
         else
         {
            this.SHOW_EXP_BAR = int(this.my_so.data["SHOW_EXP_BAR"]);
         }
         if(this.my_so.data["MP_AUTO_LOGIN"] == undefined)
         {
            this.MP_AUTO_LOGIN = false;
         }
         else
         {
            this.MP_AUTO_LOGIN = Boolean(this.my_so.data["MP_AUTO_LOGIN"]);
         }
         if(this.my_so.data["MP_default_set"] == undefined)
         {
            this.MP_default_set = 1;
         }
         else
         {
            this.MP_default_set = int(this.my_so.data["MP_default_set"]);
         }
         if(this.my_so.data["menu_hue"] == undefined)
         {
            this.menu_hue = 0;
         }
         else
         {
            this.menu_hue = Number(this.my_so.data["menu_hue"]);
         }
         if(this.my_so.data["map_qp_sp"] != undefined)
         {
            this.map_qp_sp = this.my_so.data["map_qp_sp"];
         }
         if(this.my_so.data["map_qp_mp"] != undefined)
         {
            this.map_qp_mp = this.my_so.data["map_qp_mp"];
         }
         if(this.my_so.data["title_qp_mp"] != undefined)
         {
            this.title_qp_mp = this.my_so.data["title_qp_mp"];
         }
         if(this.my_so.data["ui_type"] == undefined)
         {
            this.ui_type = 0;
         }
         else
         {
            this.ui_type = int(this.my_so.data["ui_type"]);
         }
         if(this.my_so.data["fps_counter"] == undefined)
         {
            this.fps_counter = 0;
         }
         else
         {
            this.fps_counter = int(this.my_so.data["fps_counter"]);
         }
         if(this.my_so.data["kd_counter"] == undefined)
         {
            this.kd_counter = 0;
         }
         else
         {
            this.kd_counter = int(this.my_so.data["kd_counter"]);
         }
         if(this.my_so.data["proxy_selected"] == undefined)
         {
            this.proxySelection = 0;
         }
         else
         {
            this.proxySelection = int(this.my_so.data["proxy_selected"]);
         }
         if(this.my_so.data["mq"] == undefined)
         {
            this.MQ = 0;
         }
         else
         {
            this.MQ = int(this.my_so.data["mq"]);
         }
         if(this.my_so.data["forced_cursor"] == undefined)
         {
            this.forced_cursor = false;
         }
         else
         {
            this.forced_cursor = Boolean(this.my_so.data["forced_cursor"]);
         }
         if(this.my_so.data["cursor_selected"] == undefined)
         {
            this.cursor_selected = 0;
         }
         else
         {
            this.cursor_selected = int(this.my_so.data["cursor_selected"]);
         }
         if(this.my_so.data["cursor_static"] == undefined)
         {
            this.cursor_static = false;
         }
         else
         {
            this.cursor_static = Boolean(this.my_so.data["cursor_static"]);
         }
      }
      
      public function nicknameproceed() : void
      {
         if(this.mdialog.nickname.text == "")
         {
            this.mdialog.nickname.text = "Type Your Name Here";
         }
         else if(this.mdialog.nickname.text == "Type Your Name Here")
         {
            this.mdialog.nickname.text = "Type Your Name Here!";
         }
         else if(this.mdialog.nickname.text == "Type Your Name Here!")
         {
            this.mdialog.nickname.text = "Type Your Name Here!!";
         }
         else if(this.mdialog.nickname.text == "Type Your Name Here!!")
         {
            this.mdialog.nickname.text = "Type Your Name Here!!!";
         }
         else if(this.mdialog.nickname.text == "Type Your Name Here!!!")
         {
            this.i4 = Math.floor(Math.random() * 9.9);
            if(this.i4 == 0)
            {
               this.mdialog.nickname.text = "Shas\'O Kais";
            }
            if(this.i4 == 1)
            {
               this.mdialog.nickname.text = "O\'Shovah";
            }
            if(this.i4 == 2)
            {
               this.mdialog.nickname.text = "Warper";
            }
            if(this.i4 == 3)
            {
               this.mdialog.nickname.text = "The Chosen Twice";
            }
            if(this.i4 == 4)
            {
               this.mdialog.nickname.text = "Teddy Bear";
            }
            if(this.i4 == 5)
            {
               this.mdialog.nickname.text = "Super Butterfly";
            }
            if(this.i4 == 6)
            {
               this.mdialog.nickname.text = "Obi-1";
            }
            if(this.i4 == 7)
            {
               this.mdialog.nickname.text = "Tux";
            }
            if(this.i4 == 8)
            {
               this.mdialog.nickname.text = "Tootsie Poopsie";
            }
            if(this.i4 == 9)
            {
               this.mdialog.nickname.text = "Thomas Sorenson";
            }
         }
         else
         {
            if(this.FIRST_RUN)
            {
               this.MP_nick = this.mdialog.nickname.text;
            }
            if(this.CMPG_name != this.mdialog.nickname.text)
            {
               this.CMPG_name = this.mdialog.nickname.text;
               this.SaveGame();
            }
            this.mdialog.visible = false;
            removeChild(this.intro_base);
            removeChild(this.mdialog);
            removeChild(this.intro_vers);
            removeChild(this.intro_btcb);
            gotoAndStop("ads");
            if(this.MP_AUTO_LOGIN)
            {
               this.intro_done();
            }
         }
      }
      
      public function SaveGame() : void
      {
         this.my_so.data["skin_model" + 0] = this.skin_model[0];
         this.my_so.data["skin_model" + 1] = this.skin_model[1];
         this.my_so.data["skin_model" + 2] = this.skin_model[2];
         this.my_so.data["armorA"] = this.armorA;
         this.my_so.data["armorB"] = this.armorB;
         this.my_so.data["curA"] = this.curA;
         this.my_so.data["curB"] = this.curB;
         this.my_so.data["money"] = this.CMPG_money;
         this.my_so.data["cmpg_nick"] = this.CMPG_name;
         this.my_so.data["lvls_passed"] = this.LEVELS_PASSED;
         this.my_so.data["last_mp"] = this.LAST_SERVER_UID;
         this.my_so.data["psychoblood_mode"] = this.PSYCHOBLOOD_MODE;
         this.my_so.data["framerate"] = this.FRAMERATE;
         this.save_i = 0;
         while(this.i < this.save_i)
         {
            this.my_so.data["skin_color_head" + this.save_i] = this.skin_color_head[this.save_i];
            this.my_so.data["skin_color_body" + this.save_i] = this.skin_color_body[this.save_i];
            this.my_so.data["skin_color_arms" + this.save_i] = this.skin_color_arms[this.save_i];
            this.my_so.data["skin_color_legs" + this.save_i] = this.skin_color_legs[this.save_i];
            ++this.i;
         }
         this.save_i = 0;
         while(this.save_i < this.BADGES_TOTAL)
         {
            this.my_so.data["bdg" + this.save_i] = this.BADGE_STAT[this.save_i];
            ++this.save_i;
         }
         this.my_so.data["inv1_len"] = this.inventoryA.length;
         this.save_i = 0;
         while(this.save_i < this.inventoryA.length)
         {
            this.my_so.data["inv1_" + this.save_i + "mdl"] = this.inventoryA[this.save_i].mdl;
            this.my_so.data["inv1_" + this.save_i + "upg"] = this.inventoryA[this.save_i].upg;
            ++this.save_i;
         }
         this.my_so.data["inv2_len"] = this.inventoryB.length;
         this.save_i = 0;
         while(this.save_i < this.inventoryB.length)
         {
            this.my_so.data["inv2_" + this.save_i + "mdl"] = this.inventoryB[this.save_i].mdl;
            this.my_so.data["inv2_" + this.save_i + "upg"] = this.inventoryB[this.save_i].upg;
            ++this.save_i;
         }
         this.my_so.data["super_computer"] = this.SUPER_COMPUTER;
         this.my_so.data["ragdoll_collide"] = this.RAGDOLL_COLLIDE;
         this.my_so.data["im_a_cheater"] = this.IM_A_CHEATER;
         this.my_so.data["lite_phys"] = this.LITE_PHYS;
         this.my_so.data["auto_pick_new_weps"] = this.AUTO_PICK_NEW_WEPS;
         this.my_so.data["soft_screen"] = this.SOFT_SCREEN;
         this.my_so.data["screen_effects"] = this.SCREEN_EFFECTS;
         this.my_so.data["violence"] = this.VIOLENCE;
         this.my_so.data["altcur"] = this.ALTCUR;
         this.my_so.data["censoreship"] = this.CENSORESHIP;
         this.my_so.data["display_chat"] = this.DISPLAY_CHAT;
         this.my_so.data["fx_vol"] = this.FX_VOLUME;
         this.my_so.data["music_vol"] = this.MUSIC_VOLUME;
         this.my_so.data["CUSTOM_MUSIC_VOLUME"] = this.CUSTOM_MUSIC_VOLUME;
         this.my_so.data["hq"] = this.HQ;
         this.my_so.data["mq"] = this.MQ;
         this.my_so.data["mouse_wheel"] = this.MOUSE_WHEEL;
         this.my_so.data["OVERSCROLL"] = this.OVERSCROLL;
         this.my_so.data["RECONNECT_ON_LOST_CONNECTION"] = this.RECONNECT_ON_LOST_CONNECTION;
         this.my_so.data["BEEP_ON_DEATH"] = this.BEEP_ON_DEATH;
         this.my_so.data["HIT_SOUNDS"] = this.HIT_SOUNDS;
         this.my_so.data["SCREEN_FADE_EFFECTS"] = this.SCREEN_FADE_EFFECTS;
         this.my_so.data["SHOW_EXP_BAR"] = this.SHOW_EXP_BAR;
         this.my_so.data["MP_AUTO_LOGIN"] = this.MP_AUTO_LOGIN;
         this.my_so.data["easy_mode"] = this.EASY_MODE;
         this.my_so.data["LOW_HPS"] = this.LOW_HPS;
         this.my_so.data["pro_bots"] = this.PRO_BOTS;
         this.my_so.data["hints"] = HINTS;
         this.my_so.data["tooltips"] = TOOLTIPS;
         this.my_so.data["MP_default_set"] = this.MP_default_set;
         this.my_so.data["menu_hue"] = this.menu_hue;
         this.my_so.data["map_qp_sp"] = this.map_qp_sp;
         this.my_so.data["map_qp_mp"] = this.map_qp_mp;
         this.my_so.data["title_qp_mp"] = this.title_qp_mp;
         this.my_so.data["ui_type"] = this.ui_type;
         this.my_so.data["fps_counter"] = this.fps_counter;
         this.my_so.data["kd_counter"] = this.kd_counter;
         this.my_so.data["proxy_selected"] = this.proxySelection;
         this.my_so.data["ui_bg"] = this.ui_bg;
         this.my_so.data["forced_cursor"] = this.forced_cursor;
         this.my_so.data["cursor_selected"] = this.cursor_selected;
         this.my_so.data["cursor_static"] = this.cursor_static;
         try
         {
            this.my_so.flush();
         }
         catch(e:Error)
         {
            LAST_ERROR = "Warning: Save data might be not available without account (Flash Player and/or web browser issue).";
         }
         this.NetworkSave();
      }
      
      public function ShowNoAch() : void
      {
         if(!this.FORCE_CUSTOM_MAP)
         {
            this.ChatNewMsg("<font color=\"#a16d4b\">WARNING: Achievements Unavailable Since Cheats Commands Used</font>");
         }
      }
      
      public function replace(param1:String, param2:String, param3:String) : String
      {
         if(param3 != null && param3 != "")
         {
            return param3.split(param1).join(param2);
         }
         return "";
      }
      
      public function Dist3Dm(param1:Number, param2:Number, param3:Number) : Number
      {
         return Math.sqrt(param1 * param1 + param2 * param2 + param3 * param3);
      }
      
      public function PlaySound(param1:*, param2:Number, param3:Number, param4:MovieClip = null) : void
      {
         var attached_mc2:MovieClip = null;
         var callb:* = undefined;
         var src:* = param1;
         var x:Number = param2;
         var y:Number = param3;
         var attached_mc:MovieClip = param4;
         if(this.NONMUTE)
         {
            if(this.game.visible)
            {
               if(this.s_channel[this.last_channel] != null)
               {
                  this.s_channel[this.last_channel].stop();
               }
               this.smod = this.dist_to_face / this.Dist3Dm(x * this.game_scale + this.game.x - 400 - 300,y * this.game_scale + this.game.y - 200,this.dist_to_face);
               this.smod2 = this.dist_to_face / this.Dist3Dm(x * this.game_scale + this.game.x - 400 + 300,y * this.game_scale + this.game.y - 200,this.dist_to_face);
               this.vol3d[this.last_channel].volume = this.vol.volume;
               if(src.custom_volume == undefined)
               {
                  src.custom_volume = 1;
               }
               else
               {
                  this.vol3d[this.last_channel].volume *= src.custom_volume;
               }
               this.vol3d[this.last_channel].leftToLeft = this.smod2;
               this.vol3d[this.last_channel].leftToRight = 0;
               this.vol3d[this.last_channel].rightToRight = this.smod;
               this.vol3d[this.last_channel].rightToLeft = 0;
               this.s_channel[this.last_channel] = src.play(0,0,this.vol3d[this.last_channel]);
               if(attached_mc != null)
               {
                  callb = function():void
                  {
                     attached_mc.attached_sound.removeEventListener(Event.SOUND_COMPLETE,callb);
                     attached_mc2.attached_sound = null;
                  };
                  attached_mc2 = attached_mc;
                  if(attached_mc.attached_sound != undefined && attached_mc.attached_sound != null)
                  {
                     attached_mc.attached_sound.removeEventListener(Event.SOUND_COMPLETE,callb);
                     attached_mc.attached_sound.stop();
                  }
                  attached_mc.attached_sound = this.s_channel[this.last_channel];
                  attached_mc.attached_sound.addEventListener(Event.SOUND_COMPLETE,callb);
               }
               ++this.last_channel;
               if(this.last_channel >= this.max_channels)
               {
                  this.last_channel = 0;
               }
            }
         }
      }
      
      public function PlaySound_full(param1:*) : void
      {
         if(this.NONMUTE)
         {
            if(currentFrameLabel != "gaming" || this.game.visible)
            {
               if(this.s_channel[this.last_channel] != null)
               {
                  this.s_channel[this.last_channel].stop();
               }
               this.vol3d[this.last_channel].volume = this.vol.volume;
               if(param1.custom_volume == undefined)
               {
                  param1.custom_volume = 1;
               }
               else
               {
                  this.vol3d[this.last_channel].volume *= param1.custom_volume;
               }
               this.vol3d[this.last_channel].leftToLeft = 1;
               this.vol3d[this.last_channel].leftToRight = 0;
               this.vol3d[this.last_channel].rightToRight = 1;
               this.vol3d[this.last_channel].rightToLeft = 0;
               this.s_channel[this.last_channel] = param1.play(0,0,this.vol3d[this.last_channel]);
               ++this.last_channel;
               if(this.last_channel >= this.max_channels)
               {
                  this.last_channel = 0;
               }
            }
         }
      }
      
      public function StopAllSounds() : void
      {
         this.last_channel = 0;
         while(this.last_channel < this.max_channels)
         {
            if(this.s_channel[this.last_channel] != null)
            {
               this.s_channel[this.last_channel].stop();
            }
            ++this.last_channel;
         }
         this.last_channel = 0;
      }
      
      public function NoMouse(param1:MovieClip) : void
      {
         param1.mouseEnabled = false;
         param1.mouseChildren = false;
      }
      
      public function NoMouse2(param1:*) : void
      {
         param1.mouseEnabled = false;
      }
      
      public function mouseMoveHandler(param1:MouseEvent) : void
      {
         this.momove = true;
      }
      
      public function lib(param1:String, param2:Number = 1) : Sound
      {
         var _loc3_:Class = getDefinitionByName(param1) as Class;
         var _loc4_:Sound = new _loc3_();
         _loc4_.custom_volume = param2;
         return _loc4_;
      }
      
      public function LibSoundStringArray(param1:Number, param2:Array) : Array
      {
         var _loc3_:int = 0;
         while(_loc3_ < param2.length)
         {
            param2[_loc3_] = this.lib(param2[_loc3_],param1);
            _loc3_++;
         }
         return param2;
      }
      
      public function DamageReport(param1:Number) : void
      {
         if(this.HIT_SOUNDS)
         {
            this.hit_frame_damage += param1;
         }
      }
      
      public function FragReport(param1:Boolean, param2:*) : void
      {
         if(!param1)
         {
            if(!(this.MP_giveguns && this.MP_mode && Boolean(param2.isplayer)))
            {
               if(!param2.isplayer)
               {
                  this.ExpTask(this.EXP_TYPE_KILL_ENEMY_NON_PLAYER,param2.nick);
               }
            }
         }
         if(this.HIT_SOUNDS)
         {
            if(this.hit_frags.indexOf(param2) == -1)
            {
               this.hit_frags.push(param2);
            }
         }
      }
      
      public function DamageSoundLogic(param1:Number) : void
      {
         var GSPEED:Number = param1;
         if(this.HIT_SOUNDS)
         {
            hit_last_target = null;
            if(this.hit_frags_timer > 0)
            {
               this.hit_frags_timer -= GSPEED;
            }
            else if(this.hit_frags.length > 0)
            {
               this.hit_frags.shift();
               this.hit_frags_timer = 15;
               setTimeout(function():void
               {
                  PlaySound_full(s_hit_frag);
               },500);
            }
            if(this.hit_frame_damage > 0)
            {
               if(this.hit_frame_damage >= 100)
               {
                  this.PlaySound_full(this.s_hit_dmg3);
               }
               else if(this.hit_frame_damage >= 50)
               {
                  this.PlaySound_full(this.s_hit_dmg2);
               }
               else
               {
                  this.PlaySound_full(this.s_hit_dmg);
               }
               this.hit_frame_damage = 0;
            }
         }
      }
      
      public function SetAtomOriginalPosition(param1:int, param2:Number, param3:Number) : void
      {
         this.atom_first_position_corrections.push({
            "a":param1,
            "x":param2,
            "y":param3
         });
      }
      
      public function GetAtomOriginalPosition(param1:int) : Object
      {
         var _loc3_:Object = null;
         var _loc2_:int = 0;
         while(_loc2_ < this.atom_first_position_corrections.length)
         {
            if(this.atom_first_position_corrections[_loc2_].a == param1)
            {
               _loc3_ = this.atom_first_position_corrections[_loc2_];
               this.atom_first_position_corrections.splice(_loc2_,1);
               return _loc3_;
            }
            _loc2_++;
         }
         return null;
      }
      
      public function handleHpBeep(param1:*) : void
      {
         try
         {
            this.hpbeepch.removeEventListener(Event.SOUND_COMPLETE,this.handleHpBeep);
            if(currentLabel == "gaming")
            {
               if(this.system_non_stop)
               {
                  if(this.hpwarning)
                  {
                     if(!this.mens[this.MP_myid].dead)
                     {
                        if(this.mens[this.MP_myid].hea / this.mens[this.MP_myid].hmax < this.hp_warn_max)
                        {
                           if(!this.MP_spectator)
                           {
                              if(this.GLOBAL_REGEN_SPEED != 0)
                              {
                                 if(this.GLOBAL_REGEN_DELAY < 10)
                                 {
                                    this.hpbeepch = this.s_hp_warn.play(0,0,this.vol);
                                 }
                              }
                           }
                           this.hpbeepch.addEventListener(Event.SOUND_COMPLETE,this.handleHpBeep);
                        }
                        else
                        {
                           this.hpwarning = false;
                        }
                     }
                  }
               }
            }
         }
         catch(e:Error)
         {
         }
      }
      
      public function UpdateWeps() : void
      {
         this.upd_weps_i = 0;
         while(this.upd_weps_i < 10)
         {
            this.weps["gi" + this.upd_weps_i].visible = false;
            this.upd_weps_i2 = 0;
            while(this.upd_weps_i2 < this.gunstotal && !this.weps["gi" + this.upd_weps_i].visible)
            {
               if(this.guns[this.upd_weps_i2].io)
               {
                  if(this.guns[this.upd_weps_i2].picken_by == this.MP_myid && !this.guns[this.upd_weps_i2].forcars)
                  {
                     if(this.guns[this.upd_weps_i2].wep == this.upd_weps_i)
                     {
                        this.weps["gi" + this.upd_weps_i].visible = true;
                        if(this.mens[this.MP_myid].curwea == this.upd_weps_i2)
                        {
                           this.weps["gi" + this.upd_weps_i].alpha = 1;
                           if(this.weps["gi" + this.upd_weps_i].currentFrame != 1)
                           {
                              this.weps["gi" + this.upd_weps_i].gotoAndStop(1);
                           }
                        }
                        else
                        {
                           this.weps["gi" + this.upd_weps_i].alpha = 0.4;
                        }
                     }
                  }
               }
               ++this.upd_weps_i2;
            }
            if(this.upd_weps_i == 0)
            {
               this.weps["gi" + this.upd_weps_i].visible = true;
               if(this.mens[this.MP_myid].curwea == -1)
               {
                  this.weps["gi" + this.upd_weps_i].alpha = 1;
                  if(this.weps["gi" + this.upd_weps_i].currentFrame != 1)
                  {
                     this.weps["gi" + this.upd_weps_i].gotoAndStop(1);
                  }
               }
               else
               {
                  this.weps["gi" + this.upd_weps_i].alpha = 0.4;
               }
            }
            if(this.weps["gi" + this.upd_weps_i].visible)
            {
               this.weps["gi" + this.upd_weps_i].txt.text = this.upd_weps_i;
            }
            if(this.weps["gi" + this.upd_weps_i].currentFrame == 2)
            {
               this.weps["gi" + this.upd_weps_i].alpha = 0.7;
            }
            ++this.upd_weps_i;
         }
         this.upd_weps_i = 0;
         if(this.PLAZMA_GAME)
         {
            if(!this.MP_mode)
            {
               this.upd_weps_i = 0;
               while(this.upd_weps_i < 6)
               {
                  this.weps["te" + this.upd_weps_i].visible = false;
                  this.weps["sh" + this.upd_weps_i].visible = false;
                  ++this.upd_weps_i;
               }
               this.upd_weps_i = 0;
               this.upd_weps_i2 = 0;
               while(this.upd_weps_i2 < this.gunstotal)
               {
                  if(this.guns[this.upd_weps_i2].io)
                  {
                     if(this.guns[this.upd_weps_i2].model == "item_grenade")
                     {
                        if(this.guns[this.upd_weps_i2].picken_by == this.MP_myid && !this.guns[this.upd_weps_i2].forcars)
                        {
                           if(this.upd_weps_i < 6)
                           {
                              this.weps["gr" + this.upd_weps_i].gotoAndStop(1);
                              ++this.upd_weps_i;
                           }
                        }
                     }
                  }
                  ++this.upd_weps_i2;
               }
               this.grenades_total = this.upd_weps_i;
            }
            else
            {
               while(this.upd_weps_i < 6 && this.upd_weps_i < this.grenades_total)
               {
                  this.weps["gr" + this.upd_weps_i].gotoAndStop(1);
                  ++this.upd_weps_i;
               }
               if(!this.MP_spectator)
               {
                  if(this.grenades_total > this.mxnds1 || this.grenades_port_total > this.mxnds2 || this.grenades_sh_total > this.mxnds3)
                  {
                     if(!this.firstframe)
                     {
                        this.stable = false;
                        this.unstable = 5;
                        this.unstable_m = this.CUR_SERVER_NAME + "." + this.MP_room_name + "." + this.MP_map_name + " :: " + this.grenades_total + ">" + this.mxnds1 + " || " + this.grenades_port_total + ">" + this.mxnds2 + " || " + this.grenades_sh_total + ">" + this.mxnds3;
                     }
                  }
                  if(this.MP_app)
                  {
                     if(this.mens[this.MP_myid].hea > 700 + Math.random() * 50)
                     {
                        this.stable = false;
                        this.unstable = 6;
                        this.unstable_m = this.CUR_SERVER_NAME + "." + this.MP_room_name + "." + this.MP_map_name + " :: " + this.mens[this.MP_myid].hea + "hp" + " :: " + this.mens[this.MP_myid].hmax + "hmax";
                     }
                     if(this.mens[this.MP_myid].hea > this.mens[this.MP_myid].hmax)
                     {
                        this.mens[this.MP_myid].hea = this.mens[this.MP_myid].hmax;
                     }
                  }
               }
            }
            this.upd_weps_i;
            while(this.upd_weps_i < 6)
            {
               this.weps["gr" + this.upd_weps_i].gotoAndStop(2);
               ++this.upd_weps_i;
            }
            if(this.MP_mode)
            {
               this.upd_weps_i = 0;
               while(this.upd_weps_i < 6 && this.upd_weps_i < this.grenades_port_total)
               {
                  this.weps["te" + this.upd_weps_i].gotoAndStop(1);
                  ++this.upd_weps_i;
               }
               this.upd_weps_i;
               while(this.upd_weps_i < 6)
               {
                  this.weps["te" + this.upd_weps_i].gotoAndStop(2);
                  ++this.upd_weps_i;
               }
               this.upd_weps_i = 0;
               while(this.upd_weps_i < 6 && this.upd_weps_i < this.grenades_sh_total)
               {
                  this.weps["sh" + this.upd_weps_i].gotoAndStop(1);
                  ++this.upd_weps_i;
               }
               this.upd_weps_i;
               while(this.upd_weps_i < 6)
               {
                  this.weps["sh" + this.upd_weps_i].gotoAndStop(2);
                  ++this.upd_weps_i;
               }
            }
         }
         else
         {
            this.upd_weps_i = 0;
            while(this.upd_weps_i < 6)
            {
               this.weps["gr" + this.upd_weps_i].visible = false;
               this.weps["te" + this.upd_weps_i].visible = false;
               this.weps["sh" + this.upd_weps_i].visible = false;
               ++this.upd_weps_i;
            }
         }
         if(this.vehhp.visible)
         {
            this.weps.y = 41;
         }
         else
         {
            this.weps.y = 21;
         }
      }
      
      public function ExplodeShield(param1:int) : void
      {
         this.PlaySound(this.s_shnade_offline,this.shnades[param1].x,this.shnades[param1].y);
         this.Effect(this.shnades[param1].x,this.shnades[param1].y,6,0,0);
         var _loc2_:Number = 0;
         while(_loc2_ < Math.PI * 2)
         {
            this.Effect(this.shnades[param1].x + Math.sin(_loc2_) * Math.random() * 5,this.shnades[param1].y + Math.sin(_loc2_) * Math.random() * 5,8,Math.sin(_loc2_) * Math.random() * 15,Math.cos(_loc2_) * Math.random() * 15);
            _loc2_ += 0.25;
         }
      }
      
      public function CalcWepPriority(param1:MovieClip) : Number
      {
         this.cwp = 0;
         if(param1.picken_by != -1)
         {
            this.cwp_d = this.Dist2D(this.mens[param1.picken_by].x,this.mens[param1.picken_by].y,this.mens[param1.picken_by].tarx,this.mens[param1.picken_by].tary);
         }
         this.cwp += param1.stat_power * param1.stat_count / param1.totalFrames * 100;
         this.cwp += param1.stat_power * param1.stat_count * 6;
         this.cwp /= 2;
         this.cwp -= (param1.stat_averange + param1.av) * (param1.totalFrames / param1.stat_count);
         if(param1.stat_class == 2)
         {
            this.cwp *= 1.1;
         }
         if(param1.stat_class == 1)
         {
            this.cwp *= 1.7;
         }
         if(param1.stat_class == 5)
         {
            this.cwp *= 1.8;
         }
         if(param1.stat_class == 4)
         {
            this.cwp *= 0.9;
         }
         if(param1.stat_class == 6)
         {
            this.cwp *= 1;
         }
         if(param1.stat_class == 7)
         {
            this.cwp = 0;
         }
         if(param1.currentFrame < param1.totalFrames - 10 && !param1.ready)
         {
            this.cwp *= 0.1;
         }
         if(param1.picken_by != -1)
         {
            if(this.mens[param1.picken_by].hunt == -1)
            {
               if(!param1.ready)
               {
                  this.cwp += 100;
               }
            }
            if(this.cwp_d < 130)
            {
               if(param1.stat_class == 1 || param1.stat_class == 5 || param1.stat_class == 4)
               {
                  this.cwp *= 0.4;
               }
            }
            if(80 / (param1.stat_averange + param1.av) > this.cwp_d || param1.stat_averange + param1.av == 0)
            {
               this.cwp *= 1.5;
            }
            if(90 / (param1.stat_averange + param1.av) > this.cwp_d || param1.stat_averange + param1.av == 0)
            {
               this.cwp *= 1.5;
            }
         }
         return this.cwp;
      }
      
      public function HealGunApplied(param1:int, param2:MovieClip, param3:*, param4:Boolean = false, param5:String = "gun_defibrillator") : void
      {
         if(param4 < 0)
         {
            param4 = Boolean(0);
         }
         if(isNaN(param4))
         {
            param4 = Boolean(1);
         }
         if(this.MP_mode)
         {
            if(param2.idd == this.MP_myid)
            {
               if(param1 != this.MP_myid)
               {
                  if(this.mens[param1].isplayer)
                  {
                     if(this.mens[param1].hea <= 0)
                     {
                        if(this.mens[param1].team == param2.team)
                        {
                           this.ExpTrackMyHealing(this.mens[param1]);
                        }
                     }
                  }
               }
            }
         }
         if(!this.MP_mode || param1 == this.MP_myid || !this.mens[param1].isplayer)
         {
            if(this.mens[param1].team == param2.team)
            {
               if(this.mens[param1].hea <= 0 || this.mens[param1].dying && this.mens[param1].hea > 0)
               {
                  if(!this.mens[param1].dead || !this.MP_app || this.mens[param1].defih < 7 || Math.random() * (this.mens[param1].defih - 7) < 0.1)
                  {
                     if(this.mens[param1].dead)
                     {
                        if(this.MP_mode)
                        {
                           this.mens[param1].defih += 1;
                        }
                        this.mens[param1].effects.length = 0;
                     }
                     if(!this.mens[param1].brk_head)
                     {
                        if(!this.mens[param1].brk_body)
                        {
                           if(this.mens[param1].brk_legs)
                           {
                              if(this.mens[param1].hea < 5)
                              {
                                 this.mens[param1].hea = 10;
                              }
                              else
                              {
                                 this.mens[param1].hea = Math.min(this.mens[param1].hea + 15,this.mens[param1].hmax / 2);
                              }
                              if(this.mens[param1].hea > 0)
                              {
                                 this.mens[param1].dead = false;
                                 this.MakeDying(this.mens[param1]);
                                 this.ChangedGun(param1);
                              }
                           }
                           else if(this.mens[param1].brk_arms)
                           {
                              if(this.mens[param1].hea < 5)
                              {
                                 this.mens[param1].hea = 10;
                              }
                              else
                              {
                                 this.mens[param1].hea = Math.min(this.mens[param1].hea + 15,this.mens[param1].hmax / 2);
                              }
                              if(this.mens[param1].hea > 0)
                              {
                                 this.mens[param1].dead = false;
                                 this.MakeDying(this.mens[param1]);
                                 this.ChangedGun(param1);
                              }
                           }
                           else
                           {
                              this.mc2 = this.mens[param1];
                              if(this.mc2.dead)
                              {
                                 this.mc2.stability = 0.01;
                                 this.mc2.sit = 1;
                                 this.mc2.tox = this.atox[this.mc2.b_toe];
                                 this.mc2.toy = this.atoy[this.mc2.b_toe];
                              }
                              if(this.mens[param1].hea < 5)
                              {
                                 this.mens[param1].hea = 10;
                              }
                              else
                              {
                                 this.mens[param1].hea = Math.max(Math.min(this.mens[param1].hea + 15,this.mens[param1].hmax / 2),this.mens[param1].hea);
                              }
                              if(this.mens[param1].hea > 0)
                              {
                                 this.mens[param1].dead = false;
                                 this.mens[param1].dying = false;
                                 this.ChangedGun(param1);
                              }
                           }
                        }
                     }
                     if(Boolean(this.mens[param1].isplayer) || this.mens[param1].team == this.mens[this.MP_myid].team)
                     {
                        if(this.mens[param1].hea > 0)
                        {
                           if(this.ANONYMOUS_MODE)
                           {
                              if(param1 == this.MP_myid)
                              {
                                 this.mens[param1].gui.alpha = 1;
                                 this.mens[param1].gui.visible = true;
                              }
                           }
                           else
                           {
                              this.mens[param1].gui.alpha = 1;
                              this.mens[param1].gui.visible = true;
                           }
                           this.mens[param1].hunt = -1;
                        }
                     }
                  }
                  this.atoy[this.mens[param1].b_body] -= 8;
                  this.atoy[this.mens[param1].b_body] -= 4;
                  this.WakeUpAtom(this.mens[param1].b_body);
               }
            }
            else if(!this.mens[param1].dead)
            {
               this.mens[param1].hea -= 30;
               this.Hurt(param1);
               if(this.mens[param1].hea < 200)
               {
                  this.MakeDying(this.mens[param1]);
               }
               this.mens[param1].lastshot = "body";
               this.mens[param1].lastshotby = param2.idd;
               this.mens[param1].whenlastshot = getTimer();
               this.mens[param1].lastshotbygun = param5;
            }
         }
         if(this.MP_favor_the_shooter)
         {
            if(!this.MP_allow_client_side_kills)
            {
               if(!this.mens[param1].dead)
               {
                  this.mens[param1].hea = Math.max(10,this.mens[param1].hea);
               }
            }
            this.ApplyLoweredHP(this.mens[param1],this.mens[param1].hea,this.mens[param1].dying,this.mens[param1].hea);
         }
      }
      
      public function min_max(param1:Number, param2:Number, param3:Number) : Number
      {
         if(param2 < param1)
         {
            return param1;
         }
         if(param2 > param3)
         {
            return param3;
         }
         return param2;
      }
      
      public function zero_one(param1:Number) : Number
      {
         if(param1 > 1)
         {
            return 1;
         }
         if(param1 < 0)
         {
            return 0;
         }
         return param1;
      }
      
      public function difr(param1:Number, param2:Number, param3:Number) : Boolean
      {
         if(param1 > param2)
         {
            if(param1 - param2 < param3)
            {
               return true;
            }
         }
         if(param2 > param1)
         {
            if(param2 - param1 < param3)
            {
               return true;
            }
         }
         return false;
      }
      
      public function Math_abs(param1:Number) : Number
      {
         if(param1 < 0)
         {
            return -param1;
         }
         return param1;
      }
      
      public function Math_pow2(param1:Number) : Number
      {
         return param1 * param1;
      }
      
      public function get_fps() : void
      {
         this.fps_last = this.fps_now;
         this.fps_now = getTimer();
         this.fps_delta = this.fps_now - this.fps_last;
         this.GSPEED = (this.fps_delta / (1000 / this.MP_fps) + this.GSPEED * 3) / 4;
         this.GSPEED2 = (this.fps_delta / (1000 / this.MP_fps) + this.GSPEED2 * 3) / 4;
         this.WSPEED = (this.fps_delta / (1000 / 30) + this.WSPEED * 3) / 4;
         if(this.timeshift > 0 && this.ALLOW_TIMESHIFT)
         {
            this.GSPEED *= 0.25;
            this.GSPEED2 *= 0.5;
         }
         if(this.MP_mode || this.SP_unlimit_framerate)
         {
            if(this.GET_LITE_PHYS())
            {
               if(this.GSPEED > 4)
               {
                  this.GSPEED = 4;
               }
               if(this.GSPEED2 > 2)
               {
                  this.GSPEED2 = 2;
               }
            }
            else
            {
               if(this.GSPEED > 4)
               {
                  this.GSPEED = 4;
               }
               if(this.GSPEED2 > 2)
               {
                  this.GSPEED2 = 2;
               }
            }
         }
         else
         {
            if(this.GSPEED > 1.5)
            {
               this.GSPEED = 1.5;
            }
            if(this.GSPEED2 > 1.5)
            {
               this.GSPEED2 = 1.5;
            }
         }
         if(this.GSPEED < 0.01)
         {
            this.GSPEED = 0.01;
         }
         if(this.GSPEED2 < 0.01)
         {
            this.GSPEED2 = 0.01;
         }
         if(this.INLAG && this.MP_mode)
         {
            this.GSPEED2 *= 0.01;
         }
      }
      
      public function ForceRasterize(param1:Sprite) : void
      {
         var _loc2_:Rectangle = null;
         var _loc3_:BitmapData = null;
         var _loc4_:Matrix = null;
         var _loc5_:Bitmap = null;
         _loc2_ = param1.getBounds(param1);
         if(_loc2_.width > 1 && _loc2_.height > 1 && _loc2_.width < 8191 && _loc2_.height < 8191 && _loc2_.width * _loc2_.height < 16777215)
         {
            _loc3_ = new BitmapData(_loc2_.width,_loc2_.height,true,0);
            _loc4_ = new Matrix();
            _loc4_.translate(-_loc2_.x,-_loc2_.y);
            _loc3_.draw(param1,_loc4_);
            while(param1.numChildren > 0)
            {
               param1.removeChildAt(0);
            }
            param1.graphics.clear();
            _loc5_ = new Bitmap(_loc3_);
            _loc5_.x = _loc2_.x;
            _loc5_.y = _loc2_.y;
            param1.addChild(_loc5_);
            _loc5_.smoothing = this.HQ;
            param1.cacheAsBitmap = true;
         }
      }
      
      public function link_surface(param1:DisplayObject, param2:int) : void
      {
         this.i7 = this.surf_lnk.length;
         this.surf_lnk[this.i7] = param1;
         this.surf_lnk_to[this.i7] = param2;
      }
      
      public function VerticalTrace(param1:Number, param2:Number) : Boolean
      {
         this.vtr_i2 = 0;
         while(this.vtr_i2 < this.boxestotal)
         {
            if(param1 >= this.boxx[this.vtr_i2])
            {
               if(param1 <= this.boxx[this.vtr_i2] + this.boxw[this.vtr_i2])
               {
                  if(param2 >= this.boxy[this.vtr_i2])
                  {
                     return false;
                  }
               }
            }
            ++this.vtr_i2;
         }
         this.vtr_i2 = 0;
         while(this.vtr_i2 < this.doorstotal)
         {
            if(param1 >= this.doors[this.vtr_i2].x)
            {
               if(param1 <= this.doors[this.vtr_i2].x + this.doors[this.vtr_i2].w)
               {
                  if(param2 >= this.doors[this.vtr_i2].y)
                  {
                     return false;
                  }
               }
            }
            ++this.vtr_i2;
         }
         this.vtr_i2 = 0;
         while(this.vtr_i2 < this.watertotal)
         {
            if(param1 >= this.wax[this.vtr_i2])
            {
               if(param1 <= this.wax[this.vtr_i2] + this.waw[this.vtr_i2])
               {
                  if(param2 >= this.way[this.vtr_i2])
                  {
                     if(this.wa_friction[this.vtr_i2])
                     {
                        return false;
                     }
                  }
               }
            }
            ++this.vtr_i2;
         }
         return true;
      }
      
      public function WaterTrace(param1:Number, param2:Number) : Boolean
      {
         this.i2 = 0;
         while(this.i2 < this.watertotal)
         {
            if(param1 >= this.wax[this.i2])
            {
               if(param1 <= this.wax[this.i2] + this.waw[this.i2])
               {
                  if(param2 >= this.way[this.i2])
                  {
                     if(param2 <= this.way[this.i2] + this.wah[this.i2])
                     {
                        if(this.wa_friction[this.i2])
                        {
                           return true;
                        }
                     }
                  }
               }
            }
            ++this.i2;
         }
         return false;
      }
      
      public function GenFlakes() : void
      {
         var _loc1_:Number = NaN;
         var _loc2_:Number = NaN;
         var _loc3_:Number = NaN;
         if(this.flakes_letitsnow && this.HQ && this.SUPER_COMPUTER)
         {
            this.flakes_total = 300;
            this.flakes = new Vector.<DisplayObject>(this.flakes_total,true);
            this.i = 0;
            while(this.i < this.flakes_total)
            {
               _loc1_ = Math.random() * 200 - 70;
               if(_loc1_ < 0)
               {
                  this.flakes[this.i] = this.graphics_3d_front.addChild(new flake());
               }
               else
               {
                  this.flakes[this.i] = this.graphics_3d.addChildAt(new flake(),0);
               }
               this.flakes[this.i]._x = Math.random() * (this.screenX + this.flakes_spreadout * 2) - this.game.x - this.flakes_spreadout;
               this.flakes[this.i]._y = Math.random() * (this.screenY + this.flakes_spreadout * 2) - this.game.y - this.flakes_spreadout;
               this.flakes[this.i]._z = _loc1_;
               _loc2_ = Math.random() * Math.PI * 2;
               _loc3_ = Math.random() * 30 - 10;
               this.flakes[this.i].origin.x = Math.sin(_loc2_) * _loc3_;
               this.flakes[this.i].origin.y = Math.cos(_loc2_) * _loc3_;
               this.flakes[this.i].origin.rotation = Math.random() * 360;
               this.flakes[this.i].rotation = Math.random() * 360;
               this.flakes[this.i].s_alpha = this.flakes[this.i].alpha = (1 - (130 - _loc1_) * 0.002) * 0.6;
               this.flakes[this.i].hit = !this.VerticalTrace(this.flakes[this.i]._x,this.flakes[this.i]._y);
               this.flakes[this.i].neverhit = false;
               if(_loc1_ > 100)
               {
                  this.flakes[this.i].neverhit = true;
                  this.flakes[this.i].hit = false;
                  this.flakes[this.i].alpha = this.flakes[this.i].s_alpha;
                  this.flakes[this.i].visible = true;
               }
               if(this.flakes[this.i].hit)
               {
                  this.flakes[this.i].alpha = 0;
                  this.flakes[this.i].visible = false;
               }
               else
               {
                  this.flakes[this.i].alpha = this.flakes[this.i].s_alpha;
                  this.flakes[this.i].visible = true;
               }
               this.flakes[this.i].tox = this.flakes[this.i].toy = this.gravity;
               this.flakes[this.i]._scale = Math.random() * 0.4 + 0.2;
               this.flakes[this.i]._z *= 0.002;
               this.NoMouse(this.flakes[this.i]);
               ++this.i;
            }
         }
         else
         {
            this.flakes_total = 0;
         }
      }
      
      public function ThinkOfFlakes() : void
      {
         this.i = 0;
         while(this.i < this.flakes_total)
         {
            if(this.flakes[this.i]._x > this.screenX - this.game.x + this.flakes_spreadout)
            {
               this.flakes[this.i]._x -= this.screenX + this.flakes_spreadout * 2;
               this.flakes[this.i]._y = Math.random() * (this.screenY + this.flakes_spreadout * 2) - this.game.y - this.flakes_spreadout;
               if(!this.VerticalTrace(this.flakes[this.i]._x,this.flakes[this.i]._y))
               {
                  this.flakes[this.i].hit = true;
               }
               else
               {
                  this.flakes[this.i].hit = false;
                  this.flakes[this.i].alpha = this.flakes[this.i].s_alpha;
                  this.flakes[this.i].visible = true;
               }
            }
            if(this.flakes[this.i]._x < -this.game.x - this.flakes_spreadout)
            {
               this.flakes[this.i]._x += this.screenX + this.flakes_spreadout * 2;
               this.flakes[this.i]._y = Math.random() * (this.screenY + this.flakes_spreadout * 2) - this.game.y - this.flakes_spreadout;
               if(!this.VerticalTrace(this.flakes[this.i]._x,this.flakes[this.i]._y))
               {
                  this.flakes[this.i].hit = true;
               }
               else
               {
                  this.flakes[this.i].hit = false;
                  this.flakes[this.i].alpha = this.flakes[this.i].s_alpha;
                  this.flakes[this.i].visible = true;
               }
            }
            if(this.flakes[this.i]._y > this.screenY - this.game.y + this.flakes_spreadout)
            {
               this.flakes[this.i]._y -= this.screenY + this.flakes_spreadout * 2;
               this.flakes[this.i].rotation = Math.random() * 360;
               this.flakes[this.i]._x = Math.random() * (this.screenX + this.flakes_spreadout * 2) - this.game.x - this.flakes_spreadout;
               if(!this.VerticalTrace(this.flakes[this.i]._x,this.flakes[this.i]._y))
               {
                  this.flakes[this.i].hit = true;
               }
               else
               {
                  this.flakes[this.i].hit = false;
                  this.flakes[this.i].alpha = this.flakes[this.i].s_alpha;
                  this.flakes[this.i].visible = true;
               }
            }
            if(this.flakes[this.i]._y < -this.game.y - this.flakes_spreadout)
            {
               this.flakes[this.i]._y += this.screenY + this.flakes_spreadout * 2;
               this.flakes[this.i]._x = Math.random() * (this.screenX + this.flakes_spreadout * 2) - this.game.x - this.flakes_spreadout;
               if(!this.VerticalTrace(this.flakes[this.i]._x,this.flakes[this.i]._y))
               {
                  this.flakes[this.i].hit = true;
               }
               else
               {
                  this.flakes[this.i].hit = false;
                  this.flakes[this.i].alpha = this.flakes[this.i].s_alpha;
                  this.flakes[this.i].visible = true;
               }
            }
            this.flakes[this.i]._x += this.flakes[this.i].tox * this.GSPEED;
            this.flakes[this.i]._y += this.flakes[this.i].toy * this.GSPEED;
            this.flakes[this.i].x = this.flakes[this.i]._x - (this.flakes[this.i]._x - this.hscreenX + this.game.x) * this.flakes[this.i]._z;
            this.flakes[this.i].y = this.flakes[this.i]._y - (this.flakes[this.i]._y - this.hscreenY + this.game.y) * this.flakes[this.i]._z;
            this.flakes[this.i].scaleX = this.flakes[this.i].scaleY = this.flakes[this.i]._scale * (1 - this.flakes[this.i]._z);
            this.flakes[this.i].toy += this.gravity * 0.5 * this.GSPEED;
            this.flakes[this.i].tox *= Math.pow(0.8,this.GSPEED);
            this.flakes[this.i].toy *= Math.pow(0.8,this.GSPEED);
            this.flakes[this.i].rotation += Math.sin((this.flakes[this.i]._y + this.flakes[this.i]._x + this.flakes[this.i].rotation * 0.1) * 0.1 * Math.sin((this.flakes[this.i]._y * 0.1 + this.flakes[this.i]._x) * 0.001)) * 3 * this.GSPEED;
            if(!this.flakes[this.i].neverhit)
            {
               if(this.flakes[this.i].visible)
               {
                  if(this.flakes[this.i].hit)
                  {
                     if(this.flakes[this.i].alpha > 0)
                     {
                        this.flakes[this.i].alpha -= Math.max(0.01,0.05 * this.GSPEED);
                     }
                     else
                     {
                        this.flakes[this.i].visible = false;
                     }
                  }
                  else if(!this.TracePointNoRagdolls(this.flakes[this.i]._x,this.flakes[this.i]._y) || this.WaterTrace(this.flakes[this.i]._x,this.flakes[this.i]._y))
                  {
                     this.flakes[this.i].hit = true;
                  }
               }
            }
            ++this.i;
         }
      }
      
      public function Effect(param1:Number, param2:Number, param3:int, param4:Number, param5:Number) : void
      {
         this.ok2 = false;
         if(param1 > -this.game.x / this.game_scale - 150 && param1 < -this.game.x / this.game_scale + this.screenX / this.game_scale + 150 && param2 > -this.game.y / this.game_scale - 150 && param2 < -this.game.y / this.game_scale + this.screenY / this.game_scale + 150)
         {
            this.ok2 = true;
         }
         if(this.ok2)
         {
            if(this.ef[this.nextef] != null)
            {
               if(this.game.contains(this.ef[this.nextef]))
               {
                  this.game.removeChild(this.ef[this.nextef]);
                  this.ef[this.nextef] = null;
               }
               else if(this.graphics_3d_front.contains(this.ef[this.nextef]))
               {
                  this.graphics_3d_front.removeChild(this.ef[this.nextef]);
                  this.ef[this.nextef] = null;
               }
            }
         }
         if(param3 == 0)
         {
            if(this.ok2)
            {
               this.ef[this.nextef] = this.game.addChild(new eff_blood());
               this.NoMouse(this.ef[this.nextef]);
               this.ef[this.nextef].typ = 1;
               this.ef[this.nextef].float_frame = int(Math.random() * 10);
               this.ef[this.nextef].rotation = Math.random() * 360;
               if(this.effcolor >= 0)
               {
                  this.ef[this.nextef].transform.colorTransform = new ColorTransform(this.mens[this.effcolor].blood_red,this.mens[this.effcolor].blood_green,this.mens[this.effcolor].blood_blue,1,0,0,0,0);
               }
               else
               {
                  this.ef[this.nextef].transform.colorTransform = new ColorTransform(1.5,2,0,1,0,0,0,0);
               }
               if(!this.PLAZMA_GAME)
               {
                  this.ef[this.nextef].scaleX = 0.5;
                  this.ef[this.nextef].scaleY = 0.5;
               }
               this.ef[this.nextef].gotoAndStop(1);
               this.ef[this.nextef].framespeed = 0.7;
            }
         }
         else if(param3 == 1)
         {
            if(this.ok2)
            {
               this.ef[this.nextef] = this.graphics_3d_front.addChild(new eff_iskra());
               this.NoMouse(this.ef[this.nextef]);
               this.ef[this.nextef].typ = 0;
               this.ef[this.nextef].rotation = Math.random() * 360;
               param4 *= 1.25;
               this.ef[this.nextef].scaleX = this.ef[this.nextef].scaleY = Math.max(1,Math.min(param4,2));
               if(param4 < 1)
               {
                  this.ef[this.nextef].alpha = Math.max(0.5,param4);
               }
            }
            this.PAlert(param1,param2);
            this.PlaySound(this.s_fail_shot,param1,param2);
         }
         else if(param3 == 2)
         {
            if(this.ok2)
            {
               this.ef[this.nextef] = this.game.addChild(new eff_bubble());
               this.NoMouse(this.ef[this.nextef]);
               this.ef[this.nextef].typ = 2;
               param1 += -10 + Math.random() * 20;
               param2 += -10 + Math.random() * 20;
            }
         }
         else if(param3 == 3)
         {
            if(this.ok2)
            {
               this.ef[this.nextef] = this.game.addChild(new eff_splash());
               this.NoMouse(this.ef[this.nextef]);
               this.ef[this.nextef].typ = 0;
               if(this.Math_abs(param5) < 5)
               {
                  this.ef[this.nextef].rotation = -20 + Math.random() * 40;
               }
               if(Math.random() > 0.5)
               {
                  this.ef[this.nextef].scaleX = -1;
               }
               this.ef[this.nextef].scaleY = 1 + this.Math_abs(param5) * Math.random() * 0.1;
            }
            if(Math.random() < 0.333)
            {
               this.PlaySound(this.s_water_splash1,param1,param2);
            }
            else if(Math.random() < 0.5)
            {
               this.PlaySound(this.s_water_splash2,param1,param2);
            }
            else
            {
               this.PlaySound(this.s_water_splash3,param1,param2);
            }
         }
         else if(param3 == 4)
         {
            if(this.ok2)
            {
               this.ef[this.nextef] = this.graphics_3d_front.addChild(new explosion_fire());
               this.NoMouse(this.ef[this.nextef]);
               this.ef[this.nextef].typ = 0;
               this.ef[this.nextef].scaleX = param4;
               this.ef[this.nextef].scaleY = param4;
               this.ef[this.nextef].rotation = Math.random() * 360;
               this.ef[this.nextef].framespeed = 2;
            }
         }
         else if(param3 == 5)
         {
            if(this.ok2)
            {
               this.ef[this.nextef] = this.graphics_3d_front.addChild(new rail());
               this.NoMouse(this.ef[this.nextef]);
               this.ef[this.nextef].typ = 0;
               this.ef[this.nextef].rotation = param4;
               param4 = 0;
            }
         }
         else if(param3 == 6)
         {
            if(this.ok2)
            {
               this.ef[this.nextef] = this.graphics_3d_front.addChild(new rail_target());
               this.NoMouse(this.ef[this.nextef]);
               this.ef[this.nextef].typ = 0;
            }
         }
         else if(param3 == 7)
         {
            if(this.ok2)
            {
               this.ef[this.nextef] = this.graphics_3d_front.addChild(new eff_firespark());
               this.NoMouse(this.ef[this.nextef]);
               this.ef[this.nextef].typ = 3;
            }
         }
         else if(param3 == 8)
         {
            if(this.ok2)
            {
               this.ef[this.nextef] = this.graphics_3d_front.addChild(new eff_metal());
               this.NoMouse(this.ef[this.nextef]);
               this.ef[this.nextef].typ = 4;
               this.ef[this.nextef].rotation = Math.random() * 360;
               this.ef[this.nextef].gotoAndPlay(1);
            }
         }
         else if(param3 != 9)
         {
            if(param3 == 10)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.game.addChild(new eff_blood_sprite());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 5;
                  this.ef[this.nextef].rotation = Math.random() * 360;
                  this.ef[this.nextef].gotoAndStop(1);
                  this.ef[this.nextef].float_frame = 1;
                  this.ef[this.nextef].framespeed = 0.7;
                  if(this.effcolor >= 0)
                  {
                     this.ef[this.nextef].transform.colorTransform = new ColorTransform(this.mens[this.effcolor].blood_red,this.mens[this.effcolor].blood_green,this.mens[this.effcolor].blood_blue,1,0,0,0,0);
                  }
                  else
                  {
                     this.ef[this.nextef].transform.colorTransform = new ColorTransform(1.5,2,0,1,0,0,0,0);
                  }
                  if(!this.PLAZMA_GAME)
                  {
                     this.ef[this.nextef].scaleX = 0.5;
                     this.ef[this.nextef].scaleY = 0.5;
                  }
               }
            }
            else if(param3 == 11)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.graphics_3d_front.addChild(new explosion_bfg());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 0;
                  this.ef[this.nextef].scaleX = param4;
                  this.ef[this.nextef].scaleY = param4;
                  this.ef[this.nextef].rotation = Math.random() * 360;
                  this.ef[this.nextef].framespeed = 2;
               }
            }
            else if(param3 == 12)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.game.addChild(new eff_wood_debris());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 1;
                  this.ef[this.nextef].gotoAndPlay(1);
                  this.ef[this.nextef].picc.gotoAndStop(int(Math.random() * 2.99) + 1);
                  this.ef[this.nextef].rotation = Math.random() * 360;
                  param4 *= 16;
                  param5 *= 16;
               }
            }
            else if(param3 == 13)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.graphics_3d_front.addChild(new eff_cinetic());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 0;
                  this.ef[this.nextef].rotation = Math.random() * 360;
               }
            }
            else if(param3 == 14)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.graphics_3d_front.addChild(new eff_teleport());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 0;
               }
               if(param4 == 0)
               {
                  this.PlaySound(this.s_teleport,param1,param2);
               }
            }
            else if(param3 == 15)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.graphics_3d_front.addChild(new explosion_underwater());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 0;
                  this.ef[this.nextef].scaleX = param4;
                  this.ef[this.nextef].scaleY = param4;
               }
            }
            else if(param3 == 16)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.graphics_3d_front.addChild(new explosion_plasma());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 0;
                  this.ef[this.nextef].scaleX = param4;
                  this.ef[this.nextef].scaleY = param4;
                  this.ef[this.nextef].rotation = Math.random() * 360;
                  this.ef[this.nextef].framespeed = 2;
               }
            }
            else if(param3 == 17)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.graphics_3d_front.addChild(new rail2());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 0;
                  this.ef[this.nextef].rotation = param4;
                  param4 = 0;
               }
            }
            else if(param3 == 18)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.graphics_3d_front.addChild(new explosion_plasma_bar());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 0;
                  this.ef[this.nextef].scaleX = param4;
                  this.ef[this.nextef].scaleY = param4;
                  this.ef[this.nextef].rotation = Math.random() * 360;
                  this.ef[this.nextef].framespeed = 2;
               }
            }
            else if(param3 == 19)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.graphics_3d_front.addChild(new altblood());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].scaleY = this.ef[this.nextef].scaleX = Math.sqrt(param4 * param4 + param5 * param5) * 0.05;
                  this.ef[this.nextef].typ = 0;
               }
            }
            else if(param3 == 20)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.game.addChild(new eff_text_message());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 6;
                  this.ef[this.nextef].msgtext.text = this.str;
                  if(this.chat_bubble[1] != -1)
                  {
                     this.ef[this.nextef].msgtext.text = this.chat_bubble[0];
                  }
                  this.xx = this.ef[this.nextef].msgtext.textWidth + 10;
                  this.ef[this.nextef].msgtext.x = -this.xx / 2;
                  this.ef[this.nextef].msgtext.width = this.xx;
                  this.ef[this.nextef].strquad.x = this.ef[this.nextef].msgtext.x;
                  this.ef[this.nextef].strquad.scaleX = this.xx / 100;
                  this.ef[this.nextef].attached = this.spawn_text_for;
                  if(this.chat_bubble[1] != -1)
                  {
                     this.ef[this.nextef].attached = this.chat_bubble[1];
                  }
                  if(this.chat_bubble[1] != -1)
                  {
                     if(this.mens[this.chat_bubble[1]].dead)
                     {
                        this.ef[this.nextef].msgtext.alpha = 0.5;
                     }
                  }
                  if(this.chat_bubble[1] == -1)
                  {
                     if(this.mens[this.spawn_text_for].dead)
                     {
                        this.ef[this.nextef].msgtext.alpha = 0.5;
                     }
                  }
                  this.chat_bubble = [-1,-1];
               }
            }
            else if(param3 == 21)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.graphics_3d_front.addChild(new rail3());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 0;
                  this.ef[this.nextef].rotation = param4;
                  param4 = 0;
               }
            }
            else if(param3 == 22)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.graphics_3d_front.addChild(new rail4());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 0;
                  this.ef[this.nextef].rotation = param4;
                  param4 = 0;
               }
            }
            else if(param3 == 23)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.graphics_3d_front.addChild(new rail5());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 0;
                  this.ef[this.nextef].rotation = param4;
                  param4 = 0;
               }
            }
            else if(param3 == 24)
            {
               if(this.ok2)
               {
                  this.ef[this.nextef] = this.graphics_3d_front.addChild(new rail6());
                  this.NoMouse(this.ef[this.nextef]);
                  this.ef[this.nextef].typ = 0;
                  this.ef[this.nextef].rotation = param4;
                  param4 = 0;
               }
            }
         }
         if(this.ok2)
         {
            this.ef[this.nextef].life = 0;
            this.ef[this.nextef].x = param1;
            this.ef[this.nextef].y = param2;
            if(this.ef[this.nextef].typ == 3)
            {
               this.ef[this.nextef].tox = param4;
               this.ef[this.nextef].toy = param5;
               this.ef[this.nextef].toang = 0;
            }
            else if(this.ef[this.nextef].typ == 1)
            {
               this.eftemp = Math.random() * 0.45 - 0.125;
               this.ef_xx = Math.random() * Math.PI * 2;
               this.ef_yy = Math.random() * 1.5;
               this.ef[this.nextef].tox = param4 * this.eftemp + Math.sin(this.ef_xx) * this.ef_yy;
               this.ef[this.nextef].toy = param5 * this.eftemp + Math.cos(this.ef_xx) * this.ef_yy - 0.5;
               if(Math.random() > 0.9)
               {
                  this.ef_xx = Math.random() * Math.PI * 2;
                  this.ef_yy = Math.random() * 4;
                  this.ef[this.nextef].tox += Math.sin(this.ef_xx) * this.ef_yy;
                  this.ef[this.nextef].toy += Math.cos(this.ef_xx) * this.ef_yy - 0.5;
               }
               this.ef[this.nextef].toang = Math.random() * 30 - 15;
            }
            else if(this.ef[this.nextef].typ == 4)
            {
               this.ef_xx = Math.random() * Math.PI * 2;
               this.ef_yy = Math.random() * 4;
               this.ef[this.nextef].tox = param4 + Math.sin(this.ef_xx) * this.ef_yy;
               this.ef[this.nextef].toy = param5 + Math.cos(this.ef_xx) * this.ef_yy - 2;
            }
            else if(this.ef[this.nextef].typ == 5)
            {
               this.ef_xx = Math.random() * Math.PI * 2;
               this.ef_yy = Math.random() * 1.5;
               this.eftemp = Math.random() * 0.45 - 0.2;
               this.ef[this.nextef].tox = param4 * this.eftemp + Math.sin(this.ef_xx) * this.ef_yy;
               this.ef[this.nextef].toy = param5 * this.eftemp + Math.cos(this.ef_xx) * this.ef_yy - 0.5;
               if(Math.random() > 0.9)
               {
                  this.ef_xx = Math.random() * Math.PI * 2;
                  this.ef_yy = Math.random() * 4;
                  this.ef[this.nextef].tox += Math.sin(this.ef_xx) * this.ef_yy;
                  this.ef[this.nextef].toy += Math.cos(this.ef_xx) * this.ef_yy - 0.5;
               }
            }
            ++this.nextef;
            if(this.nextef >= this.maxef)
            {
               this.nextef = 0;
            }
         }
      }
      
      public function FlowAt(param1:Number, param2:Number, param3:int, param4:Number, param5:Number, param6:Number) : void
      {
         if(param6 > 100)
         {
            param6 = 100;
         }
         if(this.VIOLENCE)
         {
            if(this.game_scale < 1)
            {
               param6 = Math.max(param6 * this.game_scale,1);
            }
            while(param6 > 0)
            {
               if(this.effcolor >= 0 && (param6 > 1 && this.mens[this.effcolor].armored != 0 && (this.mens[this.effcolor].armored == 2 || this.mens[this.effcolor].armored == 1 && Math.random() > 0.5) || this.mens[this.effcolor].armored == 2))
               {
                  this.Effect(param1,param2,8,-param4 * 0.05,-param5 * 0.05);
               }
               else
               {
                  this.Effect(param1,param2,param3,param4,param5);
                  this.Effect(param1,param2,param3,param4,param5);
                  this.Effect(param1,param2,param3,param4,param5);
                  this.Effect(param1,param2,10,param4,param5);
               }
               param6--;
            }
         }
         else
         {
            this.Effect(param1,param2,19,param4,param5);
         }
      }
      
      public function nextpul() : void
      {
         ++this.pulscur;
         if(this.pulscur > this.pulsmax)
         {
            this.pulscur = 0;
         }
         this.nextpulf = true;
         this.nextpuli = 0;
         while(this.nextpuli <= this.pulsmax)
         {
            if((this.puls[this.pulscur] == null || !this.game.contains(this.puls[this.pulscur])) && (this.puls[this.pulscur] == null || !this.graphics_3d_front.contains(this.puls[this.pulscur])))
            {
               this.nextpulf = false;
               break;
            }
            if(this.puls[this.pulscur].visible == false)
            {
               if(this.game.contains(this.puls[this.pulscur]))
               {
                  this.game.removeChild(this.puls[this.pulscur]);
               }
               if(this.graphics_3d_front.contains(this.puls[this.pulscur]))
               {
                  this.graphics_3d_front.removeChild(this.puls[this.pulscur]);
               }
               this.puls[this.pulscur] = null;
               this.nextpulf = false;
               break;
            }
            ++this.pulscur;
            if(this.pulscur > this.pulsmax)
            {
               this.pulscur = 0;
            }
            ++this.nextpuli;
         }
         if(this.nextpulf)
         {
            ++this.pulsmax;
            this.pulscur = this.pulsmax;
         }
      }
      
      public function nextsh() : void
      {
         if(this.shnades_next == this.shnades_total)
         {
            ++this.shnades_total;
            this.shnades_next = this.shnades_total;
         }
         this.nextsh_i2 = 0;
         while(this.nextsh_i2 < this.shnades_total)
         {
            if(this.shnades[this.nextsh_i2].io == false)
            {
               this.shnades_next = this.nextsh_i2;
               break;
            }
            ++this.nextsh_i2;
         }
      }
      
      public function Say(param1:MovieClip, param2:*, param3:Boolean = false) : void
      {
         var _loc4_:* = undefined;
         var _loc5_:* = undefined;
         _loc4_ = getTimer();
         if(param3 || _loc4_ > (param1.last_say_sound || 0) + 500)
         {
            param1.last_say_sound = _loc4_;
            if(param1.voice_channel != null)
            {
               param1.voice_channel.stop();
            }
            param1.voice_channel = param2.play();
            if(param1.voice_channel != null)
            {
               this.smod = this.dist_to_face / this.Dist3Dm(param1.x * this.game_scale + this.game.x - 400 - 300,param1.y * this.game_scale + this.game.y - 200,this.dist_to_face);
               this.smod2 = this.dist_to_face / this.Dist3Dm(param1.x * this.game_scale + this.game.x - 400 + 300,param1.y * this.game_scale + this.game.y - 200,this.dist_to_face);
               if(param2.custom_volume == undefined)
               {
                  param2.custom_volume = 1;
               }
               _loc5_ = new SoundTransform(this.FX_VOLUME * param2.custom_volume);
               _loc5_.leftToLeft = this.smod2;
               _loc5_.leftToRight = 0;
               _loc5_.rightToRight = this.smod;
               _loc5_.rightToLeft = 0;
               param1.voice_channel.soundTransform = _loc5_;
            }
            return;
         }
      }
      
      public function SimHitSound(param1:MovieClip, param2:Number, param3:Number, param4:int) : void
      {
         if(param4 != 2)
         {
            if(param1.armored == 2)
            {
               this.PlaySound(this.s_metal_hit,param2,param3);
            }
            else if(param4)
            {
               this.PlaySound(this.s_blood_hit_sword,param2,param3);
            }
            else
            {
               this.PlaySound(this.s_blood_hit,param2,param3);
            }
         }
      }
      
      public function Dist2D(param1:Number, param2:Number, param3:Number, param4:Number) : Number
      {
         return Math.sqrt(this.Math_pow2(param1 - param3) + this.Math_pow2(param2 - param4));
      }
      
      public function VectorDist2D(param1:Number, param2:Number) : Number
      {
         return Math.sqrt(param1 * param1 + param2 * param2);
      }
      
      public function CreatePoint(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number, param6:Boolean, param7:int, param8:int) : Number
      {
         var _loc9_:int = 0;
         this.cr_i4 = this.atotal;
         this.i5 = 0;
         while(this.i5 < this.atotal)
         {
            if(this.aio[this.i5] == -1)
            {
               this.cr_i4 = this.i5;
               _loc9_ = 0;
               while(_loc9_ < this.chtotal)
               {
                  if(this.chP[_loc9_] == this.i5 || this.chC[_loc9_] == this.i5)
                  {
                     this.chio[_loc9_] = -1;
                  }
                  _loc9_++;
               }
               break;
            }
            ++this.i5;
         }
         this.ax[this.cr_i4] = new Number(param1);
         this.ay[this.cr_i4] = new Number(param2);
         this.lax[this.cr_i4] = new Number(param1);
         this.lay[this.cr_i4] = new Number(param2);
         this.atox[this.cr_i4] = new Number(param3);
         this.atoy[this.cr_i4] = new Number(param4);
         this.aio[this.cr_i4] = true;
         this.amat[this.cr_i4] = new int(param7);
         this.arad[this.cr_i4] = new Number(param5);
         this.around[this.cr_i4] = new Boolean(param6);
         this.aof[this.cr_i4] = new int(param8);
         this.ablood[this.cr_i4] = new int(0);
         this.aactive[this.aof[this.cr_i4]] = new Boolean(false);
         this.atim[this.cr_i4] = new int(0);
         this.ainwater[this.cr_i4] = new Boolean(false);
         this.ainwater_shape[this.cr_i4] = -1;
         this.crjoint_cycle = 0;
         while(this.crjoint_cycle < this.watertotal && !this.ainwater[this.cr_i4])
         {
            if(this.ax[this.cr_i4] > this.wax[this.crjoint_cycle])
            {
               if(this.ax[this.cr_i4] < this.wax[this.crjoint_cycle] + this.waw[this.crjoint_cycle])
               {
                  if(this.ay[this.cr_i4] > this.way[this.crjoint_cycle])
                  {
                     if(this.ay[this.cr_i4] < this.way[this.crjoint_cycle] + this.wah[this.crjoint_cycle])
                     {
                        this.ainwater[this.cr_i4] = true;
                        this.ainwater_shape[this.cr_i4] = this.cr_i4;
                     }
                  }
               }
            }
            ++this.crjoint_cycle;
         }
         if(this.cr_i4 == this.atotal)
         {
            ++this.atotal;
         }
         return this.cr_i4;
      }
      
      public function WakeUpAtom(param1:int, param2:Boolean = true) : void
      {
         if(this.aio[param1] != true && this.aio[param1] != false)
         {
         }
         this.aio[param1] = true;
         if(param2)
         {
            this.atim[param1] = 0;
         }
      }
      
      public function ForceAtomSleep(param1:int) : void
      {
         if(this.aio[param1] != true && this.aio[param1] != false)
         {
         }
         this.aio[param1] = false;
      }
      
      public function DisposeAtom(param1:int) : void
      {
         var _loc2_:int = 0;
         this.GetAtomOriginalPosition(param1);
         _loc2_ = 0;
         while(_loc2_ < this.MP_myspecials_total)
         {
            if(this.MP_myspecials[_loc2_] != undefined)
            {
               if(this.MP_myspecials[_loc2_] != null)
               {
                  if(this.MP_myspecials[_loc2_].atom == param1)
                  {
                     this.MP_myspecials[_loc2_].atom = -1;
                  }
               }
            }
            _loc2_++;
         }
         _loc2_ = 0;
         while(_loc2_ < this.MP_specials.length)
         {
            if(this.MP_specials[_loc2_] != undefined)
            {
               if(this.MP_specials[_loc2_] != null)
               {
                  if(this.MP_specials[_loc2_].atom == param1)
                  {
                     this.MP_specials[_loc2_].atom = -1;
                  }
               }
            }
            _loc2_++;
         }
         this.aio[param1] = -1;
      }
      
      public function Connect(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number) : Number
      {
         this.cr_i4 = this.chtotal;
         this.i5 = 0;
         while(this.i5 < this.chtotal && this.cr_i4 != this.chtotal)
         {
            if(this.chio[this.i5] == -1)
            {
               if(this.chP[this.i5] == -1 || this.chC[this.i5] == -1)
               {
                  this.cr_i4 = this.i5;
               }
            }
            ++this.i5;
         }
         this.chP[this.cr_i4] = new int(param1);
         this.chC[this.cr_i4] = new int(param2);
         if(param4 != -1)
         {
            this.chdef[this.cr_i4] = new Number(param4);
         }
         else
         {
            this.chdef[this.cr_i4] = new Number(this.Dist2D(this.ax[param1],this.ay[param1],this.ax[param2],this.ay[param2]));
         }
         if(param5 == -1)
         {
            this.chdamp[this.cr_i4] = new Number(1);
         }
         else
         {
            this.chdamp[this.cr_i4] = new Number(param5);
         }
         this.chtypa[this.cr_i4] = new int(param3);
         this.chio[this.cr_i4] = true;
         if(this.cr_i4 == this.chtotal)
         {
            ++this.chtotal;
         }
         return this.cr_i4;
      }
      
      public function ReConnect(param1:int, param2:Number, param3:Number, param4:Number, param5:Number, param6:Number) : void
      {
         this.chP[param1] = param2;
         this.chC[param1] = param3;
         if(param5 != -1)
         {
            this.chdef[param1] = param5;
         }
         else
         {
            this.chdef[param1] = this.Dist2D(this.ax[param2],this.ay[param2],this.ax[param3],this.ay[param3]);
         }
         if(param6 == -1)
         {
            this.chdamp[param1] = 1;
         }
         else
         {
            this.chdamp[param1] = param6;
         }
         this.chtypa[param1] = param4;
         this.chio[param1] = true;
      }
      
      public function SetPlayerScale(param1:MovieClip, param2:Number) : void
      {
         var _loc3_:Number = NaN;
         if(param2 < 0.001)
         {
            param2 = 0.001;
         }
         _loc3_ = param2 / param1.scale;
         param1.scale = param2;
         this.chdef[param1.ch_leg1_max] *= _loc3_;
         this.chdef[param1.ch_leg2_max] *= _loc3_;
         this.chdef[param1.ch_leg1_min] *= _loc3_;
         this.chdef[param1.ch_leg2_min] *= _loc3_;
         this.chdef[param1.ch_leg1_damp] *= _loc3_;
         this.chdef[param1.ch_leg2_damp] *= _loc3_;
         this.chdef[param1.ch_arm1_max] *= _loc3_;
         this.chdef[param1.ch_arm2_max] *= _loc3_;
         this.chdef[param1.ch_arm1_min] *= _loc3_;
         this.chdef[param1.ch_arm2_min] *= _loc3_;
         this.chdef[param1.ch_body] *= _loc3_;
         this.chdef[param1.ch_spine] *= _loc3_;
         this.chdef[param1.ch_shoulder] *= _loc3_;
         this.chdef[param1.ch_head] *= _loc3_;
         this.chdef[param1.ch_body_ang1] *= _loc3_;
         this.chdef[param1.ch_body_ang2] *= _loc3_;
         this.chdef[param1.ch_body_ang3] *= _loc3_;
         this.chdef[param1.ch_body_ang4] *= _loc3_;
         this.chdef[param1.ch_body_ang4b] *= _loc3_;
         this.chdef[param1.ch_body_ang5] *= _loc3_;
         this.arad[param1.b_toe] *= _loc3_;
         this.arad[param1.b_leg1] *= _loc3_;
         this.arad[param1.b_leg2] *= _loc3_;
         this.arad[param1.b_arm1] *= _loc3_;
         this.arad[param1.b_arm2] *= _loc3_;
         this.arad[param1.b_body] *= _loc3_;
         this.arad[param1.b_head_start] *= _loc3_;
         this.arad[param1.b_head_end] *= _loc3_;
         this.RedrawPsi(param1.idd);
      }
      
      public function create_player(param1:MovieClip, param2:Number, param3:Number) : void
      {
         this.mens[this.playerstotal] = param1;
         param1.no_psi = false;
         param1.hp_gui_enabled = -1;
         param1.sword_life = -1;
         param1.idd = new int(this.playerstotal);
         param1.info = undefined;
         param1.exp_potential = 0.666;
         param1.side = new Number();
         if(Math.random() > 0.5)
         {
            param1.side = 1;
         }
         else
         {
            param1.side = -1;
         }
         param1.hea = new Number(param2);
         param1.hmax = new Number(param3);
         param1.real_hea = param1.hea;
         param1.last_shoot_chance = false;
         param1.boost = new int(0);
         param1.defih = new int(0);
         param1.antigravity = 0;
         param1.antigravity_radius = 200;
         param1.can_be_hit = true;
         param1.can_drop_guns = true;
         param1.isGhost = false;
         param1.voice = this.voices.usurpation;
         param1.jump_scale = 1;
         param1.scale = 1;
         param1.sword_spam_strength = 1;
         if(!this.FORCE_CUSTOM_MAP)
         {
            if(!this.MP_mode)
            {
               if(this.PRO_BOTS)
               {
                  if(!param1.isplayer)
                  {
                     if(param1.hmax > 0)
                     {
                        if(param1.hmax < 300)
                        {
                           if(param1.hea > 0)
                           {
                              param1.hea = (param1.hea + 300) / 2;
                           }
                           param1.hmax = (param1.hmax + 300) / 2;
                        }
                     }
                  }
               }
            }
         }
         param1.palette = new Array("-","-","-","-");
         param1.mp_controlled = new Boolean(false);
         param1.mp_packets = new int(-3);
         param1.mp_aliveping = new int(0);
         param1.mp_x = new Number(0);
         param1.mp_y = new Number(0);
         param1.mp_tox = new Number(0);
         param1.mp_toy = new Number(0);
         if(this.MP_favor_the_shooter && this.MP_mode)
         {
            param1.mp_shot_correct = undefined;
         }
         else
         {
            param1.mp_offset_x = Number(0);
            param1.mp_offset_y = Number(0);
         }
         param1.mp_must_shoot_once = undefined;
         param1.change_gun = 0;
         param1.login_name = new String();
         param1.login_name = "";
         param1.last_contact = new int(0);
         param1.enemy_vis_tim = new int(0);
         param1.lastshot = new String();
         param1.lastshotby = new int(param1.idd);
         param1.whenlastshot = new int(0);
         param1.lastshotbygun = new String("nothing");
         param1.custom_tag = "";
         param1.info_text = "";
         param1.botaction = 0;
         param1.io = new Boolean(true);
         param1.deadtim = new int(0);
         if(!this.MP_mode)
         {
            if(param1.isplayer)
            {
               param1.hea = 800 / param3 * param2;
               param1.hmax = 800;
               param1.nick = ".:Eric Gurt:.";
               this.aactive[this.playerstotal] = true;
            }
            else
            {
               param1.nick = "Usurpation Soldier";
            }
         }
         param1.nick = this.MP_mode ? "Marine" : this.CMPG_name;
         param1.step_sound_phase = new int(0);
         param1.pressure = new int(0);
         param1.wep_pause = new int(0);
         param1.voice_channel = new SoundChannel();
         param1.idle_phase = new Number(0);
         param1.moving_speed = new Number(0);
         param1.stand = new Boolean(false);
         param1.sit = new Number(0);
         param1.tox = new Number(0);
         param1.toy = new Number(0);
         param1.armored = new int(0);
         param1.melee_ani = new Number(0);
         param1.melee_tim = new Number(0);
         param1.tarx = new Number(0);
         param1.tary = new Number(0);
         param1.regentim = new int(0);
         param1.hunt = new int(-1);
         param1.mobility = new Number(1);
         param1.team = new int(0);
         param1.rand = new Number(Math.random());
         param1.rand2 = new Number(Math.random());
         param1.rand3 = new Number(Math.random());
         param1.randtim = new Number(0);
         param1.act_fire = new Boolean(false);
         param1.act_movex = new int(0);
         param1.act_movey = new int(0);
         param1.ltox = new Number(0);
         param1.ltoy = new Number(0);
         param1.ang = new Number(0);
         param1.incar = new int(-1);
         param1.stability = new Number(1);
         param1.curwea = new int(-1);
         param1.waiting = 0;
         param1.inwater = new Boolean(false);
         param1.dead = new Boolean(false);
         param1.blood_red = new Number(1);
         param1.blood_green = new Number(0);
         param1.blood_blue = new Number(0);
         param1.ping = new int(0);
         param1.hp_head = new Number(Math.max(param1.hea * 0.4,30));
         param1.hp_body = new Number(Math.max(param1.hea * 0.6,30));
         param1.hp_legs = new Number(Math.max(param1.hea * 0.5,30));
         param1.hp_arms = new Number(Math.max(param1.hea * 0.4,30));
         param1.brk_head = new Boolean(false);
         param1.brk_body = new Boolean(false);
         param1.brk_legs = new Boolean(false);
         param1.brk_arms = new Boolean(false);
         param1.dying = new Boolean(false);
         param1.notspawned = new Boolean(true);
         param1.notseen = new Boolean(true);
         param1.b_toe = new int(this.CreatePoint(param1.x,param1.y - 31 - 3,0,0,7,false,1,this.playerstotal));
         param1.b_leg1 = new int(this.CreatePoint(param1.x - 5,param1.y - 3,0,0,6,false,0,this.playerstotal));
         param1.b_leg2 = new int(this.CreatePoint(param1.x + 5,param1.y - 3,0,0,6,false,0,this.playerstotal));
         param1.b_arm1 = new int(this.CreatePoint(param1.x - 5,param1.y - 31 - 3 - 23 + 30,0,0,3,false,-1,this.playerstotal));
         param1.b_arm2 = new int(this.CreatePoint(param1.x + 5,param1.y - 31 - 3 - 23 + 30,0,0,3,false,-1,this.playerstotal));
         param1.b_body = new int(this.CreatePoint(param1.x,param1.y - 31 - 3 - 23,0,0,8,false,1,this.playerstotal));
         param1.b_brk1 = param1.b_body;
         param1.b_brk2 = param1.b_body;
         param1.b_head_start = new int(this.CreatePoint(param1.x,param1.y - 31 - 3 - 25 - 4,0,0,8,false,-1,this.playerstotal));
         param1.b_head_end = new int(this.CreatePoint(param1.x,param1.y - 31 - 3 - 25 - 4 - 9,0,0,8,false,1,this.playerstotal));
         param1.ch_leg1_max = new int(this.Connect(param1.b_toe,param1.b_leg1,2,31,-1));
         param1.ch_leg2_max = new int(this.Connect(param1.b_toe,param1.b_leg2,2,31,-1));
         param1.ch_leg1_min = new int(this.Connect(param1.b_toe,param1.b_leg1,1,20,-1));
         param1.ch_leg2_min = new int(this.Connect(param1.b_toe,param1.b_leg2,1,20,-1));
         param1.ch_leg1_damp = new int(this.Connect(param1.b_toe,param1.b_leg1,0,29,0.1));
         param1.ch_leg2_damp = new int(this.Connect(param1.b_toe,param1.b_leg2,0,29,0.1));
         param1.ch_arm1_max = new int(this.Connect(param1.b_body,param1.b_arm1,2,30,-1));
         param1.ch_arm2_max = new int(this.Connect(param1.b_body,param1.b_arm2,2,30,-1));
         param1.ch_arm1_min = new int(this.Connect(param1.b_body,param1.b_arm1,1,15,-1));
         param1.ch_arm2_min = new int(this.Connect(param1.b_body,param1.b_arm2,1,15,-1));
         param1.ch_body = new int(this.Connect(param1.b_toe,param1.b_body,0,this.normal_spine_length,-1));
         param1.ch_spine = new int(this.Connect(param1.b_toe,param1.b_head_start,0,this.normal_spine_length + this.normal_shoulder_length,-1));
         param1.ch_shoulder = new int(this.Connect(param1.b_body,param1.b_head_start,0,this.normal_shoulder_length,-1));
         param1.ch_head = new int(this.Connect(param1.b_head_start,param1.b_head_end,0,9,-1));
         param1.ch_body_ang1 = new int(this.Connect(param1.b_body,param1.b_leg1,1,50,-1));
         param1.ch_body_ang2 = new int(this.Connect(param1.b_body,param1.b_leg2,1,50,-1));
         param1.ch_body_ang3 = new int(this.Connect(param1.b_leg1,param1.b_leg2,1,5,0.4));
         param1.ch_body_ang4 = new int(this.Connect(param1.b_leg1,param1.b_leg2,2,30,-1));
         param1.ch_body_ang4b = new int(this.Connect(param1.b_leg1,param1.b_leg2,2,30,0.4));
         param1.ch_body_ang5 = new int(this.Connect(param1.b_toe,param1.b_head_end,1,36,-1));
         param1.gotoAndStop(2);
         param1.toe.bloddy.visible = false;
         param1.mdl_leg1_upper = new int(1);
         param1.mdl_leg1_middle = new int(1);
         param1.mdl_leg1_lower = new int(1);
         param1.mdl_leg2_upper = new int(1);
         param1.mdl_leg2_middle = new int(1);
         param1.mdl_leg2_lower = new int(1);
         param1.mdl_arm1_upper = new int(1);
         param1.mdl_arm1_lower = new int(1);
         param1.mdl_arm2_upper = new int(1);
         param1.mdl_arm2_lower = new int(1);
         param1.mdl_toe = new int(1);
         param1.mdl_body = new int(1);
         param1.mdl_head = new int(1);
         param1.armored = 1;
         param1.mdl_leg1_upper = 1;
         param1.mdl_leg1_middle = 1;
         param1.mdl_leg1_lower = 1;
         param1.mdl_leg2_upper = 1;
         param1.mdl_leg2_middle = 1;
         param1.mdl_leg2_lower = 1;
         param1.mdl_arm1_upper = 1;
         param1.mdl_arm1_lower = 1;
         param1.mdl_arm2_upper = 1;
         param1.mdl_arm2_lower = 1;
         param1.mdl_toe = 1;
         param1.mdl_body = 1;
         param1.mdl_head = 1;
         this.AskForCache(param1.head);
         this.AskForCache(param1.arm1);
         this.AskForCache(param1.arm2);
         this.AskForCache(param1.leg1);
         this.AskForCache(param1.leg2);
         this.AskForCache(param1.body);
         this.AskForCache(param1.toe);
         if(param1.hea <= 0)
         {
            param1.dead = true;
         }
         param1.effects = new Vector.<Object>();
         param1.gui.txt2.visible = false;
         this.RedrawPsi(this.playerstotal);
         ++this.playerstotal;
      }
      
      public function create_gun(param1:MovieClip) : void
      {
      }
      
      public function DestroyGun(param1:*) : void
      {
         var _loc2_:* = undefined;
         _loc2_ = this.guns[param1];
         _loc2_.io = false;
         _loc2_.visible = false;
         this.aactive[-1 - param1] = false;
         this.DisposeAtom(_loc2_.b_p1);
         this.DisposeAtom(_loc2_.b_p2);
         _loc2_.x = -10000;
         _loc2_.y = -10000;
         _loc2_.scaleX = 0;
         _loc2_.scaleY = 0;
         this.game.removeChild(_loc2_);
         this.guns[param1] = new Object();
         this.guns[param1].io = false;
      }
      
      public function GunModelToGunName(param1:String) : String
      {
         var _loc2_:String = null;
         _loc2_ = "";
         switch(param1)
         {
            case "gun_rifle":
               _loc2_ = "Assault Rifle C-01r";
               break;
            case "gun_rifle_b":
               _loc2_ = "Assault Rifle C-01r";
               break;
            case "gun_pistol":
               _loc2_ = "Pistol C-01p";
               break;
            case "gun_pistol_b":
               _loc2_ = "Pistol C-01p";
               break;
            case "gun_pistol2":
               _loc2_ = "Pistol CS-Pro";
               break;
            case "gun_vehgun":
               _loc2_ = "";
               break;
            case "gun_gl":
               _loc2_ = "Grenade Launcher CS-SpamThemBaby";
               break;
            case "gun_sp_sh":
               _loc2_ = "Portable Shield v07 CS-Quarium";
               break;
            case "gun_rl":
               _loc2_ = "Rocket Launcher CS-LitBro";
               break;
            case "gun_rl0":
               _loc2_ = "Not A Rocket Launcher";
               break;
            case "gun_railgun":
               _loc2_ = "Lite Railgun v01 CS-HShot";
               break;
            case "gun_railgun2":
               _loc2_ = "Heavy Railgun v04 CS-OneSOneK";
               break;
            case "gun_sniper":
               _loc2_ = "Sniper Rifle CS-YippeeKiYay";
               break;
            case "gun_shotgun":
               _loc2_ = "Shotgun C-01s";
               break;
            case "gun_shotgun_b":
               _loc2_ = "Shotgun C-01s";
               break;
            case "gun_apistol":
               _loc2_ = "Alien Pistol";
               break;
            case "gun_arifle":
               _loc2_ = "Alien Rifle";
               break;
            case "gun_arifle2":
               _loc2_ = "Alien Shotgun";
               break;
            case "gun_vehcannon":
               _loc2_ = "";
               break;
            case "gun_minigun":
               _loc2_ = "Minigun C-02m";
               break;
            case "gun_defibrillator":
               _loc2_ = "Defibrillator";
               break;
            case "gun_bfg":
               _loc2_ = "CS-BNG";
               break;
            case "gun_raygun":
               _loc2_ = "Ray Gun C-01y";
               break;
            case "gun_vehminigun":
               _loc2_ = "";
               break;
            case "gun_vehminigl":
               _loc2_ = "";
               break;
            case "gun_real_shotgun":
               _loc2_ = "Shotgun CS-DAZ";
               break;
            case "gun_real_rifle":
               _loc2_ = "Assault Rifle CS-RC";
               break;
            case "gun_oicw":
               _loc2_ = "Combat Rifle CS-OICW";
               break;
            case "gun_plasmagun":
               _loc2_ = "Plasmagun CS-Bloom";
               break;
            case "item_grenade":
               _loc2_ = "Grenade C-00n";
               break;
            case "item_port":
               _loc2_ = "Teleport Grenade v03 CS-PortNade";
               break;
            case "item_shield":
               _loc2_ = "Portable Shield v07 CS-Quarium";
               break;
            case "gun_vgun":
               _loc2_ = "Drone Gun CS-Virus";
               break;
            case "gun_rayrifle":
               _loc2_ = "Ray Rifle TCoRR";
               break;
            case "gun_pixel_rifle":
               _loc2_ = "Star Defender Rifle";
               break;
            case "gun_pixel_rl":
               _loc2_ = "Star Defender Rocket Launcher";
               break;
            case "darkstar_1_assault_rifle":
               _loc2_ = "CP-Assault Rifle";
               break;
            case "darkstar_1_gauss_rifle":
               _loc2_ = "CS-GaussRifle";
               break;
            case "darkstar_1_minigun":
               _loc2_ = "Light Machine Gun CS-LMG";
               break;
            case "darkstar_1_phanx_rifle":
               _loc2_ = "PHANX-92 Falconet";
               break;
            case "darkstar_1_usniper":
               _loc2_ = "Alien Sniper Rifle";
               break;
            case "lostmydollar_av135":
               _loc2_ = "Assault Rifle AV-135";
               break;
            case "lostmydollar_needle":
               _loc2_ = "Needle";
               break;
            case "lostmydollar_qccv50":
               _loc2_ = "QCcV-50 Little Bastard";
               break;
            case "lostmydollar_rmk36":
               _loc2_ = "RMK-36";
               break;
            case "lostmydollar_rpg":
               _loc2_ = "RPG";
               break;
            case "lazyrain_alien_laser_rifle":
               _loc2_ = "Alien Laser Rifle";
               break;
            case "lazyrain_alien_laser_rifle2":
               _loc2_ = "Alien Heater Rifle";
               break;
            case "lazyrain_cannon":
               _loc2_ = "CS-Autocannon";
               break;
            case "lazyrain_cannon2":
               _loc2_ = "CS-Autocannon";
               break;
            case "moonhawk_phantom":
               _loc2_ = "Crossfire CR-45 Phantom";
               break;
            case "moonhawk_phantom2":
               _loc2_ = "Crossfire CR-45 Phantom";
               break;
            case "moonhawk_smg":
               _loc2_ = "Crossfire CR-42 Ghost";
               break;
            case "ditzy_energy_rifle":
               _loc2_ = "Energy Rifle";
               break;
            case "roxxar_marksman_rifle":
               _loc2_ = "Falkonian Marksman Rifle";
               break;
            case "roxxar_pistol":
               _loc2_ = "Falkonian Pistol";
               break;
            case "roxxar_rifle":
               _loc2_ = "Falkonian Shotgun";
               break;
            case "roxxar_shotgun":
               _loc2_ = "Falkonian Grenade Launcher";
               break;
            case "moonhawk_crossfire":
               _loc2_ = "Crossfire CR-145 Vortex";
               break;
            case "lazyrain_psi_cutter":
               _loc2_ = "Falkonian PSI Cutter";
               break;
            case "mrjaksnes_android_sniper":
               _loc2_ = "Android Sniper Rifle";
               break;
            case "incompetence_cr30":
               _loc2_ = "OEDA CR-30 Rifle";
               break;
            case "darkstar_1_cs_ragequit":
               _loc2_ = "Heavy Sniper Rifle RQ-10";
               break;
            case "gun_fttp_vehgun":
               _loc2_ = "";
               break;
            case "thetoppestkek_shotgun_nxs25":
               _loc2_ = "Shotgun NXS-25";
               break;
            case "incompetence_archetype_27xx":
               _loc2_ = "Archetype 27XX";
               break;
            case "phsc_aug":
               _loc2_ = "Marksman Rifle CS-RM";
               break;
            case "moonhawk_railgun":
               _loc2_ = "Crossfire CR-34 Marauder";
               break;
            case "moonhawk_railgun2":
               _loc2_ = "Crossfire CR-34 Marauder";
               break;
            case "lazyrain_heal_pistol":
               _loc2_ = "Medic Pistol";
               break;
            case "incompetence_glhf":
               _loc2_ = "Grenade Launcher CS-GLHF";
               break;
            case "incompetence_glhf2":
               _loc2_ = "OEDA EA-109H Launcher";
               break;
            case "lazyrain_gravy_rl":
               _loc2_ = "Falkonian Anti-Gravity Rocket Launcher";
               break;
            case "lazyrain_gravy_rl2":
               _loc2_ = "Falkonian Anti-Gravity Rocket Launcher";
               break;
            case "darkstar_1_owo_rl":
               _loc2_ = "Rocket Launcher CS-Barrage";
               break;
            case "phsc_plasma_shotgun":
               _loc2_ = "Plasma Shotgun";
               break;
            case "phsc_android_shotgun":
               _loc2_ = "Android Shotgun";
               break;
            case "ditzy_cs_ik":
               _loc2_ = "Assault Rifle CS-IK";
               break;
            case "ditzy_cs_ik2":
               _loc2_ = "Assault Rifle NXR-17C";
               break;
            case "phsc_ph01":
               _loc2_ = "Crossfire CR-54 Viper";
               break;
            case "phsc_ph01b":
               _loc2_ = "Crossfire CR-54 Viper";
               break;
            case "darkstar_1_railgun":
               _loc2_ = "PHANX-230 Cobra";
               break;
            case "darkstar_1_railgun2":
               _loc2_ = "Eos Toxic Railgun";
               break;
            case "darkstar_1_alien_rail_sg":
               _loc2_ = "Alien Rail Shotgun";
               break;
            case "darkstar_1_nade_c9":
               _loc2_ = "Grenade Launcher C-00t";
               break;
            case "darkstar_1_nade_c9b":
               _loc2_ = "Grenade Launcher C-00t";
               break;
            case "darkstar_1_rl":
               _loc2_ = "Eos Rocket Launcher";
               break;
            case "darkstar_1_bison":
               _loc2_ = "PHANX-150 Bison";
               break;
            case "darkstar_1_auto_sg":
               _loc2_ = "Eos Auto Shotgun";
               break;
            case "ditzy_focus_beam":
               _loc2_ = "Reakhohsha Focus Beam";
               break;
            case "boom5_revolver":
               _loc2_ = "Revolver MK1";
               break;
            case "thetoppestkek_scavenger_sg":
               _loc2_ = "Scavenger Shotgun";
               break;
            case "lazyrain_acid_gl":
               _loc2_ = "Alien Acid Grenade Launcher";
               break;
            case "lazyrain_plasma_smg":
               _loc2_ = "Alien Plasma Pistol";
               break;
            case "lazyrain_plasma_smg2":
               _loc2_ = "Alien Plasma Pistol";
               break;
            case "roxxar_android_railgun":
               _loc2_ = "Android Railgun";
               break;
            case "gun_invisgun":
               _loc2_ = "";
               break;
            case "gun_sharkgun":
               _loc2_ = "Shark";
               break;
            default:
               _loc2_ = param1;
         }
         return _loc2_;
      }
      
      public function MakeGunByClass(param1:String, param2:Object, param3:Boolean = false) : *
      {
         var _loc4_:* = undefined;
         _loc4_ = null;
         if(param1 == this.cet("gun_rifle","3ab1b74070fa59c099c5ecc86f207241",9))
         {
            _loc4_ = this.game.addChildAt(new gun_rifle(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_rifle_b","3f945cfa330d80f7f4aa9b21ad2f5a42",11))
         {
            _loc4_ = this.game.addChildAt(new gun_rifle_b(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_pistol","77a0571b536742840a0279e738440627",10))
         {
            _loc4_ = this.game.addChildAt(new gun_pistol(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_pistol_b","31eda441e17305c81c05b97e018cc634",12))
         {
            _loc4_ = this.game.addChildAt(new gun_pistol_b(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_shotgun","415ef8399b45ea3a1337fe00a95d810b",11))
         {
            _loc4_ = this.game.addChildAt(new gun_shotgun(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_shotgun_b","5396d129da7ece2e91d0c6c8ecd84c50",13))
         {
            _loc4_ = this.game.addChildAt(new gun_shotgun_b(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_pistol2","370fa991726bf897be0087ac9309fca8",11))
         {
            _loc4_ = this.game.addChildAt(new gun_pistol2(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_vehgun","41233a38507aab43cdb2bd7dfc260322",10))
         {
            _loc4_ = this.game.addChildAt(new gun_vehgun(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_gl","124e082fd5901eef18efe64ea1ec47bd",6))
         {
            _loc4_ = this.game.addChildAt(new gun_gl(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_sp_sh","b50ce24aaa1bd1fcb57052c5ef85683d",9))
         {
            _loc4_ = this.game.addChildAt(new gun_sp_sh(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_rl","ce16e5fb81fcf5895b8f0f82c2b61931",6))
         {
            _loc4_ = this.game.addChildAt(new gun_rl(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_rl0","887559a177d6a45e29b2c3ad11bd0ade",7))
         {
            _loc4_ = this.game.addChildAt(new gun_rl0(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_vgun","c9f01cd44cbf3c3bc382c936b1578da0",8))
         {
            _loc4_ = this.game.addChildAt(new gun_vgun(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_railgun","34949cbb8775a6d7f0e87bccb1052c75",11))
         {
            _loc4_ = this.game.addChildAt(new gun_railgun(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_railgun2","8cb1b5adde810239b95393e735ea8d98",12))
         {
            _loc4_ = this.game.addChildAt(new gun_railgun2(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_sniper","2a6ecb6af19b45dae8e269ac8c1fc29b",10))
         {
            _loc4_ = this.game.addChildAt(new gun_sniper(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_apistol","7ad54d59cd7e1f0023233b3a3e542f4f",11))
         {
            _loc4_ = this.game.addChildAt(new gun_apistol(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_arifle","f78f35befeb63a9b9f65d25be16a8d1c",10))
         {
            _loc4_ = this.game.addChildAt(new gun_arifle(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_arifle2","d4213d2caffd7466effab9df24d0f2a4",11))
         {
            _loc4_ = this.game.addChildAt(new gun_arifle2(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_vehcannon","fcecf3096d5987bf463c6ad8c0e194d5",13))
         {
            _loc4_ = this.game.addChildAt(new gun_vehcannon(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_minigun","15fd37cf16c85d4f926db7783a6e55ac",11))
         {
            _loc4_ = this.game.addChildAt(new gun_m4a1(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_m4a1","a28254d70ae03aec8e21338d5e0abe39",8))
         {
            _loc4_ = this.game.addChildAt(new m4a1_real(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_glock","aad841f699bdd36f5c97c0e3e4c21b09",9))
         {
            _loc4_ = this.game.addChildAt(new gun_pistol3(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_defibrillator","0e0da5f8e3ee8197a5b7abe55d66cc25",17))
         {
            _loc4_ = this.game.addChildAt(new gun_defibrillator(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_bfg","f519f24bf0eb33b05af7cc56cef4bcc7",7))
         {
            _loc4_ = this.game.addChildAt(new gun_bfg(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_raygun","93292a011b8bac193d0977d6cb6c702c",10) || param1 == this.cet("gun_plasmacannon","31ebeaa0c1211f780fa83462f9a2f2dd",16))
         {
            _loc4_ = this.game.addChildAt(new gun_plasmacannon(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_vehminigun","eb216db5c09bfdd2bad7bd957ebd9f47",14))
         {
            _loc4_ = this.game.addChildAt(new gun_vehminigun(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_vehminigl","14b3627ac631c7d315b5443a7b6f0be2",13))
         {
            _loc4_ = this.game.addChildAt(new gun_vehminigl(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_real_shotgun","267a94133b231f1b61984bb67b85b4cd",16))
         {
            _loc4_ = this.game.addChildAt(new gun_real_shotgun(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_real_rifle","afae2f386c07ad4806d5c292d09ce59a",14))
         {
            _loc4_ = this.game.addChildAt(new gun_real_rifle(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_oicw","e99f69bfc8208ba382780144cc489a82",8))
         {
            _loc4_ = this.game.addChildAt(new gun_oicw(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_plasmagun","1bc724fe18dd3764fbe5dd45a82d0ed4",13))
         {
            _loc4_ = this.game.addChildAt(new gun_plasmagun(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_rayrifle","7a81778f835168b408427c6aa36b6966",12))
         {
            _loc4_ = this.game.addChildAt(new gun_rayrifle(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_pixel_rifle","61350cd52eb6e4f67a7b3c0ef5a1bd75",15))
         {
            _loc4_ = this.game.addChildAt(new gun_pixel_rifle(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_pixel_rl","210b531c94418c4d259e3df067333403",12))
         {
            _loc4_ = this.game.addChildAt(new gun_pixel_rl(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_assault_rifle","883dfb52e34801d3a872f94090da4663",24))
         {
            _loc4_ = this.game.addChildAt(new darkstar_1_assault_rifle(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_gauss_rifle","d608d955fee67229ba7631644a68fa68",22))
         {
            _loc4_ = this.game.addChildAt(new darkstar_1_gauss_rifle(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_minigun","ac2ed4c8fadacec88cecf9d286d509b4",18))
         {
            _loc4_ = this.game.addChildAt(new darkstar_1_minigun(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_phanx_rifle","a82d357e7fdfe4678d99d522aabbe7d2",22))
         {
            _loc4_ = this.game.addChildAt(new darkstar_1_phanx_rifle(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_usniper","44589fcd8475b6336e87e9e53cc5db6a",18))
         {
            _loc4_ = this.game.addChildAt(new darkstar_1_usniper(),this.game.numChildren);
         }
         if(param1 == this.cet("lostmydollar_av135","6352455ae32e8de36677477292f766b2",18))
         {
            _loc4_ = this.game.addChildAt(new lostmydollar_av135(),this.game.numChildren);
         }
         if(param1 == this.cet("lostmydollar_needle","c09467957a7ce187555405c6c3a20744",19))
         {
            _loc4_ = this.game.addChildAt(new lostmydollar_needle(),this.game.numChildren);
         }
         if(param1 == this.cet("lostmydollar_qccv50","b7f0280c66bee8c46181ff8af01434df",19))
         {
            _loc4_ = this.game.addChildAt(new lostmydollar_qccv50(),this.game.numChildren);
         }
         if(param1 == this.cet("lostmydollar_rmk36","139bbeb4281bf164ca40c2a646fb1564",18))
         {
            _loc4_ = this.game.addChildAt(new lostmydollar_rmk36(),this.game.numChildren);
         }
         if(param1 == this.cet("lostmydollar_rpg","abefe903f1d997bccdb7fcd7189c6821",16))
         {
            _loc4_ = this.game.addChildAt(new lostmydollar_rpg(),this.game.numChildren);
         }
         if(param1 == this.cet("lazyrain_alien_laser_rifle","bd84840f5216bedb3c64620286ef0765",26))
         {
            _loc4_ = this.game.addChildAt(new lazyrain_alien_laser_rifle(),this.game.numChildren);
         }
         if(param1 == this.cet("lazyrain_alien_laser_rifle2","7f0e016ab35bfea35a25bb1eb20200fa",27))
         {
            _loc4_ = this.game.addChildAt(new lazyrain_alien_laser_rifle2(),this.game.numChildren);
         }
         if(param1 == this.cet("lazyrain_cannon","6b47cf23fe203a1cad4baa64c7db691b",15))
         {
            _loc4_ = this.game.addChildAt(new lazyrain_cannon(),this.game.numChildren);
         }
         if(param1 == this.cet("lazyrain_cannon2","955dba1fbaa28c772d0b84f7315730e1",16))
         {
            _loc4_ = this.game.addChildAt(new lazyrain_cannon2(),this.game.numChildren);
         }
         if(param1 == this.cet("moonhawk_phantom","acafe3e12644f0e2a79105284532eba3",16))
         {
            _loc4_ = this.game.addChildAt(new moonhawk_phantom(),this.game.numChildren);
         }
         if(param1 == this.cet("moonhawk_phantom2","314eb5cf7b10885a388f29efd9939831",17))
         {
            _loc4_ = this.game.addChildAt(new moonhawk_phantom2(),this.game.numChildren);
         }
         if(param1 == this.cet("moonhawk_smg","c22f2fe867fba9509adef95961017f9b",12))
         {
            _loc4_ = this.game.addChildAt(new moonhawk_smg(),this.game.numChildren);
         }
         if(param1 == this.cet("ditzy_energy_rifle","a31ab37d1f8c0ab56d5df4856bc0db9a",18))
         {
            _loc4_ = this.game.addChildAt(new ditzy_energy_rifle(),this.game.numChildren);
         }
         if(param1 == this.cet("roxxar_marksman_rifle","02e22640317636a85a7b57b46d8cf3f1",21))
         {
            _loc4_ = this.game.addChildAt(new roxxar_marksman_rifle(),this.game.numChildren);
         }
         if(param1 == this.cet("roxxar_pistol","ff5e798f12118fe1dec68db7daea066c",13))
         {
            _loc4_ = this.game.addChildAt(new roxxar_pistol(),this.game.numChildren);
         }
         if(param1 == this.cet("roxxar_rifle","564c8fd9fdc7bccb8546a8afe5946186",12))
         {
            _loc4_ = this.game.addChildAt(new roxxar_rifle(),this.game.numChildren);
         }
         if(param1 == this.cet("roxxar_shotgun","37fc4e8062034b9f271ef19537ba6319",14))
         {
            _loc4_ = this.game.addChildAt(new roxxar_shotgun(),this.game.numChildren);
         }
         if(param1 == this.cet("moonhawk_crossfire","3f1490184df93075fb98eea637b0147a",18))
         {
            _loc4_ = this.game.addChildAt(new moonhawk_crossfire(),this.game.numChildren);
         }
         if(param1 == this.cet("lazyrain_psi_cutter","e1f32ece83521121555329752f1d2aa7",19))
         {
            _loc4_ = this.game.addChildAt(new lazyrain_psi_cutter(),this.game.numChildren);
         }
         if(param1 == this.cet("mrjaksnes_android_sniper","bc746ceab1eafd3a5500977bcc274ddc",24))
         {
            _loc4_ = this.game.addChildAt(new mrjaksnes_android_sniper(),this.game.numChildren);
         }
         if(param1 == this.cet("incompetence_cr30","2914f2c70e6daf33cbda17cc1789b96c",17))
         {
            _loc4_ = this.game.addChildAt(new incompetence_cr30(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_cs_ragequit","7665f1f526ca36dabfb07749dc89ba71",22))
         {
            _loc4_ = this.game.addChildAt(new darkstar_1_cs_ragequit(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_fttp_vehgun","80b85947ede838d3491c395de3cf4fec",15))
         {
            _loc4_ = this.game.addChildAt(new gun_fttp_vehgun(),this.game.numChildren);
         }
         if(param1 == this.cet("thetoppestkek_shotgun_nxs25","3a6a668564dae34d58acfaa7db15af36",27))
         {
            _loc4_ = this.game.addChildAt(new thetoppestkek_shotgun_nxs25(),this.game.numChildren);
         }
         if(param1 == this.cet("incompetence_archetype_27xx","e3087cb8a659a11b0c25666294976065",27))
         {
            _loc4_ = this.game.addChildAt(new incompetence_archetype_27xx(),this.game.numChildren);
         }
         if(param1 == this.cet("phsc_aug","8a4d2bbb684e4f8560e865450cd840fa",8))
         {
            _loc4_ = this.game.addChildAt(new phsc_aug(),this.game.numChildren);
         }
         if(param1 == this.cet("moonhawk_railgun","c2bf02b21638567b034580a9361ab6a6",16))
         {
            _loc4_ = this.game.addChildAt(new moonhawk_railgun(),this.game.numChildren);
         }
         if(param1 == this.cet("moonhawk_railgun2","f53d3873a3915d7589e7cb64b2e1d407",17))
         {
            _loc4_ = this.game.addChildAt(new moonhawk_railgun2(),this.game.numChildren);
         }
         if(param1 == this.cet("lazyrain_heal_pistol","14438175b8408b9212ee7e4167fd08af",20))
         {
            _loc4_ = this.game.addChildAt(new lazyrain_heal_pistol(),this.game.numChildren);
         }
         if(param1 == this.cet("incompetence_glhf","f05573fdf3c2e80e2998c3c9aeeb8b2e",17))
         {
            _loc4_ = this.game.addChildAt(new incompetence_glhf(),this.game.numChildren);
         }
         if(param1 == this.cet("incompetence_glhf2","7a6f929f68a5c6116d1574f6b0cd57a1",18))
         {
            _loc4_ = this.game.addChildAt(new incompetence_glhf2(),this.game.numChildren);
         }
         if(param1 == this.cet("lazyrain_gravy_rl","f2fd4b8951982ce268f97f8b493cb57c",17))
         {
            _loc4_ = this.game.addChildAt(new lazyrain_gravy_rl(),this.game.numChildren);
         }
         if(param1 == this.cet("lazyrain_gravy_rl2","174ad817ac6f8558d287722ed7dfdcee",18))
         {
            _loc4_ = this.game.addChildAt(new lazyrain_gravy_rl2(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_owo_rl","dff826a20c11d030e6516bf8e408e2ef",17))
         {
            _loc4_ = this.game.addChildAt(new darkstar_1_owo_rl(),this.game.numChildren);
         }
         if(param1 == this.cet("phsc_plasma_shotgun","8b39cea8e27609766704e99cb8a014f0",19))
         {
            _loc4_ = this.game.addChildAt(new phsc_plasma_shotgun(),this.game.numChildren);
         }
         if(param1 == this.cet("phsc_android_shotgun","6b28b474d23a25d4590f244cf8892b8a",20))
         {
            _loc4_ = this.game.addChildAt(new phsc_android_shotgun(),this.game.numChildren);
         }
         if(param1 == this.cet("ditzy_cs_ik","00e3d52637e6eb10e98a86e3cbc37565",11))
         {
            _loc4_ = this.game.addChildAt(new ditzy_cs_ik(),this.game.numChildren);
         }
         if(param1 == this.cet("ditzy_cs_ik2","6899bda7918b527c75eb85abe539eb97",12))
         {
            _loc4_ = this.game.addChildAt(new ditzy_cs_ik2(),this.game.numChildren);
         }
         if(param1 == this.cet("phsc_ph01","686c8f82ef423644217ef665ee2635bb",9))
         {
            _loc4_ = this.game.addChildAt(new phsc_ph01(),this.game.numChildren);
         }
         if(param1 == this.cet("phsc_ph01b","f9569d214797e01d29022ae09a331264",10))
         {
            _loc4_ = this.game.addChildAt(new phsc_ph01b(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_railgun","89bfb83e37b5b5bfb78de9deaf562578",18))
         {
            _loc4_ = this.game.addChildAt(new darkstar_1_railgun(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_railgun2","d84c5ce957c9b464e6ddf709b079e120",19))
         {
            _loc4_ = this.game.addChildAt(new darkstar_1_railgun2(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_alien_rail_sg","bdd5adfe6326c1d40f83c01e42d49b77",24))
         {
            _loc4_ = this.game.addChildAt(new darkstar_1_alien_rail_sg(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_nade_c9","9871e5415c46f216b9853fa918857114",18))
         {
            _loc4_ = this.game.addChildAt(new darkstar_1_nade_c9(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_nade_c9b","3bcb0ddcdc30ffbefff58ce86faaf0a6",19))
         {
            _loc4_ = this.game.addChildAt(new darkstar_1_nade_c9b(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_rl","cb647ad03c3a40c4be779c554a192291",13))
         {
            _loc4_ = this.game.addChildAt(new darkstar_1_rl(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_bison","69e89b0086855b3193eea6fc2926b58d",16))
         {
            _loc4_ = this.game.addChildAt(new darkstar_1_bison(),this.game.numChildren);
         }
         if(param1 == this.cet("darkstar_1_auto_sg","8c8930ea7f6d8f04f4f5ef84e1e86a48",18))
         {
            _loc4_ = this.game.addChildAt(new darkstar_1_auto_sg(),this.game.numChildren);
         }
         if(param1 == this.cet("ditzy_focus_beam","2275ed32886aa300c8f71e5a29c2760e",16))
         {
            _loc4_ = this.game.addChildAt(new ditzy_focus_beam(),this.game.numChildren);
         }
         if(param1 == this.cet("boom5_revolver","8b635d7fe87348edbabf1f15d07a71ad",14))
         {
            _loc4_ = this.game.addChildAt(new boom5_revolver(),this.game.numChildren);
         }
         if(param1 == this.cet("thetoppestkek_scavenger_sg","224e76767455a1979fa9f17b5da9983e",26))
         {
            _loc4_ = this.game.addChildAt(new thetoppestkek_scavenger_sg(),this.game.numChildren);
         }
         if(param1 == this.cet("lazyrain_acid_gl","d178082672c5d4517cb4381e298e69b1",16))
         {
            _loc4_ = this.game.addChildAt(new lazyrain_acid_gl(),this.game.numChildren);
         }
         if(param1 == this.cet("lazyrain_plasma_smg","8849741c0b4b4d6cd0d374215eeb3ac4",19))
         {
            _loc4_ = this.game.addChildAt(new lazyrain_plasma_smg(),this.game.numChildren);
         }
         if(param1 == this.cet("lazyrain_plasma_smg2","dad173507c9c3cb1f4b18a89a58bce65",20))
         {
            _loc4_ = this.game.addChildAt(new lazyrain_plasma_smg2(),this.game.numChildren);
         }
         if(param1 == this.cet("roxxar_android_railgun","134cdcfaf8872b638bcb911c3877509c",22))
         {
            _loc4_ = this.game.addChildAt(new roxxar_android_railgun(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_invisgun","d6dfda416909c1f3c792ff8a9d79efab",12))
         {
            _loc4_ = this.game.addChildAt(new gun_invisgun(),this.game.numChildren);
         }
         if(param1 == this.cet("gun_sharkgun","fd9d1584a36c420c5eb89107348a9a79",12))
         {
            _loc4_ = this.game.addChildAt(new gun_sharkgun(),this.game.numChildren);
         }
         if(param1 == this.cet("item_grenade","99a10febbc7ad986b6e20a240e978e12",12))
         {
            _loc4_ = this.game.addChildAt(new item_grenade(),this.game.numChildren);
            ++this.mxnds1;
         }
         if(param1 == this.cet("item_port","5be0e3b089b733927cfdd6cb0f27fd4a",9))
         {
            _loc4_ = this.game.addChildAt(new item_grenade_port(),this.game.numChildren);
            ++this.mxnds2;
         }
         if(param1 == this.cet("item_shield","4b7b485644d249c686e46726006cf049",11))
         {
            _loc4_ = this.game.addChildAt(new item_grenade_shield(),this.game.numChildren);
            ++this.mxnds3;
         }
         if(_loc4_ != null)
         {
            this.NoMouse(_loc4_);
            _loc4_.custom_life = -1;
            _loc4_.custom_speed = -1;
            if(param2.onshot == undefined)
            {
               _loc4_.onshot = -1;
            }
            else
            {
               _loc4_.onshot = param2.onshot;
            }
            _loc4_.onreload = -1;
            if(param2.speed_multiplier == undefined)
            {
               _loc4_.speed_multiplier = 1;
            }
            else
            {
               _loc4_.speed_multiplier = param2.speed_multiplier;
            }
            if(param2.recoil_multiplier == undefined)
            {
               _loc4_.recoil_multiplier = 1;
            }
            else
            {
               _loc4_.recoil_multiplier = param2.recoil_multiplier;
            }
            if(param2.knockback_multiplier == undefined)
            {
               _loc4_.knockback_multiplier = 1;
            }
            else
            {
               _loc4_.knockback_multiplier = param2.knockback_multiplier;
            }
            if(param2.projectile_scale == undefined)
            {
               _loc4_.projectile_scale = 1;
            }
            else
            {
               _loc4_.projectile_scale = param2.projectile_scale;
            }
            _loc4_.model = param1;
            _loc4_.x = param2.x;
            _loc4_.y = param2.y;
            if(param2.startx == undefined)
            {
               _loc4_.startx = _loc4_.x;
               _loc4_.starty = _loc4_.y;
            }
            else
            {
               _loc4_.startx = param2.startx;
               _loc4_.starty = param2.starty;
            }
            _loc4_.upg = param2.upg;
            _loc4_.command = param2.command;
            _loc4_.onmade();
            if(!this.FORCE_CUSTOM_MAP)
            {
               if(!this.MP_mode)
               {
                  if(this.LOW_HPS)
                  {
                     if(_loc4_.stat_class == 2)
                     {
                        if(_loc4_.upg == 0)
                        {
                           _loc4_.stat_power *= 0.4;
                        }
                        if(_loc4_.upg == 1)
                        {
                           _loc4_.stat_power *= 0.6;
                        }
                     }
                  }
               }
            }
            _loc4_.floatframe = 2;
            _loc4_.io = true;
            _loc4_.deadtim = 0;
            _loc4_.av = _loc4_.stat_averange_min;
            if(param3)
            {
               _loc4_.picken_by = param2.picken_by;
               _loc4_.idd = param2.idd;
               _loc4_.b_p1 = param2.b_p1;
               this.arad[_loc4_.b_p1] = _loc4_.size1;
               _loc4_.b_p2 = param2.b_p2;
               this.arad[_loc4_.b_p2] = _loc4_.size2;
               this.ReConnect(param2.ch_ch1,_loc4_.b_p1,_loc4_.b_p2,0,this.Math_abs(_loc4_.len1 - _loc4_.len2),-1);
               _loc4_.ch_ch1 = param2.ch_ch1;
               this.guns[_loc4_.idd] = _loc4_;
               _loc4_.x = param2.x;
               _loc4_.y = param2.y;
               _loc4_.rotation = param2.rotation;
               _loc4_.scaleX = param2.scaleX;
               _loc4_.scaleY = param2.scaleY;
               this.game.removeChild(param2);
            }
            else
            {
               this.AskForCache(_loc4_);
               _loc4_.picken_by = -1;
               this.guns[this.gunstotal] = _loc4_;
               _loc4_.idd = this.gunstotal;
               _loc4_.b_p1 = this.CreatePoint(_loc4_.x + _loc4_.len1,_loc4_.y,0,0,_loc4_.size1,false,2,-this.gunstotal - 1);
               _loc4_.b_p2 = this.CreatePoint(_loc4_.x + _loc4_.len2,_loc4_.y,0,0,_loc4_.size2,false,2,-this.gunstotal - 1);
               _loc4_.ch_ch1 = this.Connect(_loc4_.b_p1,_loc4_.b_p2,0,this.Math_abs(_loc4_.len1 - _loc4_.len2),-1);
               ++this.gunstotal;
            }
         }
         return _loc4_;
      }
      
      public function TraceBg(param1:Number, param2:Number) : Boolean
      {
         this.i3 = 0;
         while(this.i3 < this.bgstotal)
         {
            if(param1 >= this.bgx[this.i3])
            {
               if(param1 <= this.bgx[this.i3] + this.bgw[this.i3])
               {
                  if(param2 >= this.bgy[this.i3])
                  {
                     if(param2 <= this.bgy[this.i3] + this.bgh[this.i3])
                     {
                        return true;
                     }
                  }
               }
            }
            ++this.i3;
         }
         return false;
      }
      
      public function TraceBgFalloff(param1:Number, param2:Number, param3:Number) : Boolean
      {
         this.i3 = 0;
         while(this.i3 < this.bgstotal)
         {
            if(param1 >= this.bgx[this.i3] - param3)
            {
               if(param1 <= this.bgx[this.i3] + this.bgw[this.i3] + param3)
               {
                  if(param2 >= this.bgy[this.i3] - param3)
                  {
                     if(param2 <= this.bgy[this.i3] + this.bgh[this.i3] + param3)
                     {
                        return true;
                     }
                  }
               }
            }
            ++this.i3;
         }
         return false;
      }
      
      public function UpdateCharProps(param1:MovieClip) : void
      {
         param1.voice = this.voices.usurpation;
         if(param1.char == 1 || param1.char >= 40 && param1.char <= 49 || param1.char == 83 || param1.char == 84 || param1.char == 36 || param1.char == 37 || param1.char == 22)
         {
            param1.armored = 1;
            param1.voice = this.voices.marine;
            if(param1.char == 37)
            {
               param1.voice = this.voices.hexagon;
            }
            this.RedrawPsi(param1.idd);
            if(param1.char == 36)
            {
               param1.nick = "Hermes";
            }
            if(param1.char == 37)
            {
               param1.nick = "Hexagon";
            }
            if(!this.MP_mode)
            {
               if(param1.char == 1 || param1.char >= 40 && param1.char <= 49)
               {
                  param1.mdl_head = this.skin_model[0];
                  if(this.skin_model[0] >= 49)
                  {
                     param1.mdl_body = this.skin_model[0];
                     param1.mdl_leg1_upper = this.skin_model[0];
                     param1.mdl_leg1_middle = this.skin_model[0];
                     param1.mdl_leg1_lower = this.skin_model[0];
                     param1.mdl_leg2_upper = this.skin_model[0];
                     param1.mdl_leg2_middle = this.skin_model[0];
                     param1.mdl_leg2_lower = this.skin_model[0];
                     param1.mdl_arm1_upper = this.skin_model[0];
                     param1.mdl_arm1_lower = this.skin_model[0];
                     param1.mdl_arm2_upper = this.skin_model[0];
                     param1.mdl_arm2_lower = this.skin_model[0];
                     param1.mobility = 0.75;
                     this.arad[param1.b_body] = 8 * 2;
                     this.arad[param1.b_toe] = 7 * 2;
                     this.arad[param1.b_arm1] = 3 * 1.5;
                     this.arad[param1.b_arm2] = 3 * 1.5;
                     this.arad[param1.b_head_start] = 8 * 1.5;
                     this.arad[param1.b_head_end] = 8 * 1.5;
                  }
               }
            }
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 2 || param1.char == 70 || param1.char == 71 || param1.char == 79 || param1.char == 80 || param1.char == 69)
         {
            param1.armored = 1;
            this.RedrawPsi(param1.idd);
            if(param1.char == 70)
            {
               param1.nick = "Usurpation Destroyer";
               param1.voice = this.voices.usurpation_destroyer;
               param1.blood_red = 1;
               param1.blood_green = 2;
               param1.blood_blue = 0;
            }
            else if(param1.char == 71)
            {
               param1.nick = "Usurpation Soldier Major";
               param1.blood_red = 0.2;
               param1.blood_green = 0.9;
               param1.blood_blue = 1;
            }
            else if(param1.char == 69)
            {
               param1.nick = "Usurpation Ranger";
               param1.blood_red = 0.3;
               param1.blood_green = 1.3;
               param1.blood_blue = 2;
            }
            else
            {
               param1.nick = "Usurpation Soldier Minor";
               param1.blood_red = 0.3;
               param1.blood_green = 1.3;
               param1.blood_blue = 2;
            }
         }
         else if(param1.char == 3 || param1.char == 61 || param1.char == 72 || param1.char == 75 || param1.char == 76 || param1.char == 35 || param1.char == 132 || param1.char == 135 || param1.char == 136 || param1.char == 138 || param1.char == 180)
         {
            param1.armored = 1;
            this.RedrawPsi(param1.idd);
            param1.voice = this.voices.proxy;
            if(param1.char == 35)
            {
               param1.nick = "Zephyr";
            }
            else if(param1.char == 132)
            {
               param1.nick = "Crossfire Headhunter";
            }
            else if(param1.char == 180)
            {
               param1.nick = "Dark Proxy";
            }
            else if(param1.char == 135 || param1.char == 136)
            {
               param1.nick = "Silk";
               param1.voice = this.voices.silk;
            }
            else if(param1.char == 138)
            {
               param1.nick = "Avre";
               param1.voice = this.voices.proxy_helmetless;
            }
            else
            {
               param1.nick = this.PROXY_NAME;
            }
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
            if(!this.MP_mode && !this.FORCE_CUSTOM_MAP && param1.char == 3)
            {
               param1.mdl_head = this.skin_model[1];
            }
            if(param1.mdl_head == 61)
            {
               param1.voice = this.voices.proxy_helmetless;
            }
            if(!this.MP_mode)
            {
               this.i3 = 1;
               this.UpdatePlayerColorSP(param1,this.i3);
            }
         }
         else if(param1.char == 4)
         {
            param1.armored = 2;
            param1.voice = this.voices.android;
            this.RedrawPsi(param1.idd);
            param1.nick = "Android T-01187";
            param1.blood_red = 0;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 33)
         {
            param1.armored = 2;
            param1.voice = this.voices.android;
            this.RedrawPsi(param1.idd);
            param1.nick = "Android ATM-105";
            param1.blood_red = 0;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 5)
         {
            param1.armored = 2;
            param1.voice = this.voices.mute;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Drone Controller";
            }
            param1.blood_red = 0;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 6)
         {
            param1.armored = 1;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Advanced Usurpation Soldier";
            }
            param1.blood_red = 0.1;
            param1.blood_green = 0.8;
            param1.blood_blue = 1;
         }
         else if(param1.char == 7)
         {
            param1.armored = 1;
            param1.voice = this.voices.cs;
            this.RedrawPsi(param1.idd);
            param1.mobility = 0.5;
            if(!param1.isplayer)
            {
               param1.nick = "Civil Security Heavy";
               this.arad[param1.b_body] = 8 * 2;
               this.arad[param1.b_toe] = 7 * 2;
               this.arad[param1.b_arm1] = 3 * 1.5;
               this.arad[param1.b_arm2] = 3 * 1.5;
            }
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 131)
         {
            param1.armored = 1;
            param1.voice = this.voices.crossfire_sentinel;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Crossfire Sentinel";
               this.arad[param1.b_body] = 8 * 2;
               this.arad[param1.b_toe] = 7 * 2;
               this.arad[param1.b_arm1] = 3 * 1.5;
               this.arad[param1.b_arm2] = 3 * 1.5;
            }
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 133)
         {
            param1.armored = 1;
            param1.voice = this.voices.cs;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Federation Soldier";
               this.arad[param1.b_body] = 8 * 2;
               this.arad[param1.b_toe] = 7 * 2;
               this.arad[param1.b_arm1] = 3 * 1.5;
               this.arad[param1.b_arm2] = 3 * 1.5;
            }
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 11)
         {
            param1.armored = 1;
            param1.voice = this.voices.cs;
            this.RedrawPsi(param1.idd);
            param1.mobility = 1;
            param1.nick = "Civil Security Boss";
            this.arad[param1.b_body] = 8 * 2;
            this.arad[param1.b_toe] = 7 * 2;
            this.arad[param1.b_arm1] = 3 * 1.5;
            this.arad[param1.b_arm2] = 3 * 1.5;
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 12 || param1.char == 17 || param1.char == 156)
         {
            param1.armored = 1;
            param1.voice = this.voices.ghost;
            this.RedrawPsi(param1.idd);
            if(param1.char == 12)
            {
               param1.isGhost = true;
            }
            param1.mobility = 1.25;
            param1.nick = "Civil Security Ghost";
            param1.blood_red = 1;
            param1.blood_green = 0.8;
            param1.blood_blue = 0.8;
         }
         else if(param1.char == 8 || param1.char == 77 || param1.char == 78)
         {
            param1.armored = 1;
            param1.voice = this.voices.cs;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Civil Security Lite";
            }
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 137)
         {
            param1.armored = 1;
            param1.voice = this.voices.cs;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Civil Security Riot";
            }
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 134)
         {
            param1.armored = 1;
            param1.voice = this.voices.vulture;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Vulture";
            }
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 32 || param1.char == 89 || param1.char == 90)
         {
            param1.armored = 1;
            param1.voice = this.voices.cs;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Civil Protector";
            }
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 9 || param1.char == 81 || param1.char == 82)
         {
            param1.armored = 2;
            param1.voice = this.voices.android;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Android SLC-56";
            }
            if(param1.char == 9)
            {
               param1.mobility = 2;
            }
            else
            {
               param1.mobility = 1;
            }
            param1.blood_red = 0;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 130)
         {
            param1.armored = 2;
            param1.voice = this.voices.mine_droid;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Mining Android";
            }
            param1.mobility = 1;
            param1.blood_red = 0;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 34)
         {
            param1.armored = 2;
            param1.voice = this.voices.hum_droid;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Android DT-148";
            }
            param1.mobility = 1;
            param1.blood_red = 0;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 13 || param1.char == 73 || param1.char == 74 || param1.char == 38 || param1.char == 39)
         {
            param1.armored = 1;
            param1.voice = this.voices.noir_lime;
            this.RedrawPsi(param1.idd);
            param1.nick = this.NOIR_NAME;
            if(param1.char == 13)
            {
               param1.mobility = 0.85;
            }
            else
            {
               param1.mobility = 1;
            }
            if(param1.char == 38)
            {
               param1.blood_red = 2;
               param1.blood_green = 2;
               param1.blood_blue = 0;
            }
            else
            {
               param1.blood_red = 1;
               param1.blood_green = 0;
               param1.blood_blue = 0;
            }
         }
         else if(param1.char == 23 || param1.char == 24 || param1.char == 25 || param1.char == 26)
         {
            param1.armored = 1;
            param1.voice = this.voices.cs;
            this.RedrawPsi(param1.idd);
            param1.nick = "Guard";
            param1.mobility = 1;
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 18 || param1.char == 21)
         {
            param1.armored = 1;
            if(param1.char == 18)
            {
               param1.voice = this.voices.star_defender;
            }
            else
            {
               param1.voice = this.voices.marine;
            }
            this.RedrawPsi(param1.idd);
            param1.nick = "Star Defender";
            param1.mobility = 1;
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 14 || param1.char == 15 || param1.char == 29 || param1.char == 85 || param1.char == 86)
         {
            param1.armored = 1;
            this.RedrawPsi(param1.idd);
            if(param1.char == 15)
            {
               param1.voice = this.voices.falkok_phoenix;
               param1.nick = "Phoenix Falkok";
            }
            else if(param1.char == 29)
            {
               param1.voice = this.voices.falkok_phoenix;
               param1.nick = "Falkok Boss";
            }
            else
            {
               param1.voice = this.voices.falkok;
               param1.nick = "Falkok";
            }
            param1.mobility = 0.6;
            if(param1.char == 85 || param1.char == 86)
            {
               param1.mobility = 1;
            }
            param1.blood_red = 0.31;
            param1.blood_green = 0.62;
            param1.blood_blue = 1.88;
         }
         else if(param1.char == 31)
         {
            param1.armored = 1;
            param1.voice = this.voices.reakhohsha;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Reakhohsha Operative";
            }
            param1.mobility = 0.9;
            param1.blood_red = 222 / 127;
            param1.blood_green = 129 / 127;
            param1.blood_blue = 223 / 127;
         }
         else if(param1.char == 16 || param1.char == 27 || param1.char == 28)
         {
            param1.armored = 1;
            param1.voice = this.voices.grub;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               if(param1.char == 27)
               {
                  param1.nick = "Armored Grub";
               }
               else if(param1.char == 28)
               {
                  param1.nick = "Elite Grub";
               }
               else
               {
                  param1.nick = "Grub";
               }
            }
            param1.mobility = 0.6;
            param1.blood_red = 1.8;
            param1.blood_green = 1.5;
            param1.blood_blue = 0.4;
         }
         else if(param1.char == 19 || param1.char == 87 || param1.char == 88)
         {
            param1.armored = 1;
            param1.voice = this.voices.cs;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "Raven";
            }
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char >= 139 && param1.char <= 150)
         {
            param1.armored = param1.char >= 149 ? 1 : 0;
            if(param1.char >= 149)
            {
               param1.voice = this.voices.noir_lime;
            }
            else if(param1.char == 142 || param1.char == 143 || param1.char == 144 || param1.char == 148)
            {
               param1.voice = this.voices.proxy_helmetless;
            }
            else
            {
               param1.voice = this.voices.civilian_male;
            }
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               if(param1.char == 147 || param1.char == 148)
               {
                  param1.nick = "Worker";
               }
               else if(param1.char == 149 || param1.char == 150)
               {
                  param1.nick = "S.W.A.T.";
               }
               else
               {
                  param1.nick = "Civilian";
               }
            }
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 151 || param1.char == 152 || param1.char == 153 || param1.char == 154 || param1.char == 155 || param1.char == 157 || param1.char == 158 || param1.char == 159 || param1.char == 160 || param1.char == 161)
         {
            param1.armored = 1;
            param1.voice = this.voices.xin;
            this.RedrawPsi(param1.idd);
            if(!param1.isplayer)
            {
               param1.nick = "xin";
            }
            param1.blood_red = 155 / 255;
            param1.blood_green = 19 / 255;
            param1.blood_blue = 58 / 255;
         }
         else if(param1.char == 162)
         {
            param1.armored = 1;
            param1.voice = this.voices.marine;
            this.RedrawPsi(param1.idd);
            param1.nick = "Pinkine";
         }
         else if(param1.char == 163)
         {
            param1.armored = 0;
            param1.voice = this.voices.hexagon;
            this.RedrawPsi(param1.idd);
            param1.nick = "Raider";
            param1.blood_red = 255 / 255;
            param1.blood_green = 0 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 164)
         {
            param1.armored = 1;
            param1.voice = this.voices.marine;
            this.RedrawPsi(param1.idd);
            param1.nick = "Blue Heavy Hero";
         }
         else if(param1.char == 165)
         {
            param1.armored = 1;
            param1.voice = this.voices.marine;
            this.RedrawPsi(param1.idd);
            param1.nick = "Red Heavy Hero";
         }
         else if(param1.char == 166)
         {
            param1.armored = 1;
            param1.voice = this.voices.orakin;
            this.RedrawPsi(param1.idd);
            param1.nick = "Orakin";
            param1.blood_red = 73 / 255;
            param1.blood_green = 209 / 255;
            param1.blood_blue = 153 / 255;
         }
         else if(param1.char == 167)
         {
            param1.armored = 1;
            param1.voice = this.voices.hexagon;
            this.RedrawPsi(param1.idd);
            param1.nick = "Husk";
         }
         else if(param1.char == 168)
         {
            param1.armored = 1;
            param1.voice = this.voices.marine;
            this.RedrawPsi(param1.idd);
            param1.nick = "Hex";
         }
         else if(param1.char == 169)
         {
            param1.armored = 1;
            param1.voice = this.voices.arrin;
            this.RedrawPsi(param1.idd);
            param1.nick = "Arrin";
         }
         else if(param1.char == 170)
         {
            param1.armored = 1;
            param1.voice = this.voices.usurpation;
            this.RedrawPsi(param1.idd);
            param1.nick = "Heavy Usurpation Soldier";
            param1.blood_red = 0.3;
            param1.blood_green = 1.3;
            param1.blood_blue = 2;
         }
         else if(param1.char == 171)
         {
            param1.armored = 1;
            param1.voice = this.voices.grub;
            this.RedrawPsi(param1.idd);
            param1.nick = "CyberGrub S1lk";
         }
         else if(param1.char == 172)
         {
            param1.armored = 1;
            param1.voice = this.voices.grosk;
            this.RedrawPsi(param1.idd);
            param1.nick = "Grosk";
         }
         else if(param1.char == 173)
         {
            param1.armored = 1;
            param1.voice = this.voices.marine;
            this.RedrawPsi(param1.idd);
            param1.nick = "Futuristic Knight";
         }
         else if(param1.char == 174)
         {
            param1.armored = 1;
            param1.voice = this.voices.proxy;
            this.RedrawPsi(param1.idd);
            param1.nick = "Uncivil Proxy";
         }
         else if(param1.char == 175)
         {
            param1.armored = 0;
            param1.voice = this.voices.serkova;
            this.RedrawPsi(param1.idd);
            param1.nick = "Serkova Insertion Unit";
            param1.blood_red = 255 / 255;
            param1.blood_green = 0 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 176)
         {
            param1.armored = 0;
            param1.voice = this.voices.arrin;
            this.RedrawPsi(param1.idd);
            param1.nick = "Xenos Scout";
            param1.blood_red = 255 / 255;
            param1.blood_green = 0 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 177)
         {
            param1.armored = 0;
            param1.voice = this.voices.hexagon;
            this.RedrawPsi(param1.idd);
            param1.nick = "Armored Trooper";
            param1.blood_red = 255 / 255;
            param1.blood_green = 0 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 178)
         {
            param1.armored = 0;
            param1.voice = this.voices.marine;
            this.RedrawPsi(param1.idd);
            param1.nick = "Marine";
            param1.blood_red = 255 / 255;
            param1.blood_green = 0 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 179)
         {
            param1.armored = 0;
            param1.voice = this.voices.elurra;
            this.RedrawPsi(param1.idd);
            param1.nick = "Elurra";
            param1.blood_red = 255 / 255;
            param1.blood_green = 0 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 181)
         {
            param1.armored = 0;
            param1.voice = this.voices.cs;
            this.RedrawPsi(param1.idd);
            param1.nick = "Huntsman";
            param1.blood_red = 255 / 255;
            param1.blood_green = 0 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 182)
         {
            param1.armored = 0;
            param1.voice = this.voices.cs;
            this.RedrawPsi(param1.idd);
            param1.nick = "Huntsman";
            param1.blood_red = 255 / 255;
            param1.blood_green = 0 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 183)
         {
            param1.armored = 2;
            param1.voice = this.voices.ferro;
            this.RedrawPsi(param1.idd);
            param1.nick = "Lt. Ferro";
            param1.blood_red = 255 / 255;
            param1.blood_green = 0 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 184)
         {
            param1.armored = 0;
            param1.voice = this.voices.grosk;
            this.RedrawPsi(param1.idd);
            param1.nick = "Xenos Titan";
            param1.blood_red = 255 / 255;
            param1.blood_green = 0 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 185)
         {
            param1.armored = 0;
            param1.voice = this.voices.elurra;
            this.RedrawPsi(param1.idd);
            param1.nick = "Elurra";
            param1.blood_red = 255 / 255;
            param1.blood_green = 0 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 186)
         {
            param1.armored = 0;
            param1.voice = this.voices.drohnentroop;
            this.RedrawPsi(param1.idd);
            param1.nick = "Drohnen Heavy";
            param1.blood_red = 255 / 255;
            param1.blood_green = 0 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 187)
         {
            param1.armored = 0;
            param1.voice = this.voices.usurpation;
            this.RedrawPsi(param1.idd);
            param1.nick = "Cromastakan";
            param1.blood_red = 125 / 255;
            param1.blood_green = 33 / 255;
            param1.blood_blue = 119 / 255;
         }
         else if(param1.char == 188)
         {
            param1.armored = 0;
            param1.voice = this.voices.serkova;
            this.RedrawPsi(param1.idd);
            param1.nick = "Sgt. Davais";
            param1.blood_red = 255 / 255;
            param1.blood_green = 0 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 189)
         {
            param1.armored = 0;
            param1.voice = this.voices.cs;
            this.RedrawPsi(param1.idd);
            param1.nick = "Maroon";
            param1.blood_red = 255 / 255;
            param1.blood_green = 0 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 190)
         {
            param1.armored = 0;
            param1.voice = this.voices.drohnentroop;
            this.RedrawPsi(param1.idd);
            param1.nick = "Drohnen Skimisher";
            param1.blood_red = 255 / 255;
            param1.blood_green = 0 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 191)
         {
            param1.armored = 0;
            param1.voice = this.voices.serkova;
            this.RedrawPsi(param1.idd);
            param1.nick = "Serkova Recon Unit";
            param1.blood_red = 255 / 255;
            param1.blood_green = 0 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 192)
         {
            param1.armored = 0;
            param1.voice = this.voices.drohnenfem;
            this.RedrawPsi(param1.idd);
            param1.nick = "Drohnen Drifter";
            param1.blood_red = 123 / 255;
            param1.blood_green = 104 / 255;
            param1.blood_blue = 238 / 255;
         }
         else if(param1.char == 193)
         {
            param1.armored = 0;
            param1.voice = this.voices.grosk;
            this.RedrawPsi(param1.idd);
            param1.nick = "Xenos Marine";
            param1.blood_red = 255 / 255;
            param1.blood_green = 0 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 194)
         {
            param1.armored = 2;
            param1.voice = this.voices.oldandroid;
            this.RedrawPsi(param1.idd);
            param1.nick = "Dark Android SLC-56";
            param1.mobility = 2;
            param1.blood_red = 0;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         else if(param1.char == 195)
         {
            param1.armored = 0;
            param1.voice = this.voices.drohnenfem;
            this.RedrawPsi(param1.idd);
            param1.nick = "Wraith";
            param1.blood_red = 120 / 255;
            param1.blood_green = 0 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 196)
         {
            param1.armored = 0;
            param1.voice = this.voices.serkova;
            this.RedrawPsi(param1.idd);
            param1.nick = "Serkova Armored Unit";
            param1.blood_red = 255 / 255;
            param1.blood_green = 0 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 197)
         {
            param1.armored = 0;
            param1.voice = this.voices.phantom;
            this.RedrawPsi(param1.idd);
            param1.nick = "Phantom";
            param1.blood_red = 255 / 255;
            param1.blood_green = 0 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 198)
         {
            param1.armored = 0;
            param1.voice = this.voices.cs;
            this.RedrawPsi(param1.idd);
            param1.nick = "Blue Civil Security Heavy";
            param1.blood_red = 255 / 255;
            param1.blood_green = 0 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 199)
         {
            param1.armored = 0;
            param1.voice = this.voices.cs;
            this.RedrawPsi(param1.idd);
            param1.nick = "Red Civil Security Heavy";
            param1.blood_red = 255 / 255;
            param1.blood_green = 0 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 200)
         {
            param1.armored = 0;
            param1.voice = this.voices.silk;
            this.RedrawPsi(param1.idd);
            param1.nick = "Xenos Welder";
            param1.blood_red = 255 / 255;
            param1.blood_green = 0 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 201)
         {
            param1.armored = 1;
            param1.voice = this.voices.hexagon;
            this.RedrawPsi(param1.idd);
            param1.nick = "Xenos Special Unit";
            param1.blood_red = 255 / 255;
            param1.blood_green = 0 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 202)
         {
            param1.armored = 0;
            param1.voice = this.voices.serkova;
            this.RedrawPsi(param1.idd);
            param1.nick = "Serkova Assault Unit";
            param1.blood_red = 255 / 255;
            param1.blood_green = 0 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 203)
         {
            param1.armored = 0;
            param1.voice = this.voices.serkova;
            this.RedrawPsi(param1.idd);
            param1.nick = "Serkova Gunner Unit";
            param1.blood_red = 255 / 255;
            param1.blood_green = 0 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 204)
         {
            param1.armored = 0;
            param1.voice = this.voices.serkova;
            this.RedrawPsi(param1.idd);
            param1.nick = "Serkova Granadier Unit";
            param1.blood_red = 255 / 255;
            param1.blood_green = 0 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 205)
         {
            param1.armored = 0;
            param1.voice = this.voices.serkova;
            this.RedrawPsi(param1.idd);
            param1.nick = "Serkova Team Leader";
            param1.blood_red = 255 / 255;
            param1.blood_green = 0 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 206)
         {
            param1.armored = 0;
            param1.voice = this.voices.serkova;
            this.RedrawPsi(param1.idd);
            param1.nick = "Serkova Rescue Unit";
            param1.blood_red = 255 / 255;
            param1.blood_green = 0 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 207)
         {
            param1.armored = 0;
            param1.voice = this.voices.serkova;
            this.RedrawPsi(param1.idd);
            param1.nick = "Serkova Technician Unit";
            param1.blood_red = 255 / 255;
            param1.blood_green = 0 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 208)
         {
            param1.armored = 0;
            param1.voice = this.voices.grub;
            this.RedrawPsi(param1.idd);
            param1.nick = "Serkova Grub";
            param1.blood_red = 255 / 255;
            param1.blood_green = 255 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 209)
         {
            param1.armored = 1;
            param1.voice = this.voices.grub;
            this.RedrawPsi(param1.idd);
            param1.nick = "Serkova Reinforced Grub";
            param1.blood_red = 255 / 255;
            param1.blood_green = 255 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 210)
         {
            param1.armored = 2;
            param1.voice = this.voices.grub;
            this.RedrawPsi(param1.idd);
            param1.nick = "Serkova Devastator Grub ";
            param1.blood_red = 255 / 255;
            param1.blood_green = 255 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 211)
         {
            param1.armored = 2;
            param1.voice = this.voices.android;
            this.RedrawPsi(param1.idd);
            param1.nick = "XBT-117 Android";
         }
         else if(param1.char == 212)
         {
            param1.armored = 0;
            param1.voice = this.voices.orakin;
            this.RedrawPsi(param1.idd);
            param1.nick = "Teneguilae";
            param1.blood_red = 125 / 255;
            param1.blood_green = 33 / 255;
            param1.blood_blue = 119 / 255;
         }
         else if(param1.char == 213)
         {
            param1.armored = 2;
            param1.voice = this.voices.android;
            this.RedrawPsi(param1.idd);
            param1.nick = "Walker";
         }
         else if(param1.char == 214)
         {
            param1.armored = 0;
            param1.voice = this.voices.grub;
            this.RedrawPsi(param1.idd);
            param1.nick = "Space Grub";
            param1.blood_red = 1.8;
            param1.blood_green = 1.5;
            param1.blood_blue = 0.4;
         }
         else if(param1.char == 215)
         {
            param1.armored = 0;
            param1.voice = this.voices.phantom;
            this.RedrawPsi(param1.idd);
            param1.nick = "Phantom";
            param1.blood_red = 255 / 255;
            param1.blood_green = 0 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 216)
         {
            param1.armored = 0;
            param1.voice = this.voices.phantom;
            this.RedrawPsi(param1.idd);
            param1.nick = "Phantom";
            param1.blood_red = 255 / 255;
            param1.blood_green = 0 / 255;
            param1.blood_blue = 0 / 255;
         }
         else if(param1.char == 217)
         {
            param1.armored = 0;
            param1.voice = this.voices.phantom;
            this.RedrawPsi(param1.idd);
            param1.nick = "Misfit";
            param1.blood_red = 255 / 255;
            param1.blood_green = 255 / 255;
            param1.blood_blue = 255 / 255;
         }
         else
         {
            param1.armored = 0;
            param1.voice = this.voices.usurpation;
            param1.blood_red = 1;
            param1.blood_green = 0;
            param1.blood_blue = 0;
         }
         if(Boolean(param1.charset_by_user) || this.MP_mode && this.MP_type != 2)
         {
            param1.mobility = 1;
            param1.isGhost = false;
         }
         if(this.MP_mode)
         {
            if(this.MP_myid == param1.idd)
            {
               param1.nick = this.MP_nick;
            }
         }
      }
      
      public function UpdateLightmap(param1:Boolean) : void
      {
         var a:uint = 0;
         var g:Sprite = null;
         var forced:Boolean = param1;
         if(forced || this.optimalupd)
         {
            if(this.HQ)
            {
               a = uint(getTimer());
               this.bmpData = this.bmpData_backed.clone();
               this.i4 = 0;
               while(this.i4 < this.lampstotal)
               {
                  if(this.lamps_power2[this.i4] != 0)
                  {
                     g = this.lamps_sprites[this.i4];
                     try
                     {
                        this.bmpData.drawWithQuality(g,this.lightmap_ma,null,null,null,true,StageQuality.BEST);
                     }
                     catch(e:*)
                     {
                        bmpData.draw(g,lightmap_ma,null,null,null,true);
                     }
                  }
                  ++this.i4;
               }
               this.bmpData.colorTransform(this.bmpData.rect,new ColorTransform(1,1,1,-1,0,0,0,255));
               this.shadowbmp.bitmapData = this.bmpData;
               this.shadowbmp.smoothing = true;
               this.optimalupd = this.MP_mode ? getTimer() - a < 50 : getTimer() - a < 250;
               if(this.LITE_PHYS)
               {
                  this.optimalupd = false;
               }
               if(!this.optimalupd)
               {
                  this.bmpData_backed.dispose();
                  this.i4 = 0;
                  while(this.i4 < this.lampstotal)
                  {
                     this.lamps_sprites[this.i4] = null;
                     ++this.i4;
                  }
                  this.lamps_sprites = new Array();
               }
            }
         }
      }
      
      public function DimLight(param1:int) : void
      {
         this.lamps_power2[param1] = 0;
         this.a_int = 0;
         while(this.a_int < this.flarestotal)
         {
            if(this.flare[this.a_int].x == this.lamps_x[param1])
            {
               if(this.flare[this.a_int].y == this.lamps_y[param1])
               {
                  this.flare[this.a_int].visible = false;
                  this.flare[this.a_int].scaleX = this.flare[this.a_int].scaleX = 0;
               }
            }
            ++this.a_int;
         }
         if(!this.MP_mode || this.MP_mode && this.MP_type == 2)
         {
            this.UpdateLightmap(false);
         }
      }
      
      public function EnLight(param1:int) : void
      {
         this.lamps_power2[param1] = 1;
         this.a_int = 0;
         while(this.a_int < this.flarestotal)
         {
            if(this.flare[this.a_int].x == this.lamps_x[param1])
            {
               if(this.flare[this.a_int].y == this.lamps_y[param1])
               {
                  this.flare[this.a_int].scaleX = this.flare[this.a_int].scaleX = 1;
               }
            }
            ++this.a_int;
         }
         if(!this.MP_mode || this.MP_mode && this.MP_type == 2)
         {
            this.UpdateLightmap(false);
         }
      }
      
      public function ShotLight(param1:int) : void
      {
         if(this.ALLOW_LIGHT_BREAK)
         {
            this.Effect(this.lamps_x[param1],this.lamps_y[param1],1,0,0);
            this.Effect(this.lamps_x[param1],this.lamps_y[param1],8,Math.random() - 0.5,Math.random() - 0.5);
            this.Effect(this.lamps_x[param1],this.lamps_y[param1],8,Math.random() - 0.5,Math.random() - 0.5);
            this.Effect(this.lamps_x[param1],this.lamps_y[param1],8,Math.random() - 0.5,Math.random() - 0.5);
            if(Math.random() > 0.5)
            {
               this.PlaySound(this.s_glass1,this.lamps_x[param1],this.lamps_y[param1]);
            }
            else
            {
               this.PlaySound(this.s_glass2,this.lamps_x[param1],this.lamps_y[param1]);
            }
            this.DimLight(param1);
         }
      }
      
      public function addNearBoxBSP(param1:int) : void
      {
         var _loc2_:int = 0;
         var _loc3_:int = 0;
         var _loc4_:int = 0;
         var _loc5_:int = 0;
         var _loc6_:int = 0;
         var _loc7_:int = 0;
         var _loc8_:int = 0;
         _loc2_ = this.MP_mode ? 3 : 1;
         _loc3_ = Math.floor((this.boxx[param1] - this.NearBoxBSP_left) / this.NearBoxBSP_stepsize) - _loc2_;
         _loc4_ = Math.floor((this.boxy[param1] - this.NearBoxBSP_top) / this.NearBoxBSP_stepsize) - _loc2_;
         _loc5_ = Math.ceil((this.boxx[param1] + this.boxw[param1] - this.NearBoxBSP_left) / this.NearBoxBSP_stepsize) + _loc2_;
         _loc6_ = Math.ceil((this.boxy[param1] + this.boxh[param1] - this.NearBoxBSP_top) / this.NearBoxBSP_stepsize) + _loc2_;
         _loc7_ = _loc3_;
         while(_loc7_ <= _loc5_)
         {
            _loc8_ = _loc4_;
            while(_loc8_ <= _loc6_)
            {
               this.NearBoxBSP[_loc7_][_loc8_].push(param1);
               _loc8_++;
            }
            _loc7_++;
         }
      }
      
      public function GetNearBoxBSP_at(param1:int, param2:int) : Vector.<int>
      {
         param1 = (param1 - this.NearBoxBSP_left) / this.NearBoxBSP_stepsize;
         param2 = (param2 - this.NearBoxBSP_top) / this.NearBoxBSP_stepsize;
         if(param1 < 0)
         {
            return this.NearBoxBSP_empty;
         }
         if(param1 >= this.NearBoxBSP_width)
         {
            return this.NearBoxBSP_empty;
         }
         if(param2 < 0)
         {
            return this.NearBoxBSP_empty;
         }
         if(param2 >= this.NearBoxBSP_height)
         {
            return this.NearBoxBSP_empty;
         }
         return this.NearBoxBSP[param1][param2];
      }
      
      public function PushSynonym(param1:String, param2:int) : void
      {
         if(param1 != undefined && param1.charAt(0) == "#")
         {
            this.synonym_uid[this.synonym_uid.length] = param1;
            this.synonym_id[this.synonym_id.length] = param2;
         }
      }
      
      public function DecodeUID(param1:String) : *
      {
         if(param1 == null || param1 == undefined)
         {
            param1 = "-1";
         }
         if(param1.charAt(0) == "#")
         {
            if(this.synonym_id[this.synonym_uid.indexOf(param1)] == undefined)
            {
               return param1;
            }
            return this.synonym_id[this.synonym_uid.indexOf(param1)];
         }
         if(int(param1) + "" == param1)
         {
            return int(param1);
         }
         return param1;
      }
      
      public function movieClipHasLabel(param1:MovieClip, param2:String) : Boolean
      {
         var _loc3_:int = 0;
         var _loc4_:int = 0;
         var _loc5_:FrameLabel = null;
         _loc3_ = int(param1.currentLabels.length);
         _loc4_ = 0;
         while(_loc4_ < _loc3_)
         {
            _loc5_ = param1.currentLabels[_loc4_];
            if(_loc5_.name == param2)
            {
               return true;
            }
            _loc4_++;
         }
         return false;
      }
      
      public function NumberLimited(param1:String) : Number
      {
         var _loc2_:Number = NaN;
         var _loc3_:* = null;
         _loc2_ = Number(param1);
         if(_loc2_ > 1000000000)
         {
            return 1000000000;
         }
         _loc3_ = _loc2_ + "";
         if(param1 != _loc3_)
         {
            return Math.pow(10,param1.length) - 1;
         }
         return _loc2_;
      }
      
      public function UserSays(param1:int, param2:String) : void
      {
         if(this.user_says_trigger >= 0)
         {
            this.user_says_id = param1;
            this.user_says_text = param2;
            this.EXEC_TRIGGER(this.user_says_trigger);
         }
      }
      
      public function LoadMap() : void
      {
         var loadmap_stage:String = null;
         var POST_ERR_CODE:* = undefined;
         var xml:XML = null;
         var a:* = undefined;
         var b:* = undefined;
         var c:* = undefined;
         var mShape_front:* = undefined;
         var bookInfo:XML = null;
         var brdr:int = 0;
         var TEST_STRING:String = null;
         var watercolor1:String = null;
         var watercolor2:String = null;
         var region_i:int = 0;
         var trigger_i:int = 0;
         var timer_i:int = 0;
         var player_i:int = 0;
         var half_step_size:int = 0;
         var ldis:Number = NaN;
         var brtns:Number = NaN;
         var col:Array = null;
         var len:int = 0;
         var i:int = 0;
         var _mtx:Matrix = null;
         var SnowShape:* = undefined;
         var my_date:Date = null;
         var traces_start:Number = NaN;
         var traces_end:* = undefined;
         var bookInfo2:XML = null;
         var foreground:Boolean = false;
         var sprite_to_draw_at:Sprite = null;
         var bitmap_data:BitmapData = null;
         var color_hex:* = undefined;
         var matr:Matrix = null;
         var offset_x:Number = NaN;
         var offset_y:Number = NaN;
         var id:int = 0;
         var custom_image:Object = null;
         var dec:uint = 0;
         var n:* = undefined;
         var model:String = null;
         var layer_to_add:int = 0;
         var new_model:String = null;
         var new_command:int = 0;
         var new_upg:int = 0;
         var GAMEPLAY_MODIFICATIONS_parts:Array = null;
         var mods:int = 0;
         var GAMEPLAY_MODIFICATIONS_parts_parts:Array = null;
         var this_limit:Number = NaN;
         var cur_label:String = null;
         var ct:ColorTransform = null;
         var corner_sample_left:* = undefined;
         var corner_sample_right:* = undefined;
         var snow:Sprite = null;
         var rad:Number = NaN;
         var global_lamps_power:Number = NaN;
         var falloff:Number = NaN;
         var fallstep:Number = NaN;
         var lamps_from:int = 0;
         var bmp_w:* = undefined;
         var bmp_h:int = 0;
         var g:Sprite = null;
         var cTransform:ColorTransform = null;
         var clrs:Array = null;
         var poss:Array = null;
         var dip:Number = NaN;
         var alphas:Array = null;
         var matr0:Matrix = null;
         var siz:Number = NaN;
         var lamp_step:Number = NaN;
         var an:Number = NaN;
         var this_rad:Number = NaN;
         var xx:* = undefined;
         var yy:Number = NaN;
         var temp_snow:* = undefined;
         var player_version_os:String = null;
         var crash_failed:* = undefined;
         var crash_done:* = undefined;
         var _fullInfo:String = null;
         var _osSplitArr:Array = null;
         var _versionSplitArr:Array = null;
         var _osInfo:String = null;
         var _versionInfo:Number = NaN;
         this.tnds = 10;
         loadmap_stage = "0";
         if(this.graphics_texture_front0_toggled)
         {
            this.graphics_texture_front0 = new Sprite();
         }
         this.chat_bubble = [-1,-1];
         this.ambient_sounds = true;
         this.fall_impact_height = 1;
         this.fall_impact_stability = false;
         this.kinetic_through_walls = false;
         this.kinetic_range = 750;
         this.reflect_distance = 30;
         this.global_collision = true;
         this.limb_breaking_allowed = true;
         this.action_draw = {};
         this.Experiment_Perf = false;
         this.current_draw = new Sprite();
         this.mxnds1 = 0;
         this.mxnds2 = 0;
         this.mxnds3 = 0;
         this.tnds = 10;
         this.str = "";
         try
         {
            try
            {
               this.am_base_ch.stop();
               this.am_wind_ch.stop();
               this.am_base_ch = this.s_am_base.play(0,0,this.am_base_Transform);
               this.am_base_ch.soundTransform.volume = 0;
               this.am_base_ch.addEventListener(Event.SOUND_COMPLETE,this.am_base_PlayAgain);
               this.am_wind_ch = this.s_am_wind.play(0,0,this.am_wind_Transform);
               this.am_wind_ch.soundTransform.volume = 0;
               this.am_wind_ch.addEventListener(Event.SOUND_COMPLETE,this.am_wind_PlayAgain);
            }
            catch(error:Error)
            {
            }
            this.optimalupd = true;
            POST_ERR_CODE = "";
            this.CUR_MUSIC_VOLUME = 0;
            this.MUSIC_COLDDOWN = 100;
            loadmap_stage = 1;
            loadmap_stage = 1001;
            this.SHOW_FRAG_MESSAGES = true;
            this.level_variables = {};
            this.dm_slots_on_spawn = new Array();
            this.dm_max_guns_on_spawn = 3;
            this.user_says_trigger = -1;
            this.on_user_connected_trigger = -1;
            if(this.MP_mode && this.MP_giveguns)
            {
               this.multiplayer_repsawn_timer_speed = 1.5;
            }
            else
            {
               this.multiplayer_repsawn_timer_speed = 1;
            }
            this.ENABLE_LEVEL_LOGIC_ERRORS = false;
            if(this.MP_giveguns)
            {
               this.dm_slots_on_spawn = [6,1,4,2,3,8,5,9,7];
            }
            Mouse.hide();
            loadmap_stage += "; " + MovieClip(root).mapdata.slice(0,3);
            loadmap_stage += "; " + (MovieClip(root).mapdata.slice(0,3) == "<q.");
            if(MovieClip(root).mapdata.slice(0,3) == "<q.")
            {
               loadmap_stage += "; eq qp";
               MovieClip(root).mapdata = this.un_qpack(MovieClip(root).mapdata);
               loadmap_stage += "; unqp ok";
            }
            loadmap_stage += "; qp is " + this.qpack_pattern_length;
            loadmap_stage += "; pass qp eq tst";
            this.firstframe = true;
            loadmap_stage += "; bfr parse";
            xml = new XML("<r>" + MovieClip(root).mapdata + "</r>");
            loadmap_stage = 1004;
            loadmap_stage = 1005;
            if(this.PSYCHOBLOOD_MODE == 1)
            {
               this.pb4.visible = false;
               this.pb0.gotoAndStop(this.PSYCHOBLOOD_MODE);
               this.pb1.gotoAndStop(this.PSYCHOBLOOD_MODE);
               this.pb2.gotoAndStop(this.PSYCHOBLOOD_MODE);
               this.pb3.gotoAndStop(this.PSYCHOBLOOD_MODE);
            }
            else if(this.PSYCHOBLOOD_MODE == 2)
            {
               this.pb0.gotoAndStop(this.PSYCHOBLOOD_MODE);
               this.pb1.gotoAndStop(this.PSYCHOBLOOD_MODE);
               this.pb2.gotoAndStop(this.PSYCHOBLOOD_MODE);
               this.pb3.gotoAndStop(this.PSYCHOBLOOD_MODE);
            }
            loadmap_stage = 1006;
            this.pb0.alpha = 0;
            this.pb1.alpha = 0;
            this.pb2.alpha = 0;
            this.pb3.alpha = 0;
            this.pb4.alpha = 0;
            loadmap_stage = 1007;
            this.boxestotal = 0;
            this.doorstotal = 0;
            this.regionstotal = 0;
            this.lampstotal = 0;
            this.gunstotal = 0;
            this.pushstotal = 0;
            this.bgstotal = 0;
            loadmap_stage = 1008;
            this.mShape = new Sprite();
            mShape_front = new Sprite();
            loadmap_stage = 2;
            for each(bookInfo in xml.children())
            {
               a = bookInfo.name();
               b = new Array();
               for each(bookInfo2 in bookInfo.attributes())
               {
                  b["#" + bookInfo2.name()] = bookInfo2;
               }
               if(a == "box")
               {
                  this.boxx[this.boxestotal] = new Number(b["#x"]);
                  this.boxy[this.boxestotal] = new Number(b["#y"]);
                  this.boxw[this.boxestotal] = new Number(b["#w"]);
                  this.boxh[this.boxestotal] = new Number(b["#h"]);
                  this.boxmat[this.boxestotal] = new int(b["#m"]);
                  if(!isNaN(this.boxx[this.boxestotal]) && !isNaN(this.boxy[this.boxestotal]) && !isNaN(this.boxw[this.boxestotal]) && !isNaN(this.boxh[this.boxestotal]) && !isNaN(this.boxmat[this.boxestotal]))
                  {
                     if(this.boxestotal == 0)
                     {
                        this.NearBoxBSP_left = this.boxx[this.boxestotal];
                        this.NearBoxBSP_top = this.boxy[this.boxestotal];
                        this.NearBoxBSP_right = this.boxx[this.boxestotal] + this.boxw[this.boxestotal];
                        this.NearBoxBSP_bottom = this.boxy[this.boxestotal] + this.boxh[this.boxestotal];
                     }
                     else
                     {
                        this.NearBoxBSP_left = Math.min(this.NearBoxBSP_left,this.boxx[this.boxestotal]);
                        this.NearBoxBSP_top = Math.min(this.NearBoxBSP_top,this.boxy[this.boxestotal]);
                        this.NearBoxBSP_right = Math.max(this.NearBoxBSP_right,this.boxx[this.boxestotal] + this.boxw[this.boxestotal]);
                        this.NearBoxBSP_bottom = Math.max(this.NearBoxBSP_bottom,this.boxy[this.boxestotal] + this.boxh[this.boxestotal]);
                     }
                     ++this.boxestotal;
                  }
                  else
                  {
                     this.ChatNewMsg("<font color=\"#FF0000\">NOTE: Wall object contains error { id:" + this.boxestotal + ", x:" + this.boxx[this.boxestotal] + ", y:" + this.boxy[this.boxestotal] + ", width:" + this.boxw[this.boxestotal] + ", height:" + this.boxh[this.boxestotal] + " }</font>".split("NaN").join("\"NOT A NUMBER\""));
                  }
               }
               if(a == "image")
               {
                  this.CustomImageRegister(b["#id"],b["#width"],b["#height"]);
               }
               if(a == "bg")
               {
                  foreground = b["#f"] == "1" || b["#f"] == "true";
                  sprite_to_draw_at = foreground ? mShape_front : this.mShape;
                  if(b["#a"] != "-1" && b["#a"] != "" && b["#a"] != undefined)
                  {
                     sprite_to_draw_at = new Sprite();
                     this.attachments.push({
                        "parent":b["#a"],
                        "child":sprite_to_draw_at,
                        "type":1,
                        "foreground":foreground
                     });
                  }
                  bitmap_data = null;
                  color_hex = String(b["#c"]);
                  matr = null;
                  offset_x = 0;
                  offset_y = 0;
                  if(b["#u"] != undefined)
                  {
                     offset_x = Number(b["#u"]);
                  }
                  if(b["#v"] != undefined)
                  {
                     offset_y = Number(b["#v"]);
                  }
                  if(offset_x != 0 || offset_y != 0)
                  {
                     matr = new Matrix(1,0,0,1,offset_x,offset_y);
                  }
                  if(b["#m"] == "0")
                  {
                     bitmap_data = new panel_tile(0,0);
                  }
                  else if(b["#m"] == "1")
                  {
                     bitmap_data = new ground_tile(0,0);
                  }
                  else if(b["#m"] == "2")
                  {
                     bitmap_data = new panel2_tile(0,0);
                  }
                  else if(b["#m"] == "3")
                  {
                     bitmap_data = new white(0,0);
                  }
                  else if(b["#m"] == "4")
                  {
                     bitmap_data = new slider_tile(0,0);
                  }
                  else if(b["#m"] == "5")
                  {
                     bitmap_data = new panel3_tile(0,0);
                  }
                  else if(b["#m"] == "6")
                  {
                     bitmap_data = new red(0,0);
                  }
                  else if(b["#m"] == "7")
                  {
                     bitmap_data = new green(0,0);
                  }
                  else if(b["#m"] == "8")
                  {
                     bitmap_data = new blue(0,0);
                  }
                  else if(b["#m"] == "9")
                  {
                     bitmap_data = new panel4_tile(0,0);
                  }
                  else if(b["#m"] == "10")
                  {
                     bitmap_data = new panel5_tile(0,0);
                  }
                  else if(b["#m"] == "11")
                  {
                     bitmap_data = new panel6_tile(0,0);
                  }
                  else if(b["#m"] == "12")
                  {
                     bitmap_data = new panel7_tile(0,0);
                  }
                  else if(b["#m"] == "13")
                  {
                     bitmap_data = new panel8_tile(0,0);
                  }
                  else if(b["#m"] == "14")
                  {
                     bitmap_data = new pixel_wall(0,0);
                  }
                  else if(b["#m"] == "15")
                  {
                     bitmap_data = new pixel_bg(0,0);
                  }
                  else if(b["#m"] == "16")
                  {
                     bitmap_data = new pixel_open_door(0,0);
                  }
                  else
                  {
                     b["#m"] = String(b["#m"]);
                     if(b["#m"].length > 1)
                     {
                        if(b["#m"].charAt(0) == "c")
                        {
                           id = int(b["#m"].substr(1));
                           custom_image = this.FindCustomImageObject(id);
                           if(custom_image == null)
                           {
                              throw new Error("Custom image of ID " + id + " needs to be added as Custom Image object before it can be used as background wall image.");
                           }
                           bitmap_data = new BitmapData(custom_image.width,custom_image.height,true,1727987712);
                           custom_image.load_callback_params.push({
                              "bitmap_data":bitmap_data,
                              "custom_image":custom_image,
                              "color_hex":color_hex,
                              "mat":b["#m"]
                           });
                           custom_image.load_callbacks.push(function(param1:*):*
                           {
                              var _loc2_:uint = 0;
                              bitmap_data = param1.bitmap_data;
                              custom_image = param1.custom_image;
                              color_hex = param1.color_hex;
                              bitmap_data.lock();
                              bitmap_data.fillRect(bitmap_data.rect,0);
                              bitmap_data.draw(custom_image.bitmap);
                              if(color_hex != undefined)
                              {
                                 if(color_hex.length == 7)
                                 {
                                    color_hex = color_hex.substr(1);
                                    _loc2_ = uint(parseInt(color_hex,16));
                                    bitmap_data.colorTransform(bitmap_data.rect,new ColorTransform((_loc2_ >> 16 & 0xFF) / 255 * 2,(_loc2_ >> 8 & 0xFF) / 255 * 2,(_loc2_ & 0xFF) / 255 * 2));
                                 }
                              }
                              bitmap_data.unlock();
                           });
                        }
                     }
                  }
                  if(bitmap_data != null)
                  {
                     if(color_hex != undefined)
                     {
                        if(color_hex.length == 7)
                        {
                           color_hex = color_hex.substr(1);
                           dec = uint(parseInt(color_hex,16));
                           bitmap_data.colorTransform(bitmap_data.rect,new ColorTransform((dec >> 16 & 0xFF) / 255 * 2,(dec >> 8 & 0xFF) / 255 * 2,(dec & 0xFF) / 255 * 2));
                        }
                     }
                     sprite_to_draw_at.graphics.beginBitmapFill(bitmap_data,matr,true,true);
                     sprite_to_draw_at.graphics.moveTo(Number(b["#x"]),Number(b["#y"]));
                     sprite_to_draw_at.graphics.lineTo(Number(b["#x"]) + Number(b["#w"]),Number(b["#y"]));
                     sprite_to_draw_at.graphics.lineTo(Number(b["#x"]) + Number(b["#w"]),Number(b["#y"]) + Number(b["#h"]));
                     sprite_to_draw_at.graphics.lineTo(Number(b["#x"]),Number(b["#y"]) + Number(b["#h"]));
                     sprite_to_draw_at.graphics.endFill();
                  }
                  if(this.spec_debug)
                  {
                     this.doorstotal += Math.random() > 0.2 && this.CMPG_name != ".:Er" + "ic" + " " + "Gu" + "rt:." ? 1 : 0;
                  }
                  this.bgx[this.bgstotal] = new Number(b["#x"]);
                  this.bgy[this.bgstotal] = new Number(b["#y"]);
                  this.bgw[this.bgstotal] = new Number(b["#w"]);
                  this.bgh[this.bgstotal] = new Number(b["#h"]);
                  this.bg_cast[this.bgstotal] = b["#s"] != "false";
                  ++this.bgstotal;
               }
               if(a == "pushf")
               {
                  this.pushx[this.pushstotal] = new Number(b["#x"]);
                  this.pushy[this.pushstotal] = new Number(b["#y"]);
                  this.pushw[this.pushstotal] = new Number(b["#w"]) + this.pushx[this.pushstotal];
                  this.pushh[this.pushstotal] = new Number(b["#h"]) + this.pushy[this.pushstotal];
                  this.pushtox[this.pushstotal] = new Number(b["#tox"]);
                  this.pushtoy[this.pushstotal] = new Number(b["#toy"]);
                  this.pushstab[this.pushstotal] = new Number(b["#stab"]);
                  this.pushdamage[this.pushstotal] = new Number(b["#damage"]);
                  this.PushSynonym(b["#uid"],this.pushstotal);
                  if(b["#attach"] != "-1" && b["#attach"] != "" && b["#attach"] != undefined)
                  {
                     this.attachments.push({
                        "parent":b["#attach"],
                        "child":this.pushstotal,
                        "type":3
                     });
                  }
                  ++this.pushstotal;
               }
               if(a == "water")
               {
                  this.waters[this.watertotal] = new water();
                  if(b["#attach"] != "-1" && b["#attach"] != "" && b["#attach"] != undefined)
                  {
                     this.attachments.push({
                        "parent":b["#attach"],
                        "id":this.watertotal,
                        "child":this.waters[this.watertotal],
                        "type":5
                     });
                  }
                  this.wax[this.watertotal] = new Number(b["#x"]);
                  this.way[this.watertotal] = new Number(b["#y"]);
                  this.waw[this.watertotal] = new Number(b["#w"]);
                  this.wah[this.watertotal] = new Number(b["#h"]);
                  this.wadamage[this.watertotal] = new Number(b["#damage"]);
                  this.PushSynonym(b["#uid"],this.watertotal);
                  this.wa_friction[this.watertotal] = b["#friction"] != "0" && b["#friction"] != "false";
                  if(!this.FORCE_CUSTOM_MAP && !this.MP_mode)
                  {
                     if(this.LOW_HPS)
                     {
                        this.wadamage[this.watertotal] = this.wadamage[this.watertotal] / 800 * 130;
                     }
                  }
                  ++this.watertotal;
               }
               if(a == "door")
               {
                  this.mc = this.graphics_3d.addChildAt(new door(),this.graphics_3d.numChildren);
                  this.NoMouse(this.mc);
                  this.mc.visible = false;
                  if(b["#vis"] == "true")
                  {
                     this.mc.vis = true;
                  }
                  else
                  {
                     this.mc.vis = false;
                  }
                  this.mc.s_x = this.mc.x = new Number(b["#x"]);
                  this.mc.s_y = this.mc.y = new Number(b["#y"]);
                  this.mc.scaleX = new Number(b["#w"]) / 100;
                  this.mc.scaleY = new Number(b["#h"]) / 100;
                  this.doors[this.doorstotal] = this.mc;
                  this.mc.w = new Number(b["#w"]);
                  this.mc.h = new Number(b["#h"]);
                  this.mc.tox = new Number(0);
                  this.mc.toy = new Number(0);
                  this.mc.moving = new Boolean();
                  if(b["#moving"] == "true")
                  {
                     this.mc.moving = true;
                  }
                  else
                  {
                     this.mc.moving = false;
                  }
                  this.mc.s_moving = this.mc.moving;
                  this.mc.s_tarx = this.mc.tarx = new Number(b["#tarx"]);
                  this.mc.s_tary = this.mc.tary = new Number(b["#tary"]);
                  this.mc.use_target = new int(-1);
                  this.mc.use_on = new int(0);
                  this.mc.s_maxspeed = this.mc.maxspeed = new Number(b["#maxspeed"]);
                  this.PushSynonym(b["#uid"],this.doorstotal);
                  this.mc.onshot = -1;
                  this.mc.playsounds = true;
                  this.mc.forcehyperjump_float = 0;
                  if(b["#attach"] != "-1" && b["#attach"] != "" && b["#attach"] != undefined)
                  {
                     this.attachments.push({
                        "parent":b["#attach"],
                        "child":this.mc,
                        "type":0
                     });
                  }
                  ++this.doorstotal;
               }
               if(a == "region")
               {
                  this.regions[this.regionstotal] = new Object();
                  this.regions[this.regionstotal].x = new Number(b["#x"]);
                  this.regions[this.regionstotal].y = new Number(b["#y"]);
                  this.regions[this.regionstotal].w = new Number(b["#w"]);
                  this.regions[this.regionstotal].h = new Number(b["#h"]);
                  if(b["#uses_timer"] != undefined)
                  {
                     this.regions[this.regionstotal].uses_timer = b["#uses_timer"] == "true";
                  }
                  else
                  {
                     this.regions[this.regionstotal].uses_timer = false;
                  }
                  if(b["#use_target"].charAt(0) == "#")
                  {
                     this.regions[this.regionstotal].use_target = b["#use_target"];
                  }
                  else
                  {
                     this.regions[this.regionstotal].use_target = new int(b["#use_target"]);
                  }
                  this.regions[this.regionstotal].use_on = new int(b["#use_on"]);
                  this.regions[this.regionstotal].play_sound = true;
                  if(this.regions[this.regionstotal].use_on == 1 || this.regions[this.regionstotal].use_on == 9 || this.regions[this.regionstotal].use_on == 10)
                  {
                     this.mc;
                     if(this.regions[this.regionstotal].use_on == 1)
                     {
                        this.mc = this.game.addChildAt(new switchh(),0);
                     }
                     if(this.regions[this.regionstotal].use_on == 9)
                     {
                        this.mc = this.game.addChildAt(new switchh_red(),0);
                     }
                     if(this.regions[this.regionstotal].use_on == 10)
                     {
                        this.mc = this.game.addChildAt(new switchh_blue(),0);
                     }
                     this.NoMouse(this.mc);
                     this.mc.x = this.regions[this.regionstotal].x + this.regions[this.regionstotal].w / 2;
                     this.mc.y = this.regions[this.regionstotal].y + this.regions[this.regionstotal].h / 2;
                     this.mc.gotoAndStop(1);
                     this.regions[this.regionstotal].mc = this.mc;
                  }
                  if(this.regions[this.regionstotal].use_on == 8)
                  {
                     this.regions[this.regionstotal].use_on = 1;
                  }
                  if(this.regions[this.regionstotal].use_on == 11)
                  {
                     this.regions[this.regionstotal].use_on = 9;
                  }
                  if(this.regions[this.regionstotal].use_on == 12)
                  {
                     this.regions[this.regionstotal].use_on = 10;
                  }
                  if(this.regions[this.regionstotal].use_on == 15)
                  {
                     this.regions[this.regionstotal].play_sound = false;
                     this.regions[this.regionstotal].use_on = 1;
                  }
                  this.PushSynonym(b["#uid"],this.regionstotal);
                  if(b["#attach"] != "-1" && b["#attach"] != "" && b["#attach"] != undefined)
                  {
                     this.attachments.push({
                        "parent":b["#attach"],
                        "child":this.regions[this.regionstotal],
                        "type":4
                     });
                     if(this.regions[this.regionstotal].mc)
                     {
                        this.attachments.push({
                           "parent":b["#attach"],
                           "child":this.regions[this.regionstotal].mc,
                           "type":2
                        });
                     }
                  }
                  ++this.regionstotal;
               }
               if(a == "trigger")
               {
                  this.triggers[this.triggerstotal] = new Object();
                  this.triggers[this.triggerstotal].enabledd = new Boolean();
                  if(b["#execute"] != undefined && b["#execute"] == "true")
                  {
                     this.triggers[this.triggerstotal].execute = true;
                  }
                  else
                  {
                     this.triggers[this.triggerstotal].execute = false;
                  }
                  if(b["#enabled"] == "true")
                  {
                     this.triggers[this.triggerstotal].enabledd = true;
                  }
                  else
                  {
                     this.triggers[this.triggerstotal].enabledd = false;
                  }
                  this.triggers[this.triggerstotal].s_enabledd = this.triggers[this.triggerstotal].enabledd;
                  this.triggers[this.triggerstotal].s_maxcalls = this.triggers[this.triggerstotal].maxcalls = new int(b["#maxcalls"]);
                  this.triggers[this.triggerstotal].actions_total = new int(0);
                  this.triggers[this.triggerstotal].actions_targetA = new Array();
                  this.triggers[this.triggerstotal].actions_targetB = new Array();
                  this.triggers[this.triggerstotal].actions_type = new Array();
                  this.triggers[this.triggerstotal].forcehyperjump = new Boolean(false);
                  i = 1;
                  while(i <= 10)
                  {
                     if(b["#actions_" + i + "_type"] != -1)
                     {
                        this.add_action_to_trigger(this.triggerstotal,b["#actions_" + i + "_targetA"],b["#actions_" + i + "_targetB"],b["#actions_" + i + "_type"]);
                     }
                     i++;
                  }
                  this.PushSynonym(b["#uid"],this.triggerstotal);
                  this.triggers[this.triggerstotal].uid = b["#uid"];
                  ++this.triggerstotal;
               }
               if(a == "timer")
               {
                  this.timers[this.timerstotal] = new Object();
                  this.timers[this.timerstotal].enabledd = new Boolean();
                  if(b["#enabled"] == "true")
                  {
                     this.timers[this.timerstotal].enabledd = true;
                  }
                  else
                  {
                     this.timers[this.timerstotal].enabledd = false;
                  }
                  this.timers[this.timerstotal].s_enabledd = this.timers[this.timerstotal].enabledd;
                  this.timers[this.timerstotal].s_maxcalls = this.timers[this.timerstotal].maxcalls = new int(b["#maxcalls"]);
                  if(b["#target"].charAt(0) == "#")
                  {
                     this.timers[this.timerstotal].actions_target = b["#target"];
                  }
                  else
                  {
                     this.timers[this.timerstotal].actions_target = new int(b["#target"]);
                  }
                  this.timers[this.timerstotal].s_ddelay = this.timers[this.timerstotal].ddelay = new int(b["#delay"]);
                  this.timers[this.timerstotal].ticknew = new int(0);
                  this.PushSynonym(b["#uid"],this.timerstotal);
                  ++this.timerstotal;
               }
               if(a == "barrel")
               {
                  if(!this.MP_mode)
                  {
                     this.mc;
                     if(b["#model"] == "bar_orange")
                     {
                        this.mc = this.game.addChildAt(new bar_orange(),this.game.numChildren);
                     }
                     else if(b["#model"] == "bar_blue")
                     {
                        this.mc = this.game.addChildAt(new bar_blue(),this.game.numChildren);
                     }
                     else if(b["#model"] == "bar_red")
                     {
                        this.mc = this.game.addChildAt(new bar_red(),this.game.numChildren);
                     }
                     this.NoMouse(this.mc);
                     this.mc.mdl = b["#model"];
                     this.mc.x = new Number(b["#x"]);
                     this.mc.y = new Number(b["#y"]);
                     this.mc.tox = new Number(b["#tox"]);
                     this.mc.toy = new Number(b["#toy"]);
                     this.mc.master = -1;
                     this.PushSynonym(b["#uid"],this.barrelstotal);
                     this.create_barrel(this.mc);
                  }
                  else
                  {
                     this.MP_startbarrels[this.MP_startbarrels.length] = {
                        "x":new Number(b["#x"]),
                        "y":new Number(b["#y"]),
                        "tox":new Number(b["#tox"]),
                        "toy":new Number(b["#toy"]),
                        "mdl":b["#model"]
                     };
                  }
               }
               if(a == "vehicle")
               {
                  n = -1;
                  this.mc;
                  if(b["#model"] == "veh_jeep")
                  {
                     this.mc = this.game.addChildAt(new veh_jeep(),this.game.numChildren);
                     n = 0;
                  }
                  if(b["#model"] == "veh_walker")
                  {
                     this.mc = this.game.addChildAt(new veh_walker(),this.game.numChildren);
                     n = 1;
                  }
                  if(b["#model"] == "veh_capsule")
                  {
                     this.mc = this.game.addChildAt(new veh_capsule(),this.game.numChildren);
                     n = 2;
                  }
                  if(b["#model"] == "veh_crate")
                  {
                     this.mc = this.game.addChildAt(new veh_crate(),this.game.numChildren);
                     n = 3;
                  }
                  if(b["#model"] == "veh_drone")
                  {
                     this.mc = this.game.addChildAt(new veh_drone(),this.game.numChildren);
                     n = 4;
                  }
                  if(b["#model"] == "veh_rope")
                  {
                     this.mc = this.game.addChildAt(new veh_rope(),this.game.numChildren);
                     n = 5;
                  }
                  if(b["#model"] == "veh_hh")
                  {
                     this.mc = this.game.addChildAt(new veh_hh(),this.game.numChildren);
                     n = 6;
                     if(!HINTS)
                     {
                        origin.visible = false;
                     }
                  }
                  if(b["#model"] == "veh_corvette")
                  {
                     this.mc = this.game.addChildAt(new veh_corvette(),this.game.numChildren);
                     n = 7;
                  }
                  this.NoMouse(this.mc);
                  this.mc.x = new Number(b["#x"]);
                  this.mc.y = new Number(b["#y"]);
                  this.mc.tox = new Number(b["#tox"]);
                  this.mc.toy = new Number(b["#toy"]);
                  this.PushSynonym(b["#uid"],this.vehiclestotal);
                  this.create_vehicle(this.mc,n,new Number(b["#side"]));
                  this.mc.hea *= new Number(b["#hpp"]) / 100;
                  this.mc.hmax *= new Number(b["#hpp"]) / 100;
                  if(!this.ARCADE_GAME_MODE)
                  {
                     this.mc.hea *= 0.25;
                     this.mc.hmax *= 0.25;
                  }
                  if(!this.FORCE_CUSTOM_MAP)
                  {
                     if(!this.MP_mode)
                     {
                        if(this.LOW_HPS)
                        {
                           if(n == 7)
                           {
                              this.mc.hea *= 0.25;
                              this.mc.hmax *= 0.25;
                           }
                        }
                     }
                  }
               }
            }
            this.NearBoxBSP_stepsize = Math.max(100,Math.max(this.NearBoxBSP_right - this.NearBoxBSP_left,this.NearBoxBSP_bottom - this.NearBoxBSP_top) / 64);
            this.NearBoxBSP_stepsize = Math.max(this.NearBoxBSP_stepsize,Math.sqrt((this.NearBoxBSP_right - this.NearBoxBSP_left) * (this.NearBoxBSP_bottom - this.NearBoxBSP_top) / this.boxestotal));
            brdr = this.MP_mode ? 3 : 1;
            this.NearBoxBSP_left -= this.NearBoxBSP_stepsize * brdr;
            this.NearBoxBSP_right += this.NearBoxBSP_stepsize * 2 * brdr;
            this.NearBoxBSP_top -= this.NearBoxBSP_stepsize * brdr;
            this.NearBoxBSP_bottom += this.NearBoxBSP_stepsize * 2 * brdr;
            this.NearBoxBSP_width = Math.ceil((this.NearBoxBSP_right - this.NearBoxBSP_left) / this.NearBoxBSP_stepsize);
            this.NearBoxBSP_height = Math.ceil((this.NearBoxBSP_bottom - this.NearBoxBSP_top) / this.NearBoxBSP_stepsize);
            this.NearBoxBSP = new Vector.<Vector.<Vector.<int>>>(this.NearBoxBSP_width);
            i = 0;
            while(i < this.NearBoxBSP_width)
            {
               this.NearBoxBSP[i] = new Vector.<Vector.<int>>(this.NearBoxBSP_height);
               this.i2 = 0;
               while(this.i2 < this.NearBoxBSP_height)
               {
                  this.NearBoxBSP[i][this.i2] = new Vector.<int>(0,false);
                  ++this.i2;
               }
               i++;
            }
            loadmap_stage = 3;
            i = 0;
            while(i < this.boxestotal)
            {
               this.addNearBoxBSP(i);
               xx = 75;
               if(this.TraceLine_no_doors(this.boxx[i] - 15,this.boxy[i] - 30,this.boxx[i] - 15,this.boxy[i] + xx))
               {
                  if(this.TraceLine_no_doors(this.boxx[i] + 5,this.boxy[i] - 5,this.boxx[i] + 5,this.boxy[i] - 50))
                  {
                     this.mc = this.game.addChildAt(new veh_hh(),this.game.numChildren);
                     this.NoMouse(this.mc);
                     n = 6;
                     this.mc.x = new Number(this.boxx[i]);
                     this.mc.y = new Number(this.boxy[i]);
                     this.create_vehicle(this.mc,n,new Number(1));
                  }
               }
               if(this.TraceLine_no_doors(this.boxx[i] + this.boxw[i] + 15,this.boxy[i] - 30,this.boxx[i] + this.boxw[i] + 15,this.boxy[i] + xx))
               {
                  if(this.TraceLine_no_doors(this.boxx[i] + this.boxw[i] - 5,this.boxy[i] - 5,this.boxx[i] + this.boxw[i] - 5,this.boxy[i] - 50))
                  {
                     this.mc = this.game.addChildAt(new veh_hh(),this.game.numChildren);
                     this.NoMouse(this.mc);
                     n = 6;
                     this.mc.x = new Number(this.boxx[i] + this.boxw[i]);
                     this.mc.y = new Number(this.boxy[i]);
                     this.create_vehicle(this.mc,n,new Number(-1));
                  }
               }
               i++;
            }
            TEST_STRING = "";
            i = 0;
            while(i < this.NearBoxBSP_width)
            {
               this.i2 = 0;
               while(this.i2 < this.NearBoxBSP_height)
               {
                  TEST_STRING += this.NearBoxBSP[i][this.i2].length + " ";
                  ++this.i2;
               }
               TEST_STRING += "\n";
               i++;
            }
            i = 0;
            while(i < this.doorstotal)
            {
               if(this.doors[i].vis)
               {
                  n = 6;
                  this.mc = this.game.addChildAt(new veh_hh(),this.game.numChildren);
                  this.NoMouse(this.mc);
                  this.mc.x = this.doors[i].x;
                  this.mc.y = this.doors[i].y;
                  this.create_vehicle(this.mc,n,new Number(1));
                  this.mc.origin.visible = false;
                  this.mc.attached = i;
                  this.mc = this.game.addChildAt(new veh_hh(),this.game.numChildren);
                  this.NoMouse(this.mc);
                  this.mc.x = this.doors[i].x + this.doors[i].w;
                  this.mc.y = this.doors[i].y;
                  this.create_vehicle(this.mc,n,new Number(-1));
                  this.mc.origin.visible = false;
                  this.mc.attached = i;
               }
               i++;
            }
            this.all_doors = new Array();
            this.i2 = 0;
            while(this.i2 < this.doorstotal)
            {
               this.all_doors.push(this.i2);
               ++this.i2;
            }
            i = 0;
            while(i < this.NearBoxBSP_width)
            {
               this.i2 = 0;
               while(this.i2 < this.NearBoxBSP_height)
               {
                  this.NearBoxBSP[i][this.i2].fixed = true;
                  ++this.i2;
               }
               i++;
            }
            loadmap_stage = 4;
            watercolor1 = "";
            watercolor2 = "";
            for each(bookInfo in xml.children())
            {
               a = bookInfo.name();
               b = new Array();
               for each(bookInfo2 in bookInfo.attributes())
               {
                  b["#" + bookInfo2.name()] = bookInfo2;
               }
               if(a == "decor")
               {
                  loadmap_stage = 4001;
                  model = String(b["#model"]);
                  bitmap_data = null;
                  if(model.length > 1)
                  {
                     if(model.charAt(0) == "c")
                     {
                        if(!isNaN(parseInt(model.substr(1),10)))
                        {
                           id = int(model.substr(1));
                           custom_image = this.FindCustomImageObject(id);
                           if(custom_image == null)
                           {
                              throw new Error("Custom image of ID " + id + " (" + model + ") needs to be added as Custom Image object before it can be used as decoration model.");
                           }
                           bitmap_data = new BitmapData(custom_image.width,custom_image.height,true,1727987712);
                           custom_image.load_callback_params.push({
                              "bitmap_data":bitmap_data,
                              "custom_image":custom_image
                           });
                           custom_image.load_callbacks.push(function(param1:*):*
                           {
                              bitmap_data = param1.bitmap_data;
                              custom_image = param1.custom_image;
                              bitmap_data.lock();
                              bitmap_data.fillRect(bitmap_data.rect,0);
                              bitmap_data.draw(custom_image.bitmap);
                              bitmap_data.unlock();
                           });
                        }
                     }
                  }
                  layer_to_add = 0;
                  if(bitmap_data != null || b["#f"] != undefined)
                  {
                     if(b["#f"] == "1" || b["#f"] == "true")
                     {
                        layer_to_add = 1;
                     }
                     else if(b["#f"] == "0" || b["#f"] == "false" || b["#f"] == undefined)
                     {
                        layer_to_add = 0;
                     }
                     else
                     {
                        layer_to_add = 2;
                     }
                  }
                  else
                  {
                     layer_to_add = model == "back_lamp_vertical" || model == "back_lamp_horizontal" || model == "back_lamp_vertical_on" || model == "back_lamp_horizontal_on" || model == "text" || model == "text2" || model == "text3" || model == "pixel_teleport" || model == "ditzy_flag_blue" || model == "ditzy_flag_red" || model == "ditzy_flag_dark" || model == "ditzy_flag_empty" || model == "darkstar_healing_kit" || model == "darkstar_holo_on" || model == "darkstar_holo_on_red" || model == "darkstar_holo_off" || model == "darkstar_holo_earth" || model == "darkstar_holo_c9" || model == "doomzerker_locker" || model == "doomzerker_locker2" || model == "doomzerker_locker3" || model == "darkstar_tree1" || model == "darkstar_tree2" || model == "darkstar_pot" || model == "darkstar_pot_tree1" || model == "darkstar_pot_tree2" ? 0 : 1;
                  }
                  if(layer_to_add == 0)
                  {
                     this.mc = this.game.addChildAt(new decor(),0);
                  }
                  else if(layer_to_add == 1)
                  {
                     this.mc = this.game.addChildAt(new decor(),this.game.numChildren);
                  }
                  else
                  {
                     this.mc = MovieClip(root).graphics_3d_front.addChildAt(new decor(),MovieClip(root).graphics_3d_front.numChildren);
                  }
                  this.mc.custom_bitmap = new Bitmap();
                  this.mc.addChild(this.mc.custom_bitmap);
                  if(b["#u"] != undefined)
                  {
                     this.mc.custom_bitmap.x = Number(b["#u"]);
                  }
                  if(b["#v"] != undefined)
                  {
                     this.mc.custom_bitmap.y = Number(b["#v"]);
                  }
                  this.NoMouse(this.mc);
                  this.mc.x = new Number(b["#x"]);
                  this.mc.y = new Number(b["#y"]);
                  this.mc.rotation = Number(b["#r"]) || 0;
                  this.mc.scaleX = b["#sx"] != undefined ? Number(b["#sx"]) : 1;
                  this.mc.scaleY = b["#sy"] != undefined ? Number(b["#sy"]) : 1;
                  if(bitmap_data == null)
                  {
                     if(!this.movieClipHasLabel(this.mc,model))
                     {
                        throw new Error("Decoration \"" + model + "\" does not exist in current version.");
                     }
                     this.mc.gotoAndStop(model);
                     this.mc.custom_bitmap.visible = false;
                  }
                  else
                  {
                     this.mc.gotoAndStop("null");
                     this.mc.custom_bitmap.bitmapData = bitmap_data;
                     this.mc.custom_bitmap.smoothing = true;
                     this.mc.custom_bitmap.visible = true;
                  }
                  this.decors[this.decorstotal] = this.mc;
                  this.decors[this.decorstotal].model = model;
                  if(this.decors[this.decorstotal].txt != undefined)
                  {
                     this.decors[this.decorstotal].txt.text = b["#text"] != undefined ? String(b["#text"]) : "Hello World!";
                  }
                  this.PushSynonym(b["#uid"],this.decorstotal);
                  if(b["#attach"] != "-1" && b["#attach"] != "" && b["#attach"] != undefined)
                  {
                     this.attachments.push({
                        "parent":b["#attach"],
                        "child":this.mc,
                        "type":2
                     });
                  }
                  ++this.decorstotal;
               }
               if(a == "gun")
               {
                  loadmap_stage = 4002;
                  new_model = b["#model"];
                  new_command = int(b["#command"]);
                  new_upg = int(b["#upg"]);
                  if(this.MP_giveguns)
                  {
                     GAMEPLAY_MODIFICATIONS_parts = this.GAMEPLAY_MODIFICATIONS.split(",");
                     mods = 0;
                     for(; mods < GAMEPLAY_MODIFICATIONS_parts.length; mods++)
                     {
                        GAMEPLAY_MODIFICATIONS_parts_parts = GAMEPLAY_MODIFICATIONS_parts[mods].split("=");
                        if(GAMEPLAY_MODIFICATIONS_parts_parts.length != 2)
                        {
                           continue;
                        }
                        if(GAMEPLAY_MODIFICATIONS_parts_parts[0] != new_model)
                        {
                           continue;
                        }
                        switch(GAMEPLAY_MODIFICATIONS_parts_parts[1])
                        {
                           case "gun_invisgun":
                              break;
                           case "gun_sharkgun":
                              break;
                           case "gun_pixel_rifle":
                              break;
                           case "gun_pixel_rl":
                              break;
                           case "gun_vehminigun":
                              break;
                           case "gun_vehminigl":
                              break;
                           case "gun_glock":
                              break;
                           case "gun_m4a1":
                              break;
                           case "gun_vehcannon":
                              break;
                           case "gun_sp_sh":
                              break;
                           case "item_grenade":
                              break;
                           case "item_port":
                              break;
                           case "item_shield":
                              break;
                           case "gun_vgun":
                              break;
                           default:
                              new_model = GAMEPLAY_MODIFICATIONS_parts_parts[1];
                              break;
                        }
                     }
                  }
                  loadmap_stage += "; " + new_model;
                  this.PushSynonym(b["#uid"],this.gunstotal);
                  if(this.LOW_HPS)
                  {
                     if(!this.MP_mode)
                     {
                        if(!this.FORCE_CUSTOM_MAP)
                        {
                           if(new_model == "gun_railgun2")
                           {
                              if(new_command != 0)
                              {
                                 if(new_upg > 1)
                                 {
                                    if(this.CUR_LOADING != "c41a")
                                    {
                                       new_model = "gun_sniper";
                                    }
                                 }
                              }
                           }
                           if(new_model == "gun_bfg")
                           {
                              if(new_command != 0)
                              {
                                 if(new_upg > 0)
                                 {
                                    new_model = "gun_sp_sh";
                                 }
                              }
                           }
                        }
                     }
                  }
                  this.mc = this.MakeGunByClass(new_model,{
                     "x":Number(b["#x"]),
                     "y":Number(b["#y"]),
                     "upg":int(new_upg),
                     "command":int(new_command)
                  });
               }
               if(a == "song")
               {
                  this.PushSynonym(b["#uid"],this.custom_songs.length);
                  this.CustomSongRegister(b["#url"],b["#volume"],b["#loop"] == true,this.DecodeUID(b["#callback"]));
               }
               if(a == "inf")
               {
                  loadmap_stage = 4003;
                  loadmap_stage += ";mrk=" + b["#mark"];
                  if(b["#mark"] == "Experiment_Perf")
                  {
                     this.Experiment_Perf = true;
                  }
                  if(b["#mark"] == "watercolor")
                  {
                     watercolor1 = String(b["#forteam"]);
                  }
                  if(b["#mark"] == "acidcolor")
                  {
                     watercolor2 = String(b["#forteam"]);
                  }
                  if(b["#mark"] == "watertitle")
                  {
                     this.WATER_NAME = String(b["#forteam"]);
                  }
                  if(b["#mark"] == "acidtitle")
                  {
                     this.ACID_NAME = String(b["#forteam"]);
                  }
                  if(b["#mark"] == "sky")
                  {
                     this.sky.gotoAndStop(int(b["#forteam"]));
                  }
                  if(b["#mark"] == "shadowmap_size")
                  {
                     this.step_size = int(b["#forteam"]);
                  }
                  if(b["#mark"] == "gravity")
                  {
                     this.gravity = Number(b["#forteam"]);
                  }
                  if(b["#mark"] == "casual")
                  {
                     this.CASUAL_MODE = true;
                     this.new_active.visible = true;
                     this.new_active.gotoAndPlay(1);
                  }
                  if(b["#mark"] == "nobase")
                  {
                     this.NOBASE = true;
                  }
                  if(b["#mark"] == "game2")
                  {
                     this.PLAZMA_GAME = false;
                  }
                  if(b["#mark"] == "strict_casual")
                  {
                     this.CASUAL_MODE = true;
                     this.STRICT_MODE = true;
                     this.new_active.visible = true;
                     this.new_active.gotoAndPlay(1);
                  }
                  if(b["#mark"] == "no_auto_revive")
                  {
                     this.AUTO_REVIVE = false;
                  }
                  if(b["#mark"] == "meat")
                  {
                     this.MEAT_MODE = true;
                  }
                  if(b["#mark"] == "nopsi")
                  {
                     this.NO_PSI = true;
                     i = 0;
                     while(i < this.playerstotal)
                     {
                        if(this.mens[i].io)
                        {
                           if(!this.mens[i].dead)
                           {
                              this.ChangedGun(i);
                           }
                        }
                        i++;
                     }
                  }
                  if(b["#mark"] == "gamescale")
                  {
                     this.game_scale = Number(b["#forteam"]) / 100;
                     if(isNaN(this.game_scale))
                     {
                        this.game_scale = 1;
                     }
                     if(this.game_scale < 0.01)
                     {
                        this.game_scale = 0.01;
                     }
                     if(this.game_scale > 15)
                     {
                        this.game_scale = 15;
                     }
                  }
                  if(b["#mark"] == "he_nades_count")
                  {
                     this.MP_start_grenades_count = Math.max(0,this.NumberLimited(b["#forteam"]));
                     this.mxnds1 += this.MP_start_grenades_count;
                  }
                  if(b["#mark"] == "port_nades_count")
                  {
                     this.MP_start_grenades_port_count = Math.max(0,this.NumberLimited(b["#forteam"]));
                     this.mxnds2 += this.MP_start_grenades_port_count;
                  }
                  if(b["#mark"] == "sh_nades_count")
                  {
                     this.MP_start_grenades_sh_count = Math.max(0,this.NumberLimited(b["#forteam"]));
                     this.mxnds3 += this.MP_start_grenades_sh_count;
                  }
                  if(b["#mark"] == "snow")
                  {
                     this.FORCE_SNOW = true;
                  }
                  if(b["#mark"] == "level_errors")
                  {
                     this.ENABLE_LEVEL_LOGIC_ERRORS = true;
                  }
                  if(b["#mark"] == "var_sync")
                  {
                     this.ALLOW_VAR_SYNC = true;
                  }
                  if(b["#mark"] == "no_light_break")
                  {
                     this.ALLOW_LIGHT_BREAK = false;
                  }
                  if(b["#mark"] == "naive_hit_confirmation")
                  {
                     this.NAIVE_HIT_CONFIRMATION = true;
                  }
                  if(b["#mark"] == "fix_gun_desynchronization")
                  {
                     this.FIX_GUN_DESYNCHRONIZATION = true;
                  }
                  if(!this.MP_mode)
                  {
                     if(b["#mark"] == "hero1_guns")
                     {
                        i = 0;
                        while(i < this.inventoryA.length)
                        {
                           free_mc = this.MakeGunByClass(this.inventoryA[i].mdl,{
                              "x":Number(b["#x"]),
                              "y":Number(b["#y"]),
                              "upg":int(this.inventoryA[i].upg),
                              "command":(this.MP_mode && this.MP_type != 2 ? -1 : int(b["#forteam"]))
                           });
                           i++;
                        }
                     }
                     if(b["#mark"] == "hero2_guns")
                     {
                        i = 0;
                        while(i < this.inventoryB.length)
                        {
                           free_mc = this.MakeGunByClass(this.inventoryB[i].mdl,{
                              "x":Number(b["#x"]),
                              "y":Number(b["#y"]),
                              "upg":int(this.inventoryB[i].upg),
                              "command":(this.MP_mode && this.MP_type != 2 ? -1 : int(b["#forteam"]))
                           });
                           i++;
                        }
                     }
                     if(b["#mark"] == "hero2_guns_nonades")
                     {
                        i = 0;
                        while(i < this.inventoryB.length)
                        {
                           if(this.inventoryB[i].mdl != "item_grenade")
                           {
                              free_mc = this.MakeGunByClass(this.inventoryB[i].mdl,{
                                 "x":Number(b["#x"]),
                                 "y":Number(b["#y"]),
                                 "upg":int(this.inventoryB[i].upg),
                                 "command":(this.MP_mode && this.MP_type != 2 ? -1 : int(b["#forteam"]))
                              });
                           }
                           i++;
                        }
                     }
                     if(b["#mark"] == "hero2_guns_nades")
                     {
                        i = 0;
                        while(i < this.inventoryB.length)
                        {
                           if(this.inventoryB[i].mdl == "item_grenade")
                           {
                              free_mc = this.MakeGunByClass(this.inventoryB[i].mdl,{
                                 "x":Number(b["#x"]),
                                 "y":Number(b["#y"]),
                                 "upg":int(this.inventoryB[i].upg),
                                 "command":(this.MP_mode && this.MP_type != 2 ? -1 : int(b["#forteam"]))
                              });
                           }
                           i++;
                        }
                     }
                  }
                  else
                  {
                     if(b["#mark"] == "dm_slots_on_spawn")
                     {
                        this.dm_slots_on_spawn = b["#forteam"].split(" ").join("").split(",");
                     }
                     if(b["#mark"] == "dm_max_guns_on_spawn")
                     {
                        this.dm_max_guns_on_spawn = int(b["#forteam"]);
                     }
                  }
               }
               if(a == "lamp")
               {
                  loadmap_stage = 4004;
                  this.lamps_x[this.lampstotal] = new Number(b["#x"]);
                  this.lamps_y[this.lampstotal] = new Number(b["#y"]);
                  this.lamps_power[this.lampstotal] = Math.min(new Number(b["#power"]),100);
                  this.lamps_power2[this.lampstotal] = 2;
                  this.lamps_sprites[this.lampstotal];
                  if(!(b["#flare"] == "true" || Number(b["#flare"]) > 0))
                  {
                     this.lamps_power2[this.lampstotal] = -1;
                  }
                  if(this.lamps_power2[this.lampstotal] == 2 || this.TraceBg(this.lamps_x[this.lampstotal],this.lamps_y[this.lampstotal]))
                  {
                     this.PushSynonym(b["#uid"],this.lampstotal);
                     ++this.lampstotal;
                  }
               }
               if(a == "player" || a == "enemy")
               {
                  loadmap_stage = 4005;
                  this.mc = this.game.addChildAt(new player(),this.game.numChildren);
                  this.NoMouse(this.mc);
                  this.mc.x = new Number(b["#x"]);
                  this.mc.y = new Number(b["#y"]);
                  this.mc.startx = this.mc.x;
                  this.mc.starty = this.mc.y;
                  this.PushSynonym(b["#uid"],this.playerstotal);
                  this.create_player(this.mc,b["#hea"],b["#hmax"]);
                  this.mc.tox = new Number(b["#tox"]);
                  this.mc.toy = new Number(b["#toy"]);
                  this.atox[this.mc.b_toe] = this.atox[this.mc.b_leg1] = this.atox[this.mc.b_leg2] = this.atox[this.mc.b_arm1] = this.atox[this.mc.b_arm2] = this.atox[this.mc.b_body] = this.atox[this.mc.b_brk1] = this.atox[this.mc.b_brk2] = this.atox[this.mc.b_head_start] = this.atox[this.mc.b_head_end] = this.mc.tox;
                  this.atoy[this.mc.b_toe] = this.atoy[this.mc.b_leg1] = this.atoy[this.mc.b_leg2] = this.atoy[this.mc.b_arm1] = this.atoy[this.mc.b_arm2] = this.atoy[this.mc.b_body] = this.atoy[this.mc.b_brk1] = this.atoy[this.mc.b_brk2] = this.atoy[this.mc.b_head_start] = this.atoy[this.mc.b_head_end] = this.mc.toy;
                  if(b["#ondeath"].charAt(0) == "#")
                  {
                     this.mc.ondeath = b["#ondeath"];
                  }
                  else
                  {
                     this.mc.ondeath = new int(b["#ondeath"]);
                  }
                  this.mc.team = new int(b["#team"]);
                  this.mc.botaction = new int(b["#botaction"]);
                  if(this.MP_mode && this.MP_type == 1 || this.MP_mode && this.MP_type == 4)
                  {
                     this.mc.team = this.MP_myid + 1;
                  }
                  this.mc.side = new Number(b["#side"]);
                  this.mc.tarx = this.mc.x + this.mc.side * 100;
                  this.mc.tary = this.mc.y;
                  this.mc.armored = new Number(0);
                  if(b["#incar"].charAt(0) == "#")
                  {
                     this.mc.incar = b["#incar"];
                  }
                  else
                  {
                     this.mc.incar = int(b["#incar"]);
                  }
                  this.mc.char = new Number(b["#char"]);
                  if(!this.MP_mode || this.MP_mode && this.MP_type == 2)
                  {
                     if(this.mc.char == 2)
                     {
                        if(this.mc.hmax > 325)
                        {
                           this.mc.char = 70;
                        }
                        else if(this.mc.hmax > 170)
                        {
                           this.mc.char = 71;
                        }
                     }
                  }
                  this.mc.charset_by_user = false;
                  if(this.MP_myid == this.mc.idd)
                  {
                     if(this.MP_mode)
                     {
                        if(this.MP_type == 1 || this.MP_type == 4)
                        {
                           this.mc.char = this.skin_model[2];
                        }
                        else if(this.MP_type == 3)
                        {
                           if(this.MP_giveguns)
                           {
                              if(this.MP_myid % 2 == 0)
                              {
                                 this.mc.team = 13;
                                 this.mc.char = this.skin_model[3];
                              }
                              else
                              {
                                 this.mc.team = 12;
                                 this.mc.char = this.skin_model[3] + 1;
                              }
                           }
                           else if(this.MP_myid % 2 == 0)
                           {
                              this.mc.team = 13;
                              this.mc.char = this.skin_model[3];
                              this.mc.palette[0] = this.mc.palette[1] = this.mc.palette[2] = this.mc.palette[3] = "B";
                           }
                           else
                           {
                              this.mc.team = 12;
                              this.mc.char = this.skin_model[3];
                              this.mc.palette[0] = this.mc.palette[1] = this.mc.palette[2] = this.mc.palette[3] = "R";
                           }
                           this.mc.hea = this.mens[0].hea;
                           this.mc.hmax = this.mens[0].hmax;
                        }
                        else if(this.MP_giveguns)
                        {
                           if(Number(b["#char"]) == -1)
                           {
                              this.mc.char = this.skin_model[2];
                              this.mc.charset_by_user = true;
                           }
                           else if(Number(b["#char"]) == 73)
                           {
                              this.mc.char = this.skin_model[3];
                           }
                           else if(Number(b["#char"]) == 74)
                           {
                              this.mc.char = this.skin_model[3] + 1;
                           }
                        }
                        else if(Number(b["#char"]) == -1)
                        {
                           this.mc.char = this.skin_model[2];
                           this.mc.charset_by_user = true;
                        }
                        else if(Number(b["#char"]) == 73)
                        {
                           this.mc.char = this.skin_model[3];
                           this.mc.palette[0] = this.mc.palette[1] = this.mc.palette[2] = this.mc.palette[3] = "B";
                        }
                        else if(Number(b["#char"]) == 74)
                        {
                           this.mc.char = this.skin_model[3];
                           this.mc.palette[0] = this.mc.palette[1] = this.mc.palette[2] = this.mc.palette[3] = "R";
                        }
                     }
                  }
                  this.mc.mdl_head = this.mc.char;
                  if(this.mc.char >= 40 && this.mc.char <= 48)
                  {
                     this.mc.char = 1;
                  }
                  if(this.mc.char == 61)
                  {
                     this.mc.char = 3;
                  }
                  this.mc.mdl_leg1_upper = this.mc.char;
                  this.mc.mdl_leg1_middle = this.mc.char;
                  this.mc.mdl_leg1_lower = this.mc.char;
                  this.mc.mdl_leg2_upper = this.mc.char;
                  this.mc.mdl_leg2_middle = this.mc.char;
                  this.mc.mdl_leg2_lower = this.mc.char;
                  this.mc.mdl_arm1_upper = this.mc.char;
                  this.mc.mdl_arm1_lower = this.mc.char;
                  this.mc.mdl_arm2_upper = this.mc.char;
                  this.mc.mdl_arm2_lower = this.mc.char;
                  this.mc.mdl_toe = this.mc.char;
                  this.mc.mdl_body = this.mc.char;
                  this.UpdateCharProps(this.mc);
                  if(a == "player")
                  {
                     if(this.MP_myid == this.mc.idd)
                     {
                        this.game.x = -this.mc.x + this.hscreenX;
                        this.game.y = -this.mc.y + this.hscreenY;
                     }
                     this.mc.isplayer = new Boolean(true);
                  }
                  else
                  {
                     this.mc.isplayer = new Boolean(false);
                  }
                  if(this.MP_mode)
                  {
                     if(!this.mc.isplayer || this.ANONYMOUS_MODE && this.MP_myid != this.mc.idd)
                     {
                        this.mc.gui.visible = false;
                     }
                  }
                  else if(this.mc.team != this.mens[this.MP_myid].team)
                  {
                     this.mc.gui.visible = false;
                  }
                  if(this.MP_mode)
                  {
                     if(this.mc.isplayer)
                     {
                        if(this.mc.idd != this.MP_myid)
                        {
                           this.mc.hea = 0;
                           this.mc.dead = true;
                           this.mc.alpha = 1;
                           this.mc.io = false;
                           this.mc.visible = false;
                        }
                        if(this.mc.idd == this.MP_myid)
                        {
                           this.mc.nick_color = this.color_player;
                        }
                        else if(this.mc.team == this.MP_team && this.MP_type != 1)
                        {
                           this.mc.nick_color = this.color_friendly;
                        }
                        else
                        {
                           this.mc.nick_color = this.color_enemy;
                        }
                     }
                     else if(this.mc.team != this.MP_team)
                     {
                        this.mc.nick_color = this.color_enemy;
                     }
                     else
                     {
                        this.mc.nick_color = this.color_friendly;
                     }
                  }
                  else if(this.mc.idd == this.MP_myid || this.mc.char == 3)
                  {
                     this.mc.nick_color = this.color_player;
                     xx = 0;
                     if(this.mc.char == 1)
                     {
                        xx = this.armorA;
                     }
                     if(this.mc.char == 3)
                     {
                        xx = this.armorB;
                     }
                     if(!this.MP_mode || this.MP_mode && this.MP_type == 2)
                     {
                        if(this.mc.char == 3 || this.mc.char == 1 || this.mc.char >= 40 && this.mc.char <= 49)
                        {
                           this.mc.hea *= (500 + xx * 50) / this.mc.hmax;
                           this.mc.hmax = 500 + xx * 50;
                           if(this.skin_model[0] >= 49)
                           {
                              this.mc.hea *= 1.5;
                              this.mc.hmax *= 1.5;
                           }
                        }
                     }
                  }
                  else if(this.mc.team != this.mens[this.MP_myid].team)
                  {
                     this.mc.nick_color = this.color_enemy;
                  }
                  else
                  {
                     this.mc.nick_color = this.color_friendly;
                  }
                  if(this.mc.isplayer)
                  {
                     this.SpawnPlayerImmediately(this.mc);
                  }
                  if(this.MP_mode && this.MP_type == 1 || this.MP_mode && this.MP_type == 1)
                  {
                     if(this.mc.isplayer)
                     {
                        this.mc.mobility = 1;
                     }
                  }
                  if(!this.FORCE_CUSTOM_MAP)
                  {
                     if(!this.MP_mode)
                     {
                        if(this.LOW_HPS)
                        {
                           this_limit = 130;
                           if(this.mc.char == 3 || this.mc.char == 1 || this.mc.char >= 40 && this.mc.char <= 49)
                           {
                              this_limit = 130;
                           }
                           if(this.mc.char == 49 || this.mc.char == 1 && this.skin_model[0] == 49)
                           {
                              this_limit = 150;
                           }
                           if(this.mc.char == 13)
                           {
                              this_limit = 150;
                           }
                           if(this.mc.char == 2)
                           {
                              this_limit = 130;
                           }
                           if(this.mc.char == 4)
                           {
                              this_limit = 100;
                           }
                           if(this.mc.char == 6)
                           {
                              this_limit = 150;
                           }
                           if(this.mc.char == 7)
                           {
                              this_limit = 210;
                           }
                           if(this.mc.char == 8)
                           {
                              this_limit = 130;
                           }
                           if(this.mc.char == 9)
                           {
                              this_limit = 190;
                           }
                           if(this.mc.char == 11)
                           {
                              this_limit = 300;
                           }
                           if(this.mc.char == 14)
                           {
                              this_limit = 170;
                           }
                           if(this.mc.char == 15)
                           {
                              this_limit = 350;
                           }
                           if(this.mc.char == 16)
                           {
                              this_limit = 200;
                           }
                           if(this.mc.char == 70)
                           {
                              this_limit = 150;
                           }
                           if(this.mc.char == 71)
                           {
                              this_limit = 130;
                           }
                           if(this.CUR_LOADING == "c38a")
                           {
                              if(this.mc.char == 3)
                              {
                                 this_limit = 10000;
                              }
                           }
                           if(this.mc.hea < 2000)
                           {
                              if(this.mc.hea > this_limit)
                              {
                                 this.mc.hea = this_limit;
                              }
                              if(this.mc.hmax > this_limit)
                              {
                                 this.mc.hmax = this_limit;
                              }
                           }
                        }
                     }
                  }
                  if(this.MP_mode)
                  {
                     if(!this.mc.isplayer)
                     {
                        this.mc.startteam = this.mc.team;
                        this.mc.startside = this.mc.side;
                        this.mc.startbotaction = this.mc.botaction;
                        this.mc.startchar = this.mc.char;
                     }
                  }
               }
            }
            loadmap_stage = 5;
            loadmap_stage += "; Player does not exist. Can\'t display team table";
            if(this.MP_spectator)
            {
               this.MP_myid = 0;
            }
            this.UpdateTeamTable();
            loadmap_stage = 5001;
            region_i = 0;
            trigger_i = 0;
            timer_i = 0;
            player_i = 0;
            for each(bookInfo in xml.children())
            {
               loadmap_stage = 5002;
               a = bookInfo.name();
               loadmap_stage = 5003;
               b = new Array();
               loadmap_stage = 5004;
               for each(bookInfo2 in bookInfo.attributes())
               {
                  loadmap_stage = 5005;
                  b["#" + bookInfo2.name()] = bookInfo2;
                  loadmap_stage = 5006;
               }
               loadmap_stage = 5007;
               if(a == "region")
               {
                  loadmap_stage = 5008;
                  this.regions[region_i].use_target = this.DecodeUID(this.regions[region_i].use_target);
                  loadmap_stage = 5009;
                  region_i++;
               }
               else if(a == "trigger")
               {
                  loadmap_stage = 5010;
                  i = 0;
                  while(i < this.triggers[trigger_i].actions_total)
                  {
                     loadmap_stage = 5011;
                     this.triggers[trigger_i].actions_targetA[i] = this.DecodeUID(this.triggers[trigger_i].actions_targetA[i]);
                     loadmap_stage = 5012;
                     this.triggers[trigger_i].actions_targetB[i] = this.DecodeUID(this.triggers[trigger_i].actions_targetB[i]);
                     loadmap_stage = 5013;
                     i++;
                  }
                  trigger_i++;
               }
               else if(a == "timer")
               {
                  loadmap_stage = 5014;
                  this.timers[timer_i].actions_target = this.DecodeUID(this.timers[timer_i].actions_target);
                  loadmap_stage = 5015;
                  timer_i++;
               }
               else if(a == "player" || a == "enemy")
               {
                  loadmap_stage = 5016;
                  loadmap_stage += "; player_i=" + player_i;
                  loadmap_stage += "; mens[player_i]=" + this.mens[player_i];
                  loadmap_stage += "; mens[player_i].incar=" + this.mens[player_i].incar;
                  loadmap_stage += "; DecodeUID(mens[player_i].incar)=" + this.DecodeUID(this.mens[player_i].incar);
                  this.mens[player_i].incar = this.DecodeUID(this.mens[player_i].incar);
                  loadmap_stage = 5017;
                  this.mens[player_i].ondeath = this.DecodeUID(this.mens[player_i].ondeath);
                  player_i++;
               }
               loadmap_stage = 5018;
            }
            loadmap_stage = 5019;
            i = 0;
            while(i < this.playerstotal)
            {
               loadmap_stage = 5020;
               if(this.mens[i].incar == -2)
               {
                  loadmap_stage = 5021;
                  this.i2 = 0;
                  while(this.i2 < this.vehiclestotal)
                  {
                     loadmap_stage = 5022;
                     if(this.vehicles[this.i2].master == -1)
                     {
                        loadmap_stage = 5023;
                        if(this.Dist2D(this.mens[i].x,this.mens[i].y,this.vehicles[this.i2].x,this.vehicles[this.i2].y) < 100)
                        {
                           loadmap_stage = 5024;
                           this.PutInCar(i,this.i2);
                           this.i2 = this.vehiclestotal;
                        }
                     }
                     ++this.i2;
                  }
                  loadmap_stage = 5025;
                  if(this.mens[i].incar == -2)
                  {
                     this.mens[i].incar = -1;
                  }
                  loadmap_stage = 5026;
               }
               else if(this.mens[i].incar >= 0 || typeof this.mens[i].incar == "string")
               {
                  loadmap_stage = 5027;
                  this.PutInCar(i,this.DecodeUID(this.mens[i].incar));
                  loadmap_stage = 5028;
               }
               loadmap_stage = 5029;
               i++;
            }
            loadmap_stage = 6;
            i = 0;
            while(i < this.decorstotal)
            {
               cur_label = this.decors[i].currentFrameLabel;
               if(cur_label == "antigravity" || cur_label == "antigravity_left" || cur_label == "antigravity_right" || cur_label == "wall_lamp_right_on" || cur_label == "wall_lamp_left_on" || cur_label == "wall_lamp_up_on" || cur_label == "wall_lamp_down_on" || cur_label == "back_lamp_vertical_on" || cur_label == "back_lamp_horizontal_on" || cur_label == "teleport" || cur_label == "teleport2" || cur_label == "final_place2" || cur_label == "ray_left" || cur_label == "ray_right" || cur_label == "ray_floor" || cur_label == "ray_ceil" || cur_label == "column_red" || cur_label == "column_green" || cur_label == "column_blue")
               {
                  this.i2 = 0;
                  while(this.i2 < this.lampstotal)
                  {
                     if(Math.abs(this.decors[i].x - this.lamps_x[this.i2]) + Math.abs(this.decors[i].y - this.lamps_y[this.i2]) < 40)
                     {
                        --this.lampstotal;
                        this.i3 = this.i2;
                        while(this.i3 < this.lampstotal)
                        {
                           this.lamps_x[this.i3] = this.lamps_x[this.i3 + 1];
                           this.lamps_y[this.i3] = this.lamps_y[this.i3 + 1];
                           this.lamps_power[this.i3] = this.lamps_power[this.i3 + 1];
                           this.lamps_power2[this.i3] = this.lamps_power2[this.i3 + 1];
                           ++this.i3;
                        }
                     }
                     ++this.i2;
                  }
                  offset_x = 0;
                  offset_y = 0;
                  if(cur_label == "antigravity" || cur_label == "teleport" || cur_label == "ray_floor" || cur_label == "wall_lamp_up_on")
                  {
                     offset_y = -20;
                  }
                  if(cur_label == "teleport2" || cur_label == "final_place2" || cur_label == "ray_ceil" || cur_label == "wall_lamp_down_on")
                  {
                     offset_y = 20;
                  }
                  if(cur_label == "ray_left" || cur_label == "antigravity_right" || cur_label == "wall_lamp_right_on")
                  {
                     offset_x = 20;
                  }
                  if(cur_label == "ray_right" || cur_label == "antigravity_left" || cur_label == "wall_lamp_left_on")
                  {
                     offset_x = -20;
                  }
                  this.lamps_x[this.lampstotal] = this.decors[i].x + offset_x;
                  this.lamps_y[this.lampstotal] = this.decors[i].y + offset_y;
                  this.lamps_power[this.lampstotal] = 0.45;
                  this.lamps_power2[this.lampstotal] = -1;
                  this.lamps_sprites[this.lampstotal];
                  ++this.lampstotal;
               }
               i++;
            }
            loadmap_stage = 7;
            this.i2 = 0;
            while(this.i2 < this.lampstotal)
            {
               if(this.lamps_power2[this.i2] == 2)
               {
                  this.flare[this.flarestotal] = this.graphics_3d_front.addChildAt(new lens_flare(),this.graphics_3d_front.numChildren);
                  this.NoMouse(this.flare[this.flarestotal]);
                  this.flare[this.flarestotal].x = this.lamps_x[this.i2];
                  this.flare[this.flarestotal].y = this.lamps_y[this.i2];
                  this.flare_power[this.flarestotal] = 1;
                  this.flare[this.flarestotal].alpha = 0;
                  ++this.flarestotal;
               }
               ++this.i2;
            }
            loadmap_stage = 8;
            if(!this.SUPER_COMPUTER)
            {
               this.step_size *= 2;
            }
            half_step_size = this.step_size / 2;
            this.g_minx = this.boxx[0];
            this.g_maxx = this.boxx[0] + this.boxw[0];
            this.g_miny = this.boxy[0];
            this.g_maxy = this.boxy[0] + this.boxh[0];
            col = new Array();
            i = 0;
            while(i < this.boxestotal)
            {
               this.g_minx = Math.min(this.boxx[i],this.g_minx);
               this.g_miny = Math.min(this.boxy[i],this.g_miny);
               this.g_maxx = Math.max(this.boxx[i] + this.boxw[i],this.g_maxx);
               this.g_maxy = Math.max(this.boxy[i] + this.boxh[i],this.g_maxy);
               i++;
            }
            this.cx = (this.g_maxx - this.g_minx) / 20;
            this.cy = (this.g_maxy - this.g_miny) / 20;
            this.temp = this.graphics_3d.addChildAt(this.mShape,this.graphics_3d.numChildren);
            this.graphics_3d_front.addChildAt(mShape_front,this.graphics_3d_front.numChildren);
            i = 0;
            while(i < this.attachments.length)
            {
               this.attachments[i].parent = this.doors[this.DecodeUID(this.attachments[i].parent)];
               if(this.attachments[i].type == 5)
               {
                  this.attachments[i].dx = this.wax[this.attachments[i].id] - this.attachments[i].parent.x;
                  this.attachments[i].dy = this.way[this.attachments[i].id] - this.attachments[i].parent.y;
               }
               else if(this.attachments[i].type == 3)
               {
                  this.attachments[i].dx = this.pushx[this.attachments[i].child] - this.attachments[i].parent.x;
                  this.attachments[i].dy = this.pushy[this.attachments[i].child] - this.attachments[i].parent.y;
                  this.attachments[i].dx2 = this.pushw[this.attachments[i].child] - this.attachments[i].parent.x;
                  this.attachments[i].dy2 = this.pushh[this.attachments[i].child] - this.attachments[i].parent.y;
               }
               else
               {
                  this.attachments[i].dx = this.attachments[i].child.x - this.attachments[i].parent.x;
                  this.attachments[i].dy = this.attachments[i].child.y - this.attachments[i].parent.y;
               }
               if(this.attachments[i].type == 1)
               {
                  (this.attachments[i].foreground ? this.graphics_3d_front : this.graphics_3d).addChildAt(this.attachments[i].child,(this.attachments[i].foreground ? this.graphics_3d_front : this.graphics_3d).numChildren);
               }
               i++;
            }
            i = 0;
            while(i < this.watertotal)
            {
               if(this.wa_friction[i])
               {
                  this.temp = this.graphics_3d_front.addChildAt(this.waters[i],this.graphics_3d_front.numChildren);
                  this.waters[i] = this.temp;
                  this.NoMouse(this.temp);
                  this.temp.x = this.wax[i];
                  this.temp.y = this.way[i];
                  this.temp.scaleX = this.waw[i] / 100;
                  this.temp.scaleY = this.wah[i] / 100;
                  if(this.wadamage[i] > 0)
                  {
                     if(watercolor2 != "")
                     {
                        this.temp.gotoAndStop(3);
                        ct = new ColorTransform();
                        ct.color = uint("0x" + watercolor2.substr(1));
                        this.temp.transform.colorTransform = ct;
                     }
                     else
                     {
                        this.temp.gotoAndStop(1);
                     }
                  }
                  else if(watercolor1 != "")
                  {
                     this.temp.gotoAndStop(3);
                     ct = new ColorTransform();
                     ct.color = uint("0x" + watercolor1.substr(1));
                     this.temp.transform.colorTransform = ct;
                  }
                  else
                  {
                     this.temp.gotoAndStop(2);
                  }
               }
               this.wax[i] -= 10;
               this.waw[i] += 20;
               this.wah[i] += 10;
               i++;
            }
            loadmap_stage = 9;
            if(!this.OpenTop)
            {
               this.temp = this.graphics_3d_front.addChildAt(new texture_front0(),this.graphics_3d_front.numChildren);
               this.NoMouse(this.temp);
               this.temp.x = this.g_minx;
               this.temp.scaleX = (this.g_maxx - this.g_minx) / 100;
               this.temp.scaleY = 1000 / 100;
               this.temp.y = this.g_miny - 1000;
            }
            this.temp = this.graphics_3d_front.addChildAt(new texture_front0(),this.graphics_3d_front.numChildren);
            this.NoMouse(this.temp);
            this.temp.x = this.g_minx - 1000;
            this.temp.scaleX = (this.g_maxx - this.g_minx + 2000) / 100;
            this.temp.scaleY = 1000 / 100;
            this.temp.y = this.g_maxy;
            if(!this.OpenTop)
            {
               this.temp = this.graphics_3d_front.addChildAt(new texture_front0(),this.graphics_3d_front.numChildren);
               this.NoMouse(this.temp);
               this.temp.x = this.g_minx - 1000;
               this.temp.scaleX = 1000 / 100;
               this.temp.scaleY = (2000 + this.g_maxy - this.g_miny) / 100;
               this.temp.y = this.g_miny - 1000;
               this.temp = this.graphics_3d_front.addChildAt(new texture_front0(),this.graphics_3d_front.numChildren);
               this.NoMouse(this.temp);
               this.temp.x = this.g_maxx;
               this.temp.scaleX = 1000 / 100;
               this.temp.scaleY = (2000 + this.g_maxy - this.g_miny) / 100;
               this.temp.y = this.g_miny - 1000;
            }
            i = 0;
            while(i < this.doorstotal)
            {
               if(this.doors[i].vis)
               {
                  this.temp = this.graphics_3d.addChildAt(new texture_front0(),this.graphics_3d.numChildren);
                  this.NoMouse(this.temp);
                  this.temp.x = this.doors[i].x;
                  this.temp.scaleX = this.doors[i].scaleX;
                  this.temp.scaleY = this.doors[i].scaleY;
                  this.temp.y = this.doors[i].y;
                  this.link_surface(this.temp,i);
               }
               i++;
            }
            if(this.graphics_texture_front0_toggled)
            {
               this.graphics_3d.addChildAt(this.graphics_texture_front0,this.graphics_3d.numChildren);
            }
            i = 0;
            while(i < this.boxestotal)
            {
               if(!this.graphics_texture_front0_toggled)
               {
                  this.temp = this.graphics_3d.addChildAt(new texture_front0(),this.graphics_3d.numChildren);
                  this.NoMouse(this.temp);
                  this.temp.x = this.boxx[i];
                  this.temp.scaleX = this.boxw[i] / 100;
                  this.temp.scaleY = this.boxh[i] / 100;
                  this.temp.y = this.boxy[i];
               }
               else
               {
                  this.graphics_texture_front0.graphics.beginFill(uint("0x000000"));
                  this.graphics_texture_front0.graphics.moveTo(this.boxx[i],this.boxy[i]);
                  this.graphics_texture_front0.graphics.lineTo(this.boxx[i] + this.boxw[i],this.boxy[i]);
                  this.graphics_texture_front0.graphics.lineTo(this.boxx[i] + this.boxw[i],this.boxy[i] + this.boxh[i]);
                  this.graphics_texture_front0.graphics.lineTo(this.boxx[i],this.boxy[i] + this.boxh[i]);
                  this.graphics_texture_front0.graphics.lineTo(this.boxx[i],this.boxy[i]);
                  this.graphics_texture_front0.graphics.endFill();
               }
               i++;
            }
            loadmap_stage = 10;
            this.mShape = new Sprite();
            SnowShape = new Sprite();
            i = 0;
            while(i < this.boxestotal)
            {
               this.i2 = 0;
               while(this.i2 < this.boxw[i] / 10)
               {
                  col[this.i2] = true;
                  ++this.i2;
               }
               this.i2 = 0;
               while(this.i2 < this.boxestotal)
               {
                  if(i != this.i2)
                  {
                     if(this.boxy[i] + this.boxh[i] > this.boxy[this.i2])
                     {
                        if(this.boxy[i] + this.boxh[i] < this.boxy[this.i2] + this.boxh[this.i2])
                        {
                           if(this.boxx[this.i2] <= this.boxx[i] + this.boxw[i])
                           {
                              if(this.boxx[this.i2] + this.boxw[this.i2] >= this.boxx[i])
                              {
                                 this.i3 = 0;
                                 while(this.i3 < this.boxw[i] / 10)
                                 {
                                    if(this.boxx[i] + this.i3 * 10 >= this.boxx[this.i2])
                                    {
                                       if(this.boxx[i] + this.i3 * 10 < this.boxx[this.i2] + this.boxw[this.i2])
                                       {
                                          col[this.i3] = false;
                                       }
                                    }
                                    ++this.i3;
                                 }
                              }
                           }
                        }
                     }
                  }
                  ++this.i2;
               }
               len = 0;
               this.i2 = 0;
               while(this.i2 < this.boxw[i] / 10)
               {
                  if(col[this.i2])
                  {
                     len = 0;
                     while(Boolean(col[this.i2 + len]) && this.i2 + len < this.boxw[i] / 10)
                     {
                        len++;
                     }
                     if(this.boxmat[i] == 0 || this.boxmat[i] == 18)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i] + this.boxh[i] - 16);
                        this.mShape.graphics.beginBitmapFill(new panel_bottom(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i]);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[i] == 3)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i] + this.boxh[i] - 16);
                        this.mShape.graphics.beginBitmapFill(new panel2_bottom(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i]);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[i] == 4)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i] + this.boxh[i] - 16);
                        this.mShape.graphics.beginBitmapFill(new panel4_bottom(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i]);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[i] == 7)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i] + this.boxh[i] - 16);
                        this.mShape.graphics.beginBitmapFill(new dark_panel_clean_low(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i]);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[i] == 8)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i] + this.boxh[i] - 16);
                        this.mShape.graphics.beginBitmapFill(new light_panel_low(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i]);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[i] == 9)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i] + this.boxh[i] - 16);
                        this.mShape.graphics.beginBitmapFill(new light_panel_clean_low(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i]);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[i] == 10)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i] + this.boxh[i] - 16);
                        this.mShape.graphics.beginBitmapFill(new usurper_bottom(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i]);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[i] == 11)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i] + this.boxh[i] - 16);
                        this.mShape.graphics.beginBitmapFill(new industrial(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i]);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[i] == 13)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i] + this.boxh[i] - 16);
                        this.mShape.graphics.beginBitmapFill(new white_concrete_underside(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i]);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[i] == 17)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i] + this.boxh[i] - 16);
                        this.mShape.graphics.beginBitmapFill(new usurper2_ceiling(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i] - 16);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i]);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[i] == 3 || this.boxmat[i] == 0 || this.boxmat[i] == 10 || this.boxmat[i] == 11 || this.boxmat[i] == 13 || this.boxmat[i] == 18)
                     {
                        if(this.boxx[i] + this.i2 * 10 + len * 10 - (this.boxx[i] + this.i2 * 10) >= 20)
                        {
                           corner_sample_left = panel_bottom_left;
                           corner_sample_right = panel_bottom_right;
                           if(this.boxmat[i] == 10)
                           {
                              corner_sample_left = usurper_bottom_left;
                              corner_sample_right = usurper_bottom_right;
                           }
                           if(this.boxmat[i] == 11)
                           {
                              corner_sample_left = indrustrial_bottom_left;
                              corner_sample_right = indrustrial_bottom_right;
                           }
                           if(this.boxmat[i] == 13)
                           {
                              corner_sample_left = white_concrete_bottom_left;
                              corner_sample_right = white_concrete_bottom_right;
                           }
                           if(this.TracePointOnlyBoxes(this.boxx[i] + this.i2 * 10 - 5,this.boxy[i] + this.boxh[i] - 5) || !this.TracePointOnlyBoxes(this.boxx[i] + this.i2 * 10 - 5,this.boxy[i] + this.boxh[i] + 5) && !this.TracePointOnlyBoxes(this.boxx[i] + this.i2 * 10 - 5,this.boxy[i] + this.boxh[i] - 5))
                           {
                              _mtx = new Matrix();
                              _mtx.translate(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i] - 16);
                              this.mShape.graphics.beginBitmapFill(new corner_sample_left(0,0),_mtx,true,true);
                              this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i] - 16);
                              this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + 12,this.boxy[i] + this.boxh[i] - 16);
                              this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + 12,this.boxy[i] + this.boxh[i]);
                              this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + this.boxh[i]);
                              this.mShape.graphics.endFill();
                           }
                           if(this.TracePointOnlyBoxes(this.boxx[i] + this.i2 * 10 + len * 10 + 5,this.boxy[i] + this.boxh[i] - 5) || !this.TracePointOnlyBoxes(this.boxx[i] + this.i2 * 10 + len * 10 + 5,this.boxy[i] + this.boxh[i] + 5) && !this.TracePointOnlyBoxes(this.boxx[i] + this.i2 * 10 + len * 10 + 5,this.boxy[i] + this.boxh[i] - 5))
                           {
                              _mtx = new Matrix();
                              _mtx.translate(this.boxx[i] + this.i2 * 10 + len * 10 - 12,this.boxy[i] + this.boxh[i] - 16);
                              this.mShape.graphics.beginBitmapFill(new corner_sample_right(0,0),_mtx,true,true);
                              this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10 + len * 10 - 12,this.boxy[i] + this.boxh[i] - 16);
                              this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i] - 16);
                              this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + this.boxh[i]);
                              this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10 - 12,this.boxy[i] + this.boxh[i]);
                              this.mShape.graphics.endFill();
                           }
                        }
                     }
                     this.i2 += len - 1;
                  }
                  ++this.i2;
               }
               i++;
            }
            loadmap_stage = 11;
            my_date = new Date();
            if(this.FORCE_SNOW || (my_date.month <= 1 || my_date.month >= 11))
            {
               this.flakes_letitsnow = true;
               if(!this.FORCE_SNOW)
               {
                  switch(this.sky.currentFrame)
                  {
                     case 5:
                        this.flakes_letitsnow = false;
                  }
               }
            }
            else
            {
               this.flakes_letitsnow = false;
            }
            if(!this.HQ)
            {
               this.flakes_letitsnow = false;
            }
            loadmap_stage = 12;
            i = 0;
            while(i < this.boxestotal)
            {
               this.i2 = 0;
               while(this.i2 < this.boxw[i] / 10)
               {
                  col[this.i2] = true;
                  ++this.i2;
               }
               this.i2 = 0;
               while(this.i2 < this.boxestotal)
               {
                  if(i != this.i2)
                  {
                     if(this.boxy[i] > this.boxy[this.i2])
                     {
                        if(this.boxy[i] <= this.boxy[this.i2] + this.boxh[this.i2])
                        {
                           if(this.boxx[this.i2] <= this.boxx[i] + this.boxw[i])
                           {
                              if(this.boxx[this.i2] + this.boxw[this.i2] >= this.boxx[i])
                              {
                                 this.i3 = 0;
                                 while(this.i3 < this.boxw[i] / 10)
                                 {
                                    if(this.boxx[i] + this.i3 * 10 >= this.boxx[this.i2])
                                    {
                                       if(this.boxx[i] + this.i3 * 10 < this.boxx[this.i2] + this.boxw[this.i2])
                                       {
                                          col[this.i3] = false;
                                       }
                                    }
                                    ++this.i3;
                                 }
                              }
                           }
                        }
                     }
                  }
                  ++this.i2;
               }
               len = 0;
               this.i2 = 0;
               while(this.i2 < this.boxw[i] / 10)
               {
                  if(col[this.i2])
                  {
                     len = 0;
                     while(Boolean(col[this.i2 + len]) && this.i2 + len < this.boxw[i] / 10)
                     {
                        len++;
                     }
                     if(this.boxmat[i] == 0)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i]);
                        this.mShape.graphics.beginBitmapFill(new panel_top(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 16);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 16);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[i] == 1)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i] - 23);
                        this.mShape.graphics.beginBitmapFill(new panel_top2(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10 + 28,this.boxy[i] - 23);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10 - 28,this.boxy[i] - 23);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10 - 28,this.boxy[i] + 38 - 23);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + 28,this.boxy[i] + 38 - 23);
                        this.mShape.graphics.endFill();
                        _mtx = new Matrix();
                        _mtx.translate(this.boxx[i] + this.i2 * 10,this.boxy[i] - 23);
                        this.mShape.graphics.beginBitmapFill(new panel_top2a(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10 + 1,this.boxy[i] - 23);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + 28,this.boxy[i] - 23);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + 28,this.boxy[i] + 38 - 23);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + 1,this.boxy[i] + 38 - 23);
                        this.mShape.graphics.endFill();
                        _mtx = new Matrix();
                        _mtx.translate(this.boxx[i] + this.i2 * 10 + len * 10 - 28,this.boxy[i] - 23);
                        this.mShape.graphics.beginBitmapFill(new panel_top2b(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10 + len * 10 - 28,this.boxy[i] - 23);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10 + 16 - 1,this.boxy[i] - 23);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10 + 16 - 1,this.boxy[i] + 38 - 23);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10 - 28,this.boxy[i] + 38 - 23);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[i] == 2)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i] - 6);
                        this.mShape.graphics.beginBitmapFill(new panel_top3(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i] - 6 + 1);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] - 6 + 1);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 26 - 6);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 26 - 6);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[i] == 3)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i]);
                        this.mShape.graphics.beginBitmapFill(new panel2_top(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 16);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 16);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[i] == 4)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i]);
                        this.mShape.graphics.beginBitmapFill(new panel4_top(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 16);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 16);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[i] == 5)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i] - 23);
                        this.mShape.graphics.beginBitmapFill(new grass2(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10 + 28,this.boxy[i] - 23);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10 - 28,this.boxy[i] - 23);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10 - 28,this.boxy[i] + 38 - 23);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + 28,this.boxy[i] + 38 - 23);
                        this.mShape.graphics.endFill();
                        _mtx = new Matrix();
                        _mtx.translate(this.boxx[i] + this.i2 * 10,this.boxy[i] - 23);
                        this.mShape.graphics.beginBitmapFill(new grass2b(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10 + 1,this.boxy[i] - 23);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + 28,this.boxy[i] - 23);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + 28,this.boxy[i] + 38 - 23);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + 1,this.boxy[i] + 38 - 23);
                        this.mShape.graphics.endFill();
                        _mtx = new Matrix();
                        _mtx.translate(this.boxx[i] + this.i2 * 10 + len * 10 - 28,this.boxy[i] - 23);
                        this.mShape.graphics.beginBitmapFill(new grass2a(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10 + len * 10 - 28,this.boxy[i] - 23);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10 + 16 - 1,this.boxy[i] - 23);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10 + 16 - 1,this.boxy[i] + 38 - 23);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10 - 28,this.boxy[i] + 38 - 23);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[i] == 6)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i] - 23);
                        this.mShape.graphics.beginBitmapFill(new grass3(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10 + 28,this.boxy[i] - 23);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10 - 28,this.boxy[i] - 23);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10 - 28,this.boxy[i] + 38 - 23);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + 28,this.boxy[i] + 38 - 23);
                        this.mShape.graphics.endFill();
                        _mtx = new Matrix();
                        _mtx.translate(this.boxx[i] + this.i2 * 10,this.boxy[i] - 23);
                        this.mShape.graphics.beginBitmapFill(new grass3b(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10 + 1,this.boxy[i] - 23);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + 28,this.boxy[i] - 23);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + 28,this.boxy[i] + 38 - 23);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + 1,this.boxy[i] + 38 - 23);
                        this.mShape.graphics.endFill();
                        _mtx = new Matrix();
                        _mtx.translate(this.boxx[i] + this.i2 * 10 + len * 10 - 28,this.boxy[i] - 23);
                        this.mShape.graphics.beginBitmapFill(new grass3a(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10 + len * 10 - 28,this.boxy[i] - 23);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10 + 16 - 1,this.boxy[i] - 23);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10 + 16 - 1,this.boxy[i] + 38 - 23);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10 - 28,this.boxy[i] + 38 - 23);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[i] == 7)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i]);
                        this.mShape.graphics.beginBitmapFill(new dark_panel_clean(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 16);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 16);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[i] == 8)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i]);
                        this.mShape.graphics.beginBitmapFill(new light_panel(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 16);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 16);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[i] == 9)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i]);
                        this.mShape.graphics.beginBitmapFill(new light_panel_clean(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 16);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 16);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[i] == 10)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i]);
                        this.mShape.graphics.beginBitmapFill(new usurper_floor(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 16);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 16);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[i] == 11)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i]);
                        this.mShape.graphics.beginBitmapFill(new industrial(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 16);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 16);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[i] == 12)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i]);
                        this.mShape.graphics.beginBitmapFill(new asphalt(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 16);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 16);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[i] == 13)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i]);
                        this.mShape.graphics.beginBitmapFill(new white_concrete(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 16);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 16);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[i] == 14)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i]);
                        this.mShape.graphics.beginBitmapFill(new pbfttp_concrete(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 16);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 16);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[i] == 15)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i] - 6);
                        this.mShape.graphics.beginBitmapFill(new wet_sand(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i] - 6 + 1);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] - 6 + 1);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 26 - 6);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 26 - 6);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[i] == 16)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i] - 6);
                        this.mShape.graphics.beginBitmapFill(new mud(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i] - 6 + 1);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] - 6 + 1);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 26 - 6);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 26 - 6);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[i] == 17)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i]);
                        this.mShape.graphics.beginBitmapFill(new usurper2_bottom(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 16);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 16);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[i] == 18)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i]);
                        this.mShape.graphics.beginBitmapFill(new stone_bricks(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 16);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 16);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[i] == 19)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i]);
                        this.mShape.graphics.beginBitmapFill(new wood_tex(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i]);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 16);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 16);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[i] == 20)
                     {
                        _mtx = new Matrix();
                        _mtx.translate(0,this.boxy[i] - 6);
                        this.mShape.graphics.beginBitmapFill(new rocks(0,0),_mtx,true,true);
                        this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i] - 6 + 1);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] - 6 + 1);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 26 - 6);
                        this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 26 - 6);
                        this.mShape.graphics.endFill();
                     }
                     if(this.boxmat[i] == 3 || this.boxmat[i] == 0 || this.boxmat[i] == 10 || this.boxmat[i] == 11 || this.boxmat[i] == 13 || this.boxmat[i] == 14 || this.boxmat[i] == 18)
                     {
                        if(this.boxx[i] + this.i2 * 10 + len * 10 - (this.boxx[i] + this.i2 * 10) >= 20)
                        {
                           corner_sample_left = panel_top_left;
                           corner_sample_right = panel_top_right;
                           if(this.boxmat[i] == 10)
                           {
                              corner_sample_left = usurper_top_left;
                              corner_sample_right = usurper_top_right;
                           }
                           if(this.boxmat[i] == 11)
                           {
                              corner_sample_left = indrustrial_left;
                              corner_sample_right = indrustrial_right;
                           }
                           if(this.boxmat[i] == 13)
                           {
                              corner_sample_left = white_concrete_top_right;
                              corner_sample_right = white_concrete_top_left;
                           }
                           if(this.boxmat[i] == 14)
                           {
                              corner_sample_left = pbfttp_corner_left;
                              corner_sample_right = pbfttp_corner_right;
                           }
                           if(this.TracePointOnlyBoxes(this.boxx[i] + this.i2 * 10 - 5,this.boxy[i] + 5) || !this.TracePointOnlyBoxes(this.boxx[i] + this.i2 * 10 - 5,this.boxy[i] - 5) && !this.TracePointOnlyBoxes(this.boxx[i] + this.i2 * 10 - 5,this.boxy[i] + 5))
                           {
                              _mtx = new Matrix();
                              _mtx.translate(this.boxx[i] + this.i2 * 10,this.boxy[i]);
                              this.mShape.graphics.beginBitmapFill(new corner_sample_left(0,0),_mtx,true,true);
                              this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10,this.boxy[i]);
                              this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + 12,this.boxy[i]);
                              this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + 12,this.boxy[i] + 16);
                              this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10,this.boxy[i] + 16);
                              this.mShape.graphics.endFill();
                           }
                           if(this.TracePointOnlyBoxes(this.boxx[i] + this.i2 * 10 + len * 10 + 5,this.boxy[i] + 5) || !this.TracePointOnlyBoxes(this.boxx[i] + this.i2 * 10 + len * 10 + 5,this.boxy[i] - 5) && !this.TracePointOnlyBoxes(this.boxx[i] + this.i2 * 10 + len * 10 + 5,this.boxy[i] + 5))
                           {
                              _mtx = new Matrix();
                              _mtx.translate(this.boxx[i] + this.i2 * 10 + len * 10 - 12,this.boxy[i]);
                              this.mShape.graphics.beginBitmapFill(new corner_sample_right(0,0),_mtx,true,true);
                              this.mShape.graphics.moveTo(this.boxx[i] + this.i2 * 10 + len * 10 - 12,this.boxy[i]);
                              this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i]);
                              this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10,this.boxy[i] + 16);
                              this.mShape.graphics.lineTo(this.boxx[i] + this.i2 * 10 + len * 10 - 12,this.boxy[i] + 16);
                              this.mShape.graphics.endFill();
                           }
                        }
                     }
                     if(this.flakes_letitsnow)
                     {
                        snow = new Sprite();
                        xx = 0.5;
                        while(xx <= len - 0.5)
                        {
                           if(this.VerticalTrace(this.boxx[i] + this.i2 * 10 + xx * 10,this.boxy[i] - 10 + (Math.random() * 6 - 3) - 5))
                           {
                              rad = 9 + Math.random() * 4;
                              if(xx < 3)
                              {
                                 rad = (rad * xx / 3 + rad) / 2;
                              }
                              if(xx > len - 3)
                              {
                                 rad = (rad * (len - xx) / 3 + rad) / 2;
                              }
                              snow.graphics.beginFill(16711423);
                              snow.graphics.drawRoundRect(this.boxx[i] + this.i2 * 10 + xx * 10 - rad / 2,this.boxy[i] + (Math.random() * 6 - 3) - rad * 0.8,rad,rad,rad);
                              snow.graphics.endFill();
                           }
                           xx += 0.25;
                        }
                        this.ForceRasterize(snow);
                        SnowShape.addChild(snow);
                     }
                     this.i2 += len - 1;
                  }
                  ++this.i2;
               }
               i++;
            }
            this.temp = this.graphics_3d.addChildAt(this.mShape,this.graphics_3d.numChildren);
            loadmap_stage = 13;
            traces_start = Number(getTimer());
            if(this.HQ)
            {
               global_lamps_power = 0.85;
               switch(this.sky.currentFrame)
               {
                  case 1:
                     global_lamps_power = 0.52;
                     break;
                  case 2:
                     global_lamps_power = 0.8;
                     break;
                  case 3:
                     global_lamps_power = 1;
                     break;
                  case 4:
                     global_lamps_power = 0;
                     break;
                  case 5:
                     global_lamps_power = 0.25;
                     break;
                  case 6:
                     global_lamps_power = 0.36;
                     break;
                  case 7:
                     global_lamps_power = 0.87;
                     break;
                  case 8:
                     global_lamps_power = 0.34;
                     break;
                  case 9:
                     global_lamps_power = 0.83;
                     break;
                  case 10:
                     global_lamps_power = 0.8;
                     break;
                  case 11:
                     global_lamps_power = 0.18;
               }
               loadmap_stage = 1301;
               falloff = 100;
               fallstep = 50;
               lamps_from = this.lampstotal;
               xx = this.g_minx - falloff;
               while(xx <= this.g_maxx + falloff)
               {
                  yy = this.g_miny - falloff;
                  while(yy <= this.g_maxy + falloff)
                  {
                     if(this.TraceBgFalloff(xx,yy,falloff))
                     {
                        if(!this.TraceBgFalloff(xx,yy,50))
                        {
                           if(this.TracePointOnlyBoxes(xx,yy))
                           {
                              this.lamps_x[this.lampstotal] = xx;
                              this.lamps_y[this.lampstotal] = yy;
                              this.lamps_power[this.lampstotal] = 0.8 * global_lamps_power;
                              this.lamps_power2[this.lampstotal] = -1;
                              ++this.lampstotal;
                           }
                        }
                     }
                     yy += fallstep;
                  }
                  xx += fallstep;
               }
               loadmap_stage = 1302;
               this.g_minx -= this.step_size * 2;
               this.g_miny -= this.step_size * 2;
               this.g_maxx += this.step_size * 4;
               this.g_maxy += this.step_size * 4;
               loadmap_stage = 1303;
               this.lightmap_ma = new Matrix(1 / this.step_size,0,0,1 / this.step_size,-this.g_minx / this.step_size,-this.g_miny / this.step_size);
               loadmap_stage = 1304;
               bmp_w = Math.max((this.g_maxx - this.g_minx) / this.step_size,1);
               bmp_h = Math.max((this.g_maxy - this.g_miny) / this.step_size);
               loadmap_stage = 1305;
               this.bmpData = new BitmapData(bmp_w,bmp_h,true,16777216);
               loadmap_stage = 1306;
               g = new Sprite();
               loadmap_stage = 1307;
               this.i3 = 0;
               while(this.i3 < this.bgstotal)
               {
                  if(this.bg_cast[this.i3])
                  {
                     loadmap_stage = 1308;
                     g.graphics.beginFill(4278190080);
                     loadmap_stage = 1309;
                     g.graphics.drawRect(this.bgx[this.i3],this.bgy[this.i3],this.bgw[this.i3],this.bgh[this.i3]);
                     loadmap_stage = 1310;
                     g.graphics.endFill();
                  }
                  ++this.i3;
               }
               this.bg_cast = null;
               loadmap_stage = 1311;
               this.bmpData.draw(g,this.lightmap_ma,null,null,null,false);
               loadmap_stage = 1312;
               this.bmpData.colorTransform(this.bmpData.rect,new ColorTransform(1,1,1,-1 * 0.85,0,0,0,255));
               loadmap_stage = 1313;
               this.bmpData_backed = this.bmpData.clone();
               loadmap_stage = 1314;
               this.i5 = this.lampstotal;
               this.i7 = this.doorstotal;
               this.doorstotal = 0;
               this.cx = (this.g_maxx - this.g_minx) / this.step_size;
               this.cy = (this.g_maxy - this.g_miny) / this.step_size;
               loadmap_stage = 1315;
               clrs = new Array();
               poss = new Array();
               dip = 0;
               while(dip < 1)
               {
                  clrs.push(0);
                  poss.push(dip * 255);
                  dip += 0.1;
               }
               loadmap_stage = 1316;
               this.i4 = 0;
               while(this.i4 < this.i5)
               {
                  g = new Sprite();
                  alphas = new Array();
                  dip = 0;
                  while(dip < 1)
                  {
                     if(this.lamps_power2[this.i4] >= 0)
                     {
                        alphas.push(1 / (dip * 10 + 0.1) * this.lamps_power[this.i4]);
                     }
                     else
                     {
                        alphas.push(1 / (dip * 10 + 0.1) * this.lamps_power[this.i4]);
                     }
                     dip += 0.1;
                  }
                  loadmap_stage = 1317;
                  matr0 = new Matrix();
                  siz = this.lamps_power[this.i4] * 200 * 20 * 1.4;
                  loadmap_stage = 1318;
                  matr0.createGradientBox(siz,siz,0,this.lamps_x[this.i4] - siz / 2,this.lamps_y[this.i4] - siz / 2);
                  loadmap_stage = 1319;
                  g.graphics.beginGradientFill(GradientType.RADIAL,clrs,alphas,poss,matr0,SpreadMethod.PAD);
                  loadmap_stage = 1320;
                  lamp_step = this.lamps_power2[this.i4] == -1 ? Math.PI * 0.1 : Math.PI * 0.05;
                  loadmap_stage = 1321;
                  an = 0;
                  while(an < Math.PI * 2)
                  {
                     this_rad = siz / 2;
                     loadmap_stage = 1322;
                     xx = this.lamps_x[this.i4] + Math.sin(an) * this_rad;
                     yy = this.lamps_y[this.i4] + Math.cos(an) * this_rad;
                     this.xx2 = this.lamps_x[this.i4];
                     this.yy2 = this.lamps_y[this.i4];
                     this.v;
                     loadmap_stage = 1323;
                     this.i2 = 0;
                     while(this.i2 < this.boxestotal)
                     {
                        if(Math.max(this.xx2,xx) > this.boxx[this.i2] && Math.min(this.xx2,xx) < this.boxx[this.i2] + this.boxw[this.i2])
                        {
                           if(Math.max(this.yy2,yy) > this.boxy[this.i2] && Math.min(this.yy2,yy) < this.boxy[this.i2] + this.boxh[this.i2])
                           {
                              loadmap_stage = 1324;
                              if(this.CheckCrossSimpleOpti(xx,yy,this.xx2,this.yy2,this.boxx[this.i2],this.boxy[this.i2],this.boxx[this.i2] + this.boxw[this.i2],this.boxy[this.i2]))
                              {
                                 this.v = this.Dist2D(this.xx2,this.yy2,this.retux,this.retuy);
                                 if(this.v < this_rad)
                                 {
                                    xx = this.retux;
                                    yy = this.retuy;
                                    this_rad = this.v;
                                 }
                              }
                              loadmap_stage = 1325;
                              if(this.CheckCrossSimpleOpti(xx,yy,this.xx2,this.yy2,this.boxx[this.i2],this.boxy[this.i2] + this.boxh[this.i2],this.boxx[this.i2] + this.boxw[this.i2],this.boxy[this.i2] + this.boxh[this.i2]))
                              {
                                 this.v = this.Dist2D(this.xx2,this.yy2,this.retux,this.retuy);
                                 if(this.v < this_rad)
                                 {
                                    xx = this.retux;
                                    yy = this.retuy;
                                    this_rad = this.v;
                                 }
                              }
                              loadmap_stage = 1326;
                              if(this.CheckCrossSimpleOpti(xx,yy,this.xx2,this.yy2,this.boxx[this.i2],this.boxy[this.i2],this.boxx[this.i2],this.boxy[this.i2] + this.boxh[this.i2]))
                              {
                                 this.v = this.Dist2D(this.xx2,this.yy2,this.retux,this.retuy);
                                 if(this.v < this_rad)
                                 {
                                    xx = this.retux;
                                    yy = this.retuy;
                                    this_rad = this.v;
                                 }
                              }
                              loadmap_stage = 1327;
                              if(this.CheckCrossSimpleOpti(xx,yy,this.xx2,this.yy2,this.boxx[this.i2] + this.boxw[this.i2],this.boxy[this.i2],this.boxx[this.i2] + this.boxw[this.i2],this.boxy[this.i2] + this.boxh[this.i2]))
                              {
                                 this.v = this.Dist2D(this.xx2,this.yy2,this.retux,this.retuy);
                                 if(this.v < this_rad)
                                 {
                                    xx = this.retux;
                                    yy = this.retuy;
                                    this_rad = this.v;
                                 }
                              }
                              loadmap_stage = 1328;
                           }
                        }
                        ++this.i2;
                     }
                     xx = this.lamps_x[this.i4] + Math.sin(an) * this_rad;
                     yy = this.lamps_y[this.i4] + Math.cos(an) * this_rad;
                     loadmap_stage = 1329;
                     if(an == 0)
                     {
                        g.graphics.moveTo(xx,yy);
                     }
                     else
                     {
                        g.graphics.lineTo(xx,yy);
                     }
                     loadmap_stage = 1330;
                     an += lamp_step;
                  }
                  loadmap_stage = 1331;
                  g.graphics.endFill();
                  g.filters = [new BlurFilter(1.1,1.1,3)];
                  loadmap_stage = 1332;
                  this.lamps_sprites[this.i4] = g;
                  loadmap_stage = 1333;
                  ++this.i4;
               }
               this.shadowbmp = new Bitmap(this.bmpData);
               loadmap_stage = 1334;
               this.UpdateLightmap(true);
               loadmap_stage = 1335;
               this.doorstotal = this.i7;
               loadmap_stage = 1336;
               this.shadowbmp.smoothing = true;
               loadmap_stage = 1337;
               this.temp = this.graphics_3d_front.addChildAt(this.shadowbmp,0);
               loadmap_stage = 1338;
               this.temp.x = this.g_minx;
               this.temp.y = this.g_miny;
               this.temp.scaleX = this.step_size;
               this.temp.scaleY = this.step_size;
               loadmap_stage = 1339;
               this.shadowbmp.smoothing = true;
               loadmap_stage = 1340;
               this.g_minx += this.step_size * 2;
               this.g_miny += this.step_size * 2;
               this.g_maxx -= this.step_size * 4;
               this.g_maxy -= this.step_size * 4;
            }
            loadmap_stage = 14;
            traces_end = getTimer();
            if(this.flakes_letitsnow)
            {
               temp_snow = this.graphics_3d.addChildAt(SnowShape,this.graphics_3d.numChildren);
            }
            this.startatotal = this.atotal;
            this.startchtotal = this.chtotal;
            loadmap_stage = 15;
            if(this.MP_mode)
            {
               this.grenades_total = this.MP_start_grenades_count;
               this.grenades_port_total = this.MP_start_grenades_port_count;
               this.grenades_sh_total = this.MP_start_grenades_sh_count;
            }
            loadmap_stage = 15.1;
            if(POST_ERR_CODE == "")
            {
               loadmap_stage = 16;
               this.GenFlakes();
               loadmap_stage = 17;
               this.StartGameTimer();
               loadmap_stage = 18;
               if(this.MP_mode)
               {
                  loadmap_stage = 1801;
                  loadmap_stage += "; Player does not exist";
                  this.mens[this.MP_myid].login_name = this.MP_login_name;
                  loadmap_stage = 1802;
               }
               else if(this.IM_A_CHEATER)
               {
                  loadmap_stage = 1803;
                  this.ShowNoAch();
                  this.PlaySound_full(this.s_chat);
                  loadmap_stage = 1804;
               }
               loadmap_stage = 19;
               i = 0;
               while(i < this.triggerstotal)
               {
                  if(this.triggers[i].execute)
                  {
                     this.EXEC_TRIGGER(i);
                  }
                  i++;
               }
               loadmap_stage = 20;
               this.GCTime();
            }
            else
            {
               this.LAST_ERROR = "Oh! Seems like there was problem with map :(\nMap loading failed and error is:\n" + POST_ERR_CODE;
               gotoAndStop("menu");
            }
         }
         catch(error:Error)
         {
            crash_failed = function(param1:IOErrorEvent):void
            {
               myLoader.removeEventListener(Event.COMPLETE,crash_done);
               myLoader.removeEventListener(IOErrorEvent.IO_ERROR,crash_failed);
            };
            crash_done = function(param1:Event):void
            {
               myLoader.removeEventListener(Event.COMPLETE,crash_done);
               myLoader.removeEventListener(IOErrorEvent.IO_ERROR,crash_failed);
            };
            player_version_os = "User Flash Player & OS detection failed";
            try
            {
               _fullInfo = Capabilities.version;
               _osSplitArr = _fullInfo.split(" ");
               _versionSplitArr = _osSplitArr[1].split(",");
               _osInfo = _osSplitArr[0];
               _versionInfo = Number(_versionSplitArr[0]);
               player_version_os = "Flash Player version: " + _flash_version + "\nOS: " + _osInfo;
            }
            catch(e2:*)
            {
            }
            LAST_ERROR = "Oh! Something terrible happend :(\nMap loading failed. Here displayed information on error.\n Error code: " + error.errorID + "\nLoadMap_StopAddress: " + loadmap_stage + "\nMap size: " + MovieClip(root).mapdata.length + " bytes\nError message: " + error.message + "\nApplication size: " + total + "\nViewer: " + this.loaderInfo.parameters.l + "\n" + player_version_os;
            myRequest = new URLRequest(MP_server);
            myVariables = new URLVariables();
            myVariables.rq = "crash";
            myVariables.mapdata = MovieClip(root).mapdata;
            myVariables.mapid = MP_map_name;
            myVariables.errorcode = LAST_ERROR;
            myRequest.method = URLRequestMethod.POST;
            myRequest.data = myVariables;
            myLoader.addEventListener(Event.COMPLETE,serv_list_done);
            myLoader.addEventListener(IOErrorEvent.IO_ERROR,serv_list_failed);
            myLoader.load(myRequest);
            DropGameTimer();
            gotoAndStop("menu");
         }
         this.MP_start_guns_total = this.gunstotal;
      }
      
      public function qpack_rule(param1:String) : void
      {
         this.qpack_pattern[this.qpack_pattern_length] = new Array();
         this.qpack_pattern[this.qpack_pattern_length][0] = param1;
         this.qpack_pattern[this.qpack_pattern_length][1] = "^" + this.qpack_base.charAt(this.qpack_pattern_simcalc) + "";
         ++this.qpack_pattern_simcalc;
         ++this.qpack_pattern_length;
      }
      
      public function qpack_rule_2param(param1:String, param2:String) : void
      {
         this.qpack_pattern[this.qpack_pattern_length] = new Array();
         this.qpack_pattern[this.qpack_pattern_length][0] = param1;
         this.qpack_pattern[this.qpack_pattern_length][1] = param2;
         ++this.qpack_pattern_length;
      }
      
      public function un_qpack(param1:String) : String
      {
         this.i = this.qpack_pattern_length - 1;
         while(this.i >= 0)
         {
            param1 = param1.split(this.qpack_pattern[this.i][1]).join(this.qpack_pattern[this.i][0]);
            --this.i;
         }
         return param1;
      }
      
      public function SEND_INTRUDER_LIST() : void
      {
         var report:String = null;
         var key:Object = null;
         try
         {
            report = "";
            for(key in this.INTRUDER_DATABASE)
            {
               if(this.INTRUDER_DATABASE[key].activity_end - this.INTRUDER_DATABASE[key].activity_start > 3000)
               {
                  if(this.INTRUDER_DATABASE[key].registered_shots + 2 < this.INTRUDER_DATABASE[key].unregistered_shots * 0.95 && (this.INTRUDER_DATABASE[key].unregistered_shots > 5 || this.INTRUDER_DATABASE[key].registered_shots > 5) || this.INTRUDER_DATABASE[key].unregistered_shots > 10 && this.INTRUDER_DATABASE[key].seen_deaths == 0 || this.INTRUDER_DATABASE[key].seen_deaths > 0 && this.INTRUDER_DATABASE[key].min_hea > 0 || this.INTRUDER_DATABASE[key].max_hea > 300 || this.INTRUDER_DATABASE[key].max_hea > this.mens[this.MP_myid].hmax || this.INTRUDER_DATABASE[key].min_hea > 100 && this.INTRUDER_DATABASE[key].unregistered_shots > 10)
                  {
                     report += this.GAME_VERSION + ";" + this.CUR_CUSTOM_MAP + ";" + key + ";" + this.INTRUDER_DATABASE[key].unregistered_shots + ";" + this.INTRUDER_DATABASE[key].registered_shots + ";" + this.INTRUDER_DATABASE[key].activity_start + ";" + this.INTRUDER_DATABASE[key].activity_end + ";" + this.INTRUDER_DATABASE[key].ping_min + ";" + this.INTRUDER_DATABASE[key].ping_max + ";" + this.INTRUDER_DATABASE[key].seen_deaths + ";" + this.INTRUDER_DATABASE[key].max_hea + ";" + this.INTRUDER_DATABASE[key].min_hea + ";" + this.MP_ping2 + "|";
                  }
               }
            }
            this.INTRUDER_DATABASE = new Object();
            this.INTRUDER_DATABASE_length = 0;
            if(report.length > 10)
            {
               this.myRequest = new URLRequest("http://www.plazmaburst2.com/genreport.php");
               this.myVariables = new URLVariables();
               this.myVariables.genreport = report;
               this.myVariables.chk1 = this.mens[this.MP_myid].login_name;
               this.myVariables.chk2 = this.mens[this.MP_myid].login_name.charAt(3);
               this.myVariables.chk3 = this.mens[this.MP_myid].nick;
               this.myVariables.srvr = this.MP_SERVER_NAME;
               this.myVariables.srvrip = this.MP_SERVER_IP;
               this.myRequest.method = URLRequestMethod.POST;
               this.myRequest.data = this.myVariables;
               this.myReportLoader.addEventListener(Event.COMPLETE,function():*
               {
               });
               this.myReportLoader.addEventListener(IOErrorEvent.IO_ERROR,function():*
               {
               });
               this.myReportLoader.load(this.myRequest);
            }
         }
         catch(e:*)
         {
         }
      }
      
      public function r_down(param1:MouseEvent) : void
      {
      }
      
      public function add_action_to_trigger(param1:int, param2:*, param3:*, param4:int) : void
      {
         this.triggers[param1].actions_targetA[this.triggers[param1].actions_total] = param2;
         this.triggers[param1].actions_targetB[this.triggers[param1].actions_total] = param3;
         this.triggers[param1].actions_type[this.triggers[param1].actions_total] = param4;
         ++this.triggers[param1].actions_total;
      }
      
      public function PutInCar(param1:int, param2:int, param3:* = false) : void
      {
         if(!param3)
         {
            if(this.MP_mode && Boolean(this.mens[param1].isplayer))
            {
               return;
            }
         }
         this.ChangedGun(param1);
         this.vehicles[param2].master = param1;
         this.mens[param1].incar = param2;
         this.mens[param1].alpha = 0;
         this.vehicles[param2].lastgun = this.mens[param1].curwea;
         if(param1 == 0)
         {
            if(this.vehicles[param2].typ == 0)
            {
               this.game_scale = 0.75;
            }
            if(this.vehicles[param2].typ == 1)
            {
               this.game_scale = 0.5;
            }
            this.key_pick = false;
            this.in_car = true;
            if(this.ui_type == 0 || this.ui_type == 1)
            {
               this.vehhp.visible = true;
            }
            this.vehicles[param2].gui.txt1.textColor = this.color_player;
         }
         else if(this.mens[param1].team == this.mens[this.MP_myid].team)
         {
            this.vehicles[param2].gui.txt1.textColor = this.color_friendly;
         }
         else
         {
            this.vehicles[param2].gui.txt1.textColor = this.color_enemy;
         }
         if(param1 == this.MP_myid)
         {
            this.UpdateWeps();
         }
      }
      
      public function PutoutCar(param1:int, param2:* = false) : void
      {
         if(!param2)
         {
            if(this.MP_mode && (this.vehicles[param1].master != -1 && this.mens[this.vehicles[param1].master].isplayer))
            {
               return;
            }
         }
         if(this.vehicles[param1].master != -1)
         {
            if(this.vehicles[param1].master == this.MP_myid)
            {
               this.game_scale = this.g_scale_outcar;
               this.key_pick = false;
               this.in_car = false;
               if(this.ui_type == 0 || this.ui_type == 1)
               {
                  this.vehhp.visible = false;
               }
               this.UpdateWeps();
            }
            this.ChangedGun(this.vehicles[param1].master);
            this.mens[this.vehicles[param1].master].incar = -1;
            this.mens[this.vehicles[param1].master].stability = 1;
            this.mens[this.vehicles[param1].master].y = this.vehicles[param1].y - 50;
            this.mens[this.vehicles[param1].master].tox = 0;
            this.mens[this.vehicles[param1].master].toy = 0;
            this.mens[this.vehicles[param1].master].alpha = 1;
            this.mens[this.vehicles[param1].master].curwea = this.vehicles[param1].lastgun;
            this.ChangedGun(this.vehicles[param1].master);
            this.vehicles[param1].master = -1;
         }
         this.vehicles[param1].gui.txt1.textColor = 16777215;
      }
      
      public function EXEC_TRIGGER(param1:int, param2:Boolean = false) : Boolean
      {
         /*
          * Decompilation error
          * Code may be obfuscated
          * Tip: You can try enabling "Automatic deobfuscation" in Settings
          * Error type: ExecutionException (java.lang.StackOverflowError)
          */
         throw new flash.errors.IllegalOperationError("Not decompiled due to error");
      }
      
      public function SpawnLevelLogicErrorIfNeeded(param1:Error, param2:String) : void
      {
         if(this.ENABLE_LEVEL_LOGIC_ERRORS)
         {
            this.ChatNewMsg("<font color=\"#FF0000\">Level logic error: " + param2 + ", Engine Error: " + param1.errorID + " :: " + param1.name + " :: " + param1.message + "</font>");
         }
      }
      
      public function SetAIDifficulty(param1:int) : void
      {
         if(param1 <= 1)
         {
            this.EASY_MODE = true;
            this.PRO_BOTS = false;
         }
         else if(param1 <= 2)
         {
            this.EASY_MODE = false;
            this.PRO_BOTS = false;
         }
         else
         {
            this.EASY_MODE = false;
            this.PRO_BOTS = true;
         }
      }
      
      public function GetAIDifficulty() : int
      {
         if(this.EASY_MODE && !this.PRO_BOTS)
         {
            return 1;
         }
         if(!this.EASY_MODE && !this.PRO_BOTS)
         {
            return 2;
         }
         return 3;
      }
      
      public function GiveStarterGunsDM(param1:Number, param2:Number, param3:* = null) : void
      {
         var _loc4_:int = 0;
         var _loc5_:int = 0;
         var _loc6_:int = 0;
         var _loc7_:Vector.<int> = null;
         var _loc8_:Boolean = false;
         var _loc9_:int = 0;
         var _loc10_:MovieClip = null;
         if(this.dm_slots_on_spawn.length == 0)
         {
            return;
         }
         _loc4_ = 0;
         if(param3 != null)
         {
            _loc6_ = 0;
            while(_loc6_ < this.gunstotal)
            {
               if(this.guns[_loc6_].picken_by != -1)
               {
                  if(this.mens[this.guns[_loc6_].picken_by] == param3)
                  {
                     _loc4_++;
                  }
               }
               _loc6_++;
            }
         }
         _loc5_ = 0;
         for(; _loc5_ < this.dm_slots_on_spawn.length && _loc4_ < this.dm_max_guns_on_spawn; _loc5_++)
         {
            if(param3 != null)
            {
               _loc8_ = false;
               _loc6_ = 0;
               while(_loc6_ < this.gunstotal)
               {
                  if(this.guns[_loc6_].wep == this.dm_slots_on_spawn[_loc5_])
                  {
                     if(this.guns[_loc6_].picken_by == param3.idd)
                     {
                        _loc8_ = true;
                        break;
                     }
                  }
                  _loc6_++;
               }
               if(!_loc8_)
               {
                  _loc6_ = 0;
                  while(_loc6_ < this.temp_ignore_gun_pick.length)
                  {
                     if(this.temp_ignore_gun_pick[_loc6_].mc.wep == this.dm_slots_on_spawn[_loc5_])
                     {
                        if(getTimer() < this.temp_ignore_gun_pick[_loc6_].timer + 1000)
                        {
                           _loc8_ = true;
                           break;
                        }
                     }
                     _loc6_++;
                  }
               }
               if(_loc8_)
               {
                  continue;
               }
            }
            _loc7_ = new Vector.<int>();
            _loc6_ = 0;
            while(_loc6_ < this.gunstotal)
            {
               if(this.guns[_loc6_].wep == this.dm_slots_on_spawn[_loc5_])
               {
                  if(this.guns[_loc6_].picken_by == -1)
                  {
                     this.ok = true;
                     _loc9_ = 0;
                     while(_loc9_ < this.playerstotal)
                     {
                        if(this.mens[_loc9_].io)
                        {
                           if(this.mens[_loc9_].isplayer)
                           {
                              if(this.mens[_loc9_].hea > 0)
                              {
                                 if(Math.abs(this.mens[_loc9_].x - this.guns[_loc6_].x) < 200)
                                 {
                                    if(Math.abs(this.mens[_loc9_].y - this.guns[_loc6_].y) < 200)
                                    {
                                       this.ok = false;
                                       break;
                                    }
                                 }
                              }
                           }
                        }
                        _loc9_++;
                     }
                     if(this.ok)
                     {
                        _loc7_.push(_loc6_);
                     }
                  }
               }
               _loc6_++;
            }
            if(_loc7_.length == 0)
            {
               _loc6_ = 0;
               while(_loc6_ < this.gunstotal)
               {
                  if(this.guns[_loc6_].wep == this.dm_slots_on_spawn[_loc5_])
                  {
                     if(this.guns[_loc6_].picken_by == -1)
                     {
                        _loc7_.push(_loc6_);
                     }
                  }
                  _loc6_++;
               }
            }
            if(_loc7_.length > 0)
            {
               _loc6_ = _loc7_[Math.floor(Math.random() * _loc7_.length)];
               _loc10_ = this.guns[_loc6_];
               _loc10_.x = param1;
               _loc10_.y = param2 - 50;
               this.atox[_loc10_.b_p1] = 0;
               this.atoy[_loc10_.b_p1] = 0;
               this.WakeUpAtom(_loc10_.b_p1);
               this.ax[_loc10_.b_p1] = _loc10_.x - 10;
               this.ay[_loc10_.b_p1] = _loc10_.y;
               this.lax[_loc10_.b_p1] = this.ax[_loc10_.b_p1];
               this.lay[_loc10_.b_p1] = this.ay[_loc10_.b_p1];
               this.atox[_loc10_.b_p2] = 0;
               this.atoy[_loc10_.b_p2] = 0;
               this.WakeUpAtom(_loc10_.b_p2);
               this.ax[_loc10_.b_p2] = _loc10_.x + 10;
               this.ay[_loc10_.b_p2] = _loc10_.y;
               this.lax[_loc10_.b_p2] = this.ax[_loc10_.b_p2];
               this.lay[_loc10_.b_p2] = this.ay[_loc10_.b_p2];
               _loc4_++;
            }
         }
      }
      
      public function create_barrel(param1:MovieClip) : void
      {
         this.barrels[this.barrelstotal] = param1;
         param1.gotoAndStop(2);
         param1.hea = 15;
         param1.dist = 2.6;
         param1.b_left_top = this.CreatePoint(param1.x - 5,param1.y - 13,param1.tox,param1.toy,7,false,3,-this.barrelstotal - 100);
         param1.b_right_top = this.CreatePoint(param1.x + 5,param1.y - 13,param1.tox,param1.toy,7,false,3,-this.barrelstotal - 100);
         param1.b_right_bottom = this.CreatePoint(param1.x + 5,param1.y + 13,param1.tox,param1.toy,7,false,3,-this.barrelstotal - 100);
         param1.b_left_bottom = this.CreatePoint(param1.x - 5,param1.y + 13,param1.tox,param1.toy,7,false,3,-this.barrelstotal - 100);
         param1.ch_top = this.Connect(param1.b_left_top,param1.b_right_top,0,10,-1);
         param1.ch_left = this.Connect(param1.b_left_top,param1.b_left_bottom,0,26,-1);
         param1.ch_right = this.Connect(param1.b_right_top,param1.b_right_bottom,0,26,-1);
         param1.ch_bottom = this.Connect(param1.b_right_bottom,param1.b_left_bottom,0,10,-1);
         param1.ch_cross1 = this.Connect(param1.b_left_top,param1.b_right_bottom,0,Math.sqrt(100 + 676),-1);
         param1.ch_cross2 = this.Connect(param1.b_right_top,param1.b_left_bottom,0,Math.sqrt(100 + 676),-1);
         if(param1.mdl == "bar_blue")
         {
            param1.dist *= 1.5;
         }
         if(param1.mdl == "bar_red")
         {
            param1.dist *= 2;
         }
         ++this.barrelstotal;
      }
      
      public function create_vehicle(param1:MovieClip, param2:Number, param3:Number) : void
      {
         this.vehicles[this.vehiclestotal] = param1;
         param1.ondestroyed = -1;
         param1.gotoAndStop(2);
         param1.typ = param2;
         param1.dead = false;
         param1.master = -1;
         param1.wep0 = -1;
         param1.wep1 = -1;
         param1.wep2 = -1;
         param1.side = param3;
         param1.ecosystem = false;
         param1.io = true;
         param1.nick = "";
         if(param2 == 0)
         {
            param1.nick = param1.gui.txt1.text = "Mobile r081-CS";
            param1.carbody.scaleY = param1.side;
            param1.hea = 400;
            param1.hmax = 400;
            param1.b_w1 = this.CreatePoint(param1.x + param1.w1.x * param1.side,param1.y + param1.w1.y,param1.tox,param1.toy,32,true,4,-this.vehiclestotal - 200);
            param1.b_w2 = this.CreatePoint(param1.x + param1.w2.x * param1.side,param1.y + param1.w2.y,param1.tox,param1.toy,32,true,4,-this.vehiclestotal - 200);
            param1.b_w1b = param1.b_w1;
            param1.b_w2b = param1.b_w2;
            param1.b_c = this.CreatePoint(param1.x,param1.y,param1.tox,param1.toy,35,false,5,-this.vehiclestotal - 200);
            param1.b_c2 = this.CreatePoint(param1.x + param1.w1.x * param1.side,param1.y,param1.tox,param1.toy,40,false,5,-this.vehiclestotal - 200);
            param1.b_c3 = this.CreatePoint(param1.x + (param1.w2.x / 2 + 10) * param1.side,param1.y + 20,param1.tox,param1.toy,40,false,5,-this.vehiclestotal - 200);
            this.i = 0;
            while(this.i < 2)
            {
               param1.ch_cross = this.Connect(param1.b_w1,param1.b_w2,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c,param1.b_w1,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c,param1.b_w2,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c,param1.b_c2,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_w1,param1.b_c2,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_w2,param1.b_c2,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c,param1.b_c3,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_w1,param1.b_c3,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_w2,param1.b_c3,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c2,param1.b_c3,0,-1,1);
               ++this.i;
            }
         }
         else if(param2 == 1)
         {
            param1.nick = param1.gui.txt1.text = "Hound Walker-CS";
            param1.hea = 300;
            param1.hmax = 300;
            param1.move_state = 0;
            param1.move_height = 0;
            param1.jump_state = 0;
            param1.jump_state2 = Math.PI / 2;
            param1.corpse_h = 80;
            param1.deadtim = 0;
            param1.b_p1 = this.CreatePoint(param1.x + 0 * param1.side,param1.y,param1.tox,param1.toy,45,false,5,-this.vehiclestotal - 200);
            param1.b_p2 = this.CreatePoint(param1.x + 62 * param1.side,param1.y,param1.tox,param1.toy,50,false,5,-this.vehiclestotal - 200);
            param1.b_p3 = this.CreatePoint(param1.x + 0 * param1.side,param1.y - 50,param1.tox,param1.toy,50,false,5,-this.vehiclestotal - 200);
            param1.b_w1 = this.CreatePoint(param1.x + 5 * param1.side,param1.y + 210,param1.tox,param1.toy,30,false,6,-this.vehiclestotal - 200);
            param1.b_w2 = this.CreatePoint(param1.x - 5 * param1.side,param1.y + 210,param1.tox,param1.toy,30,false,6,-this.vehiclestotal - 200);
            param1.b_w1b = this.CreatePoint(param1.x + 2.5 * param1.side,param1.y + 210 / 2,param1.tox,param1.toy,40,false,5,-this.vehiclestotal - 200);
            param1.b_w2b = this.CreatePoint(param1.x - 2.5 * param1.side,param1.y + 210 / 2,param1.tox,param1.toy,40,false,5,-this.vehiclestotal - 200);
            this.xx = 1;
            this.i = 0;
            while(this.i < 2)
            {
               param1.ch_cross = this.Connect(param1.b_p1,param1.b_p2,0,-1,this.xx);
               param1.ch_cross = this.Connect(param1.b_p2,param1.b_p3,0,-1,this.xx);
               param1.ch_cross = this.Connect(param1.b_p1,param1.b_p3,0,-1,this.xx);
               param1.ch_cross = this.Connect(param1.b_p1,param1.b_w1,2,180,this.xx);
               param1.ch_cross = this.Connect(param1.b_p1,param1.b_w2,2,180,this.xx);
               param1.ch_cross = this.Connect(param1.b_p1,param1.b_w1,1,40,this.xx);
               param1.ch_cross = this.Connect(param1.b_p1,param1.b_w2,1,40,this.xx);
               param1.ch_cross = this.Connect(param1.b_p3,param1.b_w1,1,110,this.xx);
               param1.ch_cross = this.Connect(param1.b_p3,param1.b_w2,1,110,this.xx);
               param1.ch_cross = this.Connect(param1.b_p2,param1.b_w1,1,130,this.xx);
               param1.ch_cross = this.Connect(param1.b_p2,param1.b_w2,1,130,this.xx);
               param1.ch_leg1upper = this.Connect(param1.b_p1,param1.b_w1b,0,210 / 2,0.1);
               param1.ch_leg1lower = this.Connect(param1.b_w1,param1.b_w1b,0,210 / 2,0.1);
               param1.ch_leg2upper = this.Connect(param1.b_p1,param1.b_w2b,0,210 / 2,0.1);
               param1.ch_leg2lower = this.Connect(param1.b_w2,param1.b_w2b,0,210 / 2,0.1);
               ++this.i;
            }
            param1.ch_cross2 = this.Connect(param1.b_w1,param1.b_w2,2,150,this.xx);
            param1.leg1.x = 0;
            param1.leg1.y = 0;
            param1.leg2.x = 0;
            param1.leg2.y = 0;
            param1.leg1.scaleX = param1.side;
            param1.leg2.scaleX = param1.side;
            param1.leg1b.scaleX = param1.side;
            param1.leg2b.scaleX = param1.side;
            param1.carbody.scaleY = param1.side;
         }
         else if(param2 == 2)
         {
            param1.nick = param1.gui.txt1.text = "Life-Capsule";
            param1.side = 1;
            param1.hea = 10;
            param1.hmax = 10;
            param1.b_lt = this.CreatePoint(param1.x - 16.4,param1.y - 53.6,param1.tox,param1.toy,10,false,7,-this.vehiclestotal - 200);
            param1.b_rt = this.CreatePoint(param1.x + 16.4,param1.y - 53.6,param1.tox,param1.toy,10,false,7,-this.vehiclestotal - 200);
            param1.b_lb = this.CreatePoint(param1.x - 16.4,param1.y + 53.6,param1.tox,param1.toy,10,false,7,-this.vehiclestotal - 200);
            param1.b_rb = this.CreatePoint(param1.x + 16.4,param1.y + 53.6,param1.tox,param1.toy,10,false,7,-this.vehiclestotal - 200);
            param1.b_lt2 = this.CreatePoint(param1.x - 16.4,param1.y - 53.6,param1.tox,param1.toy,10,false,7,-this.vehiclestotal - 200);
            param1.b_rt2 = this.CreatePoint(param1.x + 16.4,param1.y - 53.6,param1.tox,param1.toy,10,false,7,-this.vehiclestotal - 200);
            param1.b_lb2 = this.CreatePoint(param1.x - 16.4,param1.y + 53.6,param1.tox,param1.toy,10,false,7,-this.vehiclestotal - 200);
            param1.b_rb2 = this.CreatePoint(param1.x + 16.4,param1.y + 53.6,param1.tox,param1.toy,10,false,7,-this.vehiclestotal - 200);
            this.i = 0;
            while(this.i < 2)
            {
               param1.ch_cross = this.Connect(param1.b_lt,param1.b_rt,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_lb,param1.b_rb,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_lt2,param1.b_lb2,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_rt2,param1.b_rb2,0,-1,1);
               ++this.i;
            }
            param1.ch_t0 = this.Connect(param1.b_lt,param1.b_lt2,0,-1,1);
            param1.ch_t1 = this.Connect(param1.b_rt,param1.b_rt2,0,-1,1);
            param1.ch_t2 = this.Connect(param1.b_lb,param1.b_lb2,0,-1,1);
            param1.ch_t3 = this.Connect(param1.b_rb,param1.b_rb2,0,-1,1);
            param1.ch_t4 = this.Connect(param1.b_lt,param1.b_rb,0,-1,1);
            param1.ch_t5 = this.Connect(param1.b_rt,param1.b_lb,0,-1,1);
            param1.ch_t6 = this.Connect(param1.b_lt2,param1.b_rb2,0,-1,1);
            param1.ch_t7 = this.Connect(param1.b_rt2,param1.b_lb2,0,-1,1);
         }
         else if(param2 == 3)
         {
            param1.gotoAndStop(1);
            param1.hea = 20;
            param1.hmax = 20;
            param1.side = 1;
            param1.grabtim = 10;
            param1.nick = param1.gui.txt1.text = "";
            param1.gui.visible = false;
            param1.b_lt = this.CreatePoint(param1.x - 20,param1.y - 20,param1.tox,param1.toy,10,false,9,-this.vehiclestotal - 200);
            param1.b_rt = this.CreatePoint(param1.x + 20,param1.y - 20,param1.tox,param1.toy,10,false,9,-this.vehiclestotal - 200);
            param1.b_lb = this.CreatePoint(param1.x - 20,param1.y + 20,param1.tox,param1.toy,10,false,9,-this.vehiclestotal - 200);
            param1.b_rb = this.CreatePoint(param1.x + 20,param1.y + 20,param1.tox,param1.toy,10,false,9,-this.vehiclestotal - 200);
            param1.b_c = this.CreatePoint(param1.x,param1.y,param1.tox,param1.toy,25,false,9,-this.vehiclestotal - 200);
            param1.ch_cross = this.Connect(param1.b_lt,param1.b_rt,0,-1,1);
            param1.ch_cross = this.Connect(param1.b_lb,param1.b_rb,0,-1,1);
            param1.ch_cross = this.Connect(param1.b_lt,param1.b_lb,0,-1,1);
            param1.ch_cross = this.Connect(param1.b_rt,param1.b_rb,0,-1,1);
            param1.ch_cross = this.Connect(param1.b_lt,param1.b_rb,0,-1,1);
            param1.ch_cross = this.Connect(param1.b_rt,param1.b_lb,0,-1,1);
            param1.ch_cross = this.Connect(param1.b_lt,param1.b_c,0,-1,1);
            param1.ch_cross = this.Connect(param1.b_lb,param1.b_c,0,-1,1);
            param1.ch_cross = this.Connect(param1.b_lt,param1.b_c,0,-1,1);
            param1.ch_cross = this.Connect(param1.b_rt,param1.b_c,0,-1,1);
         }
         else if(param2 == 4)
         {
            param1.nick = param1.gui.txt1.text = "Drone";
            param1.ecosystem = true;
            param1.carbody.scaleY = param1.side;
            param1.hea = 100;
            param1.hmax = 100;
            param1.b_c = this.CreatePoint(param1.x,param1.y,param1.tox,param1.toy,10,false,7,-this.vehiclestotal - 200);
            param1.b_c1 = this.CreatePoint(param1.x + 15 * param1.side,param1.y,param1.tox,param1.toy,10,false,7,-this.vehiclestotal - 200);
            param1.b_c2 = this.CreatePoint(param1.x,param1.y + 17,param1.tox,param1.toy,3,false,7,-this.vehiclestotal - 200);
            param1.b_c3 = this.CreatePoint(param1.x + 15 * param1.side,param1.y + 17,param1.tox,param1.toy,3,false,7,-this.vehiclestotal - 200);
            this.i = 0;
            while(this.i < 1)
            {
               param1.ch_cross = this.Connect(param1.b_c,param1.b_c1,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c,param1.b_c2,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c,param1.b_c3,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c1,param1.b_c2,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c1,param1.b_c3,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c2,param1.b_c3,0,-1,1);
               ++this.i;
            }
         }
         else if(param2 == 5)
         {
            param1.hea = 70;
            param1.hmax = 70;
            param1.nick = param1.gui.txt1.text = "";
            param1.gui.visible = false;
            param1.resttim = 0;
            this.i2 = 0;
            while(this.i2 < 2)
            {
               this.i = 0;
               while(this.i < 10)
               {
                  param1["b_c" + this.i] = this.CreatePoint(param1.x,param1.y + 20 * this.i,param1.tox,param1.toy,0,false,4,-this.vehiclestotal - 200);
                  if(this.i > 0)
                  {
                     param1.ch_cross = this.Connect(param1["b_c" + (this.i - 1)],param1["b_c" + this.i],0,-1,1);
                  }
                  if(this.i > 1)
                  {
                     param1.ch_cross = this.Connect(param1["b_c" + (this.i - 2)],param1["b_c" + this.i],0,-1,1);
                  }
                  ++this.i;
               }
               ++this.i2;
            }
         }
         else if(param2 == 6)
         {
            param1.hea = 70;
            param1.hmax = 70;
            param1.attached = -1;
            if(!HINTS)
            {
               param1.origin.visible = false;
            }
            param1.gui.txt1.text = "Hand holder";
            param1.gui.visible = false;
            param1.resttim = 0;
         }
         else if(param2 == 7)
         {
            param1.nick = param1.gui.txt1.text = "Corvette";
            param1.ecosystem = true;
            param1.carbody.scaleY = param1.side;
            param1.hea = 100;
            param1.hmax = 100;
            param1.b_c = this.CreatePoint(param1.x,param1.y,param1.tox,param1.toy,36,false,4,-this.vehiclestotal - 200);
            param1.b_c1 = this.CreatePoint(param1.x + 90 * param1.side,param1.y,param1.tox,param1.toy,36,false,4,-this.vehiclestotal - 200);
            param1.b_c2 = this.CreatePoint(param1.x,param1.y + 26,param1.tox,param1.toy,36,false,4,-this.vehiclestotal - 200);
            param1.b_c3 = this.CreatePoint(param1.x + 90 * param1.side,param1.y + 26,param1.tox,param1.toy,36,false,4,-this.vehiclestotal - 200);
            this.i = 0;
            while(this.i < 1)
            {
               param1.ch_cross = this.Connect(param1.b_c,param1.b_c1,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c,param1.b_c2,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c,param1.b_c3,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c1,param1.b_c2,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c1,param1.b_c3,0,-1,1);
               param1.ch_cross = this.Connect(param1.b_c2,param1.b_c3,0,-1,1);
               ++this.i;
            }
         }
         if(this.MP_mode)
         {
            param1.gui.visible = false;
         }
         ++this.vehiclestotal;
      }
      
      public function HurtMyPlayer(param1:Number, param2:Number, param3:Number) : void
      {
         if(this.PSYCHOBLOOD_MODE == 1)
         {
            if(this.Math_abs(param1) > this.Math_abs(param2))
            {
               if(param1 < 0)
               {
                  this.pb0.alpha += param3 * 0.1;
               }
               else
               {
                  this.pb1.alpha += param3 * 0.1;
               }
            }
            else if(param2 < 0)
            {
               this.pb3.alpha += param3 * 0.1;
            }
            else
            {
               this.pb2.alpha += param3 * 0.1;
            }
            this.hurt_i4 = 0;
            while(this.hurt_i4 < 4)
            {
               this._root["pb" + this.hurt_i4].alpha += param3 * 0.015;
               this._root["pb" + this.hurt_i4].visible = true;
               if(this._root["pb" + this.hurt_i4].alpha > 0.9)
               {
                  this._root["pb" + this.hurt_i4].alpha = 0.9;
               }
               ++this.hurt_i4;
            }
         }
         else if(this.PSYCHOBLOOD_MODE == 2)
         {
            if(this.Math_abs(param1) > this.Math_abs(param2))
            {
               if(param1 < 0)
               {
                  this.pb0.alpha += param3 * 0.3;
               }
               else
               {
                  this.pb1.alpha += param3 * 0.3;
               }
            }
            else if(param2 < 0)
            {
               this.pb3.alpha += param3 * 0.3;
            }
            else
            {
               this.pb2.alpha += param3 * 0.3;
            }
            if(this.SCREEN_EFFECTS)
            {
               this.pb4.alpha += param3 * 0.015;
               this.hurt_i4 = 0;
               while(this.hurt_i4 < 5)
               {
                  this.pb4.visible = true;
                  if(this._root["pb" + this.hurt_i4].alpha > 0.9)
                  {
                     this._root["pb" + this.hurt_i4].alpha = 0.9;
                  }
                  ++this.hurt_i4;
               }
            }
            else
            {
               this.hurt_i4 = 0;
               while(this.hurt_i4 < 4)
               {
                  this.pb4.visible = true;
                  if(this._root["pb" + this.hurt_i4].alpha > 0.9)
                  {
                     this._root["pb" + this.hurt_i4].alpha = 0.9;
                  }
                  ++this.hurt_i4;
               }
            }
         }
         if(this.mxnds1 + this.mxnds2 + this.mxnds3 == 0 && this.tnds > 10)
         {
            this.stable = false;
            this.unstable = 1;
         }
         if(this.mens[this.MP_myid].hea <= 0)
         {
            if(!this.mens[this.MP_myid].dead)
            {
               this.hpwarning = false;
               if(this.hpbeepch != null)
               {
                  this.hpbeepch.stop();
               }
               if(!this.MP_spectator)
               {
                  if(this.BEEP_ON_DEATH)
                  {
                     this.hpbeepch = this.s_hp_dead.play(0,0,this.vol);
                  }
               }
            }
         }
         else if(this.mens[this.MP_myid].hea / this.mens[this.MP_myid].hmax < this.hp_warn_max)
         {
            if(!this.hpwarning)
            {
               this.hpwarning = true;
               if(this.hpbeepch != null)
               {
                  this.hpbeepch.stop();
               }
               if(!this.MP_spectator)
               {
                  if(this.GLOBAL_REGEN_SPEED != 0)
                  {
                     if(this.GLOBAL_REGEN_DELAY < 10)
                     {
                        this.hpbeepch = this.s_hp_warn.play(0,0,this.vol);
                     }
                  }
               }
               if(this.hpbeepch != null)
               {
                  this.hpbeepch.addEventListener(Event.SOUND_COMPLETE,this.handleHpBeep);
               }
            }
         }
         if(this.tnds > 12 + this.mxnds1 + this.mxnds2 + this.mxnds3)
         {
            this.stable = false;
            this.unstable = 2;
         }
      }
      
      public function Alerted(param1:MovieClip) : void
      {
         if(!param1.dying && (!param1.isplayer || !this.MP_mode || param1.team == this.mens[this.MP_myid].team || param1.voice.always_enemy_spotted))
         {
            param1.last_contact = 0;
            if(param1.hunt == -1)
            {
               if(param1.voice.enemy_spotted.length > 0)
               {
                  this.Say(param1,param1.voice.enemy_spotted[Math.floor(Math.random() * param1.voice.enemy_spotted.length)]);
               }
            }
         }
      }
      
      public function Hurt_nopain(param1:Number) : void
      {
         if(this.VIOLENCE || this.CASUAL_MODE || this.MP_mode)
         {
            if(this.mens[param1].hp_legs <= 0)
            {
               if(!this.mens[param1].brk_legs)
               {
                  if(this.limb_breaking_allowed)
                  {
                     if(this.mens[param1].armored == 2)
                     {
                        this.PlaySound(this.s_metal_gib,this.ax[this.mens[param1].b_toe],this.ay[this.mens[param1].b_toe]);
                     }
                     else
                     {
                        this.PlaySound(this.s_blood_leg_arm,this.ax[this.mens[param1].b_toe],this.ay[this.mens[param1].b_toe]);
                     }
                     this.mens[param1].brk_legs = true;
                     if(this.VIOLENCE)
                     {
                        this.RestoreLimbColor(this.mens[param1].leg1.middle);
                        this.RestoreLimbColor(this.mens[param1].leg2.middle);
                        this.mens[param1].leg1.lower.visible = false;
                        this.mens[param1].leg2.lower.visible = false;
                        this.mens[param1].leg1.middle.gotoAndStop(30);
                        this.mens[param1].leg2.middle.gotoAndStop(30);
                        this.mens[param1].leg1.middle.transform.colorTransform = new ColorTransform(this.mens[param1].blood_red,this.mens[param1].blood_green,this.mens[param1].blood_blue,1,0,0,0,0);
                        this.mens[param1].leg2.middle.transform.colorTransform = new ColorTransform(this.mens[param1].blood_red,this.mens[param1].blood_green,this.mens[param1].blood_blue,1,0,0,0,0);
                     }
                     this.arad[this.mens[param1].b_leg1] *= 0.3;
                     this.arad[this.mens[param1].b_leg2] *= 0.3;
                     this.chdef[this.mens[param1].ch_leg1_max] = 20 * this.mens[param1].scale;
                     this.chdef[this.mens[param1].ch_leg2_max] = 20 * this.mens[param1].scale;
                     this.chio[this.mens[param1].ch_leg1_damp] = -1;
                     this.chio[this.mens[param1].ch_leg2_damp] = -1;
                     this.chdef[this.mens[param1].ch_body_ang1] *= 0.6;
                     this.chdef[this.mens[param1].ch_body_ang2] *= 0.6;
                     this.effcolor = param1;
                     this.FlowAt(this.ax[this.mens[param1].b_leg1],this.ay[this.mens[param1].b_leg1] - Math.random() * 20,0,-2 + Math.random() * 4,-2 + Math.random() * 4,6);
                     this.FlowAt(this.ax[this.mens[param1].b_leg1],this.ay[this.mens[param1].b_leg1] - Math.random() * 20,0,-2 + Math.random() * 4,-2 + Math.random() * 4,6);
                     this.MakeDying(this.mens[param1]);
                     if(this.MP_mode & this.MP_giveguns)
                     {
                        if(this.mens[param1].hea > 0)
                        {
                           if(this.mens[param1].isplayer)
                           {
                              if(this.mens[param1].lastshotby == this.MP_myid)
                              {
                                 if(this.mens[param1].team != this.mens[this.MP_myid])
                                 {
                                    this.ExpTask(this.EXP_TYPE_BREAK_ALIVE_PLAYERS_LEGS_IN_APPROVED,this.mens[param1].nick);
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
            else if(this.mens[param1].brk_legs)
            {
               this.mens[param1].brk_legs = false;
               this.mens[param1].leg1.lower.visible = true;
               this.mens[param1].leg2.lower.visible = true;
               this.mens[param1].leg1.middle.transform.colorTransform = new ColorTransform(1,1,1,1,0,0,0,0);
               this.mens[param1].leg2.middle.transform.colorTransform = new ColorTransform(1,1,1,1,0,0,0,0);
               this.arad[this.mens[param1].b_leg1] /= 0.3;
               this.arad[this.mens[param1].b_leg2] /= 0.3;
               this.chdef[this.mens[param1].ch_leg1_max] = 31 * this.mens[param1].scale;
               this.chdef[this.mens[param1].ch_leg2_max] = 31 * this.mens[param1].scale;
               this.chio[this.mens[param1].ch_leg1_damp] = true;
               this.chio[this.mens[param1].ch_leg2_damp] = true;
               this.chdef[this.mens[param1].ch_body_ang1] /= 0.6;
               this.chdef[this.mens[param1].ch_body_ang2] /= 0.6;
               this.SpawnPlayerImmediately(this.mens[param1]);
            }
            if(this.mens[param1].hp_arms <= 0)
            {
               if(!this.mens[param1].brk_arms)
               {
                  if(this.limb_breaking_allowed)
                  {
                     if(this.mens[param1].armored == 2)
                     {
                        this.PlaySound(this.s_metal_gib,this.ax[this.mens[param1].b_toe],this.ay[this.mens[param1].b_toe]);
                     }
                     else
                     {
                        this.PlaySound(this.s_blood_leg_arm,this.ax[this.mens[param1].b_body],this.ay[this.mens[param1].b_body]);
                     }
                     this.mens[param1].brk_arms = true;
                     if(this.VIOLENCE)
                     {
                        this.RestoreLimbColor(this.mens[param1].arm1.lower);
                        this.RestoreLimbColor(this.mens[param1].arm2.lower);
                        this.mens[param1].arm1.lower.gotoAndStop(20);
                        this.mens[param1].arm2.lower.gotoAndStop(20);
                        if(this.mens[param1].arm1.lower.psi != null)
                        {
                           this.mens[param1].arm1.lower.psi.visible = false;
                        }
                        if(this.mens[param1].arm2.lower.psi != null)
                        {
                           this.mens[param1].arm2.lower.psi.visible = false;
                        }
                     }
                     this.arad[this.mens[param1].b_arm1] *= 0.4;
                     this.arad[this.mens[param1].b_arm2] *= 0.4;
                     if(this.VIOLENCE)
                     {
                        this.mens[param1].arm1.lower.transform.colorTransform = new ColorTransform(this.mens[param1].blood_red,this.mens[param1].blood_green,this.mens[param1].blood_blue,1,0,0,0,0);
                        this.mens[param1].arm2.lower.transform.colorTransform = new ColorTransform(this.mens[param1].blood_red,this.mens[param1].blood_green,this.mens[param1].blood_blue,1,0,0,0,0);
                     }
                     this.effcolor = param1;
                     this.FlowAt(this.ax[this.mens[param1].b_arm1],this.ay[this.mens[param1].b_arm1],0,-2 + Math.random() * 4,-2 + Math.random() * 4,6);
                     this.FlowAt(this.ax[this.mens[param1].b_arm2],this.ay[this.mens[param1].b_arm2],0,-2 + Math.random() * 4,-2 + Math.random() * 4,6);
                     this.MakeDying(this.mens[param1]);
                     if(this.MP_mode & this.MP_giveguns)
                     {
                        if(this.mens[param1].hea > 0)
                        {
                           if(this.mens[param1].isplayer)
                           {
                              if(this.mens[param1].lastshotby == this.MP_myid)
                              {
                                 if(this.mens[param1].team != this.mens[this.MP_myid])
                                 {
                                    this.ExpTask(this.EXP_TYPE_BREAK_ALIVE_PLAYERS_ARMS_IN_APPROVED,this.mens[param1].nick);
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
            else if(this.mens[param1].brk_arms)
            {
               this.mens[param1].brk_arms = false;
               this.arad[this.mens[param1].b_arm1] /= 0.4;
               this.arad[this.mens[param1].b_arm2] /= 0.4;
               this.mens[param1].arm1.lower.transform.colorTransform = new ColorTransform(1,1,1,1,0,0,0,0);
               this.mens[param1].arm2.lower.transform.colorTransform = new ColorTransform(1,1,1,1,0,0,0,0);
               this.SpawnPlayerImmediately(this.mens[param1]);
            }
            if(this.mens[param1].hp_body <= 0)
            {
               if(!this.mens[param1].brk_body)
               {
                  if(this.limb_breaking_allowed)
                  {
                     this.mens[param1].brk_body = true;
                     if(this.mens[param1].armored == 2)
                     {
                        this.PlaySound(this.s_metal_gib,this.ax[this.mens[param1].b_toe],this.ay[this.mens[param1].b_toe]);
                     }
                     else if(Math.random() > 0.5)
                     {
                        this.PlaySound(this.s_blood_body,this.ax[this.mens[param1].b_body],this.ay[this.mens[param1].b_body]);
                     }
                     else
                     {
                        this.PlaySound(this.s_blood_body2,this.ax[this.mens[param1].b_body],this.ay[this.mens[param1].b_body]);
                     }
                     if(this.mens[param1].team != this.mens[this.MP_myid].team)
                     {
                        this.incBadge(15);
                     }
                     if(this.VIOLENCE || this.MP_mode)
                     {
                        this.RestoreLimbColor(this.mens[param1].body);
                        this.chio[this.mens[param1].ch_body] = -1;
                        this.chio[this.mens[param1].ch_spine] = -1;
                        this.chio[this.mens[param1].ch_body_ang1] = -1;
                        this.chio[this.mens[param1].ch_body_ang2] = -1;
                        this.mens[param1].toe.bloddy.visible = true;
                        this.mens[param1].body.gotoAndStop(5);
                     }
                     this.hurt_x4 = (this.ax[this.mens[param1].b_toe] + this.ax[this.mens[param1].b_body]) / 2;
                     this.hurt_y4 = (this.ay[this.mens[param1].b_toe] + this.ay[this.mens[param1].b_body]) / 2;
                     this.hurt_xx2 = (this.atox[this.mens[param1].b_toe] + this.atox[this.mens[param1].b_body]) / 2;
                     this.hurt_yy2 = (this.atoy[this.mens[param1].b_toe] + this.atoy[this.mens[param1].b_body]) / 2;
                     if(this.VIOLENCE || this.MP_mode)
                     {
                        this.mens[param1].b_brk1 = this.CreatePoint(this.hurt_x4,this.hurt_y4,(this.hurt_xx2 + this.atox[this.mens[param1].b_body]) / 2,(this.hurt_yy2 + this.atoy[this.mens[param1].b_body]) / 2,7,false,1,param1);
                        this.mens[param1].b_brk2 = this.CreatePoint(this.hurt_x4,this.hurt_y4,(this.hurt_xx2 + this.atox[this.mens[param1].b_toe]) / 2,(this.hurt_yy2 + this.atoy[this.mens[param1].b_toe]) / 2,7,false,1,param1);
                        this.mens[param1].ch_brk1 = this.Connect(this.mens[param1].b_toe,this.mens[param1].b_brk2,0,this.chdef[this.mens[param1].ch_body] * 0.75,-1);
                        this.mens[param1].ch_brk2 = this.Connect(this.mens[param1].b_body,this.mens[param1].b_brk1,0,this.chdef[this.mens[param1].ch_body] * 0.75,-1);
                        this.mens[param1].body.transform.colorTransform = new ColorTransform(this.mens[param1].blood_red,this.mens[param1].blood_green,this.mens[param1].blood_blue,1,0,0,0,0);
                        this.mens[param1].toe.bloddy.transform.colorTransform = new ColorTransform(this.mens[param1].blood_red,this.mens[param1].blood_green,this.mens[param1].blood_blue,1,0,0,0,0);
                     }
                     this.effcolor = param1;
                     this.FlowAt(this.ax[this.mens[param1].b_toe],this.ay[this.mens[param1].b_toe] - Math.random() * 15,0,-6 + Math.random() * 12,-6 + Math.random() * 12,7);
                     this.FlowAt(this.ax[this.mens[param1].b_toe],this.ay[this.mens[param1].b_toe] - Math.random() * 15,0,-6 + Math.random() * 12,-6 + Math.random() * 12,7);
                     this.FlowAt(this.ax[this.mens[param1].b_toe],this.ay[this.mens[param1].b_toe] - Math.random() * 15,0,-6 + Math.random() * 12,-6 + Math.random() * 12,7);
                     this.mens[param1].dying = true;
                     if(this.mens[param1].hea > 0)
                     {
                        this.mens[param1].hea = 0;
                     }
                  }
               }
            }
            else if(this.mens[param1].brk_body)
            {
               this.mens[param1].brk_body = false;
               this.chio[this.mens[param1].ch_body] = true;
               this.chio[this.mens[param1].ch_spine] = true;
               this.chio[this.mens[param1].ch_body_ang1] = true;
               this.chio[this.mens[param1].ch_body_ang2] = true;
               this.aio[this.mens[param1].b_brk1] = -1;
               this.aio[this.mens[param1].b_brk2] = -1;
               this.mens[param1].b_brk1 = this.mens[param1].b_toe;
               this.mens[param1].b_brk2 = this.mens[param1].b_body;
               this.chio[this.mens[param1].ch_brk1] = -1;
               this.chio[this.mens[param1].ch_brk2] = -1;
               this.mens[param1].ch_brk1 = this.mens[param1].ch_spine;
               this.mens[param1].ch_brk2 = this.mens[param1].ch_spine;
               this.mens[param1].toe.bloddy.visible = false;
               this.mens[param1].body.transform.colorTransform = new ColorTransform(1,1,1,1,0,0,0,0);
               this.SpawnPlayerImmediately(this.mens[param1]);
            }
            if(this.mens[param1].hp_head <= 0)
            {
               if(!this.mens[param1].brk_head)
               {
                  if(this.limb_breaking_allowed)
                  {
                     if(this.mens[param1].armored == 2)
                     {
                        this.PlaySound(this.s_metal_gib,this.ax[this.mens[param1].b_toe],this.ay[this.mens[param1].b_toe]);
                     }
                     else if(Math.random() > 0.5)
                     {
                        this.PlaySound(this.s_blood_head,this.ax[this.mens[param1].b_body],this.ay[this.mens[param1].b_body]);
                     }
                     else
                     {
                        this.PlaySound(this.s_blood_head2,this.ax[this.mens[param1].b_body],this.ay[this.mens[param1].b_body]);
                     }
                     if(this.VIOLENCE)
                     {
                        this.RestoreLimbColor(this.mens[param1].head);
                        this.mens[param1].head.gotoAndStop(10);
                        this.mens[param1].head.transform.colorTransform = new ColorTransform(this.mens[param1].blood_red,this.mens[param1].blood_green,this.mens[param1].blood_blue,1,0,0,0,0);
                     }
                     this.mens[param1].brk_head = true;
                     if(this.mens[param1].hea > 0)
                     {
                        this.mens[param1].hea = 0;
                     }
                     this.arad[this.mens[param1].b_head_start] *= 0.5;
                     this.arad[this.mens[param1].b_head_end] *= 0.1;
                     this.effcolor = param1;
                     this.FlowAt(this.ax[this.mens[param1].b_head_start],this.ay[this.mens[param1].b_head_start] - Math.random() * 5,0,-30 + Math.random() * 60,-30 + Math.random() * 60 - 5,6);
                     this.FlowAt(this.ax[this.mens[param1].b_head_start],this.ay[this.mens[param1].b_head_start] - Math.random() * 5,0,-30 + Math.random() * 60,-30 + Math.random() * 60 - 10,6);
                     this.FlowAt(this.ax[this.mens[param1].b_head_start],this.ay[this.mens[param1].b_head_start] - Math.random() * 5,0,-40 + Math.random() * 80,-40 + Math.random() * 80 - 10,8);
                  }
               }
            }
            else if(this.mens[param1].brk_head)
            {
               this.mens[param1].head.transform.colorTransform = new ColorTransform(1,1,1,1,0,0,0,0);
               this.mens[param1].brk_head = false;
               this.arad[this.mens[param1].b_head_start] /= 0.5;
               this.arad[this.mens[param1].b_head_end] /= 0.1;
               this.SpawnPlayerImmediately(this.mens[param1]);
            }
            if(this.STRICT_MODE)
            {
               if(this.mens[param1].team == this.mens[this.MP_myid].team)
               {
                  if(this.mens[param1].char == 1 || this.mens[param1].char == 3 || this.mens[param1].char == 13 || this.mens[param1].char == 38)
                  {
                     if(Boolean(this.mens[param1].brk_head) || Boolean(this.mens[param1].brk_arms) || Boolean(this.mens[param1].brk_legs) || Boolean(this.mens[param1].brk_body))
                     {
                        this.darkness.visible = true;
                        if(!this.MP_mode)
                        {
                           this.LEVEL_END_FORCE = "failed";
                           if(this.mens[param1].dead)
                           {
                              this.LAST_ERROR = "YOUR TEAMMATE DIED.";
                              if(HINTS)
                              {
                                 this.SetHint("Your teammate died.");
                              }
                           }
                           else
                           {
                              this.LAST_ERROR = "YOUR TEAMMATE IS CRITICALLY INJURED.";
                              if(HINTS)
                              {
                                 this.SetHint("Your teammate is critically injured.");
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }
      
      public function MakeDying(param1:*) : void
      {
         if(param1.hea > 0)
         {
            if(!param1.dying)
            {
               if(param1.voice.dying.length > 0)
               {
                  this.Say(param1,param1.voice.dying[Math.floor(Math.random() * param1.voice.dying.length)],true);
               }
               param1.dying = true;
            }
         }
      }
      
      public function MakeHappy(param1:*) : void
      {
         if(param1.hea > 0)
         {
            if(!param1.dying)
            {
               if(param1.voice.enemy_down.length > 0)
               {
                  if(this.MP_mode || param1.voice.enemy_down_sp_chance == undefined || Math.random() < param1.voice.enemy_down_sp_chance)
                  {
                     this.Say(param1,param1.voice.enemy_down[Math.floor(Math.random() * param1.voice.enemy_down.length)]);
                  }
               }
            }
         }
      }
      
      public function Hurt(param1:Number, param2:Number = 1) : void
      {
         this.mens[param1].regentim = 0;
         if(this.mens[param1].notspawned)
         {
            this.SpawnPlayerImmediately(this.mens[param1]);
         }
         this.mens[param1].last_contact = 0;
         if(this.mens[param1].hea > 0)
         {
            if(this.mens[param1].isGhost)
            {
               if(this.mens[param1].alpha < 0.3)
               {
                  this.mens[param1].alpha = 0.3;
               }
            }
            if(this.mens[param1].voice.hurt.length > 0)
            {
               this.Say(this.mens[param1],this.mens[param1].voice.hurt[Math.floor(Math.random() * this.mens[param1].voice.hurt.length)],true);
            }
            if(this.mens[param1].lastshot == "head")
            {
               this.atox[this.mens[param1].b_head_end] -= this.mens[param1].side * 4 * param2;
               this.atox[this.mens[param1].b_head_start] -= this.mens[param1].side * 3 * param2;
               this.atoy[this.mens[param1].b_arm1] -= 3 * param2;
               this.atoy[this.mens[param1].b_arm2] -= 2 * param2;
               this.atox[this.mens[param1].b_leg1] += this.mens[param1].side * 3 * param2;
               this.atoy[this.mens[param1].b_leg1] -= 2 * param2;
            }
            else if(this.mens[param1].lastshot == "body")
            {
               this.atox[this.mens[param1].b_head_end] += this.mens[param1].side * 1 * param2;
               this.atox[this.mens[param1].b_head_start] -= this.mens[param1].side * 1 * param2;
               this.atox[this.mens[param1].b_toe] -= this.mens[param1].side * 2 * param2;
               this.atox[this.mens[param1].b_arm1] -= this.mens[param1].side * 1 * param2;
               this.atox[this.mens[param1].b_arm2] -= this.mens[param1].side * 2 * param2;
               this.atoy[this.mens[param1].b_arm1] += 1 * param2;
               this.atoy[this.mens[param1].b_arm2] += 2 * param2;
               this.atox[this.mens[param1].b_leg1] += this.mens[param1].side * 2 * param2;
               this.atox[this.mens[param1].b_leg2] -= this.mens[param1].side * 1 * param2;
            }
            else if(this.mens[param1].lastshot == "arms")
            {
               this.atox[this.mens[param1].b_head_end] += this.mens[param1].side * 1 * param2;
               this.atox[this.mens[param1].b_head_start] -= this.mens[param1].side * 1 * param2;
               this.atox[this.mens[param1].b_body] -= this.mens[param1].side * 2 * param2;
               this.atox[this.mens[param1].b_arm1] -= this.mens[param1].side * 2 * param2;
               this.atox[this.mens[param1].b_arm2] -= this.mens[param1].side * 2 * param2;
               this.atoy[this.mens[param1].b_arm1] -= 4 * param2;
               this.atoy[this.mens[param1].b_arm2] -= 3 * param2;
            }
            else if(this.mens[param1].lastshot == "legs")
            {
               this.atox[this.mens[param1].b_head_end] -= this.mens[param1].side * 1 * param2;
               this.atox[this.mens[param1].b_head_start] += this.mens[param1].side * 1 * param2;
               this.atox[this.mens[param1].b_toe] -= this.mens[param1].side * 1 * param2;
               this.atox[this.mens[param1].b_arm1] += this.mens[param1].side * 1 * param2;
               this.atox[this.mens[param1].b_arm2] += this.mens[param1].side * 1 * param2;
               this.atoy[this.mens[param1].b_arm1] -= 2 * param2;
               this.atoy[this.mens[param1].b_arm2] -= 3 * param2;
               this.atox[this.mens[param1].b_leg1] -= this.mens[param1].side * 3 * param2;
               this.atox[this.mens[param1].b_leg2] -= this.mens[param1].side * 4 * param2;
            }
            if(this.mens[param1].inwater)
            {
               this.Effect(this.ax[this.mens[param1].b_head_start],this.ay[this.mens[param1].b_head_start],2,0,0);
            }
         }
         if(this.mens[param1].hea < this.dying_after && (param1 != this.MP_myid || this.MP_mode || this.PRO_BOTS))
         {
            this.MakeDying(this.mens[param1]);
         }
         this.Hurt_nopain(param1);
         if(this.mens[param1].dying)
         {
            this.mens[param1].stability = -2;
         }
      }
      
      public function PhysicsExplosionNoSprite(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number, param6:int, param7:Boolean, param8:String) : void
      {
         var _loc9_:Object = null;
         var _loc10_:* = false;
         var _loc11_:String = null;
         if(this.DEBUG_MODE)
         {
            this.debug_screen.graphics.lineStyle(param3 * 2,16755200,0.5);
            this.debug_screen.graphics.moveTo(param1,param2);
            this.debug_screen.graphics.lineTo(param1,param2 + 1);
         }
         if(param4 > 0)
         {
            if(param7)
            {
               this.SHAKEAMMOUT += this.dist_to_face / this.Dist3Dm((param1 + this.game.x - 400) * this.game_scale,(param2 + this.game.y - 200) * this.game_scale,this.dist_to_face) * Math.max(param3 / 50 * 3,param4) * 0.2;
            }
         }
         this.i6 = 0;
         while(this.i6 < this.flakes_total)
         {
            if(this.flakes[this.i6].alpha > 0)
            {
               this.xx = this.Dist2D(param1,param2,this.flakes[this.i6].x,this.flakes[this.i6].y);
               if(this.xx < param3 * 0.75)
               {
                  this.flakes[this.i6].hit = true;
               }
               if(this.xx < param3)
               {
                  this.xx = param4 * Math.sqrt((param3 - this.xx) / param3) / this.xx;
                  this.flakes[this.i6].tox += (this.flakes[this.i6].x - param1) * this.xx * 3;
                  this.flakes[this.i6].toy += (this.flakes[this.i6].y - param2) * this.xx * 3;
               }
            }
            ++this.i6;
         }
         _loc9_ = null;
         if(this.MP_mode && this.MP_favor_the_shooter)
         {
            _loc9_ = {};
         }
         this.i6 = 0;
         while(this.i6 < this.atotal)
         {
            if(this.aio[this.i6] == true || this.aio[this.i6] == false)
            {
               this.xx = this.Dist2D(param1,param2,this.ax[this.i6],this.ay[this.i6]);
               if(this.xx < param3)
               {
                  if(this.TraceLine(param1,param2,this.ax[this.i6],this.ay[this.i6]))
                  {
                     if(this.xx < 0.5)
                     {
                        this.xx = 0.5;
                     }
                     this.xx = param4 * Math.sqrt((param3 - this.xx) / param3) / this.xx;
                     this.allow = true;
                     this.is2 = 0;
                     while(this.is2 < this.shnades_total)
                     {
                        if(this.shnades[this.is2].io)
                        {
                           if(this.ax[this.i6] > this.shnades[this.is2].x - this.shnades[this.is2].radius - 5)
                           {
                              if(this.ax[this.i6] < this.shnades[this.is2].x + this.shnades[this.is2].radius + 5)
                              {
                                 if(this.ay[this.i6] > this.shnades[this.is2].y - this.shnades[this.is2].radius - 5)
                                 {
                                    if(this.ay[this.i6] < this.shnades[this.is2].y + this.shnades[this.is2].radius + 5)
                                    {
                                       if(this.Dist2D(this.shnades[this.is2].x,this.shnades[this.is2].y,param1,param2) > this.shnades[this.is2].radius - 5 && this.Dist2D(this.shnades[this.is2].x,this.shnades[this.is2].y,this.ax[this.i6],this.ay[this.i6]) < this.shnades[this.is2].radius)
                                       {
                                          this.allow = false;
                                          break;
                                       }
                                    }
                                 }
                              }
                           }
                        }
                        ++this.is2;
                     }
                     if(this.allow)
                     {
                        if(this.amat[this.i6] == 1 || this.amat[this.i6] == 0)
                        {
                           if(this.mens[this.aof[this.i6]].can_be_hit)
                           {
                              _loc10_ = false;
                              if(this.MP_mode)
                              {
                                 if(this.MP_favor_the_shooter)
                                 {
                                    _loc10_ = param6 == this.MP_myid;
                                 }
                                 else
                                 {
                                    _loc10_ = this.aof[this.i6] == this.MP_myid;
                                 }
                                 if(param6 == this.MP_myid && !this.mens[this.aof[this.i6]].isplayer || this.aof[this.i6] === this.MP_myid && (param6 == -1 || !this.mens[param6].isplayer))
                                 {
                                    _loc10_ = true;
                                 }
                                 if(!this.mens[this.aof[this.i6]].isplayer && (param6 == -1 || !this.mens[param6].isplayer))
                                 {
                                    _loc10_ = true;
                                 }
                              }
                              else
                              {
                                 _loc10_ = true;
                              }
                              if(this.MP_mode && this.MP_favor_the_shooter)
                              {
                                 if(param6 == this.MP_myid)
                                 {
                                    if(_loc9_[this.aof[this.i6]] == undefined)
                                    {
                                       _loc9_[this.aof[this.i6]] = new Array();
                                    }
                                    _loc9_[this.aof[this.i6]].push(this.GlobalAtomIDToPlayerLocalAtomID(this.i6,this.mens[this.aof[this.i6]]),this.r2(this.ax[this.i6] - param1),this.r2(this.ay[this.i6] - param2),this.r2(this.xx));
                                 }
                              }
                              if(_loc10_)
                              {
                                 this.ApplyWaveDamageToPlayerAtom(param6,this.mens[this.aof[this.i6]],this.GlobalAtomIDToPlayerLocalAtomID(this.i6,this.mens[this.aof[this.i6]]),this.ax[this.i6] - param1,this.ay[this.i6] - param2,this.xx,param5,this.expl_hurt_full,param3,param4,true,param1,param2,-1,param8);
                              }
                           }
                        }
                        else
                        {
                           this.yy = Math.sqrt(this.arad[this.i6]);
                           if(this.yy < 5)
                           {
                              this.yy = 5;
                           }
                           this.WakeUpAtom(this.i6);
                           this.atox[this.i6] += (this.ax[this.i6] - param1) * this.xx / this.yy * 7;
                           this.atoy[this.i6] += (this.ay[this.i6] - param2) * this.xx / this.yy * 7;
                           if(this.xx < param3 * 0.75)
                           {
                              if(this.amat[this.i6] == 3)
                              {
                                 if(this.barrels[-100 - this.aof[this.i6]].hea > 0)
                                 {
                                    this.barrels[-100 - this.aof[this.i6]].hea -= param5 / 4;
                                    this.HurtBarrel(-100 - this.aof[this.i6]);
                                 }
                              }
                              if(this.amat[this.i6] == 5 || this.amat[this.i6] == 4 || this.amat[this.i6] == 6 || this.amat[this.i6] == 7 || this.amat[this.i6] == 9)
                              {
                                 if(this.vehicles[-this.aof[this.i6] - 200].typ == 0 || this.vehicles[-this.aof[this.i6] - 200].typ == 1 || this.vehicles[-this.aof[this.i6] - 200].typ == 3 || this.vehicles[-this.aof[this.i6] - 200].typ == 4)
                                 {
                                    this.vehicles[-this.aof[this.i6] - 200].hea -= param5 / 3;
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
            ++this.i6;
         }
         if(_loc9_ != null)
         {
            for(_loc11_ in _loc9_)
            {
               this.MP_custom_events += ";w|" + [param6,this.r2(param5),this.expl_hurt_full ? 1 : 0,this.r2(param3),this.r2(param4),_loc11_,this.r2(param1),this.r2(param2),param8].join("#") + "#" + _loc9_[_loc11_].join("#");
            }
         }
         if(param6 != -1)
         {
            this.i6 = 0;
            while(this.i6 < this.playerstotal)
            {
               if(this.mens[this.i6].io)
               {
                  if(!this.mens[this.i6].isplayer)
                  {
                     this.xx = this.Dist2D(param1,param2,this.ax[this.mens[this.i6].b_toe],this.ay[this.mens[this.i6].b_toe]);
                     if(this.xx < param3 + 400 && this.mens[this.i6].team != this.mens[param6].team || this.xx < param3 + 20 && this.mens[this.i6].team == this.mens[param6].team)
                     {
                        if(this.TraceLine(param1,param2,this.ax[this.mens[this.i6].b_head_start],this.ay[this.mens[this.i6].b_head_start]))
                        {
                           if(!this.mens[this.i6].dead)
                           {
                              this.Alerted(this.mens[this.i6]);
                           }
                           this.mens[this.i6].hunt = param6;
                        }
                     }
                  }
               }
               ++this.i6;
            }
         }
         this.i6 = 0;
         while(this.i6 < this.lampstotal)
         {
            if(this.lamps_power2[this.i6] > 0)
            {
               if(this.Dist2D(param1,param2,this.lamps_x[this.i6],this.lamps_y[this.i6]) < param3)
               {
                  if(this.TraceLine(param1,param2,this.lamps_x[this.i6],this.lamps_y[this.i6]))
                  {
                     this.ShotLight(this.i6);
                  }
               }
            }
            ++this.i6;
         }
      }
      
      public function ExplosionSound(param1:Number, param2:Number) : *
      {
         this.xx = 0;
         this.i6 = 0;
         while(this.i6 < this.watertotal)
         {
            if(param1 > this.wax[this.i6])
            {
               if(param1 < this.wax[this.i6] + this.waw[this.i6])
               {
                  if(param2 > this.way[this.i6])
                  {
                     if(param2 < this.way[this.i6] + this.wah[this.i6])
                     {
                        if(this.wa_friction[this.i6])
                        {
                           this.xx = 1;
                        }
                     }
                  }
               }
            }
            ++this.i6;
         }
         if(this.xx == 0)
         {
            if(Math.random() > 0.5)
            {
               this.PlaySound(this.s_explode1,param1,param2);
            }
            else
            {
               this.PlaySound(this.s_explode2,param1,param2);
            }
         }
         else
         {
            this.PlaySound(this.s_explode_underwater,param1,param2);
         }
      }
      
      public function ExplosionSoundBarrel(param1:Number, param2:Number) : *
      {
         this.xx = 0;
         this.i6 = 0;
         while(this.i6 < this.watertotal)
         {
            if(param1 > this.wax[this.i6])
            {
               if(param1 < this.wax[this.i6] + this.waw[this.i6])
               {
                  if(param2 > this.way[this.i6])
                  {
                     if(param2 < this.way[this.i6] + this.wah[this.i6])
                     {
                        if(this.wa_friction[this.i6])
                        {
                           this.xx = 1;
                        }
                     }
                  }
               }
            }
            ++this.i6;
         }
         if(this.xx == 0)
         {
            if(Math.random() > 0.5)
            {
               this.PlaySound(this.s_barrel,param1,param2);
            }
            else
            {
               this.PlaySound(this.s_barrel2,param1,param2);
            }
         }
         else
         {
            this.PlaySound(this.s_explode_underwater,param1,param2);
         }
      }
      
      public function PhysicsExplosion(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number, param6:int, param7:String) : void
      {
         this.PhysicsExplosionNoSprite(param1,param2,param3,param4,param5,param6,true,param7);
         if(param3 > 1000)
         {
            param3 = 1000;
         }
         if(param4 > 0)
         {
            this.xx = 0;
            this.i6 = 0;
            while(this.i6 < this.watertotal)
            {
               if(param1 > this.wax[this.i6])
               {
                  if(param1 < this.wax[this.i6] + this.waw[this.i6])
                  {
                     if(param2 > this.way[this.i6])
                     {
                        if(param2 < this.way[this.i6] + this.wah[this.i6])
                        {
                           if(this.wa_friction[this.i6])
                           {
                              this.xx = 1;
                           }
                        }
                     }
                  }
               }
               ++this.i6;
            }
            if(this.xx == 0)
            {
               this.xx = 0;
               while(this.xx < Math.PI * 2)
               {
                  this.yy = 0.05 + Math.random();
                  this.Effect(param1,param2,7,Math.sin(this.xx + Math.random()) * param4 * this.yy,Math.cos(this.xx) * param4 * this.yy);
                  this.xx += Math.PI / 6 / param3 * 100 / this.game_scale;
               }
               this.Effect(param1,param2,4,param3 / 100,0);
            }
            else
            {
               if(this.SUPER_COMPUTER && !this.c_sim_stress)
               {
                  this.xx = 0;
                  while(this.xx < Math.PI * 2)
                  {
                     this.yy = 0.05 + Math.random();
                     this.Effect(param1 + Math.sin(this.xx + Math.random()) * param4 * this.yy,param2 + Math.cos(this.xx) * param4 * this.yy,2,0,0);
                     this.xx += Math.PI / 6 / param3 * 100 / this.game_scale;
                  }
               }
               this.Effect(param1,param2,15,param3 / 100,0);
            }
         }
         this.PAlert(param1,param2);
      }
      
      public function HurtBarrel(param1:int) : void
      {
         this.PAlert(this.barrels[param1].x,this.barrels[param1].y);
         if(this.barrels[param1].hea <= 0)
         {
            if(this.MP_mode)
            {
               this.MP_custom_events += ";b|" + this.MP_myid + "#" + param1 + "#" + this.barrels[param1].x + "#" + this.barrels[param1].y;
            }
            this.barrels[param1].gotoAndPlay(5);
            this.barrels[param1].rotation = 0;
            this.barrels[param1].b_left1 = this.CreatePoint((this.ax[this.barrels[param1].b_left_top] + this.ax[this.barrels[param1].b_left_bottom]) / 2,(this.ay[this.barrels[param1].b_left_top] + this.ay[this.barrels[param1].b_left_bottom]) / 2,(this.atox[this.barrels[param1].b_left_top] + this.atox[this.barrels[param1].b_left_bottom]) / 2,(this.atoy[this.barrels[param1].b_left_top] + this.atoy[this.barrels[param1].b_left_bottom]) / 2,5,false,3,-param1 - 100);
            this.barrels[param1].b_left2 = this.CreatePoint((this.ax[this.barrels[param1].b_left_top] + this.ax[this.barrels[param1].b_left_bottom]) / 2,(this.ay[this.barrels[param1].b_left_top] + this.ay[this.barrels[param1].b_left_bottom]) / 2,(this.atox[this.barrels[param1].b_left_top] + this.atox[this.barrels[param1].b_left_bottom]) / 2,(this.atoy[this.barrels[param1].b_left_top] + this.atoy[this.barrels[param1].b_left_bottom]) / 2,5,false,3,-param1 - 100);
            this.barrels[param1].b_right1 = this.CreatePoint((this.ax[this.barrels[param1].b_right_top] + this.ax[this.barrels[param1].b_right_bottom]) / 2,(this.ay[this.barrels[param1].b_right_top] + this.ay[this.barrels[param1].b_right_bottom]) / 2,(this.atox[this.barrels[param1].b_right_top] + this.atox[this.barrels[param1].b_right_bottom]) / 2,(this.atoy[this.barrels[param1].b_right_top] + this.atoy[this.barrels[param1].b_right_bottom]) / 2,5,false,3,-param1 - 100);
            this.barrels[param1].b_right2 = this.CreatePoint((this.ax[this.barrels[param1].b_right_top] + this.ax[this.barrels[param1].b_right_bottom]) / 2,(this.ay[this.barrels[param1].b_right_top] + this.ay[this.barrels[param1].b_right_bottom]) / 2,(this.atox[this.barrels[param1].b_right_top] + this.atox[this.barrels[param1].b_right_bottom]) / 2,(this.atoy[this.barrels[param1].b_right_top] + this.atoy[this.barrels[param1].b_right_bottom]) / 2,5,false,3,-param1 - 100);
            this.ReConnect(this.barrels[param1].ch_left,this.barrels[param1].b_left_top,this.barrels[param1].b_left1,0,13,-1);
            this.ReConnect(this.barrels[param1].ch_right,this.barrels[param1].b_right_top,this.barrels[param1].b_right1,0,13,-1);
            this.ReConnect(this.barrels[param1].ch_cross1,this.barrels[param1].b_left_top,this.barrels[param1].b_right1,0,Math.sqrt(100 + 169),-1);
            this.ReConnect(this.barrels[param1].ch_cross2,this.barrels[param1].b_right_top,this.barrels[param1].b_left1,0,Math.sqrt(100 + 169),-1);
            this.barrels[param1].ch_left2 = this.Connect(this.barrels[param1].b_left_bottom,this.barrels[param1].b_left2,0,13,-1);
            this.barrels[param1].ch_right2 = this.Connect(this.barrels[param1].b_right_bottom,this.barrels[param1].b_right2,0,13,-1);
            this.barrels[param1].ch_cross3 = this.Connect(this.barrels[param1].b_left_bottom,this.barrels[param1].b_right2,0,Math.sqrt(100 + 169),-1);
            this.barrels[param1].ch_cross4 = this.Connect(this.barrels[param1].b_right_bottom,this.barrels[param1].b_left2,0,Math.sqrt(100 + 169),-1);
            this.barrels[param1].ch_mid1 = this.Connect(this.barrels[param1].b_left1,this.barrels[param1].b_right1,0,10,-1);
            this.barrels[param1].ch_mid2 = this.Connect(this.barrels[param1].b_left2,this.barrels[param1].b_right2,0,10,-1);
            this.n2 = 0;
            while(this.n2 < 10)
            {
               if(this.HQ || this.SUPER_COMPUTER)
               {
                  this.barrels[param1]["b_g" + this.n2] = this.CreatePoint(this.barrels[param1].x + this.barrels[param1]["g" + this.n2].x,this.barrels[param1].y + this.barrels[param1]["g" + this.n2].y,(Math.random() - 0.5) * this.barrels[param1].dist * 10,(Math.random() - 0.5) * this.barrels[param1].dist * 10,0,false,3,-param1 - 100);
               }
               else
               {
                  this.barrels[param1]["g" + this.n2].visible = false;
               }
               ++this.n2;
            }
            this.expl_hurt_full = true;
            this.PhysicsExplosionNoSprite(this.barrels[param1].x,this.barrels[param1].y,50 * this.barrels[param1].dist,this.barrels[param1].dist * 3,this.barrels[param1].dist * 30,this.barrels[param1].master,true,"barrel");
            this.expl_hurt_full = false;
            this.xx = 0;
            this.i6 = 0;
            while(this.i6 < this.watertotal)
            {
               if(this.barrels[param1].x > this.wax[this.i6])
               {
                  if(this.barrels[param1].x < this.wax[this.i6] + this.waw[this.i6])
                  {
                     if(this.barrels[param1].y > this.way[this.i6])
                     {
                        if(this.barrels[param1].y < this.way[this.i6] + this.wah[this.i6])
                        {
                           if(this.wa_friction[this.i6])
                           {
                              this.xx = 1;
                           }
                        }
                     }
                  }
               }
               ++this.i6;
            }
            if(this.xx == 0)
            {
               if(this.barrels[param1].mdl == "bar_orange" || this.barrels[param1].mdl == "bar_red")
               {
                  this.Effect(this.barrels[param1].x,this.barrels[param1].y,4,50 * this.barrels[param1].dist / 100,0);
               }
               else if(this.barrels[param1].mdl == "bar_blue")
               {
                  this.Effect(this.barrels[param1].x,this.barrels[param1].y,18,50 * this.barrels[param1].dist / 100,0);
               }
            }
            else
            {
               this.Effect(this.barrels[param1].x,this.barrels[param1].y,15,50 * this.barrels[param1].dist / 100,0);
            }
            this.ExplosionSoundBarrel(this.barrels[param1].x,this.barrels[param1].y);
         }
         else
         {
            this.barrels[param1].gotoAndStop(4 - Math.round(this.barrels[param1].hea / 25 * 2));
            if(Math.random() > 0.5)
            {
               this.PlaySound(this.s_glass1,this.barrels[param1].x,this.barrels[param1].y);
            }
            else
            {
               this.PlaySound(this.s_glass2,this.barrels[param1].x,this.barrels[param1].y);
            }
         }
      }
      
      public function VeriftMP(param1:int, param2:int) : void
      {
         if(Boolean(isNaN(this.ax[param1])) || Boolean(isNaN(this.ay[param1])) || Boolean(isNaN(this.atox[param1])) || Boolean(isNaN(this.atoy[param1])))
         {
            this.ax[param1] = 0;
            this.ay[param1] = 0;
            this.atox[param1] = 0;
            this.atoy[param1] = 0;
         }
      }
      
      public function TurnMPBone(param1:int, param2:Number, param3:Number, param4:Number, param5:Number) : void
      {
         this.atox[param1] = this.atox[param1] * (1 - this.xx2) + param2 * this.xx2;
         this.atoy[param1] = this.atoy[param1] * (1 - this.xx2) + param3 * this.xx2;
         this.ax[param1] += param4 * this.xx2;
         this.ay[param1] += param5 * this.xx2;
         if(this.GET_LITE_PHYS())
         {
            this.lax[param1] += param4 * this.xx2;
            this.lay[param1] += param5 * this.xx2;
         }
         this.WakeUpAtom(param1);
      }
      
      public function TurnMPBone2(param1:int, param2:Number, param3:Number, param4:Number, param5:Number, param6:Number) : void
      {
         var _loc7_:Number = NaN;
         var _loc8_:Number = NaN;
         _loc7_ = param2 > 0 ? Number(this.arad[param1]) : -this.arad[param1];
         _loc8_ = param3 > 0 ? Number(this.arad[param1]) : -this.arad[param1];
         if(this.TraceLineF_nopushers(this.ax[param1] + _loc7_,this.ay[param1] + _loc8_,this.MorphWithTimeScale(this.ax[param1],this.ax[param1] + param2,0.5,param6 * 4) + _loc7_,this.MorphWithTimeScale(this.ay[param1],this.ay[param1] + param3,0.5,param6 * 4) + _loc8_))
         {
            this.ax[param1] = this.MorphWithTimeScale(this.ax[param1],this.ax[param1] + param2,0.5,param6 * 4);
            this.ay[param1] = this.MorphWithTimeScale(this.ay[param1],this.ay[param1] + param3,0.5,param6 * 4);
            if(this.GET_LITE_PHYS())
            {
               this.lax[param1] = this.MorphWithTimeScale(this.lax[param1],this.lax[param1] + param2,0.5,param6 * 4);
               this.lay[param1] = this.MorphWithTimeScale(this.lay[param1],this.lay[param1] + param3,0.5,param6 * 4);
            }
         }
         else
         {
            this.atox[param1] = this.MorphWithTimeScale(this.atox[param1],param2,0.95,param6);
            this.atoy[param1] = this.MorphWithTimeScale(this.atoy[param1],param3,0.95,param6);
         }
         this.atox[param1] = this.MorphWithTimeScale(this.atox[param1],param4,0.95,param6);
         this.atoy[param1] = this.MorphWithTimeScale(this.atoy[param1],param5,0.95,param6);
         this.WakeUpAtom(param1);
      }
      
      public function TurnBone(param1:int, param2:Number, param3:Number, param4:MovieClip, param5:Number) : void
      {
         if(param5 > 0.5)
         {
            param5 = 1;
         }
         param5 = param5 * (param5 * 0.5);
         param5 = param5 * (param4.idd == this.MP_myid ? this.GSPEED2 : this.GSPEED);
         if(param5 > 1)
         {
            param5 = 1;
         }
         this.ax[param1] -= (this.ax[param1] - param2) * param5;
         this.ay[param1] -= (this.ay[param1] - param3) * param5;
         if(this.GET_LITE_PHYS())
         {
            if(param5 > 0.2)
            {
               this.lax[param1] -= (this.ax[param1] - param2) * param5;
               this.lay[param1] -= (this.ay[param1] - param3) * param5;
            }
         }
         this.atox[param1] -= (this.ax[param1] - param2) * param5;
         this.atoy[param1] -= (this.ay[param1] - param3) * param5;
         this.atox[param1] = (this.atox[param1] * 4 + param4.tox) * 0.2;
         this.atoy[param1] = (this.atoy[param1] * 4 + param4.toy) * 0.2;
      }
      
      public function TurnBone4(param1:int, param2:Number, param3:Number, param4:Number) : void
      {
         param4 *= 0.25 * this.GSPEED;
         this.ax[param1] -= (this.ax[param1] - param2) * param4;
         this.ay[param1] -= (this.ay[param1] - param3) * param4;
         if(this.GET_LITE_PHYS())
         {
            if(param4 > 0.2)
            {
               this.lax[param1] -= (this.ax[param1] - param2) * param4;
               this.lay[param1] -= (this.ay[param1] - param3) * param4;
            }
         }
         this.atox[param1] -= (this.ax[param1] - param2) * param4;
         this.atoy[param1] -= (this.ay[param1] - param3) * param4;
      }
      
      public function TurnBone2(param1:int, param2:Number, param3:Number, param4:MovieClip, param5:Number) : void
      {
         if(param5 == 1)
         {
            this.atox[param1] = param4.tox;
            this.atoy[param1] = param4.toy;
            this.ax[param1] = param2;
            this.ay[param1] = param3;
            if(this.GET_LITE_PHYS())
            {
               this.lax[param1] = param2;
               this.lay[param1] = param3;
            }
         }
         else
         {
            if(param4.idd == this.MP_myid)
            {
               param5 *= this.GSPEED2;
            }
            else
            {
               param5 *= this.GSPEED;
            }
            this.atox[param1] = this.atox[param1] * (1 - param5) + param4.tox * param5;
            this.atoy[param1] = this.atoy[param1] * (1 - param5) + param4.toy * param5;
            this.ax[param1] = this.ax[param1] * (1 - param5) + param2 * param5;
            this.ay[param1] = this.ay[param1] * (1 - param5) + param3 * param5;
            if(this.GET_LITE_PHYS())
            {
               this.lax[param1] = this.lax[param1] * (1 - param5) + param2 * param5;
               this.lay[param1] = this.lay[param1] * (1 - param5) + param3 * param5;
            }
         }
      }
      
      public function TurnBone3(param1:int, param2:Number, param3:Number, param4:Number, param5:Number, param6:Number) : void
      {
         this.atox[param1] = param4;
         this.atoy[param1] = param5;
         this.ax[param1] = param2;
         this.ay[param1] = param3;
         if(this.GET_LITE_PHYS())
         {
            this.lax[param1] = param2;
            this.lay[param1] = param3;
         }
      }
      
      public function PAlert(param1:Number, param2:Number) : void
      {
         this.alert_i5 = 1;
         while(this.alert_i5 < this.playerstotal)
         {
            if(this.mens[this.alert_i5].stability >= 0.3)
            {
               if(!this.mens[this.alert_i5].isplayer)
               {
                  if(this.mens[this.alert_i5].hea > 0 && this.mens[this.alert_i5].hunt == -1)
                  {
                     this.alert_tes = this.Dist2D(param1,param2,this.mens[this.alert_i5].x,this.mens[this.alert_i5].y);
                     if(this.alert_tes < 250 || this.alert_tes < this.screenX && this.TraceLine(this.mens[this.alert_i5].x,this.mens[this.alert_i5].y - 40,param1,param2))
                     {
                        if(this.mens[this.alert_i5].x > param1)
                        {
                           this.mens[this.alert_i5].side = -1;
                        }
                        else
                        {
                           this.mens[this.alert_i5].side = 1;
                        }
                        if(this.mens[this.alert_i5].botaction == 0)
                        {
                           this.mens[this.alert_i5].botaction = 3;
                        }
                     }
                  }
               }
            }
            ++this.alert_i5;
         }
      }
      
      public function UpdateAtomPathCache() : void
      {
         var _loc1_:* = undefined;
         var _loc2_:* = undefined;
         var _loc3_:* = undefined;
         var _loc4_:* = undefined;
         var _loc5_:* = undefined;
         _loc1_ = getTimer();
         _loc2_ = 0;
         while(_loc2_ < this.atotal)
         {
            _loc3_ = this.atom_pos_buffer[_loc2_];
            _loc4_ = this.ax[_loc2_];
            _loc5_ = this.ay[_loc2_];
            if(_loc3_ == undefined || _loc1_ > _loc3_.tim + 200 || this.Dist2D(_loc3_.x,_loc3_.y,_loc4_,_loc5_) > 250)
            {
               this.atom_pos_buffer[_loc2_] = _loc3_ = {
                  "x":_loc4_,
                  "y":_loc5_,
                  "lx":_loc4_,
                  "ly":_loc5_,
                  "t":_loc1_
               };
            }
            else
            {
               _loc3_.lx = _loc3_.x;
               _loc3_.ly = _loc3_.y;
               _loc3_.x = _loc4_;
               _loc3_.y = _loc5_;
               _loc3_.tim = _loc1_;
            }
            _loc2_++;
         }
      }
      
      public function CheckHit(param1:int, param2:int) : Boolean
      {
         var _loc3_:* = undefined;
         _loc3_ = this.atom_pos_buffer[param2];
         if(_loc3_ == undefined)
         {
            return false;
         }
         this.pb2Bullet.csolver_lx = this.puls[param1].lx;
         this.pb2Bullet.csolver_ly = this.puls[param1].ly;
         this.pb2Bullet.csolver_tox1 = this.puls[param1].nx - this.puls[param1].lx;
         this.pb2Bullet.csolver_toy1 = this.puls[param1].ny - this.puls[param1].ly;
         this.pb2Bullet.csolver_maxx = Math.max(this.puls[param1].lx,this.puls[param1].nx);
         this.pb2Bullet.csolver_minx = Math.min(this.puls[param1].lx,this.puls[param1].nx);
         this.pb2Bullet.csolver_maxy = Math.max(this.puls[param1].ly,this.puls[param1].ny);
         this.pb2Bullet.csolver_miny = Math.min(this.puls[param1].ly,this.puls[param1].ny);
         if(this.pb2Bullet.csolver_maxx + 0 < Math.min(_loc3_.x - this.arad[param2],_loc3_.lx - this.arad[param2]))
         {
            return false;
         }
         if(this.pb2Bullet.csolver_minx - 0 > Math.max(_loc3_.x + this.arad[param2],_loc3_.lx + this.arad[param2]))
         {
            return false;
         }
         if(this.pb2Bullet.csolver_maxy + 0 < Math.min(_loc3_.y - this.arad[param2],_loc3_.ly - this.arad[param2]))
         {
            return false;
         }
         if(this.pb2Bullet.csolver_miny - 0 > Math.max(_loc3_.y + this.arad[param2],_loc3_.ly + this.arad[param2]))
         {
            return false;
         }
         return this.pb2Bullet._MovingSphereIntersection(_loc3_.x,_loc3_.y,_loc3_.lx,_loc3_.ly,this.arad[param2]);
      }
      
      public function TraceLine(param1:Number, param2:Number, param3:Number, param4:Number) : Boolean
      {
         this.tracer_i4 = 0;
         for(; this.tracer_i4 < this.boxestotal + this.doorstotal; ++this.tracer_i4)
         {
            if(this.tracer_i4 < this.boxestotal)
            {
               this.a_rectangleMinX = this.boxx[this.tracer_i4];
               this.a_rectangleMinY = this.boxy[this.tracer_i4];
               this.a_rectangleMaxX = this.boxx[this.tracer_i4] + this.boxw[this.tracer_i4];
               this.a_rectangleMaxY = this.boxy[this.tracer_i4] + this.boxh[this.tracer_i4];
            }
            else
            {
               this.a_rectangleMinX = this.doors[this.tracer_i4 - this.boxestotal].x;
               this.a_rectangleMinY = this.doors[this.tracer_i4 - this.boxestotal].y;
               this.a_rectangleMaxX = this.doors[this.tracer_i4 - this.boxestotal].x + this.doors[this.tracer_i4 - this.boxestotal].w;
               this.a_rectangleMaxY = this.doors[this.tracer_i4 - this.boxestotal].y + this.doors[this.tracer_i4 - this.boxestotal].h;
            }
            if(param1 < this.a_rectangleMinX)
            {
               if(param3 < this.a_rectangleMinX)
               {
                  continue;
               }
            }
            if(param1 > this.a_rectangleMaxX)
            {
               if(param3 > this.a_rectangleMaxX)
               {
                  continue;
               }
            }
            if(param2 < this.a_rectangleMinY)
            {
               if(param4 < this.a_rectangleMinY)
               {
                  continue;
               }
            }
            if(param2 > this.a_rectangleMaxY)
            {
               if(param4 > this.a_rectangleMaxY)
               {
                  continue;
               }
            }
            if(param1 > param3)
            {
               this.minX = param3;
               this.maxX = param1;
            }
            else
            {
               this.minX = param1;
               this.maxX = param3;
            }
            if(this.maxX > this.a_rectangleMaxX)
            {
               this.maxX = this.a_rectangleMaxX;
            }
            if(this.minX < this.a_rectangleMinX)
            {
               this.minX = this.a_rectangleMinX;
            }
            this.minY = param2;
            this.maxY = param4;
            this.dx = param3 - param1;
            if(this.Math_abs(this.dx) > 1e-7)
            {
               a = (param4 - param2) / this.dx;
               this.b = param2 - a * param1;
               this.minY = a * this.minX + this.b;
               this.maxY = a * this.maxX + this.b;
            }
            if(this.minY > this.maxY)
            {
               this.tmp2 = this.maxY;
               this.maxY = this.minY;
               this.minY = this.tmp2;
            }
            if(this.maxY > this.a_rectangleMaxY)
            {
               this.maxY = this.a_rectangleMaxY;
            }
            if(this.minY < this.a_rectangleMinY)
            {
               this.minY = this.a_rectangleMinY;
            }
            if(this.minX <= this.maxX)
            {
               if(this.minY <= this.maxY)
               {
                  return false;
               }
            }
         }
         this.tracer_i4 = 0;
         for(; this.tracer_i4 < this.atotal; ++this.tracer_i4)
         {
            if(this.aio[this.tracer_i4] != -1)
            {
               if(this.arad[this.tracer_i4] > 40)
               {
                  if(this.aof[this.tracer_i4] <= -200 && this.aof[this.tracer_i4] > -300 && Boolean(this.vehicles[-200 - this.aof[this.tracer_i4]].dead))
                  {
                     if(this.vehicles[-200 - this.aof[this.tracer_i4]].io)
                     {
                        this.a_rectangleMinX = this.ax[this.tracer_i4] - this.arad[this.tracer_i4];
                        if(param1 < this.a_rectangleMinX)
                        {
                           if(param3 < this.a_rectangleMinX)
                           {
                              continue;
                           }
                        }
                        this.a_rectangleMaxX = this.ax[this.tracer_i4] + this.arad[this.tracer_i4];
                        if(param1 > this.a_rectangleMaxX)
                        {
                           if(param3 > this.a_rectangleMaxX)
                           {
                              continue;
                           }
                        }
                        this.a_rectangleMinY = this.ay[this.tracer_i4] - this.arad[this.tracer_i4];
                        if(param2 < this.a_rectangleMinY)
                        {
                           if(param4 < this.a_rectangleMinY)
                           {
                              continue;
                           }
                        }
                        this.a_rectangleMaxY = this.ay[this.tracer_i4] + this.arad[this.tracer_i4];
                        if(param2 > this.a_rectangleMaxY)
                        {
                           if(param4 > this.a_rectangleMaxY)
                           {
                              continue;
                           }
                        }
                        if(param1 > param3)
                        {
                           this.minX = param3;
                           this.maxX = param1;
                        }
                        else
                        {
                           this.minX = param1;
                           this.maxX = param3;
                        }
                        if(this.maxX > this.a_rectangleMaxX)
                        {
                           this.maxX = this.a_rectangleMaxX;
                        }
                        if(this.minX < this.a_rectangleMinX)
                        {
                           this.minX = this.a_rectangleMinX;
                        }
                        this.minY = param2;
                        this.maxY = param4;
                        this.dx = param3 - param1;
                        if(this.Math_abs(this.dx) > 1e-7)
                        {
                           a = (param4 - param2) / this.dx;
                           this.b = param2 - a * param1;
                           this.minY = a * this.minX + this.b;
                           this.maxY = a * this.maxX + this.b;
                        }
                        if(this.minY > this.maxY)
                        {
                           this.tmp2 = this.maxY;
                           this.maxY = this.minY;
                           this.minY = this.tmp2;
                        }
                        if(this.maxY > this.a_rectangleMaxY)
                        {
                           this.maxY = this.a_rectangleMaxY;
                        }
                        if(this.minY < this.a_rectangleMinY)
                        {
                           this.minY = this.a_rectangleMinY;
                        }
                        if(this.minX <= this.maxX)
                        {
                           if(this.minY <= this.maxY)
                           {
                              return false;
                           }
                        }
                     }
                  }
               }
            }
         }
         return true;
      }
      
      public function TraceLineF_nopushers(param1:Number, param2:Number, param3:Number, param4:Number) : Boolean
      {
         this.tracer_i4 = 0;
         for(; this.tracer_i4 < this.boxestotal + this.doorstotal; ++this.tracer_i4)
         {
            if(this.tracer_i4 < this.boxestotal)
            {
               this.a_rectangleMinX = this.boxx[this.tracer_i4];
               this.a_rectangleMinY = this.boxy[this.tracer_i4];
               this.a_rectangleMaxX = this.boxx[this.tracer_i4] + this.boxw[this.tracer_i4];
               this.a_rectangleMaxY = this.boxy[this.tracer_i4] + this.boxh[this.tracer_i4];
            }
            else
            {
               this.a_rectangleMinX = this.doors[this.tracer_i4 - this.boxestotal].x;
               this.a_rectangleMinY = this.doors[this.tracer_i4 - this.boxestotal].y;
               this.a_rectangleMaxX = this.doors[this.tracer_i4 - this.boxestotal].x + this.doors[this.tracer_i4 - this.boxestotal].w;
               this.a_rectangleMaxY = this.doors[this.tracer_i4 - this.boxestotal].y + this.doors[this.tracer_i4 - this.boxestotal].h;
            }
            if(param1 < this.a_rectangleMinX)
            {
               if(param3 < this.a_rectangleMinX)
               {
                  continue;
               }
            }
            if(param1 > this.a_rectangleMaxX)
            {
               if(param3 > this.a_rectangleMaxX)
               {
                  continue;
               }
            }
            if(param2 < this.a_rectangleMinY)
            {
               if(param4 < this.a_rectangleMinY)
               {
                  continue;
               }
            }
            if(param2 > this.a_rectangleMaxY)
            {
               if(param4 > this.a_rectangleMaxY)
               {
                  continue;
               }
            }
            if(param1 > param3)
            {
               this.minX = param3;
               this.maxX = param1;
            }
            else
            {
               this.minX = param1;
               this.maxX = param3;
            }
            if(this.maxX > this.a_rectangleMaxX)
            {
               this.maxX = this.a_rectangleMaxX;
            }
            if(this.minX < this.a_rectangleMinX)
            {
               this.minX = this.a_rectangleMinX;
            }
            this.minY = param2;
            this.maxY = param4;
            this.dx = param3 - param1;
            if(this.Math_abs(this.dx) > 1e-7)
            {
               a = (param4 - param2) / this.dx;
               this.b = param2 - a * param1;
               this.minY = a * this.minX + this.b;
               this.maxY = a * this.maxX + this.b;
            }
            if(this.minY > this.maxY)
            {
               this.tmp2 = this.maxY;
               this.maxY = this.minY;
               this.minY = this.tmp2;
            }
            if(this.maxY > this.a_rectangleMaxY)
            {
               this.maxY = this.a_rectangleMaxY;
            }
            if(this.minY < this.a_rectangleMinY)
            {
               this.minY = this.a_rectangleMinY;
            }
            if(this.minX <= this.maxX)
            {
               if(this.minY <= this.maxY)
               {
                  return false;
               }
            }
         }
         return true;
      }
      
      public function TraceLineF(param1:Number, param2:Number, param3:Number, param4:Number) : Boolean
      {
         this.tracer_i4 = 0;
         for(; this.tracer_i4 < this.boxestotal + this.doorstotal + this.pushstotal; ++this.tracer_i4)
         {
            if(this.tracer_i4 < this.boxestotal)
            {
               this.a_rectangleMinX = this.boxx[this.tracer_i4];
               this.a_rectangleMinY = this.boxy[this.tracer_i4];
               this.a_rectangleMaxX = this.boxx[this.tracer_i4] + this.boxw[this.tracer_i4];
               this.a_rectangleMaxY = this.boxy[this.tracer_i4] + this.boxh[this.tracer_i4];
            }
            else if(this.tracer_i4 - this.boxestotal < this.doorstotal)
            {
               this.a_rectangleMinX = this.doors[this.tracer_i4 - this.boxestotal].x;
               this.a_rectangleMinY = this.doors[this.tracer_i4 - this.boxestotal].y;
               this.a_rectangleMaxX = this.doors[this.tracer_i4 - this.boxestotal].x + this.doors[this.tracer_i4 - this.boxestotal].w;
               this.a_rectangleMaxY = this.doors[this.tracer_i4 - this.boxestotal].y + this.doors[this.tracer_i4 - this.boxestotal].h;
            }
            else
            {
               this.a_rectangleMinX = this.pushx[this.tracer_i4 - this.boxestotal - this.doorstotal];
               this.a_rectangleMinY = this.pushy[this.tracer_i4 - this.boxestotal - this.doorstotal];
               this.a_rectangleMaxX = this.pushw[this.tracer_i4 - this.boxestotal - this.doorstotal];
               this.a_rectangleMaxY = this.pushh[this.tracer_i4 - this.boxestotal - this.doorstotal];
            }
            if(param1 < this.a_rectangleMinX)
            {
               if(param3 < this.a_rectangleMinX)
               {
                  continue;
               }
            }
            if(param1 > this.a_rectangleMaxX)
            {
               if(param3 > this.a_rectangleMaxX)
               {
                  continue;
               }
            }
            if(param2 < this.a_rectangleMinY)
            {
               if(param4 < this.a_rectangleMinY)
               {
                  continue;
               }
            }
            if(param2 > this.a_rectangleMaxY)
            {
               if(param4 > this.a_rectangleMaxY)
               {
                  continue;
               }
            }
            if(param1 > param3)
            {
               this.minX = param3;
               this.maxX = param1;
            }
            else
            {
               this.minX = param1;
               this.maxX = param3;
            }
            if(this.maxX > this.a_rectangleMaxX)
            {
               this.maxX = this.a_rectangleMaxX;
            }
            if(this.minX < this.a_rectangleMinX)
            {
               this.minX = this.a_rectangleMinX;
            }
            this.minY = param2;
            this.maxY = param4;
            this.dx = param3 - param1;
            if(this.Math_abs(this.dx) > 1e-7)
            {
               a = (param4 - param2) / this.dx;
               this.b = param2 - a * param1;
               this.minY = a * this.minX + this.b;
               this.maxY = a * this.maxX + this.b;
            }
            if(this.minY > this.maxY)
            {
               this.tmp2 = this.maxY;
               this.maxY = this.minY;
               this.minY = this.tmp2;
            }
            if(this.maxY > this.a_rectangleMaxY)
            {
               this.maxY = this.a_rectangleMaxY;
            }
            if(this.minY < this.a_rectangleMinY)
            {
               this.minY = this.a_rectangleMinY;
            }
            if(this.minX <= this.maxX)
            {
               if(this.minY <= this.maxY)
               {
                  return false;
               }
            }
         }
         return true;
      }
      
      public function TraceLine_no_doors(param1:Number, param2:Number, param3:Number, param4:Number) : Boolean
      {
         this.tracer_i4 = 0;
         for(; this.tracer_i4 < this.boxestotal; ++this.tracer_i4)
         {
            this.a_rectangleMinX = this.boxx[this.tracer_i4];
            if(param1 < this.a_rectangleMinX)
            {
               if(param3 < this.a_rectangleMinX)
               {
                  continue;
               }
            }
            this.a_rectangleMaxX = this.boxx[this.tracer_i4] + this.boxw[this.tracer_i4];
            if(param1 > this.a_rectangleMaxX)
            {
               if(param3 > this.a_rectangleMaxX)
               {
                  continue;
               }
            }
            this.a_rectangleMinY = this.boxy[this.tracer_i4];
            if(param2 < this.a_rectangleMinY)
            {
               if(param4 < this.a_rectangleMinY)
               {
                  continue;
               }
            }
            this.a_rectangleMaxY = this.boxy[this.tracer_i4] + this.boxh[this.tracer_i4];
            if(param2 > this.a_rectangleMaxY)
            {
               if(param4 > this.a_rectangleMaxY)
               {
                  continue;
               }
            }
            if(param1 > param3)
            {
               this.minX = param3;
               this.maxX = param1;
            }
            else
            {
               this.minX = param1;
               this.maxX = param3;
            }
            if(this.maxX > this.a_rectangleMaxX)
            {
               this.maxX = this.a_rectangleMaxX;
            }
            if(this.minX < this.a_rectangleMinX)
            {
               this.minX = this.a_rectangleMinX;
            }
            this.minY = param2;
            this.maxY = param4;
            this.dx = param3 - param1;
            if(this.Math_abs(this.dx) > 1e-7)
            {
               a = (param4 - param2) / this.dx;
               this.b = param2 - a * param1;
               this.minY = a * this.minX + this.b;
               this.maxY = a * this.maxX + this.b;
            }
            if(this.minY > this.maxY)
            {
               this.tmp2 = this.maxY;
               this.maxY = this.minY;
               this.minY = this.tmp2;
            }
            if(this.maxY > this.a_rectangleMaxY)
            {
               this.maxY = this.a_rectangleMaxY;
            }
            if(this.minY < this.a_rectangleMinY)
            {
               this.minY = this.a_rectangleMinY;
            }
            if(this.minX <= this.maxX)
            {
               if(this.minY <= this.maxY)
               {
                  return false;
               }
            }
         }
         return true;
      }
      
      public function TraceAllyLine(param1:int, param2:Number, param3:Number, param4:Number, param5:Number) : Boolean
      {
         this.tracer_i4 = 0;
         for(; this.tracer_i4 < this.playerstotal; ++this.tracer_i4)
         {
            if(this.tracer_i4 != param1)
            {
               if(this.mens[param1].team == this.mens[this.tracer_i4].team && this.mens[param1].team != 0 && !this.PRO_BOTS)
               {
                  if(this.tracer_i4 != this.mens[param1].hunt)
                  {
                     if(param1 != this.mens[this.tracer_i4].hunt)
                     {
                        if(!this.mens[this.tracer_i4].dying)
                        {
                           this.a_rectangleMinX = this.mens[this.tracer_i4].x - Math.abs(this.mens[this.tracer_i4].tox) - 10 - 20;
                           this.a_rectangleMinY = this.mens[this.tracer_i4].y - Math.abs(this.mens[this.tracer_i4].toy) - 82 - 20;
                           this.a_rectangleMaxX = this.mens[this.tracer_i4].x + Math.abs(this.mens[this.tracer_i4].tox) + 10 + 20;
                           this.a_rectangleMaxY = this.mens[this.tracer_i4].y + Math.abs(this.mens[this.tracer_i4].toy) - this.mens[this.tracer_i4].sit * this.sitmax + 50;
                           if(param2 < this.a_rectangleMinX)
                           {
                              if(param4 < this.a_rectangleMinX)
                              {
                                 continue;
                              }
                           }
                           if(param2 > this.a_rectangleMaxX)
                           {
                              if(param4 > this.a_rectangleMaxX)
                              {
                                 continue;
                              }
                           }
                           if(param3 < this.a_rectangleMinY)
                           {
                              if(param5 < this.a_rectangleMinY)
                              {
                                 continue;
                              }
                           }
                           if(param3 > this.a_rectangleMaxY)
                           {
                              if(param5 > this.a_rectangleMaxY)
                              {
                                 continue;
                              }
                           }
                           if(param2 > param4)
                           {
                              this.minX = param4;
                              this.maxX = param2;
                           }
                           else
                           {
                              this.minX = param2;
                              this.maxX = param4;
                           }
                           if(this.maxX > this.a_rectangleMaxX)
                           {
                              this.maxX = this.a_rectangleMaxX;
                           }
                           if(this.minX < this.a_rectangleMinX)
                           {
                              this.minX = this.a_rectangleMinX;
                           }
                           this.minY = param3;
                           this.maxY = param5;
                           this.dx = param4 - param2;
                           if(this.Math_abs(this.dx) > 1e-7)
                           {
                              a = (param5 - param3) / this.dx;
                              this.b = param3 - a * param2;
                              this.minY = a * this.minX + this.b;
                              this.maxY = a * this.maxX + this.b;
                           }
                           if(this.minY > this.maxY)
                           {
                              this.tmp2 = this.maxY;
                              this.maxY = this.minY;
                              this.minY = this.tmp2;
                           }
                           if(this.maxY > this.a_rectangleMaxY)
                           {
                              this.maxY = this.a_rectangleMaxY;
                           }
                           if(this.minY < this.a_rectangleMinY)
                           {
                              this.minY = this.a_rectangleMinY;
                           }
                           if(this.minX <= this.maxX)
                           {
                              if(this.minY <= this.maxY)
                              {
                                 return false;
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
         this.tracer_i4 = 0;
         for(; this.tracer_i4 < this.barrelstotal; ++this.tracer_i4)
         {
            this.tracer_ok = false;
            this.tracer_i5 = 0;
            while(this.tracer_i5 < this.playerstotal && !this.tracer_ok)
            {
               if(this.mens[this.tracer_i5].io)
               {
                  if(this.mens[param1].team == this.mens[this.tracer_i5].team && this.mens[param1].team != 0)
                  {
                     if(this.tracer_i5 != this.mens[param1].hunt)
                     {
                        if(param1 != this.mens[this.tracer_i5].hunt)
                        {
                           if(!this.mens[this.tracer_i5].dying)
                           {
                              if(this.Dist2D(this.mens[this.tracer_i5].x,this.mens[this.tracer_i5].y,this.barrels[this.tracer_i4].x,this.barrels[this.tracer_i4].y) < 150)
                              {
                                 this.tracer_ok = true;
                              }
                           }
                        }
                     }
                  }
               }
               ++this.tracer_i5;
            }
            if(this.tracer_ok)
            {
               if(this.barrels[this.tracer_i4].hea > 0)
               {
                  this.a_rectangleMinX = this.barrels[this.tracer_i4].x - 30;
                  this.a_rectangleMinY = this.barrels[this.tracer_i4].y - 30;
                  this.a_rectangleMaxX = this.barrels[this.tracer_i4].x + 30;
                  this.a_rectangleMaxY = this.barrels[this.tracer_i4].y + 30;
                  if(param2 < this.a_rectangleMinX)
                  {
                     if(param4 < this.a_rectangleMinX)
                     {
                        continue;
                     }
                  }
                  if(param2 > this.a_rectangleMaxX)
                  {
                     if(param4 > this.a_rectangleMaxX)
                     {
                        continue;
                     }
                  }
                  if(param3 < this.a_rectangleMinY)
                  {
                     if(param5 < this.a_rectangleMinY)
                     {
                        continue;
                     }
                  }
                  if(param3 > this.a_rectangleMaxY)
                  {
                     if(param5 > this.a_rectangleMaxY)
                     {
                        continue;
                     }
                  }
                  if(param2 > param4)
                  {
                     this.minX = param4;
                     this.maxX = param2;
                  }
                  else
                  {
                     this.minX = param2;
                     this.maxX = param4;
                  }
                  if(this.maxX > this.a_rectangleMaxX)
                  {
                     this.maxX = this.a_rectangleMaxX;
                  }
                  if(this.minX < this.a_rectangleMinX)
                  {
                     this.minX = this.a_rectangleMinX;
                  }
                  this.minY = param3;
                  this.maxY = param5;
                  this.dx = param4 - param2;
                  if(this.Math_abs(this.dx) > 1e-7)
                  {
                     a = (param5 - param3) / this.dx;
                     this.b = param3 - a * param2;
                     this.minY = a * this.minX + this.b;
                     this.maxY = a * this.maxX + this.b;
                  }
                  if(this.minY > this.maxY)
                  {
                     this.tmp2 = this.maxY;
                     this.maxY = this.minY;
                     this.minY = this.tmp2;
                  }
                  if(this.maxY > this.a_rectangleMaxY)
                  {
                     this.maxY = this.a_rectangleMaxY;
                  }
                  if(this.minY < this.a_rectangleMinY)
                  {
                     this.minY = this.a_rectangleMinY;
                  }
                  if(this.minX <= this.maxX)
                  {
                     if(this.minY <= this.maxY)
                     {
                        return false;
                     }
                  }
               }
            }
         }
         return true;
      }
      
      public function UpdateCurGun() : void
      {
         if(this.mens[this.MP_myid].char == 1 || this.mens[this.MP_myid].char >= 40 && this.mens[this.MP_myid].char <= 49)
         {
            if(this.mens[this.MP_myid].curwea > 0)
            {
               this.curA = this.guns[this.mens[this.MP_myid].curwea].model;
            }
            else
            {
               this.curA = "swords";
            }
         }
         if(this.mens[this.MP_myid].char == 3)
         {
            if(this.mens[this.MP_myid].curwea > 0)
            {
               this.curB = this.guns[this.mens[this.MP_myid].curwea].model;
            }
            else
            {
               this.curB = "swords";
            }
         }
      }
      
      public function CheckCross(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number, param6:Number, param7:Number, param8:Number, param9:int) : Boolean
      {
         if(this.DEBUG_MODE)
         {
            this.debug_screen.graphics.lineStyle(4,0);
            this.debug_screen.graphics.moveTo(param1,param2);
            this.debug_screen.graphics.lineTo(param3,param4);
            this.debug_screen.graphics.moveTo(param5,param6);
            this.debug_screen.graphics.lineTo(param7,param8);
            this.debug_screen.graphics.lineStyle(2,85);
            this.debug_screen.graphics.moveTo(param1,param2);
            this.debug_screen.graphics.lineTo(param3,param4);
            this.debug_screen.graphics.moveTo(param5,param6);
            this.debug_screen.graphics.lineTo(param7,param8);
         }
         this.v = ((param1 - param3) * (param6 - param4) + (param2 - param4) * (param3 - param5)) / ((param2 - param4) * (param7 - param5) - (param1 - param3) * (param8 - param6));
         this.retux = param5 + (param7 - param5) * this.v;
         this.retuy = param6 + (param8 - param6) * this.v;
         if((param3 < param1 ? param3 : param1) - 1 <= this.retux)
         {
            if((param3 > param1 ? param3 : param1) + 1 >= this.retux)
            {
               if((param4 < param2 ? param4 : param2) - 1 <= this.retuy)
               {
                  if((param4 > param2 ? param4 : param2) + 1 >= this.retuy)
                  {
                     if((param5 < param7 ? param5 : param7) - 1 <= this.retux)
                     {
                        if((param5 > param7 ? param5 : param7) + 1 >= this.retux)
                        {
                           if((param6 < param8 ? param6 : param8) - 1 <= this.retuy)
                           {
                              if((param6 > param8 ? param6 : param8) + 1 >= this.retuy)
                              {
                                 if(this.DEBUG_MODE)
                                 {
                                    this.debug_screen.graphics.lineStyle(4,0);
                                    this.debug_screen.graphics.moveTo(param1,param2);
                                    this.debug_screen.graphics.lineTo(param3,param4);
                                    this.debug_screen.graphics.moveTo(param5,param6);
                                    this.debug_screen.graphics.lineTo(param7,param8);
                                    this.debug_screen.graphics.lineStyle(2,255);
                                    this.debug_screen.graphics.moveTo(param1,param2);
                                    this.debug_screen.graphics.lineTo(param3,param4);
                                    this.debug_screen.graphics.moveTo(param5,param6);
                                    this.debug_screen.graphics.lineTo(param7,param8);
                                 }
                                 return true;
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
         return false;
      }
      
      public function CheckCrossSimple(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number, param6:Number, param7:Number, param8:Number) : Boolean
      {
         this.v = ((param1 - param3) * (param6 - param4) + (param2 - param4) * (param3 - param5)) / ((param2 - param4) * (param7 - param5) - (param1 - param3) * (param8 - param6));
         this.retux = param5 + (param7 - param5) * this.v;
         this.retuy = param6 + (param8 - param6) * this.v;
         if((param3 < param1 ? param3 : param1) - 1 <= this.retux)
         {
            if((param3 > param1 ? param3 : param1) + 1 >= this.retux)
            {
               if((param4 < param2 ? param4 : param2) - 1 <= this.retuy)
               {
                  if((param4 > param2 ? param4 : param2) + 1 >= this.retuy)
                  {
                     if((param5 < param7 ? param5 : param7) - 1 <= this.retux)
                     {
                        if((param5 > param7 ? param5 : param7) + 1 >= this.retux)
                        {
                           if((param6 < param8 ? param6 : param8) - 1 <= this.retuy)
                           {
                              if((param6 > param8 ? param6 : param8) + 1 >= this.retuy)
                              {
                                 return true;
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
         return false;
      }
      
      public function CheckCrossSimpleOpti(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number, param6:Number, param7:Number, param8:Number) : Boolean
      {
         if((param1 > param3 ? param1 : param3) >= (param5 < param7 ? param5 : param7))
         {
            if((param1 < param3 ? param1 : param3) <= (param5 > param7 ? param5 : param7))
            {
               if((param2 > param4 ? param2 : param4) >= (param6 < param8 ? param6 : param8))
               {
                  if((param2 < param4 ? param2 : param4) <= (param6 > param8 ? param6 : param8))
                  {
                     this.v = ((param1 - param3) * (param6 - param4) + (param2 - param4) * (param3 - param5)) / ((param2 - param4) * (param7 - param5) - (param1 - param3) * (param8 - param6));
                     this.retux = param5 + (param7 - param5) * this.v;
                     this.retuy = param6 + (param8 - param6) * this.v;
                     if((param3 < param1 ? param3 : param1) - 1 <= this.retux)
                     {
                        if((param3 > param1 ? param3 : param1) + 1 >= this.retux)
                        {
                           if((param4 < param2 ? param4 : param2) - 1 <= this.retuy)
                           {
                              if((param4 > param2 ? param4 : param2) + 1 >= this.retuy)
                              {
                                 if((param5 < param7 ? param5 : param7) - 1 <= this.retux)
                                 {
                                    if((param5 > param7 ? param5 : param7) + 1 >= this.retux)
                                    {
                                       if((param6 < param8 ? param6 : param8) - 1 <= this.retuy)
                                       {
                                          if((param6 > param8 ? param6 : param8) + 1 >= this.retuy)
                                          {
                                             return true;
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
         return false;
      }
      
      public function TracePoint(param1:Number, param2:Number) : Boolean
      {
         for each(this.i2 in this.GetNearBoxBSP_at(param1,param2))
         {
            if(param1 >= this.boxx[this.i2])
            {
               if(param1 <= this.boxx[this.i2] + this.boxw[this.i2])
               {
                  if(param2 >= this.boxy[this.i2])
                  {
                     if(param2 <= this.boxy[this.i2] + this.boxh[this.i2])
                     {
                        return false;
                     }
                  }
               }
            }
         }
         this.i2 = 0;
         while(this.i2 < this.doorstotal)
         {
            if(param1 >= this.doors[this.i2].x)
            {
               if(param1 <= this.doors[this.i2].x + this.doors[this.i2].w)
               {
                  if(param2 >= this.doors[this.i2].y)
                  {
                     if(param2 <= this.doors[this.i2].y + this.doors[this.i2].h)
                     {
                        return false;
                     }
                  }
               }
            }
            ++this.i2;
         }
         if(this.RAGDOLL_COLLIDE)
         {
            this.i2 = 0;
            while(this.i2 < this.atotal)
            {
               if(this.arad[this.i2] > 5)
               {
                  if(this.aio[this.i2] == true || this.aio[this.i2] == false)
                  {
                     if(param1 > this.ax[this.i2] - this.arad[this.i2])
                     {
                        if(param1 < this.ax[this.i2] + this.arad[this.i2])
                        {
                           if(param2 > this.ay[this.i2] - this.arad[this.i2])
                           {
                              if(param2 < this.ay[this.i2] + this.arad[this.i2])
                              {
                                 return false;
                              }
                           }
                        }
                     }
                  }
               }
               ++this.i2;
            }
         }
         return true;
      }
      
      public function TracePointOnlyBoxes(param1:Number, param2:Number) : Boolean
      {
         for each(this.tracep in this.GetNearBoxBSP_at(param1,param2))
         {
            if(param1 >= this.boxx[this.tracep])
            {
               if(param1 <= this.boxx[this.tracep] + this.boxw[this.tracep])
               {
                  if(param2 >= this.boxy[this.tracep])
                  {
                     if(param2 <= this.boxy[this.tracep] + this.boxh[this.tracep])
                     {
                        return false;
                     }
                  }
               }
            }
         }
         return true;
      }
      
      public function TracePointNoRagdolls(param1:Number, param2:Number) : Boolean
      {
         for each(this.i3 in this.GetNearBoxBSP_at(param1,param2))
         {
            if(param1 >= this.boxx[this.i3])
            {
               if(param1 <= this.boxx[this.i3] + this.boxw[this.i3])
               {
                  if(param2 >= this.boxy[this.i3])
                  {
                     if(param2 <= this.boxy[this.i3] + this.boxh[this.i3])
                     {
                        return false;
                     }
                  }
               }
            }
         }
         this.i3 = 0;
         while(this.i3 < this.doorstotal)
         {
            if(param1 >= this.doors[this.i3].x)
            {
               if(param1 <= this.doors[this.i3].x + this.doors[this.i3].w)
               {
                  if(param2 >= this.doors[this.i3].y)
                  {
                     if(param2 <= this.doors[this.i3].y + this.doors[this.i3].h)
                     {
                        return false;
                     }
                  }
               }
            }
            ++this.i3;
         }
         return true;
      }
      
      public function RedrawPsi(param1:int) : void
      {
         if(this.mens[param1].notspawned)
         {
            return;
         }
         if(param1 >= 0)
         {
            if(this.mens[param1].hea > 0)
            {
               if(this.mens[param1].curwea == -1)
               {
                  if(this.EASY_MODE && this.mens[param1].team != this.mens[this.MP_myid].team && this.mens[param1].dying || this.NO_PSI || !this.NO_PSI && this.mens[param1].no_psi)
                  {
                     this.mens[param1].arm1.lower.psi.visible = false;
                     this.mens[param1].arm2.lower.psi.visible = false;
                  }
                  else
                  {
                     this.mens[param1].arm1.lower.psi.visible = true;
                     this.mens[param1].arm2.lower.psi.visible = true;
                  }
               }
               else
               {
                  this.mens[param1].arm1.lower.psi.visible = false;
                  this.mens[param1].arm2.lower.psi.visible = false;
               }
            }
            else
            {
               this.mens[param1].arm1.lower.psi.visible = false;
               this.mens[param1].arm2.lower.psi.visible = false;
            }
            this.mens[param1].head.scaleX = this.mens[param1].side * this.mens[param1].scale;
            this.mens[param1].head.scaleY = this.mens[param1].scale;
            this.mens[param1].body.scaleX = this.mens[param1].side * this.mens[param1].scale;
            this.mens[param1].body.scaleY = this.mens[param1].scale;
            this.mens[param1].arm1.scaleX = this.mens[param1].side * this.mens[param1].scale;
            this.mens[param1].arm1.scaleY = this.mens[param1].scale;
            this.mens[param1].arm2.scaleX = this.mens[param1].side * this.mens[param1].scale;
            this.mens[param1].arm2.scaleY = this.mens[param1].scale;
            this.mens[param1].leg1.scaleX = this.mens[param1].side * this.mens[param1].scale;
            this.mens[param1].leg1.scaleY = this.mens[param1].scale;
            this.mens[param1].leg2.scaleX = this.mens[param1].side * this.mens[param1].scale;
            this.mens[param1].leg2.scaleY = this.mens[param1].scale;
            this.mens[param1].toe.scaleX = this.mens[param1].side * this.mens[param1].scale;
            this.mens[param1].toe.scaleY = this.mens[param1].scale;
         }
      }
      
      public function ChangedGun(param1:int) : void
      {
         if(param1 >= 0)
         {
            if(this.mens[param1].hea > 0)
            {
               this.mens[param1].wep_pause = 1;
               if(param1 == this.MP_myid)
               {
                  this.UpdateWeps();
               }
            }
            this.RedrawPsi(param1);
         }
      }
      
      public function ChatNewMsg(param1:String) : void
      {
         if(param1.toLowerCase().indexOf("<img ") != -1 || param1.toLowerCase().indexOf("<a ") != -1)
         {
            param1 = "&lt; Unsupported tag in message &gt;";
         }
         this.chat_i2 = 0;
         this.chat_i = 1;
         while(this.chat_i < 11)
         {
            if(this.gamechatbox2["item" + this.chat_i].y < this.gamechatbox2["item" + this.chat_i2].y)
            {
               this.chat_i2 = this.chat_i;
            }
            ++this.chat_i;
         }
         this.chat_i3 = 0;
         this.chat_i = 1;
         while(this.chat_i < 11)
         {
            if(this.gamechatbox2["item" + this.chat_i].y > this.gamechatbox2["item" + this.chat_i3].y)
            {
               this.chat_i3 = this.chat_i;
            }
            ++this.chat_i;
         }
         this.gamechatbox2["item" + this.chat_i2].y = this.gamechatbox2["item" + this.chat_i3].y + 19;
         this.gamechatbox2["item" + this.chat_i2].visible = true;
         this.gamechatbox2["item" + this.chat_i2].alpha = 1;
         if(this.DISPLAY_CHAT == 1)
         {
            this.gamechatbox2["item" + this.chat_i2].timer = 300;
         }
         else
         {
            this.gamechatbox2["item" + this.chat_i2].timer = 600;
         }
         this.gamechatbox2["item" + this.chat_i2].txt.htmlText = "<b>" + param1 + "</b>";
         if(this.gamechatbox2["item" + this.chat_i2].y > 38)
         {
            this.chat_xx = this.gamechatbox2["item" + this.chat_i2].y;
            this.chat_i = 0;
            while(this.chat_i < 11)
            {
               this.gamechatbox2["item" + this.chat_i].y -= this.chat_xx;
               ++this.chat_i;
            }
         }
      }
      
      public function CompressChat() : void
      {
         if(this.gamechatbox_text.length > 200)
         {
            if(this.gamechatbox_text.lastIndexOf("<br>",this.gamechatbox_text.length - 200) != -1)
            {
               this.gamechatbox_text = this.gamechatbox_text.slice(this.gamechatbox_text.lastIndexOf("<br>",this.gamechatbox_text.length - 200),this.gamechatbox_text.length);
            }
         }
      }
      
      public function GotoMap(param1:String) : void
      {
         this.NextMapTemp = param1;
         this.CUR_LOADING = param1;
         this.mupd.visible = true;
         this.mupd.ttt.gotoAndPlay(1);
         if(this.CACHED_MAPS[this.CUR_LOADING] != undefined)
         {
            this.UseLoadedMapData(this.CACHED_MAPS[this.CUR_LOADING]);
         }
         else
         {
            this.myRequest = new URLRequest(this.MP_server);
            this.myVariables = new URLVariables();
            this.myVariables.l = this.def_login;
            this.myVariables.p = this.def_password;
            this.myVariables.rq = "cmap";
            this.myVariables.cmap = param1;
            this.myVariables.qpack = "1.0";
            if(this.DEBUG_MODE)
            {
            }
            this.myRequest.method = URLRequestMethod.POST;
            this.myRequest.data = this.myVariables;
            this.myLoader.addEventListener(Event.COMPLETE,this.GotoMap_done);
            this.myLoader.addEventListener(IOErrorEvent.IO_ERROR,this.GotoMap_failed);
            this.myLoader.load(this.myRequest);
         }
      }
      
      public function GotoMap_failed(param1:IOErrorEvent) : void
      {
         this.myLoader.removeEventListener(Event.COMPLETE,this.GotoMap_done);
         this.myLoader.removeEventListener(IOErrorEvent.IO_ERROR,this.GotoMap_failed);
         if(currentLabel == "difch" || currentLabel == "menu")
         {
            if(this.DEBUG_MODE)
            {
            }
            ++this.GET_TRIES;
            if(this.GET_TRIES < 3)
            {
               this.GotoMap(this.NextMapTemp);
            }
            else if(this.CACHED_MAPS[this.CUR_LOADING] != undefined)
            {
               this.UseLoadedMapData(this.CACHED_MAPS[this.CUR_LOADING]);
            }
            else if(this.GET_TRIES < 15)
            {
               this.GotoMap(this.NextMapTemp);
            }
            else
            {
               this.mupd.visible = false;
               this.mupd.ttt.gotoAndStop(1);
            }
         }
      }
      
      public function GotoMap_done(param1:Event) : void
      {
         this.myLoader.removeEventListener(Event.COMPLETE,this.GotoMap_done);
         this.myLoader.removeEventListener(IOErrorEvent.IO_ERROR,this.GotoMap_failed);
         if(this.myLoader.data == "<not_published />")
         {
            this.LAST_ERROR = "Map is not published";
            this.DropGameTimer();
            gotoAndStop("menu");
         }
         else
         {
            this.UseLoadedMapData(this.myLoader.data);
         }
      }
      
      public function UseLoadedMapData(param1:String) : void
      {
         if(currentLabel == "difch" || currentLabel == "menu" || currentLabel == "credits" || currentLabel == "gaming")
         {
            MovieClip(root).mapdata = param1;
            this.MP_mode = false;
            this.MP_myid = 0;
            this.MP_fps = 30;
            this.chat_lastid = -1;
            this.LEVEL_END_FORCE = "restart";
            this.darkness.visible = true;
            this.darkness.alpha = 1;
            if(currentLabel == "difch" || currentLabel == "menu" || currentLabel == "credits")
            {
               this.DropGameTimer();
               gotoAndStop("loading");
            }
         }
      }
      
      public function MP_attribute(param1:String, param2:String) : void
      {
         this.MP_send += "&" + param1 + "=" + param2;
      }
      
      public function MP_get() : void
      {
         var my_bullets:* = undefined;
         var i:* = undefined;
         var tr:* = undefined;
         var i3:int = 0;
         var i2:int = 0;
         try
         {
            if(this.MP_mode)
            {
               if(this.MP_spectator)
               {
                  this.spawn = false;
               }
               if(this.spawn)
               {
                  this.MP_waiting_for_answer = false;
                  this.MP_attribute("room",this.MP_room);
                  this.MP_attribute("myid",this.MP_myid);
                  this.MP_waiting_for_answer = true;
                  this.MP_game_socket_send(this.MP_send);
               }
               else
               {
                  this.MP_waiting_for_answer = false;
                  if(!this.MP_spectator)
                  {
                     if(!this.mens[this.MP_myid].dead)
                     {
                        if(this.ENEMY_SENDER_lowestping)
                        {
                           if(this.MP_gamestate == 0)
                           {
                              if(getTimer() > this.ENEMY_SENDER_last + 200)
                              {
                                 if(!this.mens[this.ENEMY_SENDER_i].isplayer)
                                 {
                                    if(this.mens[this.ENEMY_SENDER_i].hea > 0)
                                    {
                                       this.MP_custom_events += ";e|" + this.MP_myid + "#" + this.ENEMY_SENDER_i + "#" + this.mens[this.ENEMY_SENDER_i].hea + "#" + Math.round(this.mens[this.ENEMY_SENDER_i].x) + "#" + Math.round(this.mens[this.ENEMY_SENDER_i].y) + "#" + Math.round(this.mens[this.ENEMY_SENDER_i].tox * 10) / 10 + "#" + Math.round(this.mens[this.ENEMY_SENDER_i].toy * 10) / 10 + "#" + Math.round(this.mens[this.ENEMY_SENDER_i].tarx) + "#" + Math.round(this.mens[this.ENEMY_SENDER_i].tary) + "#" + this.mens[this.ENEMY_SENDER_i].hunt + "#" + this.mens[this.ENEMY_SENDER_i].botaction;
                                    }
                                    else
                                    {
                                       this.MP_custom_events += ";e|" + this.MP_myid + "#" + this.ENEMY_SENDER_i + "#0";
                                    }
                                    this.ENEMY_SENDER_last = getTimer();
                                 }
                                 ++this.ENEMY_SENDER_i;
                                 if(this.ENEMY_SENDER_i >= this.playerstotal)
                                 {
                                    this.ENEMY_SENDER_i = 0;
                                 }
                              }
                           }
                        }
                     }
                     if(this.MP_favor_the_shooter)
                     {
                        if(this.MP_gamestate == 0)
                        {
                           my_bullets = [];
                           i = 0;
                           while(i <= this.pulsmax)
                           {
                              if(this.puls[i] != null)
                              {
                                 if(this.puls[i].visible == true)
                                 {
                                    if(this.puls[i].master == this.MP_myid)
                                    {
                                       if(this.AllowExtraBulletClassSync(this.puls[i]))
                                       {
                                          my_bullets.push(this.puls[i]);
                                       }
                                    }
                                 }
                              }
                              i++;
                           }
                           if(my_bullets.length <= 5)
                           {
                              i = 0;
                              while(i < my_bullets.length)
                              {
                                 this.SyncBulletApprox(my_bullets[i]);
                                 i++;
                              }
                              this.MP_custom_events += ";ct|" + this.MP_myid;
                           }
                           else
                           {
                              tr = 0;
                              while(tr < 5)
                              {
                                 i = Math.floor(Math.random() * my_bullets.length);
                                 this.SyncBulletApprox(my_bullets[i]);
                                 my_bullets.splice(i,1);
                                 tr++;
                              }
                           }
                        }
                     }
                     i = 0;
                     while(i < this.MP_myspecials_total)
                     {
                        if(this.MP_myspecials[i].stat == 3)
                        {
                           i2 = int(this.MP_myspecials[i].atom);
                           if(this.puls[this.MP_myspecials[i].pul] == null || this.puls[this.MP_myspecials[i].pul] == undefined || !this.puls[this.MP_myspecials[i].pul].visible)
                           {
                              this.MP_myspecials[i].stat = 0;
                           }
                           else
                           {
                              this.MP_custom_events += ";gm|" + this.MP_myspecials[i].id_in_full_list + "#" + this.ax[i2] + "#" + this.ay[i2] + "#" + this.atox[i2] + "#" + this.atoy[i2] + "#" + (this.puls[this.MP_myspecials[i].pul].notbliped ? "0" : "1") + "#" + (this.puls[this.MP_myspecials[i].pul].visible ? "0" : "1");
                           }
                        }
                        i++;
                     }
                     this._mp_ping_rl = getTimer() - this.MP_ping1;
                     if(this._mp_ping_rl > this.MP_pl)
                     {
                        this.MP_pbug += Math.min(this._mp_ping_rl - this.MP_pl,100);
                        if(this.mens[this.MP_myid].dead || this.mens[this.MP_myid].lastshotby == -1 || getTimer() - this.mens[this.MP_myid].whenlastshot > 7000)
                        {
                           if(this.MP_pbug > 350)
                           {
                              if(!this.MP_pwarn)
                              {
                                 this.MP_pwarn = true;
                                 this.DialogSay("Your connection speed is too low for this match. This match allows only players with pings lower than " + this.MP_pl + " (your is " + this._mp_ping_rl + ")","#FFFF00");
                              }
                              if(this.MP_pbug > 450)
                              {
                                 if(!this.MP_force_disconnect)
                                 {
                                    this.DialogSay("Disconnected. This match allows only players with pings lower than " + this.MP_pl + " (your is " + this._mp_ping_rl + ")","#FF0000");
                                    this.MP_force_disconnect = true;
                                 }
                              }
                           }
                        }
                     }
                     else
                     {
                        this.MP_pbug -= this.MP_pl - this._mp_ping_rl;
                        if(this.MP_pbug < 0)
                        {
                           this.MP_pbug = 0;
                           this.MP_pwarn = false;
                        }
                     }
                  }
                  this.MP_ping1 = getTimer();
                  this.MP_send = "rq=g";
                  this.MP_attribute("room",this.MP_room);
                  this.MP_attribute("lastid",this.chat_lastid);
                  this.MP_attribute("ce",this.MP_custom_events);
                  this.MP_custom_events = "";
                  if(!this.MP_spectator)
                  {
                     this.MP_attribute("p",this.MP_ping2);
                     if(this.MP_app && (this.mens[this.MP_myid].char == 5 || this.mens[this.MP_myid].char == 10 || this.mens[this.MP_myid].char == 12))
                     {
                        this.stable = false;
                        this.unstable = 7;
                        this.MP_attribute("cc",2);
                     }
                     else
                     {
                        this.MP_attribute("cc",this.mens[this.MP_myid].char + "," + this.mens[this.MP_myid].palette.join(""));
                     }
                     if(this.mens[this.MP_myid].hea > 0)
                     {
                        this.MP_attribute("sb",Math.round(this.mens[this.MP_myid].stability * 100) / 100);
                        this.MP_attribute("hn",this.mens[this.MP_myid].hunt);
                        if(this.mens[this.MP_myid].stability > 0)
                        {
                           this.MP_attribute("x",Math.round(this.mens[this.MP_myid].x));
                           this.MP_attribute("y",Math.round(this.mens[this.MP_myid].y));
                           this.MP_attribute("sx",Math.round(this.mens[this.MP_myid].tox * 100) / 100);
                           this.MP_attribute("sy",Math.round(this.mens[this.MP_myid].toy * 100) / 100);
                        }
                        else
                        {
                           this.MP_attribute("x",Math.round(this.ax[this.mens[this.MP_myid].b_toe]));
                           this.MP_attribute("y",Math.round(this.ay[this.mens[this.MP_myid].b_toe]));
                           this.MP_attribute("sx",Math.round(this.atox[this.mens[this.MP_myid].b_toe]));
                           this.MP_attribute("sy",Math.round(this.atoy[this.mens[this.MP_myid].b_toe]));
                           this.MP_attribute("xb",Math.round(this.ax[this.mens[this.MP_myid].b_body]));
                           this.MP_attribute("yb",Math.round(this.ay[this.mens[this.MP_myid].b_body]));
                           this.MP_attribute("sxb",Math.round(this.atox[this.mens[this.MP_myid].b_body]));
                           this.MP_attribute("syb",Math.round(this.atoy[this.mens[this.MP_myid].b_body]));
                        }
                        this.MP_attribute("ax",this.mens[this.MP_myid].act_movex);
                        this.MP_attribute("ay",this.mens[this.MP_myid].act_movey);
                        this.MP_attribute("ix",Math.round(this.mens[this.MP_myid].tarx));
                        this.MP_attribute("iy",Math.round(this.mens[this.MP_myid].tary));
                        this.MP_attribute("f",this.mens[this.MP_myid].act_fire ? "true" : "false");
                        this.MP_attribute("cw",this.mens[this.MP_myid].curwea);
                        i3 = 0;
                        i2 = 0;
                        while(i2 < this.gunstotal)
                        {
                           if(this.guns[i2].picken_by == this.MP_myid)
                           {
                              if(this.guns[i2].wep != -2)
                              {
                                 this.MP_attribute("g" + i3,i2);
                                 i3++;
                              }
                           }
                           i2++;
                        }
                        if(this.MP_last_linked != -1 && this.vehicles[this.MP_last_linked].master == this.MP_myid)
                        {
                           this.MP_attribute("ic",this.MP_last_linked);
                        }
                        else
                        {
                           this.MP_attribute("ic",this.mens[this.MP_myid].incar);
                        }
                     }
                     else
                     {
                        this.MP_attribute("x",Math.round(this.ax[this.mens[this.MP_myid].b_toe]));
                        this.MP_attribute("y",Math.round(this.ay[this.mens[this.MP_myid].b_toe]));
                        this.MP_attribute("sx",Math.round(this.atox[this.mens[this.MP_myid].b_toe]));
                        this.MP_attribute("sy",Math.round(this.atoy[this.mens[this.MP_myid].b_toe]));
                        this.MP_attribute("xb",Math.round(this.ax[this.mens[this.MP_myid].b_body]));
                        this.MP_attribute("yb",Math.round(this.ay[this.mens[this.MP_myid].b_body]));
                        this.MP_attribute("sxb",Math.round(this.atox[this.mens[this.MP_myid].b_body]));
                        this.MP_attribute("syb",Math.round(this.atoy[this.mens[this.MP_myid].b_body]));
                     }
                     this.MP_attribute("ha",Math.round(this.mens[this.MP_myid].hp_arms));
                     this.MP_attribute("hl",Math.round(this.mens[this.MP_myid].hp_legs));
                     this.MP_attribute("hb",Math.round(this.mens[this.MP_myid].hp_body));
                     this.MP_attribute("hh",Math.round(this.mens[this.MP_myid].hp_head));
                     this.MP_attribute("he",Math.round(this.mens[this.MP_myid].hea));
                     this.MP_attribute("t",this.mens[this.MP_myid].team);
                     this.MP_attribute("dy",this.mens[this.MP_myid].dying);
                     this.MP_attribute("st",Math.round(this.mens[this.MP_myid].sit * 100) / 100);
                  }
                  if(this.MP_spectator)
                  {
                     this.MP_attribute("myid",-2);
                  }
                  else
                  {
                     this.MP_attribute("myid",this.MP_myid);
                  }
                  this.MP_game_socket_send(this.MP_send);
                  this.MP_waiting_for_answer = true;
               }
               this.ENTER_TICKED = false;
            }
         }
         catch(e:*)
         {
            NetCodeError("GET " + e);
         }
      }
      
      public function NetCodeError(param1:String) : void
      {
         if(this.MP_nick == ".:Eric Gurt:.")
         {
            if(this.gamechatbox2 != null)
            {
               this.ChatNewMsg("Error: " + param1);
            }
         }
      }
      
      public function ArmBone(param1:MovieClip, param2:Number) : void
      {
         if(param2 < 30)
         {
            this.trans = param2 / 30;
            this.minus_trans = 1 - this.trans;
            param1.lower.x = -14.6 * this.minus_trans - 13.1 * this.trans;
            param1.lower.y = 3.5 * this.minus_trans + 7.5 * this.trans;
            param1.lower.rotation = -63.3 * this.minus_trans - 54.3 * this.trans;
            param1.upper.rotation = 61.3 * this.minus_trans + 42.3 * this.trans;
         }
         else
         {
            this.trans = param2 / 30 - 1;
            this.minus_trans = 1 - this.trans;
            param1.lower.x = -13.1 * this.minus_trans - 3.05 * this.trans;
            param1.lower.y = 7.5 * this.minus_trans + 13.7 * this.trans;
            param1.lower.rotation = -54.3 * this.minus_trans;
            param1.upper.rotation = 42.3 * this.minus_trans;
         }
      }
      
      public function LegBone(param1:MovieClip, param2:Number, param3:Boolean, param4:Boolean) : void
      {
         var _loc5_:Number = NaN;
         var _loc6_:Number = NaN;
         var _loc7_:Number = NaN;
         var _loc8_:Number = NaN;
         var _loc9_:Number = NaN;
         var _loc10_:Number = NaN;
         var _loc11_:Number = NaN;
         var _loc12_:Number = NaN;
         var _loc13_:Number = NaN;
         var _loc14_:Number = NaN;
         _loc5_ = 5.35;
         _loc6_ = 8.95;
         _loc7_ = 40.4;
         _loc8_ = 8.7;
         _loc9_ = 6.75;
         _loc10_ = 65;
         _loc11_ = 9.1;
         _loc12_ = 7.85;
         _loc13_ = 85.3;
         _loc14_ = 1;
         if(param3)
         {
            _loc5_ = -4.4;
            _loc6_ = 6.25;
            _loc7_ = -4.6;
            _loc8_ = -5;
            _loc9_ = 0.35;
            _loc10_ = -3.2;
            _loc11_ = -6.1;
            _loc12_ = 2.4;
            _loc13_ = -10.7;
            _loc14_ = -1;
         }
         if(param2 < 60)
         {
            this.trans = param2 / 60;
            this.minus_trans = 1 - this.trans;
            param1.lower.x = -8.35 * this.minus_trans - 7.9 * this.trans;
            param1.lower.y = 9.75 * this.minus_trans + 13.25 * this.trans;
            param1.lower.rotation = 3.4 * this.minus_trans + 14 * this.trans;
            param1.middle.x = _loc11_ * this.minus_trans + _loc8_ * this.trans;
            param1.middle.y = _loc12_ * this.minus_trans + _loc9_ * this.trans;
            param1.middle.rotation = _loc13_ * this.minus_trans + _loc10_ * this.trans;
            param1.upper.rotation = -55.4 * this.minus_trans * _loc14_ - 55.4 * this.trans * _loc14_;
         }
         else if(param2 < 90)
         {
            this.trans = param2 / 30 - 2;
            this.minus_trans = 1 - this.trans;
            param1.lower.x = -7.9 * this.minus_trans - 6.9 * this.trans;
            param1.lower.y = 13.25 * this.minus_trans + 20.75 * this.trans;
            param1.lower.rotation = 14 * this.minus_trans + 6.8 * this.trans;
            param1.middle.x = _loc8_ * this.minus_trans + _loc5_ * this.trans;
            param1.middle.y = _loc9_ * this.minus_trans + _loc6_ * this.trans;
            param1.middle.rotation = _loc10_ * this.minus_trans + _loc7_ * this.trans;
            param1.upper.rotation = -55.4 * this.minus_trans * _loc14_ - 39.4 * this.trans * _loc14_;
         }
         else
         {
            this.trans = param2 / 30 - 3;
            this.minus_trans = 1 - this.trans;
            param1.lower.x = -6.9 * this.minus_trans - 4.35 * this.trans;
            param1.lower.y = 20.75 * this.minus_trans + 29.95 * this.trans;
            param1.lower.rotation = 6.8 * this.minus_trans;
            param1.middle.x = _loc5_ * this.minus_trans - 0.3 * this.trans;
            param1.middle.y = _loc6_ * this.minus_trans + 14.1 * this.trans;
            param1.middle.rotation = _loc7_ * this.minus_trans + 6.3 * this.trans;
            param1.upper.rotation = 8.5 * this.trans - 39.4 * this.minus_trans * _loc14_;
         }
      }
      
      public function ResetPsychoBlood() : void
      {
         if(this.PSYCHOBLOOD_MODE == 1)
         {
            this.i4 = 0;
            while(this.i4 < 4)
            {
               if(this._root["pb" + this.i4].visible)
               {
                  this._root["pb" + this.i4].alpha = 0;
                  this._root["pb" + this.i4].visible = false;
               }
               ++this.i4;
            }
         }
         else if(this.PSYCHOBLOOD_MODE == 2)
         {
            this.i4 = 0;
            while(this.i4 < 5)
            {
               if(this._root["pb" + this.i4].visible)
               {
                  this._root["pb" + this.i4].alpha = 0;
                  this._root["pb" + this.i4].visible = false;
               }
               ++this.i4;
            }
         }
      }
      
      public function AnnoyPL(param1:int, param2:String) : void
      {
         if(this.MP_ping2 < 150)
         {
            if(this.mens[param1].blames == undefined || this.mens[param1].blames == null)
            {
               this.mens[param1].blames = 10;
            }
            --this.mens[param1].blames;
            if(this.mens[param1].blames <= 0)
            {
               this.MP_custom_events += ";votekich|" + param1 + "#" + this.MP_myid;
               this.mens[param1].blames = 100;
            }
         }
      }
      
      public function UpdateHeroList(param1:int) : void
      {
         var _loc2_:Array = null;
         var _loc3_:* = undefined;
         if(param1 == this.MP_myid && !this.MP_spectator)
         {
            return;
         }
         _loc2_ = this.last_mp_param;
         _loc3_ = this.mens[param1];
         if(_loc2_["p" + param1 + "nk"] != undefined)
         {
            if(_loc3_ && _loc3_.hea <= 0 && this.MP_type == 2 && this.MP_allow_leaderboard_details)
            {
               this.hero[param1].f1.text = "[ dead ] " + _loc2_["p" + param1 + "nk"].split("[i]").join("|").split("[e]").join("&").split("[eq]").join("=").split("&lt;").join("<").split("&gt;").join(">").split("&quot;").join("\"");
            }
            else
            {
               this.hero[param1].f1.text = _loc2_["p" + param1 + "nk"].split("[i]").join("|").split("[e]").join("&").split("[eq]").join("=").split("&lt;").join("<").split("&gt;").join(">").split("&quot;").join("\"");
            }
            if(this.hero[param1].f1.text === "Empty")
            {
               this.hero[param1].f1.text = "Empty ";
            }
         }
         else
         {
            this.hero[param1].f1.text = "Empty";
         }
         if(_loc2_["p" + param1 + "nk"] != "Empty")
         {
            this.str = "Team " + String(_loc3_.team + 1);
            if(_loc3_.team == 0)
            {
               this.str = "Alpha";
            }
            if(_loc3_.team == 1)
            {
               this.str = "Beta";
            }
            if(_loc3_.team == 2)
            {
               this.str = "Gamma";
            }
            if(_loc3_.team == 3)
            {
               this.str = "Delta";
            }
            if(_loc3_.team == 4)
            {
               this.str = "Zeta";
            }
            if(_loc3_.team == 5)
            {
               this.str = "Lambda";
            }
            if(_loc3_.team == 6)
            {
               this.str = "Sigma";
            }
            if(_loc3_.team == 7)
            {
               this.str = "Omega";
            }
            if(_loc3_.team == 8)
            {
               this.str = "Counter-Terrorists";
            }
            if(_loc3_.team == 9)
            {
               this.str = "Terrorists";
            }
            if(_loc3_.team == 10)
            {
               this.str = "Usurpation Forces";
            }
            if(_loc3_.team == 11)
            {
               this.str = "Civil Security";
            }
            if(_loc3_.team == 12)
            {
               this.str = "Red Team";
            }
            if(_loc3_.team == 13)
            {
               this.str = "Blue Team";
            }
            if(_loc3_.team == 14)
            {
               this.str = "Green Team";
            }
            if(_loc3_.team == 15)
            {
               this.str = "White Team";
            }
            if(_loc3_.team == 16)
            {
               this.str = "Black Team";
            }
            if(this.MP_type == 1 || !this.MP_allow_leaderboard_details || this.MP_type == 4)
            {
               this.str = "";
            }
            this.hero[param1].f2.text = this.str;
            if(_loc2_["p" + param1 + "k"] != undefined)
            {
               this.hero[param1].f3.text = this.MP_allow_leaderboard_details ? _loc2_["p" + param1 + "k"] : "-";
            }
            if(_loc2_["p" + param1 + "dd"] != undefined)
            {
               this.hero[param1].f4.text = this.MP_allow_leaderboard_details ? _loc2_["p" + param1 + "dd"] : "-";
            }
            if(_loc2_["p" + param1 + "p"] != undefined)
            {
               this.hero[param1].f5.text = _loc2_["p" + param1 + "p"];
            }
            if(_loc3_.team == this.mens[this.MP_myid].team && this.MP_allow_leaderboard_details)
            {
               if(this.hero[param1].currentFrame != 3 + this.hero_list_frame_offset)
               {
                  this.hero[param1].gotoAndStop(3 + this.hero_list_frame_offset);
               }
            }
            else if(this.hero[param1].currentFrame != 1 + this.hero_list_frame_offset)
            {
               this.hero[param1].gotoAndStop(1 + this.hero_list_frame_offset);
            }
         }
      }
      
      public function MP_get_done(param1:String) : void
      {
         var mp_error_addr:int = 0;
         var MP_match_playerstotal:int = 0;
         var lmapch:Boolean = false;
         var mdl:Array = null;
         var old_nick:* = undefined;
         var sent_by:* = undefined;
         var sent_for:* = undefined;
         var skipCensor:Boolean = false;
         var allow_see_chat:Boolean = false;
         var nick:* = undefined;
         var victim:int = 0;
         var datafrom:int = 0;
         var special_object:Object = null;
         var pul_object:int = 0;
         var best_i:int = 0;
         var best_dist:Number = NaN;
         var tdist:Number = NaN;
         var i4:* = undefined;
         var detonate:Boolean = false;
         var best_i4:int = 0;
         var best_di:Number = NaN;
         var di:Number = NaN;
         var extra_msg_offset:int = 0;
         var map_author:String = null;
         var GOT:String = param1;
         mp_error_addr = 0;
         try
         {
            this.MP_get_done_HAP = false;
            if(this.MP_mode)
            {
               if(this.MP_waiting_for_answer)
               {
                  if(!this.MP_force_disconnect)
                  {
                     this.MP_waiting_for_answer = false;
                     this.ENEMY_SENDER_lowestping = true;
                     this.MP_ping_last = getTimer();
                     mp_error_addr = 1001;
                     if(this.MP_mode)
                     {
                        this.gamekills.text = this.MP_kills;
                        this.gamedeaths.text = this.MP_deaths;
                     }
                     if(this.herolist.visible)
                     {
                        if(!this.MP_spectator)
                        {
                           this.i = this.MP_myid;
                           this.hero[this.i].f3.text = this.MP_kills;
                           this.hero[this.i].f4.text = this.MP_deaths;
                           this.hero[this.i].f5.text = this.MP_ping2;
                        }
                        this.xx = Math.floor((getTimer() - this.TIME_PLAYED_MULTI) / 1000);
                        i4 = Math.floor(this.xx / 60 / 60);
                        this.i3 = Math.floor(this.xx / 60 - i4 * 60);
                        this.i2 = Math.floor(this.xx - this.i3 * 60 - i4 * 60 * 60);
                        this.temp_str = "";
                        this.temp = i4;
                        if(i4 < 10)
                        {
                           this.temp_str += "0";
                        }
                        this.temp_str += this.temp + ":";
                        this.temp = this.i3;
                        if(this.i3 < 10)
                        {
                           this.temp_str += "0";
                        }
                        this.temp_str += this.temp + ":";
                        this.temp = this.i2;
                        if(this.i2 < 10)
                        {
                           this.temp_str += "0";
                        }
                        this.temp_str += this.temp;
                        this.herolist.f6.text = this.temp_str;
                        if(this.MP_deaths > 0)
                        {
                           this.herolist.f5.text = Math.round(this.MP_kills / this.MP_deaths * 100) / 100;
                        }
                        else
                        {
                           this.herolist.f5.text = "";
                        }
                        this.herolist.f7.text = this.MP_favor_the_shooter ? "New" : "Classic";
                        this.herolist.f8.text = this.MP_app ? "New" : "Classic";
                     }
                     if(this.DEBUG_MODE)
                     {
                     }
                     this.array = GOT.split("&");
                     this.param = new Array();
                     this.last_mp_param = this.param;
                     this.i = 0;
                     while(this.i < this.array.length)
                     {
                        this.array[this.i] = this.array[this.i].split("=");
                        this.param[this.array[this.i][0]] = this.array[this.i][1];
                        ++this.i;
                     }
                     mp_error_addr = 1002;
                     if(this.param["dropped"] == "1")
                     {
                        ++this.connection_lost_ping;
                        if(this.connection_lost_ping > 15)
                        {
                           this.MP_force_disconnect = true;
                           this.DialogSay("Excluded from current match (either due to being voted out, by Match Owner or due to connection issues).","#FF0000");
                        }
                     }
                     else
                     {
                        this.connection_lost_ping = 0;
                     }
                     if(this.param["zt"] != undefined)
                     {
                        if(this.param["zt"] != "")
                        {
                           this.MP_gamestate = int(this.param["zt"]);
                        }
                     }
                     mp_error_addr = 1003;
                     if(this.param["rnd"] != undefined)
                     {
                        if(this.param["rnd"] != "")
                        {
                           this.param["rnd"] = int(this.param["rnd"]);
                           if(this.param["rnd"] > this.MP_round)
                           {
                              this.MP_round = this.param["rnd"];
                              this.atotal = this.startatotal;
                              this.chtotal = this.startchtotal;
                              ++this.MP_enc_restarts;
                              this.ResetPsychoBlood();
                              i4 = 0;
                              while(i4 < this.barrelstotal)
                              {
                                 if(this.game.contains(this.barrels[i4]))
                                 {
                                    this.barrels[i4].visible = false;
                                    this.game.removeChild(this.barrels[i4]);
                                    this.barrels[i4] = null;
                                 }
                                 i4++;
                              }
                              this.barrelstotal = 0;
                              i4 = 0;
                              while(i4 < this.MP_startbarrels.length)
                              {
                                 if(this.MP_startbarrels[i4].mdl == "bar_orange")
                                 {
                                    this.mc = this.game.addChildAt(new bar_orange(),this.game.numChildren);
                                 }
                                 if(this.MP_startbarrels[i4].mdl == "bar_blue")
                                 {
                                    this.mc = this.game.addChildAt(new bar_blue(),this.game.numChildren);
                                 }
                                 if(this.MP_startbarrels[i4].mdl == "bar_red")
                                 {
                                    this.mc = this.game.addChildAt(new bar_red(),this.game.numChildren);
                                 }
                                 this.NoMouse(this.mc);
                                 this.mc.mdl = this.MP_startbarrels[i4].mdl;
                                 this.mc.x = this.MP_startbarrels[i4].x;
                                 this.mc.y = this.MP_startbarrels[i4].y;
                                 this.mc.tox = this.MP_startbarrels[i4].tox;
                                 this.mc.toy = this.MP_startbarrels[i4].toy;
                                 this.mc.master = -1;
                                 this.create_barrel(this.mc);
                                 i4++;
                              }
                              lmapch = false;
                              this.i2 = 0;
                              while(this.i2 < this.lampstotal)
                              {
                                 if(this.lamps_power2[this.i2] == 0)
                                 {
                                    this.lamps_power2[this.i2] = 1;
                                    this.a_int = 0;
                                    while(this.a_int < this.flarestotal)
                                    {
                                       if(this.flare[this.a_int].x == this.lamps_x[this.i2])
                                       {
                                          if(this.flare[this.a_int].y == this.lamps_y[this.i2])
                                          {
                                             this.flare[this.a_int].scaleX = this.flare[this.a_int].scaleX = 1;
                                          }
                                       }
                                       ++this.a_int;
                                    }
                                    lmapch = true;
                                 }
                                 ++this.i2;
                              }
                              this.tnds = 10;
                              if(lmapch)
                              {
                                 this.UpdateLightmap(false);
                              }
                              i4 = 0;
                              while(i4 < this.playerstotal)
                              {
                                 if(!this.mens[i4].isplayer)
                                 {
                                    this.Hurt_nopain(i4);
                                    this.mens[i4].x = this.mens[i4].startx;
                                    this.mens[i4].y = this.mens[i4].starty;
                                    this.mens[i4].tox = 0;
                                    this.mens[i4].toy = 0;
                                    this.mens[i4].stability = 1;
                                    this.mens[i4].hunt = -1;
                                    this.mens[i4].side = this.mens[i4].startside;
                                    this.mens[i4].team = this.mens[i4].startteam;
                                    this.mens[i4].char = this.mens[i4].startchar;
                                    this.mens[i4].botaction = this.mens[i4].startbotaction;
                                    this.mens[i4].dead = false;
                                    this.mens[i4].hea = this.mens[i4].hmax;
                                    this.mens[i4].dying = false;
                                    this.mens[i4].io = true;
                                    this.mens[i4].visible = true;
                                    this.mens[i4].alpha = 1;
                                    this.mens[i4].effects.length = 0;
                                    this.mens[i4].act_movex = 0;
                                    this.mens[i4].act_movey = 0;
                                    this.mens[i4].deadtim = 0;
                                    this.mens[i4].hp_head = new Number(Math.max(this.mens[i4].hea * 0.4,30));
                                    this.mens[i4].hp_body = new Number(Math.max(this.mens[i4].hea * 0.6,30));
                                    this.mens[i4].hp_legs = new Number(Math.max(this.mens[i4].hea * 0.5,30));
                                    this.mens[i4].hp_arms = new Number(Math.max(this.mens[i4].hea * 0.4,30));
                                    this.Hurt_nopain(i4);
                                    this.i5 = 0;
                                    while(this.i5 < this.atotal)
                                    {
                                       if(this.aof[this.i5] == i4)
                                       {
                                          this.lax[this.i5] = this.ax[this.i5] = this.mens[i4].startx;
                                          this.lay[this.i5] = this.ay[this.i5] = this.mens[i4].starty;
                                          this.atox[this.i5] = 0;
                                          this.atoy[this.i5] = 0;
                                          this.ablood[this.i5] = 0;
                                       }
                                       ++this.i5;
                                    }
                                 }
                                 this.mens[i4].defih = 0;
                                 i4++;
                              }
                              this.mc = this.mens[this.MP_myid];
                              if(!this.mc.dead)
                              {
                                 this.MP_gbd = this.mens[this.MP_myid].curwea;
                              }
                              this.MP_myspecials = new Array();
                              this.MP_myspecials_total = 0;
                              this.MP_assigning_special = -1;
                              this.MP_specials = new Array();
                              this.shnades_next = 0;
                              this.shnades_total = 0;
                              this.shnades = new Array();
                              this.mc.lastshotby = -1;
                              this.mc.whenlastshot = 0;
                              this.mc.hea = this.mens[this.MP_myid].hmax;
                              this.mc.stability = 1;
                              this.mc.tox = 0;
                              this.mc.toy = 0;
                              this.mc.x = this.mc.startx;
                              this.mc.y = this.mc.starty;
                              this.mc.hp_head = this.mens[this.MP_myid].hea;
                              this.mc.hp_arms = this.mens[this.MP_myid].hea;
                              this.mc.hp_legs = this.mens[this.MP_myid].hea;
                              this.mc.hp_body = this.mens[this.MP_myid].hea;
                              this.mc.curwea = -1;
                              this.mc.dead = false;
                              this.mc.dying = false;
                              this.mc.effects.length = 0;
                              this.grenades_total = this.MP_start_grenades_count;
                              this.grenades_port_total = this.MP_start_grenades_port_count;
                              this.grenades_sh_total = this.MP_start_grenades_sh_count;
                              this.UpdateWeps();
                              this.Hurt_nopain(this.MP_myid);
                              this.SpawnPlayerImmediately(this.mens[this.MP_myid]);
                              this.u = this.ax[this.mens[this.MP_myid].b_toe] - this.mc.startx;
                              this.v = this.ay[this.mens[this.MP_myid].b_toe] - this.mc.starty;
                              i4 = 0;
                              while(i4 < this.atotal)
                              {
                                 if(this.aof[i4] == this.MP_myid)
                                 {
                                    this.ax[i4] -= this.u;
                                    this.ay[i4] -= this.v;
                                    this.lax[i4] -= this.u;
                                    this.lay[i4] -= this.v;
                                    this.ablood[i4] = 0;
                                    this.atox[i4] = 0;
                                    this.atoy[i4] = 0;
                                    if(isNaN(this.ax[i4]))
                                    {
                                       this.ax[i4] = this.mc.startx;
                                       this.lax[i4] = this.mc.startx;
                                    }
                                    if(isNaN(this.ax[i4]))
                                    {
                                       this.ay[i4] = this.mc.starty;
                                       this.lay[i4] = this.mc.starty;
                                    }
                                 }
                                 i4++;
                              }
                              i4 = 0;
                              while(i4 < this.doorstotal)
                              {
                                 this.mc = this.doors[i4];
                                 this.mc.tarx = this.mc.s_tarx;
                                 this.mc.tary = this.mc.s_tary;
                                 this.mc.x = this.mc.s_x;
                                 this.mc.y = this.mc.s_y;
                                 this.mc.moving = this.mc.s_moving;
                                 this.mc.tox = 0;
                                 this.mc.toy = 0;
                                 this.mc.maxspeed = this.mc.s_maxspeed;
                                 this.UpdateDoorAttachments(i4,0);
                                 i4++;
                              }
                              i4 = 0;
                              while(i4 < this.triggerstotal)
                              {
                                 this.triggers[i4].enabledd = this.triggers[i4].s_enabledd;
                                 this.triggers[i4].maxcalls = this.triggers[i4].s_maxcalls;
                                 i4++;
                              }
                              i4 = 0;
                              while(i4 < this.timerstotal)
                              {
                                 this.timers[i4].enabledd = this.timers[i4].s_enabledd;
                                 this.timers[i4].maxcalls = this.timers[i4].s_maxcalls;
                                 this.timers[i4].ddelay = this.timers[i4].s_ddelay;
                                 this.timers[i4].ticknew = 0;
                                 i4++;
                              }
                              i4 = -1;
                              this.i2 = 0;
                              while(this.i2 < this.gunstotal)
                              {
                                 if(this.i2 >= this.MP_start_guns_total)
                                 {
                                    this.guns[this.i2].io = false;
                                    this.guns[this.i2].alpha = 0;
                                 }
                                 else
                                 {
                                    this.guns[this.i2].io = true;
                                    this.guns[this.i2].alpha = 1;
                                    this.guns[this.i2].floatframe = 2;
                                    this.guns[this.i2].gotoAndStop(2);
                                    this.guns[this.i2].deadtim = 0;
                                    if(this.guns[this.i2].picken_by != -1)
                                    {
                                       if(!this.guns[this.i2].forcars)
                                       {
                                          if(this.mens[this.guns[this.i2].picken_by].curwea == this.i2)
                                          {
                                             this.mens[this.guns[this.i2].picken_by].curwea = -1;
                                          }
                                          this.guns[this.i2].picken_by = -1;
                                       }
                                    }
                                    this.guns[this.i2].scaleX = 1;
                                    this.guns[this.i2].scaleY = 1;
                                    this.guns[this.i2].av = this.guns[this.i2].stat_averange_min;
                                    this.lax[this.guns[this.i2].b_p1] = this.ax[this.guns[this.i2].b_p1] = this.guns[this.i2].startx + this.guns[this.i2].len1;
                                    this.lax[this.guns[this.i2].b_p2] = this.ax[this.guns[this.i2].b_p2] = this.guns[this.i2].startx + this.guns[this.i2].len2;
                                    this.lay[this.guns[this.i2].b_p1] = this.ay[this.guns[this.i2].b_p1] = this.guns[this.i2].starty;
                                    this.lay[this.guns[this.i2].b_p2] = this.ay[this.guns[this.i2].b_p2] = this.guns[this.i2].starty;
                                    this.atox[this.guns[this.i2].b_p1] = 0;
                                    this.atox[this.guns[this.i2].b_p2] = 0;
                                    this.atoy[this.guns[this.i2].b_p1] = 0;
                                    this.atoy[this.guns[this.i2].b_p2] = 0;
                                    this.WakeUpAtom(this.guns[this.i2].b_p1);
                                    this.WakeUpAtom(this.guns[this.i2].b_p2);
                                    this.MakeGunByClass(this.guns[this.i2].model,this.guns[this.i2],true);
                                    if(!this.MP_spectator)
                                    {
                                       if(this.guns[this.i2].wep != -2)
                                       {
                                          if(this.guns[this.i2].startx > this.mens[this.MP_myid].x - 40)
                                          {
                                             if(this.guns[this.i2].startx < this.mens[this.MP_myid].x + 40)
                                             {
                                                if(this.guns[this.i2].starty > this.mens[this.MP_myid].y - 90)
                                                {
                                                   if(this.guns[this.i2].starty < this.mens[this.MP_myid].y + 30)
                                                   {
                                                      this.ok = true;
                                                      this.i3 = 0;
                                                      while(this.i3 < this.gunstotal && this.ok)
                                                      {
                                                         if(this.guns[this.i3].io)
                                                         {
                                                            if(this.i2 != this.i3)
                                                            {
                                                               if(!this.guns[this.i3].forcars)
                                                               {
                                                                  if(this.guns[this.i3].picken_by == this.MP_myid && this.guns[this.i3].wep == this.guns[this.i2].wep)
                                                                  {
                                                                     this.ok = false;
                                                                  }
                                                               }
                                                            }
                                                         }
                                                         ++this.i3;
                                                      }
                                                      if(this.ok)
                                                      {
                                                         this.guns[this.i2].picken_by = this.MP_myid;
                                                         if(this.guns[this.i2].stat_power > 0)
                                                         {
                                                            i4 = this.i2;
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                                 ++this.i2;
                              }
                              while(this.gunstotal > this.MP_start_guns_total && this.gunstotal - 1 >= 0 && !this.guns[this.gunstotal - 1].io)
                              {
                                 --this.gunstotal;
                              }
                              if(this.MP_enc_restarts == 1 || this.MP_gbd != -1 && this.guns[this.MP_gbd].picken_by != this.MP_myid)
                              {
                                 this.mens[this.MP_myid].curwea = i4;
                              }
                              else
                              {
                                 this.mens[this.MP_myid].curwea = this.MP_gbd;
                              }
                              this.ChangedGun(this.MP_myid);
                              this.UpdateWeps();
                              this.i = 0;
                              while(this.i <= this.pulsmax)
                              {
                                 if(this.puls[this.i] != null)
                                 {
                                    if(this.puls[this.i].visible == true)
                                    {
                                       if(this.game.contains(this.puls[this.i]))
                                       {
                                          this.puls[this.i].visible = false;
                                          this.game.removeChild(this.puls[this.i]);
                                          this.puls[this.i] = null;
                                       }
                                       else if(this.graphics_3d_front.contains(this.puls[this.i]))
                                       {
                                          this.puls[this.i].visible = false;
                                          this.graphics_3d_front.removeChild(this.puls[this.i]);
                                          this.puls[this.i] = null;
                                       }
                                    }
                                 }
                                 ++this.i;
                              }
                              this.i = 0;
                              while(this.i < this.vehiclestotal)
                              {
                                 if(this.vehicles[this.i].io)
                                 {
                                    this.mc = this.vehicles[this.i];
                                    if(this.mc.typ == 5 || this.mc.typ == 6)
                                    {
                                       this.mc.master = -1;
                                    }
                                 }
                                 ++this.i;
                              }
                              if(this.HQ && this.SCREEN_EFFECTS)
                              {
                                 this.whitness.alpha = 1;
                                 this.whitness.visible = true;
                              }
                              this.GCTime();
                           }
                        }
                     }
                     mp_error_addr = 1004;
                     this.players_online = 0;
                     MP_match_playerstotal = 1;
                     this.i = 0;
                     while(this.i < this.MP_playerstotal)
                     {
                        if(this.i != this.MP_myid)
                        {
                           if(this.param["p" + this.i + "nk"] != undefined)
                           {
                              MP_match_playerstotal++;
                              if(this.param["p" + this.i + "nk"] == "Empty")
                              {
                                 this.hero[this.i].f2.text = "";
                                 this.hero[this.i].f3.text = "";
                                 this.hero[this.i].f4.text = "";
                                 this.hero[this.i].f5.text = "";
                                 if(this.hero[this.i].currentFrame != 1 + this.hero_list_frame_offset)
                                 {
                                    this.hero[this.i].gotoAndStop(1 + this.hero_list_frame_offset);
                                 }
                              }
                              else
                              {
                                 ++this.players_online;
                              }
                           }
                        }
                        ++this.i;
                     }
                     mp_error_addr = 1005;
                     this.i = this.MP_myid;
                     if(!this.MP_spectator)
                     {
                        this.str = "Team " + String(this.mens[this.i].team + 1);
                        if(this.mens[this.i].team == 0)
                        {
                           this.str = "Alpha";
                        }
                        if(this.mens[this.i].team == 1)
                        {
                           this.str = "Beta";
                        }
                        if(this.mens[this.i].team == 2)
                        {
                           this.str = "Gamma";
                        }
                        if(this.mens[this.i].team == 3)
                        {
                           this.str = "Delta";
                        }
                        if(this.mens[this.i].team == 4)
                        {
                           this.str = "Zeta";
                        }
                        if(this.mens[this.i].team == 5)
                        {
                           this.str = "Lambda";
                        }
                        if(this.mens[this.i].team == 6)
                        {
                           this.str = "Sigma";
                        }
                        if(this.mens[this.i].team == 7)
                        {
                           this.str = "Omega";
                        }
                        if(this.mens[this.i].team == 8)
                        {
                           this.str = "Counter-Terrorists";
                        }
                        if(this.mens[this.i].team == 9)
                        {
                           this.str = "Terrorists";
                        }
                        if(this.mens[this.i].team == 10)
                        {
                           this.str = "Usurpation Forces";
                        }
                        if(this.mens[this.i].team == 11)
                        {
                           this.str = "Civil Security";
                        }
                        if(this.mens[this.i].team == 12)
                        {
                           this.str = "Red Team";
                        }
                        if(this.mens[this.i].team == 13)
                        {
                           this.str = "Blue Team";
                        }
                        if(this.mens[this.i].team == 14)
                        {
                           this.str = "Green Team";
                        }
                        if(this.mens[this.i].team == 15)
                        {
                           this.str = "White Team";
                        }
                        if(this.mens[this.i].team == 16)
                        {
                           this.str = "Black Team";
                        }
                        if(this.MP_type == 1 || this.MP_type == 4)
                        {
                           this.str = "";
                        }
                        this.hero[this.i].f2.text = this.str;
                        if(this.param["k"] != undefined)
                        {
                           this.MP_kills = int(this.param["k"]);
                        }
                        if(this.param["dd"] != undefined)
                        {
                           this.MP_deaths = int(this.param["dd"]);
                        }
                     }
                     mp_error_addr = 1006;
                     if(this.MP_type == 3)
                     {
                        if(this.param["b"] != undefined)
                        {
                           this.team_blue.txtscore.text = int(this.param["b"]);
                        }
                        if(this.param["r"] != undefined)
                        {
                           this.team_red.txtscore.text = int(this.param["r"]);
                        }
                     }
                     mp_error_addr = 1007;
                     this.i = 0;
                     while(this.i < this.MP_playerstotal)
                     {
                        if(this.mens[this.i] != undefined)
                        {
                           if(this.i != this.MP_myid || this.MP_spectator)
                           {
                              this.i2 = this.mens[this.i].mp_packets;
                              this.mens[this.i].mp_packets = this.param["p" + this.i + "_"];
                              this.mc = this.mens[this.i];
                              if(this.mens[this.i].io)
                              {
                                 if(!this.mens[this.i].dead)
                                 {
                                    if(this.mens[this.i].mp_aliveping + 350 < this.MP_ping_last)
                                    {
                                       this.mens[this.i].act_fire = false;
                                       if(this.MP_giveguns)
                                       {
                                          if(this.mens[this.i].mp_aliveping + 500 < this.MP_ping_last)
                                          {
                                             if(this.mens[this.i].alpha > 0.4)
                                             {
                                                this.mens[this.i].alpha = 0.4;
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              if(this.mens[this.i].mp_aliveping + 4000 > this.MP_ping_last)
                              {
                                 this.mens[this.i].io = true;
                                 this.mens[this.i].visible = true;
                              }
                              else if(this.mens[this.i].io)
                              {
                                 this.mens[this.i].hea = 0;
                                 this.mens[this.i].dead = true;
                                 this.mens[this.i].alpha = 1;
                                 this.mens[this.i].io = false;
                                 this.mens[this.i].visible = false;
                                 if(this.MP_giveguns)
                                 {
                                    if(this.mens[this.i].lastshotby == this.MP_myid)
                                    {
                                       this.ExpTask(this.EXP_TYPE_DEATH_IN_APPROVED,this.mens[this.MP_myid].nick,true);
                                    }
                                 }
                              }
                              if(this.mens[this.i].mp_packets != this.i2)
                              {
                                 if(this.param["p" + this.i + "lo"] != undefined)
                                 {
                                    this.mc.login_name = this.param["p" + this.i + "lo"];
                                    this.CheckIfPlayerInfoUpdateNeeded(this.mc);
                                    if(this.herolist.visible)
                                    {
                                       if(this.mc.login_name == "" || this.mc.login_name == ".guest")
                                       {
                                          this.hero[this.i].vbtn1.visible = false;
                                          this.hero[this.i].vbtn2.visible = false;
                                          this.hero[this.i].vbtn3.visible = false;
                                       }
                                       else
                                       {
                                          this.hero[this.i].vbtn1.visible = true;
                                          this.hero[this.i].vbtn2.visible = true;
                                          this.hero[this.i].vbtn3.visible = true;
                                       }
                                    }
                                 }
                                 if(this.param["p" + this.i + "nk"] != "Empty" && this.param["p" + this.i + "nk"] != undefined)
                                 {
                                    this.mc.mp_aliveping = getTimer();
                                    this.mc.ping = int(this.param["p" + this.i + "p"]);
                                    if(!this.mc.dead)
                                    {
                                       if(this.mc.idd < this.mens[this.MP_myid].idd)
                                       {
                                          this.ENEMY_SENDER_lowestping = false;
                                       }
                                    }
                                    this.xx = Math.min(250,this.MP_ping2 + this.mc.ping) / 1000 * this.MP_fps;
                                 }
                                 if(this.param["p" + this.i + "nk"])
                                 {
                                    this.mc.nick = this.param["p" + this.i + "nk"].split("[eq]").join("=").split("[i]").join("|").split("[e]").join("&").split("&quot;").join("\"").split("&lt;").join("<").split("&gt;").join(">");
                                 }
                                 else
                                 {
                                    this.mc.nick = "pending nickname...";
                                 }
                                 if(this.herolist.visible)
                                 {
                                    this.UpdateHeroList(this.i);
                                 }
                                 if(this.param["p" + this.i + "x"] != undefined && this.param["p" + this.i + "sx"] != undefined && this.param["p" + this.i + "y"] != undefined && this.param["p" + this.i + "sy"] != undefined)
                                 {
                                    if(this.param["p" + this.i + "nk"] != "Empty")
                                    {
                                       this.xx = Math.min(250,this.MP_ping2 + this.mc.ping) / 1000 * this.MP_fps;
                                       if(Boolean(this.mc.isplayer) && this.MP_myid != this.i)
                                       {
                                          if(this.INTRUDER_DATABASE[this.mc.login_name] == undefined || this.INTRUDER_DATABASE[this.mc.login_name] == null)
                                          {
                                             if(this.INTRUDER_DATABASE_length > 128)
                                             {
                                                this.SEND_INTRUDER_LIST();
                                             }
                                             ++this.INTRUDER_DATABASE_length;
                                             this.INTRUDER_DATABASE[this.mc.login_name] = new Object();
                                             this.INTRUDER_DATABASE[this.mc.login_name].unregistered_shots = 0;
                                             this.INTRUDER_DATABASE[this.mc.login_name].registered_shots = 0;
                                             this.INTRUDER_DATABASE[this.mc.login_name].seen_deaths = 0;
                                             this.INTRUDER_DATABASE[this.mc.login_name].activity_start = getTimer();
                                             this.INTRUDER_DATABASE[this.mc.login_name].activity_end = getTimer();
                                             this.INTRUDER_DATABASE[this.mc.login_name].ping_min = this.mc.ping;
                                             this.INTRUDER_DATABASE[this.mc.login_name].ping_max = this.mc.ping;
                                             this.INTRUDER_DATABASE[this.mc.login_name].seen_deaths = 0;
                                             this.INTRUDER_DATABASE[this.mc.login_name].max_hea = this.mc.hea;
                                             this.INTRUDER_DATABASE[this.mc.login_name].min_hea = this.mc.hea;
                                          }
                                          else
                                          {
                                             this.INTRUDER_DATABASE[this.mc.login_name].activity_end = getTimer();
                                             this.INTRUDER_DATABASE[this.mc.login_name].ping_min = Math.min(this.INTRUDER_DATABASE[this.mc.login_name].ping_min,this.mc.ping);
                                             this.INTRUDER_DATABASE[this.mc.login_name].ping_max = Math.max(this.INTRUDER_DATABASE[this.mc.login_name].ping_max,this.mc.ping);
                                             this.INTRUDER_DATABASE[this.mc.login_name].max_hea = Math.max(this.INTRUDER_DATABASE[this.mc.login_name].max_hea,this.mc.hea);
                                             this.INTRUDER_DATABASE[this.mc.login_name].min_hea = Math.min(this.INTRUDER_DATABASE[this.mc.login_name].min_hea,this.mc.hea);
                                          }
                                       }
                                       this.xx2 = Number(this.param["p" + this.i + "x"]);
                                       this.yy2 = Number(this.param["p" + this.i + "y"]);
                                       this.u = this.xx2 + Number(this.param["p" + this.i + "sx"]) * this.xx;
                                       if(Boolean(this.mc.inwater) || Boolean(this.mc.stand))
                                       {
                                          this.v = this.yy2;
                                          this.u2 = Number(this.param["p" + this.i + "sy"]);
                                       }
                                       else
                                       {
                                          this.v = Number(this.param["p" + this.i + "y"]) + Number(this.param["p" + this.i + "sy"]) * this.xx + this.gravity * this.xx * this.xx / 2;
                                          this.u2 = Number(this.param["p" + this.i + "sy"]) + this.gravity * this.xx;
                                       }
                                       if(this.TraceLineF_nopushers(this.mc.x - 5,this.mc.y - 21,this.u,this.v - 21))
                                       {
                                          if(this.TraceLineF_nopushers(this.mc.x - 5,this.mc.y - 61,this.u,this.v - 61))
                                          {
                                             if(this.TraceLineF_nopushers(this.mc.x + 5,this.mc.y - 21,this.u,this.v - 21))
                                             {
                                                if(this.TraceLineF_nopushers(this.mc.x + 5,this.mc.y - 61,this.u,this.v - 61))
                                                {
                                                   this.param["p" + this.i + "x"] = this.u;
                                                   if(!this.mc.stand && !this.mc.inwater)
                                                   {
                                                      this.param["p" + this.i + "y"] = this.v;
                                                      this.param["p" + this.i + "sy"] = this.u2;
                                                   }
                                                }
                                             }
                                          }
                                       }
                                       if(this.param["p" + this.i + "xb"] != "" && this.param["p" + this.i + "xb"] != undefined && this.param["p" + this.i + "yb"] != "" && this.param["p" + this.i + "yb"] != undefined)
                                       {
                                          this.u = Number(this.param["p" + this.i + "xb"]) + Number(this.param["p" + this.i + "sxb"]) * this.xx;
                                          if(Boolean(this.mc.inwater) || Boolean(this.mc.stand))
                                          {
                                             this.v = Number(this.param["p" + this.i + "yb"]) + Number(this.param["p" + this.i + "syb"]) * this.xx;
                                             this.u2 = Number(this.param["p" + this.i + "syb"]);
                                          }
                                          else
                                          {
                                             this.v = Number(this.param["p" + this.i + "yb"]) + Number(this.param["p" + this.i + "syb"]) * this.xx + this.gravity * this.xx * this.xx / 2;
                                             this.u2 = Number(this.param["p" + this.i + "syb"]) + this.gravity * this.xx;
                                          }
                                          if(!this.MP_favor_the_shooter)
                                          {
                                             this.u2 = Number(this.param["p" + this.i + "syb"]);
                                             this.u2 = Number(this.param["p" + this.i + "syb"]) + this.gravity * this.xx;
                                          }
                                          if(this.TraceLineF_nopushers(this.ax[this.mc.b_toe] - 5,this.ay[this.mc.b_toe],this.u,this.v))
                                          {
                                             if(this.TraceLineF_nopushers(this.ax[this.mc.b_toe],this.ay[this.mc.b_toe] - 5,this.u,this.v))
                                             {
                                                if(this.TraceLineF_nopushers(this.ax[this.mc.b_toe] + 5,this.ay[this.mc.b_toe],this.u,this.v))
                                                {
                                                   if(this.TraceLineF_nopushers(this.ax[this.mc.b_toe],this.ay[this.mc.b_toe] + 5,this.u,this.v))
                                                   {
                                                      this.param["p" + this.i + "xb"] = this.u;
                                                      if(!this.mc.stand && !this.mc.inwater)
                                                      {
                                                         this.param["p" + this.i + "yb"] = this.v;
                                                         this.param["p" + this.i + "syb"] = this.u2;
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                       this.xx2 = this.param["p" + this.i + "x"] - this.xx2;
                                       this.yy2 = this.param["p" + this.i + "y"] - this.yy2;
                                       if(!this.MP_favor_the_shooter)
                                       {
                                          this.mc.mp_offset_x = this.xx2;
                                          this.mc.mp_offset_y = this.yy2;
                                       }
                                       if(this.mc.hunt != int(this.param["p" + this.i + "hn"]))
                                       {
                                          if(int(this.param["p" + this.i + "hn"]) == -1)
                                          {
                                             if(this.mens[this.mc.hunt])
                                             {
                                                if(this.mens[this.mc.hunt].hea <= 0)
                                                {
                                                   if(this.MP_myid == -1 || this.mc.team == this.mens[this.MP_myid].team || Boolean(this.mc.voice.always_enemy_down))
                                                   {
                                                      this.MakeHappy(this.mc);
                                                   }
                                                }
                                             }
                                          }
                                          else
                                          {
                                             this.Alerted(this.mc);
                                          }
                                          this.mc.hunt = int(this.param["p" + this.i + "hn"]);
                                       }
                                       if(this.param["p" + this.i + "nk"] != "")
                                       {
                                          if(this.mc.gui.txt1.text != this.mc.nick)
                                          {
                                             this.SpawnPlayerImmediately(this.mc);
                                          }
                                       }
                                       if(this.param["p" + this.i + "cc"] != undefined)
                                       {
                                          mdl = this.param["p" + this.i + "cc"].split(",");
                                          this.i3 = mdl[0];
                                          if(this.mc.char != this.i3)
                                          {
                                             if(this.MP_app)
                                             {
                                                if(this.i3 == 5 || this.i3 == 10)
                                                {
                                                   this.i3 = 2;
                                                }
                                             }
                                             this.mc.char = this.i3;
                                             this.mc.mdl_head = this.i3;
                                             if(this.i3 >= 40 && this.i3 <= 48)
                                             {
                                                this.i3 = 1;
                                             }
                                             if(this.i3 == 61)
                                             {
                                                this.i3 = 3;
                                             }
                                             this.mc.mdl_leg1_upper = this.i3;
                                             this.mc.mdl_leg1_middle = this.i3;
                                             this.mc.mdl_leg1_lower = this.i3;
                                             this.mc.mdl_leg2_upper = this.i3;
                                             this.mc.mdl_leg2_middle = this.i3;
                                             this.mc.mdl_leg2_lower = this.i3;
                                             this.mc.mdl_arm1_upper = this.i3;
                                             this.mc.mdl_arm1_lower = this.i3;
                                             this.mc.mdl_arm2_upper = this.i3;
                                             this.mc.mdl_arm2_lower = this.i3;
                                             this.mc.mdl_toe = this.i3;
                                             this.mc.mdl_body = this.i3;
                                             old_nick = this.mc.nick;
                                             this.UpdateCharProps(this.mc);
                                             this.SpawnPlayerImmediately(this.mc);
                                             this.mc.nick = old_nick;
                                          }
                                          if(mdl[1] != undefined)
                                          {
                                             if(mdl[1].charAt(0) != this.mc.palette[0] || mdl[1].charAt(1) != this.mc.palette[1] || mdl[1].charAt(2) != this.mc.palette[2] || mdl[1].charAt(3) != this.mc.palette[3])
                                             {
                                                this.mc.palette[0] = mdl[1].charAt(0);
                                                this.mc.palette[1] = mdl[1].charAt(1);
                                                this.mc.palette[2] = mdl[1].charAt(2);
                                                this.mc.palette[3] = mdl[1].charAt(3);
                                                this.UpdatePlayerColorMP(this.mc);
                                             }
                                          }
                                       }
                                       if(this.param["p" + this.i + "ha"] != "")
                                       {
                                          if(this.param["p" + this.i + "hl"] != "")
                                          {
                                             if(this.param["p" + this.i + "hb"] != "")
                                             {
                                                if(this.param["p" + this.i + "hh"] != "")
                                                {
                                                   if(this.GetPlayerAllowLimbHPStabChange(this.mc))
                                                   {
                                                      i4 = 0;
                                                      if((this.mc.hp_arms <= 0 || this.mc.brk_arms) && Number(this.param["p" + this.i + "ha"]) > 0)
                                                      {
                                                         i4 = 1;
                                                      }
                                                      else if((this.mc.hp_legs <= 0 || this.mc.brk_legs) && Number(this.param["p" + this.i + "hl"]) > 0)
                                                      {
                                                         i4 = 1;
                                                      }
                                                      else if((this.mc.hp_body <= 0 || this.mc.brk_body) && Number(this.param["p" + this.i + "hb"]) > 0)
                                                      {
                                                         i4 = 1;
                                                      }
                                                      else if((this.mc.hp_head <= 0 || this.mc.brk_head) && Number(this.param["p" + this.i + "hh"]) > 0)
                                                      {
                                                         i4 = 1;
                                                      }
                                                      if(this.mc.hp_arms > 0 && Number(this.param["p" + this.i + "ha"]) <= 0)
                                                      {
                                                         i4 = 2;
                                                      }
                                                      else if(this.mc.hp_legs > 0 && Number(this.param["p" + this.i + "hl"]) <= 0)
                                                      {
                                                         i4 = 2;
                                                      }
                                                      else if(this.mc.hp_body > 0 && Number(this.param["p" + this.i + "hb"]) <= 0)
                                                      {
                                                         i4 = 2;
                                                      }
                                                      else if(this.mc.hp_head > 0 && Number(this.param["p" + this.i + "hh"]) <= 0)
                                                      {
                                                         i4 = 2;
                                                      }
                                                      if(i4 == 1)
                                                      {
                                                         this.SpawnPlayerImmediately(this.mc);
                                                         this.Hurt_nopain(this.i);
                                                      }
                                                      this.mc.hp_arms = Number(this.param["p" + this.i + "ha"]);
                                                      this.mc.hp_legs = Number(this.param["p" + this.i + "hl"]);
                                                      this.mc.hp_body = Number(this.param["p" + this.i + "hb"]);
                                                      this.mc.hp_head = Number(this.param["p" + this.i + "hh"]);
                                                      if(i4 == 2)
                                                      {
                                                         this.Hurt(this.i);
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                       if(this.param["p" + this.i + "he"] != "")
                                       {
                                          if(this.mc.real_hea > 0 && Number(this.param["p" + this.i + "he"]) <= 0)
                                          {
                                             this.mc.last_shoot_chance = true;
                                          }
                                          this.mc.hea = this.AdjustToPlayerAllowedHP(this.mc,Number(this.param["p" + this.i + "he"]));
                                          if(this.mc.real_hea <= 0 && Number(this.param["p" + this.i + "he"]) > 0)
                                          {
                                             this.mc.effects.length = 0;
                                          }
                                          this.mc.real_hea = Number(this.param["p" + this.i + "he"]);
                                       }
                                       if(this.MP_giveguns)
                                       {
                                          if(this.mc.hea > this.mc.hmax)
                                          {
                                             this.AnnoyPL(this.i,"hp+");
                                          }
                                       }
                                       if(this.mc.hea > 0)
                                       {
                                          if(!this.mc.io || !this.mc.visible)
                                          {
                                             this.mc.dead = true;
                                          }
                                          else
                                          {
                                             this.mc.dead = false;
                                          }
                                          this.mc.io = true;
                                          this.mc.visible = true;
                                          if(this.mc.isGhost && !this.MP_giveguns && !this.mens[this.MP_myid].dead && !this.mens[this.MP_myid].dead)
                                          {
                                             if(this.mc.team == this.mens[this.MP_myid].team)
                                             {
                                                this.mc.alpha = 0.5;
                                             }
                                          }
                                          else
                                          {
                                             this.mc.alpha = 1;
                                          }
                                          this.mc.deadtim = 0;
                                          if(this.param["p" + this.i + "st"] != undefined)
                                          {
                                             this.mc.sit = new Number(this.param["p" + this.i + "st"]);
                                          }
                                          if(Boolean(isNaN(this.mc.sit)) || this.mc.sit == undefined)
                                          {
                                          }
                                          if(this.param["p" + this.i + "sb"] != "")
                                          {
                                             if(this.GetPlayerAllowLimbHPStabChange(this.mc))
                                             {
                                                this.mc.stability = Number(this.param["p" + this.i + "sb"]);
                                             }
                                          }
                                          this.mc.mp_controlled = false;
                                          if(Number(this.param["p" + this.i + "sb"]) <= 0)
                                          {
                                             if(this.param["p" + this.i + "x"] != "" && this.param["p" + this.i + "x"] != undefined)
                                             {
                                                if(this.param["p" + this.i + "y"] != "" && this.param["p" + this.i + "y"] != undefined)
                                                {
                                                   if(this.param["p" + this.i + "sx"] != "" && this.param["p" + this.i + "sx"] != undefined)
                                                   {
                                                      if(this.param["p" + this.i + "sy"] != "" && this.param["p" + this.i + "sy"] != undefined)
                                                      {
                                                         if(this.param["p" + this.i + "xb"] != "" && this.param["p" + this.i + "xb"] != undefined)
                                                         {
                                                            if(this.param["p" + this.i + "yb"] != "" && this.param["p" + this.i + "yb"] != undefined)
                                                            {
                                                               if(this.param["p" + this.i + "sxb"] != "" && this.param["p" + this.i + "sxb"] != undefined)
                                                               {
                                                                  if(this.param["p" + this.i + "syb"] != "" && this.param["p" + this.i + "syb"] != undefined)
                                                                  {
                                                                     this.mc.mp_controlled = !this.mc.dead || this.GetPlayerAllowLimbHPStabChange(this.mc);
                                                                     this.mc.mp_time = 0;
                                                                     this.mc.mp_x = Number(this.param["p" + this.i + "x"]);
                                                                     this.mc.mp_y = Number(this.param["p" + this.i + "y"]);
                                                                     this.mc.mp_tox = Number(this.param["p" + this.i + "sx"]);
                                                                     this.mc.mp_toy = Number(this.param["p" + this.i + "sy"]);
                                                                     this.mc.mp_x2 = Number(this.param["p" + this.i + "xb"]);
                                                                     this.mc.mp_y2 = Number(this.param["p" + this.i + "yb"]);
                                                                     this.mc.mp_tox2 = Number(this.param["p" + this.i + "sxb"]);
                                                                     this.mc.mp_toy2 = Number(this.param["p" + this.i + "syb"]);
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                          if(this.param["p" + this.i + "dy"] != "")
                                          {
                                             if(this.param["p" + this.i + "dy"] == "true" || this.GetPlayerShouldBeDying(this.mc))
                                             {
                                                this.MakeDying(this.mc);
                                             }
                                             else
                                             {
                                                this.mc.dying = false;
                                             }
                                          }
                                          if(Number(this.param["p" + this.i + "sb"]) > 0)
                                          {
                                             if(this.param["p" + this.i + "x"] != "" && this.param["p" + this.i + "x"] != undefined)
                                             {
                                                if(this.param["p" + this.i + "y"] != "" && this.param["p" + this.i + "y"] != undefined)
                                                {
                                                   if(this.param["p" + this.i + "sx"] != "" && this.param["p" + this.i + "sx"] != undefined)
                                                   {
                                                      if(this.param["p" + this.i + "sy"] != "" && this.param["p" + this.i + "sy"] != undefined)
                                                      {
                                                         this.mc.x = Number(this.param["p" + this.i + "x"]);
                                                         this.mc.y = Number(this.param["p" + this.i + "y"]);
                                                         this.mc.tox = Number(this.param["p" + this.i + "sx"]);
                                                         this.mc.toy = Number(this.param["p" + this.i + "sy"]);
                                                         this.u = this.mc.x - this.ax[this.mc.b_toe];
                                                         this.v = this.mc.y - this.ay[this.mc.b_toe];
                                                         this.xx = this.VectorDist2D(this.u,this.v);
                                                         if(this.xx > 600 * this.mc.scale || !this.TraceLineF_nopushers(this.mc.x,this.mc.y - 41 * this.mc.scale,this.ax[this.mc.b_toe],this.ay[this.mc.b_toe]))
                                                         {
                                                            this.ax[this.mc.b_toe] += this.u;
                                                            this.ay[this.mc.b_toe] += this.v;
                                                            this.ax[this.mc.b_body] += this.u;
                                                            this.ay[this.mc.b_body] += this.v;
                                                            this.ax[this.mc.b_head_start] += this.u;
                                                            this.ay[this.mc.b_head_start] += this.v;
                                                            this.ax[this.mc.b_head_end] += this.u;
                                                            this.ay[this.mc.b_head_end] += this.v;
                                                            this.ax[this.mc.b_arm1] += this.u;
                                                            this.ay[this.mc.b_arm1] += this.v;
                                                            this.ax[this.mc.b_arm2] += this.u;
                                                            this.ay[this.mc.b_arm2] += this.v;
                                                            this.ax[this.mc.b_leg1] += this.u;
                                                            this.ay[this.mc.b_leg1] += this.v;
                                                            this.ax[this.mc.b_leg2] += this.u;
                                                            this.ay[this.mc.b_leg2] += this.v;
                                                            if(this.GET_LITE_PHYS())
                                                            {
                                                               this.lax[this.mc.b_toe] += this.u;
                                                               this.lay[this.mc.b_toe] += this.v;
                                                               this.lax[this.mc.b_body] += this.u;
                                                               this.lay[this.mc.b_body] += this.v;
                                                               this.lax[this.mc.b_head_start] += this.u;
                                                               this.lay[this.mc.b_head_start] += this.v;
                                                               this.lax[this.mc.b_head_end] += this.u;
                                                               this.lay[this.mc.b_head_end] += this.v;
                                                               this.lax[this.mc.b_arm1] += this.u;
                                                               this.lay[this.mc.b_arm1] += this.v;
                                                               this.lax[this.mc.b_arm2] += this.u;
                                                               this.lay[this.mc.b_arm2] += this.v;
                                                               this.lax[this.mc.b_leg1] += this.u;
                                                               this.lay[this.mc.b_leg1] += this.v;
                                                               this.lax[this.mc.b_leg2] += this.u;
                                                               this.lay[this.mc.b_leg2] += this.v;
                                                            }
                                                         }
                                                         if(this.mc.hea >= this.dying_after)
                                                         {
                                                            this.mc.dying = false;
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                          if(!this.ANONYMOUS_MODE)
                                          {
                                             this.mc.gui.visible = true;
                                             this.mc.gui.alpha = 1;
                                          }
                                          if(this.param["p" + this.i + "ix"] != "")
                                          {
                                             if(this.param["p" + this.i + "iy"] != "")
                                             {
                                                this.mc.tarx = Number(this.param["p" + this.i + "ix"]);
                                                this.mc.tary = Number(this.param["p" + this.i + "iy"]);
                                             }
                                          }
                                          if(this.mens[this.i].mp_aliveping + 200 > this.MP_ping_last)
                                          {
                                             if(this.param["p" + this.i + "f"] != "")
                                             {
                                                if(this.param["p" + this.i + "f"] == "true")
                                                {
                                                   this.mc.act_fire = true;
                                                }
                                                else
                                                {
                                                   this.mc.act_fire = false;
                                                }
                                             }
                                             if(this.param["p" + this.i + "ax"] != "")
                                             {
                                                if(this.param["p" + this.i + "ay"] != "")
                                                {
                                                   this.mc.act_movex = int(this.param["p" + this.i + "ax"]);
                                                   this.mc.act_movey = int(this.param["p" + this.i + "ay"]);
                                                }
                                             }
                                          }
                                          else
                                          {
                                             this.mc.act_fire = false;
                                             this.mc.act_movex = 0;
                                             this.mc.act_movey = 0;
                                          }
                                          if(this.param["p" + this.i + "ic"] != "")
                                          {
                                             this.i2 = int(this.param["p" + this.i + "ic"]);
                                             this.i3 = 0;
                                             while(this.i3 < this.vehiclestotal)
                                             {
                                                if(this.vehicles[this.i3].typ == 6)
                                                {
                                                   if(this.vehicles[this.i3].master == this.i)
                                                   {
                                                      if(this.i2 != this.i3)
                                                      {
                                                         this.vehicles[this.i3].master = -1;
                                                      }
                                                   }
                                                }
                                                ++this.i3;
                                             }
                                             if(this.i2 == -1)
                                             {
                                                this.mc.incar = -1;
                                             }
                                             else if(this.vehicles[this.i2].typ == 6)
                                             {
                                                if(this.vehicles[this.i2].master != this.MP_myid || this.MP_spectator)
                                                {
                                                   this.vehicles[this.i2].master = this.i;
                                                }
                                             }
                                             else
                                             {
                                                this.mc.incar = this.i2;
                                             }
                                          }
                                          this.i3 = this.mc.curwea;
                                          if(this.param["p" + this.i + "cw"] != undefined && this.param["p" + this.i + "cw"] != "")
                                          {
                                             this.i2 = int(this.param["p" + this.i + "cw"]);
                                             if(this.i2 >= -1 && this.i2 < this.gunstotal)
                                             {
                                                if(this.MP_gamestate == 0 || this.i2 == -1 || this.i2 != -1 && this.guns[this.i2].picken_by == this.i)
                                                {
                                                   this.mc.curwea = this.i2;
                                                }
                                             }
                                          }
                                          if(this.MP_gamestate == 0)
                                          {
                                             i4 = 0;
                                             while(i4 < this.gunstotal)
                                             {
                                                if(this.guns[i4].picken_by == this.i && i4 != this.mc.curwea)
                                                {
                                                   this.guns[i4].picken_by = -1;
                                                }
                                                i4++;
                                             }
                                             i4 = 0;
                                             while(i4 < 10)
                                             {
                                                if(this.param["p" + this.i + "g" + i4] != undefined)
                                                {
                                                   if(this.param["p" + this.i + "g" + i4] != "")
                                                   {
                                                      if(this.param["p" + this.i + "g" + i4] != "-1")
                                                      {
                                                         if(this.param["p" + this.i + "g" + i4] != "-")
                                                         {
                                                            this.i2 = int(this.param["p" + this.i + "g" + i4]);
                                                            if(this.i2 >= 0 && this.i2 < this.gunstotal)
                                                            {
                                                               if(this.guns[this.i2].picken_by != -1)
                                                               {
                                                                  if(this.guns[this.i2].picken_by != this.i)
                                                                  {
                                                                     if(this.mens[this.guns[this.i2].picken_by].curwea == this.i2)
                                                                     {
                                                                        this.mens[this.guns[this.i2].picken_by].curwea = -1;
                                                                        this.ChangedGun(this.guns[this.i2].picken_by);
                                                                     }
                                                                  }
                                                               }
                                                               if(this.guns[this.i2].picken_by == this.MP_myid && this.i != this.MP_myid)
                                                               {
                                                                  if(this.mens[this.MP_myid].curwea == this.i2)
                                                                  {
                                                                     this.mens[this.MP_myid].curwea = -1;
                                                                     this.ChangedGun(this.MP_myid);
                                                                  }
                                                                  this.guns[this.i2].picken_by = this.i;
                                                                  this.UpdateWeps();
                                                               }
                                                               else
                                                               {
                                                                  this.guns[this.i2].picken_by = this.i;
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                                i4++;
                                             }
                                          }
                                          if(this.i3 != this.mc.curwea || this.mc.curwea == -1 && !this.mc.arm1.lower.psi.visible)
                                          {
                                             this.ChangedGun(this.i);
                                          }
                                          if(this.param["p" + this.i + "t"] != "")
                                          {
                                             if(this.mc.team != int(this.param["p" + this.i + "t"]))
                                             {
                                                this.mc.team = int(this.param["p" + this.i + "t"]);
                                                this.UpdateTeamColor(this.mc);
                                             }
                                          }
                                          this.RedrawPsi(this.mc.idd);
                                       }
                                       else
                                       {
                                          this.mc.mp_controlled = false;
                                          if(this.param["p" + this.i + "x"] != "")
                                          {
                                             if(this.param["p" + this.i + "y"] != "")
                                             {
                                                if(this.param["p" + this.i + "sx"] != "")
                                                {
                                                   if(this.param["p" + this.i + "sy"] != "")
                                                   {
                                                      if(this.param["p" + this.i + "x"] != undefined)
                                                      {
                                                         if(this.param["p" + this.i + "y"] != undefined)
                                                         {
                                                            if(this.param["p" + this.i + "sx"] != undefined)
                                                            {
                                                               if(this.param["p" + this.i + "sy"] != undefined)
                                                               {
                                                                  if(this.param["p" + this.i + "xb"] != "")
                                                                  {
                                                                     if(this.param["p" + this.i + "yb"] != "")
                                                                     {
                                                                        if(this.param["p" + this.i + "sxb"] != "")
                                                                        {
                                                                           if(this.param["p" + this.i + "syb"] != "")
                                                                           {
                                                                              if(this.param["p" + this.i + "xb"] != undefined)
                                                                              {
                                                                                 if(this.param["p" + this.i + "yb"] != undefined)
                                                                                 {
                                                                                    if(this.param["p" + this.i + "sxb"] != undefined)
                                                                                    {
                                                                                       if(this.param["p" + this.i + "syb"] != undefined)
                                                                                       {
                                                                                          this.mc.mp_controlled = !this.mc.dead || this.GetPlayerAllowLimbHPStabChange(this.mc);
                                                                                          this.mc.mp_time = 0;
                                                                                          this.mc.mp_x = Number(this.param["p" + this.i + "x"]);
                                                                                          this.mc.mp_y = Number(this.param["p" + this.i + "y"]);
                                                                                          this.mc.mp_tox = Number(this.param["p" + this.i + "sx"]);
                                                                                          this.mc.mp_toy = Number(this.param["p" + this.i + "sy"]);
                                                                                          this.mc.mp_x2 = Number(this.param["p" + this.i + "xb"]);
                                                                                          this.mc.mp_y2 = Number(this.param["p" + this.i + "yb"]);
                                                                                          this.mc.mp_tox2 = Number(this.param["p" + this.i + "sxb"]);
                                                                                          this.mc.mp_toy2 = Number(this.param["p" + this.i + "syb"]);
                                                                                       }
                                                                                    }
                                                                                 }
                                                                              }
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                       if(Boolean(isNaN(this.mc.mp_tox)) || Boolean(isNaN(this.mc.mp_x)) || Boolean(isNaN(this.mc.x)) || Boolean(isNaN(this.mc.tox)))
                                       {
                                       }
                                    }
                                    else if(this.mc.io)
                                    {
                                       this.mc.hea = 0;
                                       this.mc.dead = true;
                                       this.mc.alpha = 1;
                                       this.mc.io = false;
                                       this.mc.visible = false;
                                    }
                                 }
                              }
                           }
                        }
                        ++this.i;
                     }
                     setTimeout(function():*
                     {
                        CheckIfPlayerInfoUpdateNeeded(mens[MP_myid]);
                     },1000);
                     mp_error_addr = 1008;
                     if(this.param["lastid"] != "" && this.param["lastid"] != undefined)
                     {
                        if(this.chat_lastid != int(this.param["lastid"]))
                        {
                           this.chat_lastid = int(this.param["lastid"]);
                        }
                     }
                     mp_error_addr = 1009;
                     if(this.param["evs"] != "" && this.param["evs"] != undefined)
                     {
                        while(this.param["evs"] != this.param["evs"].replace("[eq]","="))
                        {
                           this.param["evs"] = this.param["evs"].replace("[eq]","=");
                        }
                        this.array2 = this.param["evs"].split(";");
                        this.array3 = new Array();
                        this.i = 0;
                        for(; this.i < this.array2.length; ++this.i)
                        {
                           try
                           {
                              this.array2[this.i] = String(this.array2[this.i]).split("|");
                              if(this.array2[this.i][0] == "cutag")
                              {
                                 sent_by = int(this.array2[this.i][2]);
                                 if(this.MP_myid == sent_by)
                                 {
                                    sent_for = int(this.array2[this.i][3]);
                                    if(this.mens[sent_for] != undefined && this.mens[sent_for].gui.txt2 != null)
                                    {
                                       this.mens[sent_for].custom_tag = this.unmaskTag(this.array2[this.i][4]);
                                       this.updateTxt2(this.mens[sent_for]);
                                    }
                                 }
                              }
                              if(this.array2[this.i][0] == "chat" || this.array2[this.i][0] == "tchat")
                              {
                                 if(this.array2[this.i][1] != "" && this.array2[this.i][1] != "undefined")
                                 {
                                    this.spawn_text_for = int(this.array2[this.i][1]);
                                    this.str = this.array2[this.i][2];
                                    this.str = this.replaceSymbols(this.str);
                                    if(this.spawn_text_for >= 0)
                                    {
                                       if(this.DISPLAY_CHAT >= 1)
                                       {
                                          this.mcc = this.mens[this.spawn_text_for];
                                          if(this.MP_type == 1 || this.MP_type == 4)
                                          {
                                             this.array2[this.i][0] = "chat";
                                          }
                                          if(this.array2[this.i][0] == "chat" || this.array2[this.i][0] == "tchat" && this.mcc.team == this.mens[this.MP_myid].team)
                                          {
                                             skipCensor = false;
                                             if(this.array2[this.i].length >= 4)
                                             {
                                                skipCensor = this.array2[this.i][3] == "0";
                                             }
                                             if(!skipCensor)
                                             {
                                                this.str = this.Censored(this.str);
                                             }
                                             allow_see_chat = this.MP_let_alive_players_hear_dead || this.MP_spectator || this.mcc.dead == this.mens[this.MP_myid].dead || Boolean(this.mens[this.MP_myid].dead);
                                             if(allow_see_chat)
                                             {
                                                if(!this.ANONYMOUS_MODE)
                                                {
                                                   this.PlaySound_full(this.s_chat);
                                                }
                                                this.Effect(this.ax[this.mcc.b_head_start],this.ay[this.mcc.b_head_start] - 25,20,0,0);
                                                while(this.str != this.str.replace("<","&lt;"))
                                                {
                                                   this.str = this.str.replace("<","&lt;");
                                                }
                                                while(this.str != this.str.replace(">","&gt;"))
                                                {
                                                   this.str = this.str.replace(">","&gt;");
                                                }
                                                if(!this.ANONYMOUS_MODE)
                                                {
                                                   if(this.MP_type == 1 || this.MP_type == 4)
                                                   {
                                                      this.ChatNewMsg("<font color=\"#78DBE2\">" + this.mcc.nick.split("<").join("&lt;").split(">").join("&gt;") + "</font><font color=\"#FFFFFF\">: " + this.str + "</font>");
                                                   }
                                                   else
                                                   {
                                                      this.ok = this.mcc.dead;
                                                      this.ChatNewMsg("<font color=\"" + (this.PREDEF_COLORS[this.mcc.team] != undefined ? this.PREDEF_COLORS[this.mcc.team] : "#78DBE2") + "\">" + (this.array2[this.i][0] == "tchat" ? "[Team Chat]" : "") + (Boolean(this.mcc.dead) && this.MP_type == 2 ? (this.MP_let_alive_players_hear_dead ? "*Dead* " : "[Dead-only] ") : "") + "(" + this.PREDEF_TEAMS[this.mcc.team] + ") " + this.mcc.nick.split("<").join("&lt;").split(">").join("&gt;") + "</font><font color=\"#FFFFFF\">: " + this.str + "</font>");
                                                   }
                                                }
                                             }
                                          }
                                       }
                                       this.UserSays(this.spawn_text_for,this.str);
                                    }
                                    else
                                    {
                                       nick = "<font color=\"#FFFF00\">[Spectator]</font>";
                                       if(this.array2[this.i].length > 3)
                                       {
                                          nick += "<font color=\"#78DBE2\">" + this.array2[this.i][3] + "</font>";
                                       }
                                       this.ChatNewMsg(nick + ": " + this.str + "</font>");
                                    }
                                 }
                              }
                              if(this.array2[this.i][0] == "chat2")
                              {
                                 if(this.array2[this.i][1] != "" && this.array2[this.i][1] != "undefined")
                                 {
                                    this.array2[this.i][1] = this.array2[this.i][1].split("[i]").join("|").split("[e]").join("&").split("[eq]").join("=").split("[,]").join(";");
                                    this.ChatNewMsg(this.array2[this.i][1]);
                                    if(this.on_user_connected_trigger != -1)
                                    {
                                       if(this.array2[this.i][1].indexOf(" Connected</font>") != -1 || this.array2[this.i][1].indexOf(" is spectating</font>") != -1)
                                       {
                                          this.EXEC_TRIGGER(this.on_user_connected_trigger,true);
                                       }
                                    }
                                 }
                              }
                              if(this.array2[this.i][0] == "chat3")
                              {
                                 if(this.array2[this.i][1] != "" && this.array2[this.i][1] != "undefined")
                                 {
                                    this.array2[this.i][1] = this.array2[this.i][1].split("[i]").join("|").split("[e]").join("&").split("[eq]").join("=").split("[,]").join(";");
                                    this.ChatNewMsg(this.array2[this.i][1]);
                                    this.PlaySound_full(this.s_chat);
                                 }
                              }
                              if(this.array2[this.i][0] == "spawnef")
                              {
                                 if(this.array2[this.i][1] != "")
                                 {
                                    this.array3 = this.array2[this.i][1].split("#");
                                    this.Effect(int(this.array3[0]),int(this.array3[1]),14,0,0);
                                 }
                              }
                              if(this.array2[this.i][0] == "b")
                              {
                                 if(this.array2[this.i][1] != "")
                                 {
                                    this.array3 = this.array2[this.i][1].split("#");
                                    victim = int(this.array3[1]);
                                    if(this.barrels[victim] != null)
                                    {
                                       if(this.barrels[victim].hea > 0)
                                       {
                                          this.barrels[victim].x = Number(this.array3[2]);
                                          this.barrels[victim].y = Number(this.array3[3]);
                                          this.barrels[victim].hea = 0;
                                          this.HurtBarrel(victim);
                                       }
                                    }
                                 }
                              }
                              if(this.array2[this.i][0] == "e")
                              {
                                 if(this.array2[this.i][1] != "")
                                 {
                                    this.array3 = this.array2[this.i][1].split("#");
                                    datafrom = int(this.array3[0]);
                                    if(datafrom != this.MP_myid)
                                    {
                                       victim = int(this.array3[1]);
                                       if(this.mens[victim] != null)
                                       {
                                          if(this.mens[victim].io)
                                          {
                                             if(!this.mens[victim].isplayer)
                                             {
                                                this.mens[victim].hea = Math.min(this.mens[victim].hea,Number(this.array3[2]));
                                                if(this.mens[victim].hea > 0)
                                                {
                                                   this.mens[victim].x = Number(this.array3[3]);
                                                   this.mens[victim].y = Number(this.array3[4]);
                                                   this.mens[victim].tox = Number(this.array3[5]);
                                                   this.mens[victim].toy = Number(this.array3[6]);
                                                   this.mens[victim].tarx = Number(this.array3[7]);
                                                   this.mens[victim].tary = Number(this.array3[8]);
                                                   this.mens[victim].hunt = int(this.array3[9]);
                                                   this.mens[victim].botaction = int(this.array3[10]);
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              if(this.array2[this.i][0] == "eh")
                              {
                                 if(this.array2[this.i][1] != "")
                                 {
                                    this.array3 = this.array2[this.i][1].split("#");
                                    victim = int(this.array3[0]);
                                    if(this.mens[victim] != null)
                                    {
                                       if(this.mens[victim].io)
                                       {
                                          if(!this.mens[victim].isplayer)
                                          {
                                             this.mens[victim].hea = Math.min(this.mens[victim].hea,Number(this.array3[1]));
                                             this.mens[victim].hp_head = Math.min(this.mens[victim].hp_head,Number(this.array3[2]));
                                             this.mens[victim].hp_body = Math.min(this.mens[victim].hp_body,Number(this.array3[3]));
                                             this.mens[victim].hp_arms = Math.min(this.mens[victim].hp_arms,Number(this.array3[4]));
                                             this.mens[victim].hp_legs = Math.min(this.mens[victim].hp_legs,Number(this.array3[5]));
                                          }
                                       }
                                    }
                                 }
                              }
                              if(this.array2[this.i][0] == "ef_dot")
                              {
                                 if(this.array2[this.i][1] != "")
                                 {
                                    this.array3 = this.array2[this.i][1].split("#");
                                    victim = int(this.array3[0]);
                                    if(this.mens[victim] != null)
                                    {
                                       if(this.mens[victim].io)
                                       {
                                          if(victim != this.MP_myid)
                                          {
                                             this.mens[victim].effects.push({
                                                "type":"DOT",
                                                "power":0,
                                                "duration":int(this.array3[1])
                                             });
                                          }
                                       }
                                    }
                                 }
                              }
                              if(this.array2[this.i][0] == "shgh")
                              {
                                 if(this.array2[this.i][1] != "")
                                 {
                                    this.array3 = this.array2[this.i][1].split("#");
                                    victim = int(this.array3[1]);
                                    special_object = this.MP_specials[victim];
                                    if(special_object == null)
                                    {
                                       i4 = 0;
                                       while(i4 < this.MP_myspecials_total)
                                       {
                                          if(this.MP_myspecials[i4].id_in_full_list == victim)
                                          {
                                             special_object = this.MP_myspecials[i4];
                                             break;
                                          }
                                          i4++;
                                       }
                                    }
                                    if(special_object != null)
                                    {
                                       pul_object = int(special_object.pul);
                                       if(this.puls[pul_object] != null)
                                       {
                                          if(this.puls[pul_object].hea > 0)
                                          {
                                             this.puls[pul_object].hea = Math.min(this.puls[pul_object].hea,Number(this.array3[2]));
                                             if(this.puls[pul_object].hea <= 0)
                                             {
                                                this.shnades[this.puls[pul_object].childsh].io = false;
                                                this.ExplodeShield(this.puls[pul_object].childsh);
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              if(this.array2[this.i][0] == "gshot")
                              {
                                 if(this.array2[this.i][1] != "")
                                 {
                                    this.array3 = this.array2[this.i][1].split("#");
                                    this.effcolor = int(this.array3[0]);
                                    if(this.effcolor != this.MP_myid || this.MP_spectator)
                                    {
                                       if(this.mens[this.effcolor])
                                       {
                                          if(this.MP_giveguns)
                                          {
                                             if(this.mens[this.effcolor].hea >= this.mens[this.effcolor].hmax)
                                             {
                                                this.AnnoyPL(this.effcolor,"nod");
                                             }
                                          }
                                          if(this.HQ && !this.GET_LITE_PHYS())
                                          {
                                             this.i3 = this.aof[this.mens[this.effcolor].b_head_start];
                                             best_i = -1;
                                             best_dist = 0;
                                             i4 = 0;
                                             while(i4 < this.atotal)
                                             {
                                                if(this.aof[i4] == this.i3)
                                                {
                                                   tdist = this.Math_pow2(this.ax[i4] - Number(this.array3[1])) + this.Math_pow2(this.ay[i4] - Number(this.array3[2]));
                                                   if(best_i == -1 || tdist < best_dist)
                                                   {
                                                      best_i = i4;
                                                      best_dist = tdist;
                                                   }
                                                }
                                                i4++;
                                             }
                                             this.v = Math.max(0.3,Math.min(2,(130 - this.mens[this.effcolor].hea) / 70));
                                             if(best_i == this.mens[this.effcolor].b_head_start || best_i == this.mens[this.effcolor].b_head_end)
                                             {
                                                this.ablood[best_i] += this.v * 4;
                                             }
                                             else
                                             {
                                                this.ablood[best_i] += this.v * 2;
                                             }
                                          }
                                          this.FlowAt(Number(this.array3[1]),Number(this.array3[2]),0,Number(this.array3[3]),Number(this.array3[4]),Number(this.array3[5]));
                                          this.mc = this.mens[this.effcolor];
                                          if(Boolean(this.mc.isplayer) && this.MP_myid != this.i)
                                          {
                                             if(this.INTRUDER_DATABASE[this.mc.login_name] == undefined || this.INTRUDER_DATABASE[this.mc.login_name] == null)
                                             {
                                                this.INTRUDER_DATABASE[this.mc.login_name] = new Object();
                                                this.INTRUDER_DATABASE[this.mc.login_name].unregistered_shots = 0;
                                                this.INTRUDER_DATABASE[this.mc.login_name].registered_shots = 1;
                                                this.INTRUDER_DATABASE[this.mc.login_name].activity_start = getTimer();
                                                this.INTRUDER_DATABASE[this.mc.login_name].activity_end = getTimer();
                                                this.INTRUDER_DATABASE[this.mc.login_name].ping_min = this.mc.ping;
                                                this.INTRUDER_DATABASE[this.mc.login_name].ping_max = this.mc.ping;
                                                this.INTRUDER_DATABASE[this.mc.login_name].seen_deaths = 0;
                                                this.INTRUDER_DATABASE[this.mc.login_name].max_hea = this.mc.hea;
                                                this.INTRUDER_DATABASE[this.mc.login_name].min_hea = this.mc.hea;
                                             }
                                             else
                                             {
                                                this.INTRUDER_DATABASE[this.mc.login_name].registered_shots += 1;
                                                this.INTRUDER_DATABASE[this.mc.login_name].activity_end = getTimer();
                                                this.INTRUDER_DATABASE[this.mc.login_name].ping_min = Math.min(this.INTRUDER_DATABASE[this.mc.login_name].ping_min,this.mc.ping);
                                                this.INTRUDER_DATABASE[this.mc.login_name].ping_max = Math.max(this.INTRUDER_DATABASE[this.mc.login_name].ping_max,this.mc.ping);
                                                this.INTRUDER_DATABASE[this.mc.login_name].max_hea = Math.max(this.INTRUDER_DATABASE[this.mc.login_name].max_hea,this.mc.hea);
                                                this.INTRUDER_DATABASE[this.mc.login_name].min_hea = Math.min(this.INTRUDER_DATABASE[this.mc.login_name].min_hea,this.mc.hea);
                                             }
                                          }
                                          if(this.SHOW_FRAG_MESSAGES)
                                          {
                                             if(int(this.array3[6]) == this.MP_myid)
                                             {
                                                if(this.effcolor != this.MP_myid)
                                                {
                                                   if(this.mens[int(this.array3[6])])
                                                   {
                                                      if(!this.mens[this.effcolor].dead)
                                                      {
                                                         if(this.HQ && this.SCREEN_EFFECTS)
                                                         {
                                                            this.whitness.alpha += 0.3;
                                                            this.whitness.visible = true;
                                                         }
                                                         if(this.array3[8] == undefined)
                                                         {
                                                            this.array3[8] = 30;
                                                         }
                                                         this.DamageReport(int(this.array3[8]));
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                          if(this.array3[6] >= 0)
                                          {
                                             if(this.effcolor != this.array3[6])
                                             {
                                                this.GivePotentialExpSourceValue(this.mens[this.array3[6]],0.25);
                                             }
                                          }
                                          this.SimHitSound(this.mens[this.effcolor],Number(this.array3[1]),Number(this.array3[2]),Number(this.array3[7]));
                                          this.Hurt(this.effcolor);
                                       }
                                    }
                                 }
                              }
                              if(this.array2[this.i][0] == "heal")
                              {
                                 if(this.MP_favor_the_shooter)
                                 {
                                    this.array3 = this.array2[this.i][1].split("#");
                                    this.array3[0] = int(this.array3[0]);
                                    if(this.array3[0] != this.MP_myid || this.MP_spectator)
                                    {
                                       if(this.mens[this.array3[0]])
                                       {
                                          if(this.mens[this.array3[1]])
                                          {
                                             this.array3[1] = int(this.array3[1]);
                                             this.array3[2] = Number(this.array3[2]);
                                             this.array3[3] = 0;
                                             this.array3[4];
                                             if(this.IsBulletHerePossible(this.ax[this.mens[this.array3[0]].b_body],this.ay[this.mens[this.array3[0]].b_body],this.array3[0],this.array3[1],this.ax[this.mens[this.array3[1]].b_body],this.ay[this.mens[this.array3[1]].b_body],-1,-1,false,this.array3[4]))
                                             {
                                                this.HealGunApplied(this.array3[1],this.mens[this.array3[0]],this.array3[2],this.array3[3],this.array3[4]);
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              if(this.array2[this.i][0] == "w")
                              {
                                 if(this.MP_favor_the_shooter)
                                 {
                                    this.array3 = this.array2[this.i][1].split("#");
                                    this.array3[0] = int(this.array3[0]);
                                    if(this.array3[0] != this.MP_myid || this.MP_spectator)
                                    {
                                       if(this.mens[this.array3[0]])
                                       {
                                          if(this.mens[this.array3[5]])
                                          {
                                             this.array3[1] = Number(this.array3[1]);
                                             this.array3[2] = this.array3[2] == "1";
                                             this.array3[3] = Number(this.array3[3]);
                                             this.array3[4] = Number(this.array3[4]);
                                             this.array3[5] = int(this.array3[5]);
                                             this.array3[6] = Number(this.array3[6]);
                                             this.array3[7] = Number(this.array3[7]);
                                             this.array3[8];
                                             i4 = 9;
                                             while(i4 < this.array3.length)
                                             {
                                                this.ApplyWaveDamageToPlayerAtom(this.array3[0],this.mens[this.array3[5]],this.array3[i4 + 0],this.array3[i4 + 1],this.array3[i4 + 2],this.array3[i4 + 3],this.array3[1],this.array3[2],this.array3[3],this.array3[4],this.array3[5] == this.MP_myid,this.array3[6],this.array3[7],-1,this.array3[8]);
                                                i4 += 4;
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              if(this.array2[this.i][0] == "ct")
                              {
                                 if(this.MP_favor_the_shooter)
                                 {
                                    this.array3 = this.array2[this.i][1].split("#");
                                    this.array3[0] = int(this.array3[0]);
                                    if(this.array3[0] != this.MP_myid || this.MP_spectator)
                                    {
                                       i4 = 0;
                                       while(i4 <= this.pulsmax)
                                       {
                                          if(this.puls[i4] != null)
                                          {
                                             if(this.puls[i4].visible == true)
                                             {
                                                if(this.puls[i4].master == this.array3[0])
                                                {
                                                   if(this.AllowExtraBulletClassSync(this.puls[i4]))
                                                   {
                                                      if(this.puls[i4].last_correct == undefined)
                                                      {
                                                         if(this.game.contains(this.puls[i4]))
                                                         {
                                                            if(this.puls[i4].attached != -1)
                                                            {
                                                               this.DisposeAtom(this.puls[i4].attached);
                                                            }
                                                            this.puls[i4].visible = false;
                                                            this.game.removeChild(this.puls[i4]);
                                                            this.puls[i4] = null;
                                                         }
                                                         else if(this.graphics_3d_front.contains(this.puls[i4]))
                                                         {
                                                            if(this.puls[i4].attached != -1)
                                                            {
                                                               this.DisposeAtom(this.puls[i4].attached);
                                                            }
                                                            this.puls[i4].visible = false;
                                                            this.graphics_3d_front.removeChild(this.puls[i4]);
                                                            this.puls[i4] = null;
                                                         }
                                                      }
                                                      else if(this.puls[i4].last_correct > 0)
                                                      {
                                                         --this.puls[i4].last_correct;
                                                      }
                                                      else
                                                      {
                                                         this.puls[i4].power = 0;
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                          i4++;
                                       }
                                    }
                                 }
                              }
                              else if(this.array2[this.i][0] == "t")
                              {
                                 if(this.MP_favor_the_shooter)
                                 {
                                    this.array3 = this.array2[this.i][1].split("#");
                                    this.array3[0] = int(this.array3[0]);
                                    this.array3[1] = Number(this.array3[1]);
                                    this.array3[2] = Number(this.array3[2]);
                                    this.array3[3] = int(this.array3[3]);
                                    detonate = false;
                                    if(this.array3[3] < 0)
                                    {
                                       this.array3[3] *= -1;
                                       detonate = true;
                                    }
                                    if(this.array3[0] != this.MP_myid || this.MP_spectator)
                                    {
                                       if(this.mens[this.array3[0]])
                                       {
                                          best_i4 = -1;
                                          best_di = 0;
                                          i4 = 0;
                                          while(i4 <= this.pulsmax)
                                          {
                                             if(this.puls[i4] != null)
                                             {
                                                if(this.puls[i4].visible == true)
                                                {
                                                   if(this.puls[i4].master == this.array3[0])
                                                   {
                                                      if(this.puls[i4].currentFrame == this.array3[3])
                                                      {
                                                         if(this.AllowExtraBulletClassSync(this.puls[i4]))
                                                         {
                                                            if(this.puls[i4].last_correct != 1)
                                                            {
                                                               di = this.Dist2D(this.puls[i4].x,this.puls[i4].y,this.array3[1],this.array3[2]);
                                                               if(di < 200)
                                                               {
                                                                  if(best_i4 == -1 || best_di > di)
                                                                  {
                                                                     best_i4 = i4;
                                                                     best_di = di;
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                             i4++;
                                          }
                                          if(best_i4 != -1)
                                          {
                                             this.puls[best_i4].x = this.array3[1];
                                             this.puls[best_i4].y = this.array3[2];
                                             if(this.puls[best_i4].attached != -1)
                                             {
                                                this.ax[this.puls[best_i4].attached] = this.array3[1];
                                                this.ay[this.puls[best_i4].attached] = this.array3[2];
                                                this.WakeUpAtom(this.puls[best_i4].attached);
                                             }
                                             this.puls[best_i4].last_correct = 1;
                                             if(detonate)
                                             {
                                                this.puls[best_i4].power = 0;
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              else if(this.array2[this.i][0] == "hit")
                              {
                                 if(this.MP_favor_the_shooter)
                                 {
                                    this.array3 = this.array2[this.i][1].split("#");
                                    this.array3[0] = int(this.array3[0]);
                                    this.array3[1] = int(this.array3[1]);
                                    this.array3[2];
                                    this.array3[3] = Number(this.array3[3]);
                                    this.array3[4] = Number(this.array3[4]);
                                    this.array3[5] = int(this.array3[5]);
                                    this.array3[6] = Number(this.array3[6]);
                                    this.array3[7] = Number(this.array3[7]);
                                    this.array3[8] = Number(this.array3[8]);
                                    this.array3[9] = Number(this.array3[9]);
                                    this.array3[10] = int(this.array3[10]);
                                    this.array3[11];
                                    this.array3[12] = int(this.array3[12]);
                                    if(!(this.array3[0] == this.MP_myid && !this.MP_spectator))
                                    {
                                       if(this.mens[this.array3[1]])
                                       {
                                          if(this.mens[this.array3[0]])
                                          {
                                             this.GivePotentialExpSourceValue(this.mens[this.array3[0]],0.25);
                                             this.ApplyLimbDamageToPlayer(this.mens[this.array3[1]],this.array3[1],this.array3[2],this.array3[0],this.array3[3],this.array3[4],this.array3[5],this.array3[6],this.array3[7],this.array3[8],this.array3[9],this.array3[10],this.array3[11],true,this.mens[this.array3[1]].hea > 0,false,this.PlayerLocalAtomIDToGlobalAtomID(this.array3[12],this.mens[this.array3[1]]),this.array3[1] == this.MP_myid);
                                          }
                                       }
                                    }
                                 }
                              }
                              else if(this.array2[this.i][0] == "frag")
                              {
                                 if(this.SHOW_FRAG_MESSAGES)
                                 {
                                    if(this.array2[this.i][1] != "" && this.array2[this.i][1] != undefined)
                                    {
                                       this.array3 = this.array2[this.i][1].split("#");
                                       this.array3[0] = int(this.array3[0]);
                                       this.array3[1] = int(this.array3[1]);
                                       if(this.array3[0] < 0)
                                       {
                                          continue;
                                       }
                                       if(this.array3[0] >= this.playerstotal)
                                       {
                                          continue;
                                       }
                                       if(this.array3[1] >= this.playerstotal)
                                       {
                                          continue;
                                       }
                                       if(this.mens[this.array3[0]].io == false)
                                       {
                                          continue;
                                       }
                                       if(this.array3[1] != -1)
                                       {
                                          if(this.array3[1] < -1)
                                          {
                                             continue;
                                          }
                                          if(this.mens[this.array3[1]].io == false)
                                          {
                                             continue;
                                          }
                                       }
                                       if(!(this.INTRUDER_DATABASE[this.mens[this.array3[0]].login_name] == undefined || this.INTRUDER_DATABASE[this.mens[this.array3[0]].login_name] == null))
                                       {
                                          this.INTRUDER_DATABASE[this.mens[this.array3[0]].login_name].seen_deaths += 1;
                                       }
                                       this.str = "";
                                       this.str4 = "";
                                       if(this.array3[0] != this.MP_myid || this.MP_spectator)
                                       {
                                          if(this.mens[this.array3[0]].hea > 0)
                                          {
                                             this.mens[this.array3[0]].hea = 0;
                                          }
                                          if(this.mens[this.array3[0]].ondeath != -1)
                                          {
                                             this.TRIGGER_PLAYER_INITIATOR = this.array3[0];
                                             this.TRIGGER_PLAYER_KILLER = this.array3[1];
                                             this.triggers[this.mens[this.array3[0]].ondeath].forcehyperjump = false;
                                             this.EXEC_TRIGGER(this.mens[this.array3[0]].ondeath);
                                          }
                                          if(this.mens[this.array3[0]].isplayer)
                                          {
                                             if(this.mens[this.array3[0]].voice.death.length > 0)
                                             {
                                                this.Say(this.mens[this.array3[0]],this.mens[this.array3[0]].voice.death[Math.floor(Math.random() * this.mens[this.array3[0]].voice.death.length)],true);
                                             }
                                          }
                                       }
                                       this.MaybeInfoUpdateFor(this.array3[0]);
                                       this.MaybeInfoUpdateFor(this.array3[1]);
                                       if(this.array3[1] > 0)
                                       {
                                          this.GivePotentialExpSourceValue(this.mens[this.array3[1]],1);
                                       }
                                       if(this.array3[0] == this.MP_myid)
                                       {
                                          this.str4 = "<font color=\"#FF4444\">";
                                          ++this.MP_real_deaths;
                                          if(this.MP_giveguns)
                                          {
                                             this.ExpTask(this.EXP_TYPE_DEATH_IN_APPROVED,this.mens[this.array3[0]].nick,true);
                                          }
                                       }
                                       else if(this.mens[this.array3[0]].team == this.mens[this.MP_myid].team)
                                       {
                                          this.str4 = "<font color=\"#a61b1b\">";
                                       }
                                       else if(this.array3[1] == this.MP_myid)
                                       {
                                          this.str4 = "<font color=\"#44FF44\">";
                                          if(this.mens[this.array3[0]].team != this.mens[this.MP_myid].team)
                                          {
                                             if(this.MP_giveguns && this.MP_mode && Boolean(this.mens[this.array3[0]].isplayer))
                                             {
                                                if(this.PlayerCanGiveExp(this.mens[this.array3[0]]))
                                                {
                                                   if(this.array3[2] == "item_grenade")
                                                   {
                                                      this.ExpTask(this.EXP_TYPE_KILL_PLAYER_USING_GRENADE_IN_APPROVED,this.mens[this.array3[0]].nick,true);
                                                   }
                                                   else if(this.array3[2] == "nothing" || this.array3[2] == "wall" || this.array3[2] == "barrel" || this.array3[2] == "level" || this.array3[2] == "acid")
                                                   {
                                                      this.ExpTask(this.EXP_TYPE_KILL_PLAYER_USING_WALL_OR_ACID_IN_APPROVED,this.mens[this.array3[0]].nick,true);
                                                   }
                                                   else if(this.array3[2] == "gun_defibrillator")
                                                   {
                                                      this.ExpTask(this.EXP_TYPE_KILL_PLAYER_WITH_DEFIBRILLATOR_IN_APPROVED,this.mens[this.array3[0]].nick,true);
                                                   }
                                                   else if(this.array3[2] == "swords")
                                                   {
                                                      this.ExpTask(this.EXP_TYPE_KILL_PLAYER_USING_SWORDS_IN_APPROVED,this.mens[this.array3[0]].nick,true);
                                                   }
                                                   else if(this.array3[3] == "head")
                                                   {
                                                      this.ExpTask(this.EXP_TYPE_KILL_PLAYER_WITH_HEADSHOT_IN_APPROVED,this.mens[this.array3[0]].nick,true);
                                                   }
                                                   else
                                                   {
                                                      this.ExpTask(this.EXP_TYPE_KILL_IN_APPROVED,this.mens[this.array3[0]].nick,true);
                                                   }
                                                   extra_msg_offset = 1000;
                                                   if(this.mens[this.MP_myid].brk_legs)
                                                   {
                                                      this.ExpTask(this.EXP_TYPE_KILL_PLAYER_WITHOUT_LEGS_IN_APPROVED,this.mens[this.array3[0]].nick);
                                                   }
                                                   if(this.TraceLineF_nopushers(this.ax[this.mens[this.array3[0]].b_toe] - 5,this.ay[this.mens[this.array3[0]].b_toe],this.ax[this.mens[this.array3[0]].b_toe] - 50,this.ay[this.mens[this.array3[0]].b_toe] + 200))
                                                   {
                                                      if(this.TraceLineF_nopushers(this.ax[this.mens[this.array3[0]].b_toe] + 5,this.ay[this.mens[this.array3[0]].b_toe],this.ax[this.mens[this.array3[0]].b_toe] + 50,this.ay[this.mens[this.array3[0]].b_toe] + 200))
                                                      {
                                                         this.ExpTask(this.EXP_TYPE_KILL_PLAYER_MIDAIR_IN_APPROVED,this.mens[this.array3[0]].nick);
                                                      }
                                                   }
                                                   ++this.MP_kills_in_a_row;
                                                   if(this.MP_kills_in_a_row > this.MP_kills_in_a_row_top)
                                                   {
                                                      this.MP_kills_in_a_row_top = this.MP_kills_in_a_row;
                                                      this.ExpTask(this.EXP_TYPE_STREAK,this.MP_kills_in_a_row);
                                                   }
                                                }
                                                else
                                                {
                                                   this.ExpTask(this.EXP_TYPE_AFK_KILL,this.mens[this.array3[0]].nick,true);
                                                }
                                             }
                                          }
                                          else if(this.MP_giveguns && this.MP_mode && Boolean(this.mens[this.array3[0]].isplayer))
                                          {
                                             this.ExpTask(this.EXP_TYPE_KILL_TEAMMATE_MP,this.mens[this.array3[0]].nick);
                                          }
                                          this.FragReport(this.mens[this.array3[0]].team == this.mens[this.MP_myid].team,this.mens[this.array3[0]]);
                                       }
                                       else
                                       {
                                          this.str4 = "<font color=\"#207933\">";
                                       }
                                       if(this.array3[1] != -1)
                                       {
                                          if(this.array3[0] == this.array3[1])
                                          {
                                             this.str3 = this.mens[this.array3[0]].nick.split("<").join("&lt;");
                                          }
                                          else
                                          {
                                             this.str3 = this.mens[this.array3[1]].nick.split("<").join("&lt;");
                                          }
                                       }
                                       else
                                       {
                                          this.str3 += "nothing";
                                       }
                                       this.str += this.mens[this.array3[0]].nick.split("<").join("&lt;");
                                       if((this.array3[2] == "nothing" || this.array3[0] == this.array3[1]) && this.array3[1] != -1 && this.array3[1] != this.array3[0])
                                       {
                                          if(this.array3[0] == this.array3[1])
                                          {
                                             this.i = Math.floor(Math.random() * (4 - 0.0001));
                                             if(this.i == 0)
                                             {
                                                this.str += " suicided";
                                             }
                                             if(this.i == 1)
                                             {
                                                this.str += " killed itself";
                                             }
                                             if(this.i == 2)
                                             {
                                                this.str += " become a victim of itself";
                                             }
                                             if(this.i == 3)
                                             {
                                                this.str += " made a mistake";
                                             }
                                          }
                                          else
                                          {
                                             this.str += " died";
                                          }
                                       }
                                       else if(this.array3[2] == "wall")
                                       {
                                          this.i = Math.floor(Number(this.array3[4]) * 30);
                                          if(this.array3[4] == undefined || this.array3[4] == "" || Number(this.array3[4]) >= 1)
                                          {
                                             this.i = 0;
                                          }
                                          if(this.i == 0)
                                          {
                                             this.str += " killed itself against the wall";
                                          }
                                          if(this.i == 1)
                                          {
                                             this.str += " rushed too fast";
                                          }
                                          if(this.i == 2)
                                          {
                                             this.str += " tried to go glitch through the wall";
                                          }
                                          if(this.i == 3)
                                          {
                                             this.str += " smeared on the wall";
                                          }
                                          if(this.i == 4)
                                          {
                                             this.str += " fell for the last time";
                                          }
                                          if(this.i == 5)
                                          {
                                             this.str += " broken";
                                          }
                                          if(this.i == 6)
                                          {
                                             this.str += " forgot its parachute";
                                          }
                                          if(this.i == 7)
                                          {
                                             this.str += " almost broken through the wall";
                                          }
                                          if(this.i == 8)
                                          {
                                             this.str += " met the wall at high speed";
                                          }
                                          if(this.i == 9)
                                          {
                                             this.str += "\'s guts now adorn the wall";
                                          }
                                          if(this.i == 10)
                                          {
                                             this.str += " flew into the wall";
                                          }
                                          if(this.i == 11)
                                          {
                                             this.str += " has been attacked by a wall";
                                          }
                                          if(this.i == 12)
                                          {
                                             this.str += " met the wall like its fate";
                                          }
                                          if(this.i == 13)
                                          {
                                             this.str += " chews granite";
                                          }
                                          if(this.i == 14)
                                          {
                                             this.str += " fell painfully";
                                          }
                                          if(this.i == 15)
                                          {
                                             this.str += " has been hammered like a nail";
                                          }
                                          if(this.i == 16)
                                          {
                                             this.str += " covers wall with its inner world";
                                          }
                                          if(this.i == 17)
                                          {
                                             this.str += " fails to break through the wall";
                                          }
                                          if(this.i == 18)
                                          {
                                             this.str = "Fast " + this.str + " was stopped by a slow wall";
                                          }
                                          if(this.i == 19)
                                          {
                                             this.str = "Wall was much stronger than " + this.str + "\'s head";
                                          }
                                          if(this.i == 20)
                                          {
                                             this.str += " merges into the wall";
                                          }
                                          if(this.i == 21)
                                          {
                                             this.str = "No one will envy " + this.str + " now";
                                          }
                                          if(this.i == 22)
                                          {
                                             this.str += " gets sleepy from wall attacks";
                                          }
                                          if(this.i == 23)
                                          {
                                             this.str += " goes for a nap";
                                          }
                                          if(this.i == 24)
                                          {
                                             this.str += " goes on a speed date with a concrete wall";
                                          }
                                          if(this.i == 25)
                                          {
                                             this.str += " leaves a huge spot on a wall";
                                          }
                                          if(this.i == 26)
                                          {
                                             try
                                             {
                                                map_author = this.CUR_CUSTOM_MAP.split("-")[0];
                                                if(map_author.charAt(map_author.length - 1) == "s")
                                                {
                                                   map_author += "\'";
                                                }
                                                else
                                                {
                                                   map_author += "\'s";
                                                }
                                                map_author = map_author.charAt(0).toUpperCase() + map_author.substr(1);
                                             }
                                             catch(e:*)
                                             {
                                                String = "map maker\'s";
                                             }
                                             this.str = this.str + " is no match for " + map_author + " walls";
                                          }
                                          if(this.i == 27)
                                          {
                                             this.str = "Wall eliminates " + this.str;
                                          }
                                          if(this.i == 28)
                                          {
                                             this.str += " tries to find that station, lethally to himself";
                                          }
                                          if(this.i == 29)
                                          {
                                             this.str = "That blood stain is " + this.str;
                                          }
                                          if(this.array3[1] != -1)
                                          {
                                             if(this.array3[0] != -1)
                                             {
                                                if(this.array3[1] != this.array3[0])
                                                {
                                                   this.str += " thanks to " + this.str3;
                                                   if(this.mens[this.array3[0]].team == this.mens[this.array3[1]].team)
                                                   {
                                                      this.str = this.str3 + " killed its teammate " + this.mens[this.array3[0]].nick.split("<").join("&lt;");
                                                      this.str4 = "<font color=\"#FF4444\">";
                                                   }
                                                }
                                             }
                                          }
                                       }
                                       else if(this.array3[2] == "barrel")
                                       {
                                          this.i = Math.floor(Math.random() * (3 - 0.0001));
                                          if(this.i == 0)
                                          {
                                             this.str += " hugs explosive barrel";
                                          }
                                          if(this.i == 1)
                                          {
                                             this.str += " has been blown up by explosive barrel";
                                          }
                                          if(this.i == 2)
                                          {
                                             this.str += " has lost to explosive barrel";
                                          }
                                          if(this.array3[1] != -1)
                                          {
                                             if(this.array3[0] != -1)
                                             {
                                                this.str += " thanks to " + this.str3;
                                             }
                                          }
                                       }
                                       else if(this.array3[2] == "level")
                                       {
                                          this.str += " has died due to unexpected circumstances";
                                          if(this.array3[1] != -1)
                                          {
                                             if(this.array3[0] != -1)
                                             {
                                                this.str += " thanks to " + this.str3;
                                             }
                                          }
                                       }
                                       else if(this.array3[2] == "acid")
                                       {
                                          this.i = Math.floor(Math.random() * (5 - 0.0001));
                                          if(this.i == 0)
                                          {
                                             this.str += " dissolved";
                                          }
                                          if(this.i == 1)
                                          {
                                             this.str += " drank " + this.ACID_NAME.toLowerCase();
                                          }
                                          if(this.i == 2)
                                          {
                                             this.str += " has studied the properties of " + this.ACID_NAME.toLowerCase();
                                          }
                                          if(this.i == 3)
                                          {
                                             this.str += " bathed in " + this.ACID_NAME.toLowerCase();
                                          }
                                          if(this.i == 4)
                                          {
                                             this.str += " tried " + this.ACID_NAME.toLowerCase() + " on taste";
                                          }
                                          if(this.array3[1] != -1)
                                          {
                                             if(this.array3[0] != -1)
                                             {
                                                this.str += " thanks to " + this.str3;
                                             }
                                          }
                                       }
                                       else if(this.array3[1] != -1)
                                       {
                                          if(this.mens[this.array3[0]].team == this.mens[this.array3[1]].team)
                                          {
                                             if(this.array3[0] == this.array3[1])
                                             {
                                                this.str = this.str3 + " killed itself";
                                             }
                                             else
                                             {
                                                this.str = this.str3 + " killed its teammate " + this.mens[this.array3[0]].nick.split("<").join("&lt;");
                                             }
                                          }
                                          else if(this.array3[2] == "swords")
                                          {
                                             if(Math.random() > 0.5)
                                             {
                                                this.str = this.str3 + " sliced " + this.mens[this.array3[0]].nick.split("<").join("&lt;");
                                             }
                                             else
                                             {
                                                this.str = this.str3 + " cut " + this.mens[this.array3[0]].nick.split("<").join("&lt;");
                                             }
                                          }
                                          else if(this.array3[2] == "wave")
                                          {
                                             this.str = this.str3 + " eliminated " + this.mens[this.array3[0]].nick.split("<").join("&lt;");
                                          }
                                          else
                                          {
                                             this.str = this.str3 + " eliminated " + this.mens[this.array3[0]].nick.split("<").join("&lt;") + " via " + this.GunModelToGunName(this.array3[2]);
                                             if(this.array3[3] == "head")
                                             {
                                                this.str += " [ Headshot ]";
                                             }
                                          }
                                       }
                                       else
                                       {
                                          this.str += " died";
                                       }
                                       this.str5 = "";
                                       if(this.str4 != "")
                                       {
                                          this.str5 = "</font>";
                                       }
                                       this.str = this.str4 + this.str + this.str5;
                                       if(this.DISPLAY_CHAT >= 2 || this.DISPLAY_CHAT >= 1)
                                       {
                                          this.ChatNewMsg(this.str);
                                       }
                                    }
                                 }
                              }
                              else if(this.array2[this.i][0] == "exec")
                              {
                                 if(this.array2[this.i][1] != "" && this.array2[this.i][1] != "undefined")
                                 {
                                    this.array3 = this.array2[this.i][1].split("#");
                                    if(int(this.array3[2]) != -1 && this.regions[int(this.array3[2])] && this.regions[int(this.array3[2])].use_on == 1 || int(this.array3[1]) != this.MP_myid || this.MP_spectator)
                                    {
                                       this.TRIGGER_PLAYER_INITIATOR = int(this.array3[1]);
                                       if(this.array3.length > 3)
                                       {
                                          this.TRIGGER_PROJECTILE_POWER = Number(this.array3[3]);
                                       }
                                       else
                                       {
                                          this.TRIGGER_PROJECTILE_POWER = 0;
                                       }
                                       if(this.triggers[int(this.array3[0])])
                                       {
                                          this.triggers[int(this.array3[0])].forcehyperjump = true;
                                          this.EXEC_TRIGGER(int(this.array3[0]));
                                       }
                                    }
                                 }
                              }
                              else if(this.array2[this.i][0] == "sync")
                              {
                                 if(this.ALLOW_VAR_SYNC)
                                 {
                                    if(this.array2[this.i][1] != "" && this.array2[this.i][1] != "undefined")
                                    {
                                       this.array3 = this.array2[this.i][1].split("#");
                                       if(this.array3[0] == "r")
                                       {
                                          this.level_variables[this.array3[1]] = this.array3[2];
                                       }
                                       else if(this.array3[0] == "d")
                                       {
                                          if(this.level_variables[this.array3[1]] == undefined || this.level_variables[this.array3[1]] == "undefined" || this.level_variables[this.array3[1]] == null || this.level_variables[this.array3[1]] == "null" || Boolean(isNaN(this.level_variables[this.array3[1]])))
                                          {
                                             this.level_variables[this.array3[1]] = this.array3[2];
                                          }
                                       }
                                       else if(this.array3[0] == "x")
                                       {
                                          this.level_variables[this.array3[1]] = Math.max(Number(this.array3[2]),Number(this.level_variables[this.array3[1]]));
                                       }
                                       else if(this.array3[0] == "n")
                                       {
                                          this.level_variables[this.array3[1]] = Math.min(Number(this.array3[2]),Number(this.level_variables[this.array3[1]]));
                                       }
                                       else if(this.array3[0] == "l")
                                       {
                                          if(this.array3[2].length > (this.level_variables[this.array3[1]] + "").length)
                                          {
                                             this.level_variables[this.array3[1]] = this.array3[2];
                                          }
                                       }
                                    }
                                 }
                              }
                              else if(this.array2[this.i][0] == "ss")
                              {
                                 if(this.array2[this.i][1] != "" && this.array2[this.i][1] != undefined)
                                 {
                                    this.array3 = this.array2[this.i][1].split("#");
                                    if(int(this.array3[0]) != this.MP_myid)
                                    {
                                       if(this.mens[int(this.array3[0])])
                                       {
                                          this.mens[int(this.array3[0])].change_gun = int(this.array3[3]);
                                          this.mens[int(this.array3[0])].mp_must_shoot_once = getTimer();
                                       }
                                    }
                                 }
                              }
                              else if(this.array2[this.i][0] == "acs")
                              {
                                 if(this.array2[this.i][1] != "" && this.array2[this.i][1] != undefined)
                                 {
                                    this.array3 = this.array2[this.i][1].split("#");
                                    if(int(this.array3[0]) != this.MP_myid)
                                    {
                                       if(this.mens[int(this.array3[0])])
                                       {
                                          this.mens[int(this.array3[0])].change_gun = int(this.array3[4]);
                                          this.mens[int(this.array3[0])].mp_shot_correct = {
                                             "x":Number(this.array3[1]),
                                             "y":Number(this.array3[2]),
                                             "xx":Number(this.array3[3]),
                                             "time":getTimer()
                                          };
                                          if(Boolean(isNaN(this.mens[int(this.array3[0])].mp_shot_correct.x)) || Boolean(isNaN(this.mens[int(this.array3[0])].mp_shot_correct.y)) || Boolean(isNaN(this.mens[int(this.array3[0])].mp_shot_correct.xx)))
                                          {
                                             this.mens[int(this.array3[0])].mp_shot_correct = undefined;
                                          }
                                          this.mens[int(this.array3[0])].mp_must_shoot_once = getTimer();
                                       }
                                    }
                                 }
                              }
                              else if(this.array2[this.i][0] == "dd")
                              {
                                 if(this.array2[this.i][1] != "" && this.array2[this.i][1] != undefined)
                                 {
                                    this.array3 = this.array2[this.i][1].split("#");
                                    this.mc = this.mens[int(this.array3[0])];
                                    if(int(this.array3[0]) != this.MP_myid || this.MP_spectator)
                                    {
                                       this.lax[this.mc.b_leg1] = this.ax[this.mc.b_leg1] = Number(this.array3[1]);
                                       this.lay[this.mc.b_leg1] = this.ay[this.mc.b_leg1] = Number(this.array3[2]);
                                       this.atox[this.mc.b_leg1] = Number(this.array3[3]);
                                       this.atoy[this.mc.b_leg1] = Number(this.array3[4]);
                                       this.lax[this.mc.b_leg2] = this.ax[this.mc.b_leg2] = Number(this.array3[5]);
                                       this.lay[this.mc.b_leg2] = this.ay[this.mc.b_leg2] = Number(this.array3[6]);
                                       this.atox[this.mc.b_leg2] = Number(this.array3[7]);
                                       this.atoy[this.mc.b_leg2] = Number(this.array3[8]);
                                       this.lax[this.mc.b_arm1] = this.ax[this.mc.b_arm1] = Number(this.array3[9]);
                                       this.lay[this.mc.b_arm1] = this.ay[this.mc.b_arm1] = Number(this.array3[10]);
                                       this.atox[this.mc.b_arm1] = Number(this.array3[11]);
                                       this.atoy[this.mc.b_arm1] = Number(this.array3[12]);
                                       this.lax[this.mc.b_arm2] = this.ax[this.mc.b_arm2] = Number(this.array3[13]);
                                       this.lay[this.mc.b_arm2] = this.ay[this.mc.b_arm2] = Number(this.array3[14]);
                                       this.atox[this.mc.b_arm2] = Number(this.array3[15]);
                                       this.atoy[this.mc.b_arm2] = Number(this.array3[16]);
                                       this.lax[this.mc.b_body] = this.ax[this.mc.b_body] = Number(this.array3[17]);
                                       this.lay[this.mc.b_body] = this.ay[this.mc.b_body] = Number(this.array3[18]);
                                       this.atox[this.mc.b_body] = Number(this.array3[19]);
                                       this.atoy[this.mc.b_body] = Number(this.array3[20]);
                                       this.lax[this.mc.b_toe] = this.ax[this.mc.b_toe] = Number(this.array3[21]);
                                       this.lay[this.mc.b_toe] = this.ay[this.mc.b_toe] = Number(this.array3[22]);
                                       this.atox[this.mc.b_toe] = Number(this.array3[23]);
                                       this.atoy[this.mc.b_toe] = Number(this.array3[24]);
                                       this.lax[this.mc.b_head_start] = this.ax[this.mc.b_head_start] = Number(this.array3[25]);
                                       this.lay[this.mc.b_head_start] = this.ay[this.mc.b_head_start] = Number(this.array3[26]);
                                       this.atox[this.mc.b_head_start] = Number(this.array3[27]);
                                       this.atoy[this.mc.b_head_start] = Number(this.array3[28]);
                                       this.lax[this.mc.b_head_end] = this.ax[this.mc.b_head_end] = Number(this.array3[29]);
                                       this.lay[this.mc.b_head_end] = this.ay[this.mc.b_head_end] = Number(this.array3[30]);
                                       this.atox[this.mc.b_head_end] = Number(this.array3[31]);
                                       this.atoy[this.mc.b_head_end] = Number(this.array3[32]);
                                       this.lax[this.mc.b_brk1] = this.ax[this.mc.b_brk1] = Number(this.array3[33]);
                                       this.lay[this.mc.b_brk1] = this.ay[this.mc.b_brk1] = Number(this.array3[34]);
                                       this.atox[this.mc.b_brk1] = Number(this.array3[35]);
                                       this.atoy[this.mc.b_brk1] = Number(this.array3[36]);
                                       this.lax[this.mc.b_brk2] = this.ax[this.mc.b_brk2] = Number(this.array3[37]);
                                       this.lay[this.mc.b_brk2] = this.ay[this.mc.b_brk2] = Number(this.array3[38]);
                                       this.atox[this.mc.b_brk2] = Number(this.array3[39]);
                                       this.atoy[this.mc.b_brk2] = Number(this.array3[40]);
                                    }
                                 }
                              }
                              else if(this.array2[this.i][0] == "gm")
                              {
                                 this.array3 = this.array2[this.i][1].split("#");
                                 this.i2 = Number(this.array3[0]);
                                 if(this.MP_specials[this.i2] != null && this.MP_specials[this.i2] != undefined)
                                 {
                                    if(this.MP_specials[this.i2].refr != Number(this.array3[7]))
                                    {
                                       this.MP_specials[this.i2].refr = Number(this.array3[7]);
                                       this.ok = true;
                                       this.i3 = 0;
                                       while(this.i3 < this.MP_myspecials_total)
                                       {
                                          if(this.MP_myspecials[this.i3].stat == 3)
                                          {
                                             if(Number(this.array3[6]) == 1)
                                             {
                                                if(this.MP_myspecials[this.i3].id_in_full_list == this.i2)
                                                {
                                                   this.MP_myspecials[this.i3].stat = 0;
                                                }
                                             }
                                             this.ok = false;
                                          }
                                          ++this.i3;
                                       }
                                       if(this.ok)
                                       {
                                          if(this.MP_specials[this.i2] != undefined)
                                          {
                                             if(this.MP_specials[this.i2] != null)
                                             {
                                                if(Number(this.array3[3]) != 0 || Number(this.array3[4]) != 0)
                                                {
                                                   if(this.MP_specials[this.i2].atom != -1)
                                                   {
                                                      this.atox[this.MP_specials[this.i2].atom] = Number(this.array3[3]);
                                                      this.atoy[this.MP_specials[this.i2].atom] = Number(this.array3[4]);
                                                      if(Number(this.array3[1]) != this.ax[this.MP_specials[this.i2].atom] || Number(this.array3[2]) != this.ay[this.MP_specials[this.i2].atom])
                                                      {
                                                         this.WakeUpAtom(this.MP_specials[this.i2].atom);
                                                         this.ax[this.MP_specials[this.i2].atom] = Number(this.array3[1]);
                                                         this.ay[this.MP_specials[this.i2].atom] = Number(this.array3[2]);
                                                         if(this.puls[this.MP_specials[this.i2].pul] != undefined)
                                                         {
                                                            if(this.puls[this.MP_specials[this.i2].pul] != null)
                                                            {
                                                               if(this.puls[this.MP_specials[this.i2].pul].nadekind == 3)
                                                               {
                                                                  this.puls[this.MP_specials[this.i2].pul].stuckx = Number(this.array3[1]);
                                                                  this.puls[this.MP_specials[this.i2].pul].stucky = Number(this.array3[2]);
                                                               }
                                                            }
                                                         }
                                                      }
                                                      else
                                                      {
                                                         this.ForceAtomSleep(this.MP_specials[this.i2].atom);
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              else if(this.array2[this.i][0] == "gs")
                              {
                                 this.array3 = this.array2[this.i][1].split("#");
                                 if(Number(this.array3[6]) != this.MP_myid || this.MP_spectator)
                                 {
                                    this.i2 = Number(this.array3[0]);
                                    this.xx = Number(this.array3[1]);
                                    this.yy = Number(this.array3[2]);
                                    this.xx2 = Number(this.array3[3]);
                                    this.yy2 = Number(this.array3[4]);
                                    i4 = int(this.array3[6]);
                                    this.i3 = Number(this.array3[5]);
                                    this.MP_specials[this.i2] = new Object();
                                    this.MP_specials[this.i2].refr = 0;
                                    if(this.puls[this.pulscur] != null)
                                    {
                                       if(this.game.contains(this.puls[this.pulscur]))
                                       {
                                          this.game.removeChild(this.puls[this.pulscur]);
                                          this.puls[this.pulscur] = null;
                                       }
                                    }
                                    this.puls[this.pulscur] = this.game.addChildAt(new lazer(),this.game.numChildren);
                                    this.NewBullet(this.puls[this.pulscur]);
                                    this.NoMouse(this.puls[this.pulscur]);
                                    this.puls[this.pulscur].lag = 0;
                                    this.PlaySound(this.s_nade_throw,this.xx,this.yy);
                                    this.puls[this.pulscur].thisis = "item_grenade";
                                    this.puls[this.pulscur].cclass = 6;
                                    this.puls[this.pulscur].notbliped = true;
                                    this.puls[this.pulscur].x = this.xx;
                                    this.puls[this.pulscur].y = this.yy;
                                    this.puls[this.pulscur].nx = this.xx;
                                    this.puls[this.pulscur].ny = this.yy;
                                    this.puls[this.pulscur].power = 3;
                                    this.puls[this.pulscur].maxpower = 3;
                                    this.puls[this.pulscur].knockback_multiplier = 1;
                                    if(this.mens[int(this.array3[6])] != null)
                                    {
                                       this.puls[this.pulscur].inwater = this.ainwater[this.mens[int(this.array3[6])].b_arm2] && this.wa_friction[this.ainwater_shape[this.mens[int(this.array3[6])].b_arm2]];
                                    }
                                    else
                                    {
                                       this.puls[this.pulscur].inwater = false;
                                    }
                                    this.puls[this.pulscur].lastin = 0;
                                    this.puls[this.pulscur].lastinbox = this.boxestotal;
                                    this.puls[this.pulscur].master = int(this.array3[6]);
                                    this.puls[this.pulscur].nadekind = this.i3;
                                    this.puls[this.pulscur].maxbulletlife = 60;
                                    if(this.i3 == 1)
                                    {
                                       if(this.puls[this.pulscur].currentFrame != 11)
                                       {
                                          this.puls[this.pulscur].gotoAndStop(11);
                                       }
                                    }
                                    if(this.i3 == 2)
                                    {
                                       if(this.puls[this.pulscur].currentFrame != 17)
                                       {
                                          this.puls[this.pulscur].gotoAndStop(17);
                                       }
                                    }
                                    if(this.i3 == 3)
                                    {
                                       if(this.puls[this.pulscur].currentFrame != 19)
                                       {
                                          this.puls[this.pulscur].gotoAndStop(19);
                                       }
                                       this.puls[this.pulscur].maxbulletlife = 60 + 30 * 60;
                                       this.puls[this.pulscur].hasexploded = false;
                                       this.puls[this.pulscur].radius = 0;
                                       this.puls[this.pulscur].hea = 10;
                                       this.puls[this.pulscur].heapo = 90;
                                       this.puls[this.pulscur].losthea = 0;
                                    }
                                    this.puls[this.pulscur].rotation = 90 - this.xx / Math.PI * 180;
                                    this.puls[this.pulscur].life = 0;
                                    this.puls[this.pulscur].spx = 0;
                                    this.puls[this.pulscur].spy = 0;
                                    this.puls[this.pulscur].attached = this.CreatePoint(this.puls[this.pulscur].x,this.puls[this.pulscur].y,this.puls[this.pulscur].spx,this.puls[this.pulscur].spy,3,true,8,-300 - this.pulscur);
                                    this.aactive[this.puls[this.pulscur].attached] = 1000;
                                    this.aactive[-300 - this.pulscur] = true;
                                    this.mens[int(this.array3[6])].arm_nade = this.puls[this.pulscur].attached;
                                    this.MP_specials[this.i2].pul = this.pulscur;
                                    this.MP_specials[this.i2].atom = this.puls[this.pulscur].attached;
                                    this.nextpul();
                                 }
                              }
                              else if(this.array2[this.i][0] == "gok")
                              {
                                 this.array3 = this.array2[this.i][1].split("#");
                                 if(Number(this.array3[0]) == this.MP_myid && !this.MP_spectator)
                                 {
                                    if(this.StartMiniScenario(0))
                                    {
                                       ++this.tnds;
                                       this.MP_assigning_special = Number(this.array3[1]);
                                       this.MP_myspecials[this.MP_assigning_special].stat = 2;
                                       this.MP_myspecials[this.MP_assigning_special].id_in_full_list = Number(this.array3[2]);
                                    }
                                 }
                              }
                           }
                           catch(event_error:*)
                           {
                              ChatNewMsg("MPEventError: " + event_error.errorID + " :: " + array2[i].join("|").split("<").join("&lt;").split(">").join("&gt;"));
                           }
                        }
                     }
                     mp_error_addr = 1010;
                     if(this.herolist.visible)
                     {
                        this.herolist.f4.text = this.players_online + 1 + " / " + MP_match_playerstotal;
                     }
                     mp_error_addr = 1011;
                     if(this.MP_mode)
                     {
                        if(!this.MP_force_disconnect)
                        {
                           this.MP_ping2 = (getTimer() - this.MP_ping1 + this.MP_ping2 * 10) / 11;
                           setTimeout(function():*
                           {
                              VarChangePreventStart();
                              MP_get();
                              VarChangePreventEnd();
                           },1);
                        }
                     }
                  }
               }
            }
         }
         catch(e:*)
         {
            ChatNewMsg("MPGeneralError: " + e.errorID + " :: " + e.message + " :: addr=" + mp_error_addr);
            NetCodeError("DONE: ERR = " + e);
         }
      }
      
      public function MorphWithTimeScale(param1:Number, param2:Number, param3:Number, param4:Number) : Number
      {
         param3 = Math.pow(param3,param4);
         return param2 * (1 - param3) + param1 * param3;
      }
      
      public function limit(param1:Number, param2:Number, param3:Number) : Number
      {
         if(param2 < param1)
         {
            return param1;
         }
         if(param2 > param3)
         {
            return param3;
         }
         return param2;
      }
      
      public function Collision(param1:*, param2:int, param3:Number, param4:Number, param5:Number, param6:Number, param7:Number, param8:Number, param9:Boolean, param10:Number, param11:Number) : void
      {
         param7 = param4 - param3;
         param8 = param6 - param5;
         if(!param1.inwater)
         {
            if(param1.x >= param3 + 1)
            {
               if(param1.x <= param4 - 1)
               {
                  if(param1.y >= param6 - this.sitmax * param1.scale)
                  {
                     if(param1.y <= param6 + param1.sit * this.sitmax * param1.scale)
                     {
                        this.hup = true;
                     }
                  }
               }
            }
            if(param1.sit != 0)
            {
               if(param1.x >= param3)
               {
                  if(param1.x <= param4)
                  {
                     if(param1.y >= param6 - 5)
                     {
                        if(param1.y <= param6 + 5)
                        {
                           this.ok = true;
                        }
                     }
                  }
               }
            }
         }
         if(this.MP_mode)
         {
            if(param1.tox > 0)
            {
               param4 += param1.tox * this.GSPEED2 * 2;
            }
            if(param1.tox < 0)
            {
               param3 += param1.tox * this.GSPEED2 * 2;
            }
            if(param1.toy > 0)
            {
               param6 += param1.toy * this.GSPEED2 * 2;
            }
            if(param1.toy < 0)
            {
               param5 += param1.toy * this.GSPEED2 * 2;
            }
         }
         else if(param2 == this.MP_myid)
         {
            param10 *= this.GSPEED / this.GSPEED2;
            param11 *= this.GSPEED / this.GSPEED2;
         }
         if(param1.x >= param3)
         {
            if(param1.x <= param4)
            {
               if(param1.y >= param5)
               {
                  if(param1.y <= param6)
                  {
                     if(this.DEBUG_MODE)
                     {
                        this.debug_screen.graphics.lineStyle(2,16776960);
                        this.debug_screen.graphics.moveTo(param1.x - this.PLAYER_WIDTH * param1.scale,param1.y - 82 * param1.scale);
                        this.debug_screen.graphics.lineTo(param1.x + this.PLAYER_WIDTH * param1.scale,param1.y - 82 * param1.scale);
                        this.debug_screen.graphics.lineTo(param1.x + this.PLAYER_WIDTH * param1.scale,param1.y - param1.sit * this.sitmax * param1.scale);
                        this.debug_screen.graphics.lineTo(param1.x - this.PLAYER_WIDTH * param1.scale,param1.y - param1.sit * this.sitmax * param1.scale);
                        this.debug_screen.graphics.lineTo(param1.x - this.PLAYER_WIDTH * param1.scale,param1.y - 82 * param1.scale);
                     }
                     this.ok2 = true;
                     if(param1.y < param5 + 42)
                     {
                        this.u = 0;
                        this.v = 1;
                        if(param1.x < param3 + this.PLAYER_WIDTH * param1.scale || param1.x > param4 - this.PLAYER_WIDTH * param1.scale)
                        {
                           if(param1.x > (param3 + param4) / 2)
                           {
                              if(!this.TracePointOnlyBoxes(param1.x - this.PLAYER_WIDTH * param1.scale - 5,param5 - 75 * param1.scale) || !this.TracePointOnlyBoxes(param1.x - this.PLAYER_WIDTH * param1.scale - 5,param5 - 35 * param1.scale))
                              {
                                 this.u = -1;
                                 this.v = 0;
                              }
                           }
                           else if(!this.TracePointOnlyBoxes(param1.x + this.PLAYER_WIDTH * param1.scale + 5,param5 - 75 * param1.scale) || !this.TracePointOnlyBoxes(param1.x + this.PLAYER_WIDTH * param1.scale + 5,param5 - 35 * param1.scale))
                           {
                              this.u = 1;
                              this.v = 0;
                           }
                        }
                        if(this.v != 0)
                        {
                           if(param1.y > param5 + 15 * param1.scale)
                           {
                              param1.tox *= 0.8;
                           }
                        }
                     }
                     else if(param1.y > param6 - 100 * param1.scale)
                     {
                        this.u = 0;
                        this.v = -1;
                        if(param1.x > param4 - 20 * param1.scale)
                        {
                           this.u = -1;
                           this.v = 0;
                        }
                        if(param1.x < param3 + 20 * param1.scale)
                        {
                           this.u = 1;
                           this.v = 0;
                        }
                     }
                     else
                     {
                        if(param7 > param8)
                        {
                           this.v = param5 + param8 * 0.5;
                           param8 *= 0.5;
                           this.u = Math.max(param3 + param8,Math.min(param4 - param8,param1.x - param1.tox * this.GSPEED));
                        }
                        else
                        {
                           this.u = param3 + param7 * 0.5;
                           param7 *= 0.5;
                           this.v = Math.max(param5 + param7,Math.min(param6 - param7,param1.y - 41 * param1.scale - param1.toy * this.GSPEED));
                        }
                        this.u -= param1.x - param1.tox * this.GSPEED;
                        this.v -= param1.y - 41 * param1.scale - param1.toy * this.GSPEED;
                     }
                     if(this.Math_abs(this.u) > this.Math_abs(this.v))
                     {
                        if(this.Math_abs(param1.tox - param10) > 14 * param1.mobility)
                        {
                           param1.stability -= this.Math_abs(param1.tox - param10) * 0.2;
                        }
                        if(this.Math_abs(param1.tox - param10) * this.GLOBAL_FALL_SENSITIVITY_MULT > 17)
                        {
                           this.PlaySound(this.s_body_fall,param1.x,param1.y);
                           if(!this.MP_mode || this.MP_myid == param2 && !this.MP_spectator || !param1.isplayer)
                           {
                              this.effcolor = param2;
                              if(this.u > 0)
                              {
                                 this.FlowAt(param1.x + 20,param1.y - Math.random() * 80,0,-3 + Math.random() * 6,-3 + Math.random() * 6,5);
                              }
                              else
                              {
                                 this.FlowAt(param1.x - 20,param1.y - Math.random() * 80,0,-3 + Math.random() * 6,-3 + Math.random() * 6,5);
                              }
                              if(this.MP_mode && this.MP_myid == param2)
                              {
                                 this.MP_custom_events += ";gshot|" + param2 + "#" + this.r2(param1.x + 20 * (this.u > 0 ? 1 : -1)) + "#" + this.r2(param1.y - Math.random() * 80) + "#" + this.r2(-3 + Math.random() * 6) + "#" + this.r2(-3 + Math.random() * 6) + "#" + 5 + "#" + -1 + "#2" + "#" + 0;
                              }
                              if(this.MP_mode && (this.MP_type == 1 || this.MP_type == 3 || this.MP_type == 4))
                              {
                                 param1.hea -= this.Math_pow2(param1.tox - param10) * 0.1 * this.GLOBAL_FALL_DAMAGE_MULT;
                                 param1.hp_body -= this.Math_pow2(param1.tox - param10) * 0.05 * this.GLOBAL_FALL_DAMAGE_MULT * this.GLOBAL_FALL_DAMAGE_MULT_LIMBS;
                                 param1.hp_legs -= this.Math_pow2(param1.tox - param10) * 0.05 * this.GLOBAL_FALL_DAMAGE_MULT * this.GLOBAL_FALL_DAMAGE_MULT_LIMBS;
                              }
                              else
                              {
                                 param1.hea -= this.Math_pow2(param1.tox - param10) * 0.2 * this.GLOBAL_FALL_DAMAGE_MULT;
                                 param1.hp_body -= this.Math_pow2(param1.tox - param10) * 0.1 * this.GLOBAL_FALL_DAMAGE_MULT * this.GLOBAL_FALL_DAMAGE_MULT_LIMBS;
                                 param1.hp_legs -= this.Math_pow2(param1.tox - param10) * 0.1 * this.GLOBAL_FALL_DAMAGE_MULT * this.GLOBAL_FALL_DAMAGE_MULT_LIMBS;
                              }
                              param1.lastshot = "body";
                              param1.lastshotbygun = "wall";
                              if(param2 == this.MP_myid)
                              {
                                 this.HurtMyPlayer(this.u,0,this.Math_pow2(param1.tox - param10) * 0.1);
                              }
                              this.Hurt(param2);
                           }
                        }
                        if(param1.hea > 0)
                        {
                           if(param1.act_movey == -1 && param6 > param1.y + 30 && (param2 != this.MP_myid && param1.isplayer || param2 == this.MP_myid && (this.u > 0 && param1.act_movex != 1 || this.u < 0 && param1.act_movex != -1)) && this.Math_abs(param1.tox - param10) > 6 && this.Math_abs(param1.tox - param10) < 16 && param1.toy - param11 > -8 && param1.toy - param11 < 4)
                           {
                              if(this.u < 0 && param1.x > (param3 + param4) / 2)
                              {
                                 param1.tox = 7 * param1.jump_scale + param10;
                              }
                              else
                              {
                                 param1.tox = -7 * param1.jump_scale + param10;
                              }
                              param1.toy = Math.min((param11 - 14 * param1.jump_scale) * 0.5,param1.toy);
                              if(param2 == this.MP_myid)
                              {
                                 this.incBadge(20);
                              }
                              this.TurnBone(param1.b_leg1,param1.x - param1.tox * 2 - 5 * param1.scale,param1.y,param1,1);
                              this.TurnBone(param1.b_leg2,param1.x - param1.tox * 2 + 5 * param1.scale,param1.y,param1,1);
                           }
                           else
                           {
                              if(this.Math_abs(param1.tox - param10) < 4)
                              {
                                 param1.tox = param10;
                              }
                              else
                              {
                                 param1.toy = (param11 + param1.toy * 9) * 0.1;
                              }
                              if(this.u < 0)
                              {
                                 if(param9)
                                 {
                                    param1.x = param4 + 1;
                                 }
                                 if(param9)
                                 {
                                    if(param1.tox < 0)
                                    {
                                       param1.tox = 0;
                                    }
                                 }
                                 param1.tox += this.Math_abs(param1.tox - param10) * 0.25;
                              }
                              else
                              {
                                 if(param9)
                                 {
                                    param1.x = param3 - 1;
                                 }
                                 if(param9)
                                 {
                                    if(param1.tox > 0)
                                    {
                                       param1.tox = 0;
                                    }
                                 }
                                 param1.tox -= this.Math_abs(param1.tox - param10) * 0.25;
                              }
                           }
                           if(param9)
                           {
                              if(this.u < 0)
                              {
                                 this.rx = 1;
                              }
                              else
                              {
                                 this.retux = 1;
                              }
                           }
                        }
                     }
                     else
                     {
                        if(this.v < 0)
                        {
                           if(this.Math_abs(param1.toy - param11) > 12)
                           {
                              param1.stability -= this.Math_abs(param1.toy - param11) * 0.2;
                           }
                        }
                        else if(this.Math_abs(param1.toy - param11) > 17 * this.fall_impact_height)
                        {
                           if(!this.fall_impact_stability)
                           {
                              param1.stability -= this.Math_abs(param1.toy - param11) * 0.05;
                           }
                        }
                        if(this.Math_abs(param1.toy - param11) * this.GLOBAL_FALL_SENSITIVITY_MULT > 17)
                        {
                           this.PlaySound(this.s_body_fall,param1.x,param1.y);
                           if(!this.MP_mode || this.MP_myid == param2 && !this.MP_spectator || !param1.isplayer)
                           {
                              this.effcolor = param2;
                              if(this.v < 0)
                              {
                                 this.FlowAt(param1.x - 20 + Math.random() * 40,param1.y - 80,0,-3 + Math.random() * 6,-3 + Math.random() * 6,5);
                              }
                              else
                              {
                                 this.FlowAt(param1.x - 20 + Math.random() * 40,param1.y - 10,0,-3 + Math.random() * 6,-3 + Math.random() * 6,5);
                              }
                              if(this.MP_mode && this.MP_myid == param2)
                              {
                                 this.MP_custom_events += ";gshot|" + param2 + "#" + this.r2(param1.x - 20 + Math.random() * 40) + "#" + this.r2(this.v < 0 ? param1.y - 80 : param1.y - 10) + "#" + this.r2(-3 + Math.random() * 6) + "#" + this.r2(-3 + Math.random() * 6) + "#" + 5 + "#" + -1 + "#2" + "#" + 0;
                              }
                              if(this.v > 0)
                              {
                                 if(this.MP_mode && (this.MP_type == 1 || this.MP_type == 3 || this.MP_type == 4))
                                 {
                                    param1.hp_legs -= this.Math_pow2(param1.toy - param11) * 0.05 * this.GLOBAL_FALL_DAMAGE_MULT * this.GLOBAL_FALL_DAMAGE_MULT_LIMBS;
                                    param1.hea -= this.Math_pow2(param1.toy - param11) * 0.1 * this.GLOBAL_FALL_DAMAGE_MULT;
                                 }
                                 else
                                 {
                                    param1.hp_legs -= this.Math_pow2(param1.toy - param11) * 0.1 * this.GLOBAL_FALL_DAMAGE_MULT * this.GLOBAL_FALL_DAMAGE_MULT_LIMBS;
                                    param1.hea -= this.Math_pow2(param1.toy - param11) * 0.2 * this.GLOBAL_FALL_DAMAGE_MULT;
                                 }
                              }
                              else if(this.MP_mode && (this.MP_type == 1 || this.MP_type == 3 || this.MP_type == 4))
                              {
                                 param1.hp_head -= this.Math_pow2(param1.toy - param11) * 0.05 * this.GLOBAL_FALL_DAMAGE_MULT * this.GLOBAL_FALL_DAMAGE_MULT_LIMBS;
                                 param1.hea -= this.Math_pow2(param1.toy - param11) * 0.1 * this.GLOBAL_FALL_DAMAGE_MULT;
                              }
                              else
                              {
                                 param1.hp_head -= this.Math_pow2(param1.toy - param11) * 0.1 * this.GLOBAL_FALL_DAMAGE_MULT * this.GLOBAL_FALL_DAMAGE_MULT_LIMBS;
                                 param1.hea -= this.Math_pow2(param1.toy - param11) * 0.2 * this.GLOBAL_FALL_DAMAGE_MULT;
                              }
                              param1.lastshot = "body";
                              param1.lastshotbygun = "wall";
                              if(param2 == this.MP_myid)
                              {
                                 this.HurtMyPlayer(0,this.v,this.Math_pow2(param1.toy - param11) * 0.1);
                              }
                           }
                           this.Hurt(param2);
                        }
                        if(param1.hea > 0)
                        {
                           if(!param1.stand)
                           {
                              param1.tox += (param10 / 6 - param1.tox / 6 / param1.scale) * this.thispulspeed * param1.scale;
                              if(param1.tox > param10 + 1.5 * this.thispulspeed * param1.scale)
                              {
                                 param1.tox -= 1.5 * this.thispulspeed * param1.scale;
                              }
                              else if(param1.tox < param10 - 1.5 * this.thispulspeed * param1.scale)
                              {
                                 param1.tox += 1.5 * this.thispulspeed * param1.scale;
                              }
                              else
                              {
                                 param1.tox = param10;
                              }
                           }
                           if(this.v < 0)
                           {
                              if(param9)
                              {
                                 if(param1.toy < 0)
                                 {
                                    param1.toy = 0;
                                 }
                              }
                              param1.toy += (this.Math_abs(param1.toy - param11) + param11) * 0.25;
                              this.ok = true;
                              if(param9)
                              {
                                 param1.y = param6 + 2;
                              }
                           }
                           else
                           {
                              if(param9)
                              {
                                 if(param11 < 0)
                                 {
                                    param1.toy = (param11 + param1.toy) * 0.5 + this.gravity;
                                 }
                                 else
                                 {
                                    param1.toy = param11;
                                 }
                              }
                              param1.stand = true;
                              if(this.retuy != 1)
                              {
                                 if(param9)
                                 {
                                    param1.y = param5 + 1;
                                 }
                              }
                           }
                           if(param9)
                           {
                              if(this.v < 0)
                              {
                                 this.retuy = 1;
                              }
                              else
                              {
                                 this.ry = 1;
                              }
                           }
                        }
                     }
                     if(this.DEBUG_MODE)
                     {
                        this.debug_screen.graphics.lineStyle(2,11206400);
                        this.debug_screen.graphics.moveTo(param1.x - this.PLAYER_WIDTH * param1.scale,param1.y - 82 * param1.scale);
                        this.debug_screen.graphics.lineTo(param1.x + this.PLAYER_WIDTH * param1.scale,param1.y - 82 * param1.scale);
                        this.debug_screen.graphics.lineTo(param1.x + this.PLAYER_WIDTH * param1.scale,param1.y - param1.sit * this.sitmax * param1.scale);
                        this.debug_screen.graphics.lineTo(param1.x - this.PLAYER_WIDTH * param1.scale,param1.y - param1.sit * this.sitmax * param1.scale);
                        this.debug_screen.graphics.lineTo(param1.x - this.PLAYER_WIDTH * param1.scale,param1.y - 82 * param1.scale);
                     }
                  }
               }
            }
         }
      }
      
      public function UpdateTeamColor(param1:MovieClip) : void
      {
         if(this.MP_myid != param1.idd)
         {
            if(this.mens[this.MP_myid] != undefined)
            {
               if(param1.team == this.mens[this.MP_myid].team)
               {
                  param1.nick_color = this.color_friendly;
               }
               else
               {
                  param1.nick_color = this.color_enemy;
               }
            }
         }
         else
         {
            param1.nick_color = this.color_player;
         }
         param1.gui.txt1.textColor = param1.nick_color;
      }
      
      public function SpawnPlayerImmediately(param1:MovieClip) : void
      {
         if(param1.notspawned)
         {
            param1.gotoAndStop(3);
            param1.gotoAndStop(2);
         }
         if(param1.info == undefined)
         {
            param1.custom_tag = "";
            param1.info_text = "";
            param1.gui.txt2.visible = false;
         }
         else
         {
            param1.info_text = param1.info.html;
            this.updateTxt2(param1);
         }
         if(this.MP_mode)
         {
            this.CheckIfPlayerInfoUpdateNeeded(param1);
         }
         param1.notspawned = false;
         param1.leg1.upper.gotoAndStop(param1.mdl_leg1_upper);
         this.UpdateTeamColor(param1);
         param1.gui.txt1.text = param1.nick;
         if(this.MP_mode)
         {
            if(!param1.isplayer)
            {
               param1.gui.visible = false;
            }
            else if(this.ANONYMOUS_MODE)
            {
               if(param1.idd == this.MP_myid)
               {
                  param1.gui.visible = true;
                  if(param1.hea > 0)
                  {
                     param1.gui.alpha = 1;
                  }
               }
            }
            else
            {
               param1.gui.visible = true;
               if(param1.hea > 0)
               {
                  param1.gui.alpha = 1;
               }
            }
         }
         else
         {
            if(param1.hp_gui_enabled != -1)
            {
               param1.gui.visible = param1.hp_gui_enabled;
               if(param1.hea > 0)
               {
                  param1.gui.alpha = 1;
               }
            }
            else if(param1.team != this.mens[this.MP_myid].team || !this.PLAZMA_GAME)
            {
               param1.gui.visible = false;
            }
            else
            {
               param1.gui.visible = true;
               if(param1.hea > 0)
               {
                  param1.gui.alpha = 1;
               }
            }
            this.i3 = -1;
            if(param1.char == 1)
            {
               this.i3 = 0;
            }
            if(param1.char == 3)
            {
               this.i3 = 1;
            }
            if(this.i3 != -1)
            {
               this.UpdatePlayerColorSP(param1,this.i3);
            }
         }
         if(param1.palette[0] != "-" || param1.palette[1] != "-" || param1.palette[2] != "-" || param1.palette[3] != "-")
         {
            this.UpdatePlayerColorMP(param1);
         }
         if(!param1.brk_legs)
         {
            param1.leg1.middle.gotoAndStop(param1.mdl_leg1_middle);
            param1.leg1.lower.gotoAndStop(param1.mdl_leg1_lower);
         }
         param1.leg2.upper.gotoAndStop(param1.mdl_leg2_upper);
         if(!param1.brk_legs)
         {
            param1.leg2.middle.gotoAndStop(param1.mdl_leg2_middle);
            param1.leg2.lower.gotoAndStop(param1.mdl_leg2_lower);
         }
         param1.arm1.upper.gotoAndStop(param1.mdl_arm1_upper);
         if(!param1.brk_arms)
         {
            param1.arm1.lower.gotoAndStop(param1.mdl_arm1_lower);
         }
         param1.arm2.upper.gotoAndStop(param1.mdl_arm2_upper);
         if(!param1.brk_arms)
         {
            param1.arm2.lower.gotoAndStop(param1.mdl_arm2_lower);
         }
         if(!param1.brk_body)
         {
            param1.toe.gotoAndStop(param1.mdl_toe);
            param1.body.gotoAndStop(param1.mdl_body);
            param1.toe.bloddy.visible = false;
         }
         if(!param1.brk_head)
         {
            param1.head.gotoAndStop(param1.mdl_head);
         }
         this.ChangedGun(param1.idd);
         this.RedrawPsi(param1.idd);
      }
      
      public function PhysHit(param1:int, param2:Number, param3:Number, param4:Number, param5:Number, param6:Number, param7:Number, param8:Object) : void
      {
         var _loc9_:Number = NaN;
         var _loc10_:Number = NaN;
         this.ok = false;
         this.cx = this.cy = 0;
         if(param8 == null)
         {
            _loc9_ = this.ax[param1] - this.atox[param1] * this.thispulspeed * this.extra_low_mult;
            _loc10_ = this.ay[param1] - this.atoy[param1] * this.thispulspeed * this.extra_low_mult;
         }
         else
         {
            _loc9_ = Number(param8.x);
            _loc10_ = Number(param8.y);
         }
         if(this.aof[param1] == this.MP_myid || this.aof[param1] == -1 || this.aactive[param1] == 1000)
         {
            if(this.atox[param1] > 0)
            {
               if(this.CheckCrossSimple(this.ax[param1],this.ay[param1],_loc9_,_loc10_,param2,param3,param2,param3 + param5))
               {
                  this.ax[param1] = this.retux;
                  this.ok = true;
                  this.cx = 1;
                  if(this.ay[param1] >= param3 + this.arad[param1] + 30)
                  {
                     if(this.ay[param1] <= param3 - this.arad[param1] + param5 - 30)
                     {
                        this.pres_left = true;
                        this.pres_ok = true;
                     }
                  }
               }
            }
            else if(this.CheckCrossSimple(this.ax[param1],this.ay[param1],_loc9_,_loc10_,param2 + param4,param3,param2 + param4,param3 + param5))
            {
               this.ax[param1] = this.retux;
               this.ok = true;
               this.cx = -1;
               if(this.ay[param1] >= param3 + this.arad[param1] + 30)
               {
                  if(this.ay[param1] <= param3 - this.arad[param1] + param5 - 30)
                  {
                     this.pres_right = true;
                     this.pres_ok = true;
                  }
               }
            }
            if(this.atoy[param1] > 0)
            {
               if(this.CheckCrossSimple(this.ax[param1],this.ay[param1],_loc9_,_loc10_,param2,param3,param2 + param4,param3))
               {
                  this.ay[param1] = this.retuy;
                  this.ok = true;
                  this.cy = 1;
                  if(this.ax[param1] >= param2 + this.arad[param1] + 30)
                  {
                     if(this.ax[param1] <= param2 - this.arad[param1] + param4 - 30)
                     {
                        this.pres_top = true;
                        this.pres_ok = true;
                     }
                  }
               }
            }
            else if(this.CheckCrossSimple(this.ax[param1],this.ay[param1],_loc9_,_loc10_,param2,param3 + param5,param2 + param4,param3 + param5))
            {
               this.ay[param1] = this.retuy;
               this.ok = true;
               this.cy = -1;
               if(this.ax[param1] >= param2 + this.arad[param1] + 30)
               {
                  if(this.ax[param1] <= param2 - this.arad[param1] + param4 - 30)
                  {
                     this.pres_bottom = true;
                     this.pres_ok = true;
                  }
               }
            }
         }
         if(!this.ok)
         {
            if(this.ax[param1] >= param2 - this.arad[param1])
            {
               if(this.ax[param1] <= param2 + this.arad[param1] + param4)
               {
                  if(this.ay[param1] >= param3 - this.arad[param1] - 1)
                  {
                     if(this.ay[param1] <= param3 + this.arad[param1] + param5)
                     {
                        this.ok = true;
                     }
                  }
               }
            }
         }
         if(this.ok)
         {
            this.xx = 0;
            if(this.TracePointNoRagdolls(this.ax[param1] - this.atox[param1] * this.thispulspeed,this.ay[param1] - this.atoy[param1] * this.thispulspeed))
            {
               this.xx = 1;
               if(this.thispulspeed > 1)
               {
                  this.xx *= this.thispulspeed;
               }
            }
            if(this.cx == 0 && this.cy == 0)
            {
               if(param5 < param4)
               {
                  this.cx = Math.max(param2 + param5 / 2,Math.min(param2 + param4 - param5 / 2,this.ax[param1] - this.atox[param1] * this.xx));
                  this.cy = param3 + param5 / 2;
               }
               else
               {
                  this.cy = Math.max(param3 + param4 / 2,Math.min(param3 + param5 - param4 / 2,this.ay[param1] - this.atoy[param1] * this.xx));
                  this.cx = param2 + param4 / 2;
               }
               this.cx = this.cx - this.ax[param1] + this.atox[param1] * this.xx;
               this.cy = this.cy - this.ay[param1] + this.atoy[param1] * this.xx;
            }
            if(this.Math_abs(this.cx) < this.Math_abs(this.cy))
            {
               this.xx = this.Math_abs(this.atox[param1] - param6);
               this.yy = this.Math_abs(this.atoy[param1] - param7);
            }
            else
            {
               this.xx = this.Math_abs(this.atoy[param1] - param7);
               this.yy = this.Math_abs(this.atox[param1] - param6);
            }
            if(this.yy > 14)
            {
               this.PAlert(this.ax[param1] - this.atox[param1],this.ay[param1] - this.atoy[param1]);
            }
            if(this.amat[param1] == 0)
            {
               if(this.acollided[param1] == 0)
               {
                  this.acollided[param1] = 1;
                  if(this.yy > 7)
                  {
                     this.i3 = int(Math.random() * 4);
                     if(this.mens[this.aof[param1]].armored == 2)
                     {
                        if(this.i3 == 0)
                        {
                           this.PlaySound(this.s_robo_step1,this.ax[param1],this.ay[param1]);
                        }
                        else if(this.i3 == 1)
                        {
                           this.PlaySound(this.s_robo_step2,this.ax[param1],this.ay[param1]);
                        }
                        else if(this.i3 == 2)
                        {
                           this.PlaySound(this.s_robo_step3,this.ax[param1],this.ay[param1]);
                        }
                        else if(this.i3 == 3)
                        {
                           this.PlaySound(this.s_robo_step4,this.ax[param1],this.ay[param1]);
                        }
                     }
                     else if(this.i3 == 0)
                     {
                        this.PlaySound(this.s_step1,this.ax[param1],this.ay[param1]);
                     }
                     else if(this.i3 == 1)
                     {
                        this.PlaySound(this.s_step2,this.ax[param1],this.ay[param1]);
                     }
                     else if(this.i3 == 2)
                     {
                        this.PlaySound(this.s_step3,this.ax[param1],this.ay[param1]);
                     }
                     else if(this.i3 == 3)
                     {
                        this.PlaySound(this.s_step4,this.ax[param1],this.ay[param1]);
                     }
                  }
               }
            }
            else if(this.amat[param1] == 1)
            {
               if(this.acollided[param1] == 0)
               {
                  this.acollided[param1] = 1;
                  if(this.mens[this.aof[param1]].armored == 2)
                  {
                     if(this.xx > this.yy + 2)
                     {
                        this.PlaySound(this.s_metal0,this.ax[param1],this.ay[param1]);
                     }
                     else if(this.yy > 4)
                     {
                        if(this.yy < 6)
                        {
                           this.PlaySound(this.s_metal1,this.ax[param1],this.ay[param1]);
                        }
                        else if(this.yy < 8)
                        {
                           this.PlaySound(this.s_metal2,this.ax[param1],this.ay[param1]);
                        }
                        else
                        {
                           this.PlaySound(this.s_metal3,this.ax[param1],this.ay[param1]);
                        }
                     }
                  }
                  else if(this.xx > this.yy + 2)
                  {
                     this.PlaySound(this.s_body0,this.ax[param1],this.ay[param1]);
                  }
                  else if(this.yy > 4)
                  {
                     if(this.yy < 6)
                     {
                        this.PlaySound(this.s_body1,this.ax[param1],this.ay[param1]);
                     }
                     else if(this.yy < 8)
                     {
                        this.PlaySound(this.s_body2,this.ax[param1],this.ay[param1]);
                     }
                     else
                     {
                        this.PlaySound(this.s_body3,this.ax[param1],this.ay[param1]);
                     }
                  }
               }
            }
            else if(this.amat[param1] == 2)
            {
               if(this.acollided[param1] == 0)
               {
                  this.acollided[param1] = 1;
                  if(this.yy > 4)
                  {
                     if(this.yy < 6)
                     {
                        this.PlaySound(this.s_wea1,this.ax[param1],this.ay[param1]);
                     }
                     else
                     {
                        this.PlaySound(this.s_wea2,this.ax[param1],this.ay[param1]);
                     }
                  }
               }
            }
            else if(this.amat[param1] == 3)
            {
               if(this.yy > 10)
               {
                  if(this.barrels[-100 - this.aof[param1]].hea > 0)
                  {
                     this.barrels[-100 - this.aof[param1]].hea -= this.Math_abs(this.atoy[param1]) * 1;
                     this.HurtBarrel(-100 - this.aof[param1]);
                  }
               }
            }
            else if(this.amat[param1] == 4)
            {
               if(this.acollided[param1] == 0)
               {
                  this.acollided[param1] = 1;
               }
            }
            else if(this.amat[param1] == 5 || this.amat[param1] == 6 || this.amat[param1] == 7)
            {
               if(this.acollided[param1] == 0)
               {
                  this.acollided[param1] = 1;
                  if(this.xx > this.yy + 2)
                  {
                     if(this.amat[param1] == 5)
                     {
                        this.PlaySound(this.s_steel_hor,this.ax[param1],this.ay[param1]);
                        this.Effect(this.ax[param1],this.ay[param1],8,0,0);
                     }
                  }
                  else if(this.yy > 3)
                  {
                     if(this.amat[param1] == 5)
                     {
                        if(this.yy < 6)
                        {
                           this.PlaySound(this.s_steel_low,this.ax[param1],this.ay[param1]);
                        }
                        else if(this.yy < 14)
                        {
                           this.PlaySound(this.s_steel_med,this.ax[param1],this.ay[param1]);
                        }
                        else
                        {
                           this.PlaySound(this.s_steel_hard,this.ax[param1],this.ay[param1]);
                        }
                     }
                     else if(this.amat[param1] == 6)
                     {
                        if(this.yy > 8 && this.atoy[param1] > 0)
                        {
                           this.PlaySound(this.s_walker_step,this.ax[param1],this.ay[param1]);
                           this.atoy[param1] = 1;
                        }
                     }
                     else if(this.yy > 11)
                     {
                        if(Math.random() > 0.5)
                        {
                           this.PlaySound(this.s_capsule_hit1,this.ax[param1],this.ay[param1]);
                        }
                        else
                        {
                           this.PlaySound(this.s_capsule_hit2,this.ax[param1],this.ay[param1]);
                        }
                     }
                  }
                  if(this.yy > 14)
                  {
                     this.Effect(this.ax[param1],this.ay[param1],8,0,0);
                     this.Effect(this.ax[param1],this.ay[param1],8,0,0);
                     this.Effect(this.ax[param1],this.ay[param1],8,0,0);
                     this.Effect(this.ax[param1],this.ay[param1],8,0,0);
                     this.Effect(this.ax[param1],this.ay[param1],8,0,0);
                     if(this.amat[param1] != 6)
                     {
                        this.vehicles[-this.aof[param1] - 200].hea -= this.yy * this.yy / 13;
                     }
                  }
               }
            }
            else if(this.amat[param1] == 8)
            {
               if(this.yy > 5)
               {
                  if(this.aof[param1] != -1 && this.puls[-this.aof[param1] - 300].currentFrame == 52)
                  {
                     this.PlaySound(this.s_grenade_wet,this.ax[param1],this.ay[param1]);
                  }
                  else
                  {
                     this.PlaySound(this.s_grenade,this.ax[param1],this.ay[param1]);
                  }
               }
               if(this.aof[param1] != -1)
               {
                  if(this.puls[-this.aof[param1] - 300].currentFrame == 42 || this.puls[-this.aof[param1] - 300].currentFrame == 49 || this.puls[-this.aof[param1] - 300].currentFrame == 55)
                  {
                     this.puls[-this.aof[param1] - 300].life = this.puls[-this.aof[param1] - 300].maxbulletlife + 1;
                     this.atox[param1] = 0;
                     this.atoy[param1] = 0;
                  }
                  if(this.puls[-this.aof[param1] - 300].currentFrame == 45 || this.puls[-this.aof[param1] - 300].currentFrame == 52)
                  {
                     this.atox[param1] = 0;
                     this.atoy[param1] = 0;
                     if(this.Math_abs(this.cx) > this.Math_abs(this.cy))
                     {
                        this.ax[param1] += this.cx > 0 ? 1 : -1;
                     }
                     else
                     {
                        this.ay[param1] += this.cy > 0 ? 1 : -1;
                     }
                  }
               }
            }
            else if(this.amat[param1] == 9)
            {
               if(this.acollided[param1] == 0)
               {
                  this.acollided[param1] = 1;
                  if(this.xx > this.yy + 2)
                  {
                     this.PlaySound(this.s_box_hor,this.ax[param1],this.ay[param1]);
                  }
                  else if(this.yy > 3)
                  {
                     if(this.yy < 6)
                     {
                        this.PlaySound(this.s_box_low,this.ax[param1],this.ay[param1]);
                     }
                     else if(this.yy < 8)
                     {
                        this.PlaySound(this.s_box_med,this.ax[param1],this.ay[param1]);
                     }
                     else
                     {
                        this.PlaySound(this.s_box_hard,this.ax[param1],this.ay[param1]);
                     }
                  }
                  if(this.yy > 12)
                  {
                     this.vehicles[-this.aof[param1] - 200].hea -= this.yy * this.yy / 13;
                  }
               }
            }
            else if(this.amat[param1] == 10)
            {
               if(this.yy > 5)
               {
                  this.PlaySound(this.s_robo_bug_hit,this.ax[param1],this.ay[param1]);
               }
            }
            if(this.amat[param1] == 1 || this.amat[param1] == 0)
            {
               if(this.mens[this.aof[param1]].stability < 0 || this.mens[this.aof[param1]].hea <= 0)
               {
                  if(this.yy * this.GLOBAL_FALL_SENSITIVITY_MULT > 18)
                  {
                     this.PlaySound(this.s_body_fall,this.ax[param1],this.ay[param1]);
                     if(!this.MP_mode || this.MP_myid == this.aof[param1] && !this.MP_spectator || !this.mens[this.aof[param1]].isplayer)
                     {
                        if(this.MP_mode && (this.MP_type == 1 || this.MP_type == 3 || this.MP_type == 4))
                        {
                           this.mens[this.aof[param1]].hea -= this.yy * this.yy * 0.05 * this.GLOBAL_FALL_DAMAGE_MULT;
                        }
                        else
                        {
                           this.mens[this.aof[param1]].hea -= this.yy * this.yy * 0.1 * this.GLOBAL_FALL_DAMAGE_MULT;
                        }
                        if(param1 == this.mens[this.aof[param1]].b_leg1 || param1 == this.mens[this.aof[param1]].b_leg2)
                        {
                           this.mens[this.aof[param1]].hp_legs -= this.yy * this.yy * 0.05 * this.GLOBAL_FALL_DAMAGE_MULT * this.GLOBAL_FALL_DAMAGE_MULT_LIMBS;
                        }
                        else if(param1 == this.mens[this.aof[param1]].b_body || param1 == this.mens[this.aof[param1]].b_toe)
                        {
                           this.mens[this.aof[param1]].hp_body -= this.yy * this.yy * 0.05 * this.GLOBAL_FALL_DAMAGE_MULT * this.GLOBAL_FALL_DAMAGE_MULT_LIMBS;
                        }
                        else if(param1 == this.mens[this.aof[param1]].b_head_end || param1 == this.mens[this.aof[param1]].b_head_start)
                        {
                           this.mens[this.aof[param1]].hp_head -= this.yy * this.yy * 0.05 * this.GLOBAL_FALL_DAMAGE_MULT * this.GLOBAL_FALL_DAMAGE_MULT_LIMBS;
                           if(this.MP_mode && (this.MP_type == 1 || this.MP_type == 3 || this.MP_type == 4))
                           {
                              this.mens[this.aof[param1]].hea -= this.yy * this.yy * 0.1 * this.GLOBAL_FALL_DAMAGE_MULT;
                           }
                           else
                           {
                              this.mens[this.aof[param1]].hea -= this.yy * this.yy * 0.2 * this.GLOBAL_FALL_DAMAGE_MULT;
                           }
                        }
                        else if(param1 == this.mens[this.aof[param1]].b_arm1 || param1 == this.mens[this.aof[param1]].b_arm2)
                        {
                           this.mens[this.aof[param1]].hp_arms -= this.yy * this.yy * 0.05 * this.GLOBAL_FALL_DAMAGE_MULT * this.GLOBAL_FALL_DAMAGE_MULT_LIMBS;
                        }
                        this.mens[this.aof[param1]].lastshot = "body";
                        this.mens[this.aof[param1]].lastshotbygun = "wall";
                        this.effcolor = this.aof[param1];
                        this.FlowAt(this.ax[param1],this.ay[param1],0,-this.atox[param1],-this.atoy[param1],3);
                        if(this.MP_mode && this.MP_myid == this.aof[param1])
                        {
                           this.MP_custom_events += ";gshot|" + this.aof[param1] + "#" + this.r2(this.ax[param1]) + "#" + this.r2(this.ay[param1]) + "#" + this.r2(-this.atox[param1]) + "#" + this.r2(-this.atoy[param1]) + "#" + 3 + "#" + -1 + "#2" + "#" + 0;
                        }
                        this.Hurt(this.aof[param1]);
                        if(this.aof[param1] == this.MP_myid)
                        {
                           this.HurtMyPlayer(this.atox[param1],this.atoy[param1],this.yy * this.yy * 0.05 * this.GLOBAL_FALL_DAMAGE_MULT);
                        }
                     }
                  }
               }
            }
            if(this.Math_abs(this.cx) > this.Math_abs(this.cy))
            {
               if(this.around[param1])
               {
                  this.atoy[param1] *= Math.pow(0.95,this.thispulspeed);
               }
               else
               {
                  this.atoy[param1] = (param7 + this.atoy[param1] * 5) / 6;
                  if(this.atoy[param1] > param7 + this.gravity * 1)
                  {
                     this.atoy[param1] -= this.gravity * 1;
                  }
                  else if(this.atoy[param1] < param7 - this.gravity * 1)
                  {
                     this.atoy[param1] += this.gravity * 1;
                  }
                  else
                  {
                     this.atoy[param1] = param7;
                  }
               }
               if(this.cx < 0)
               {
                  this.ax[param1] = param2 + param4 + this.arad[param1];
                  this.lax[param1] = param2 + param4 + this.arad[param1];
                  this.atox[param1] = this.Math_abs(this.atox[param1]) * 0.5;
                  if(this.ay[param1] >= param3 + this.arad[param1] + 30)
                  {
                     if(this.ay[param1] <= param3 - this.arad[param1] + param5 - 30)
                     {
                        this.pres_right = true;
                        this.pres_ok = true;
                     }
                  }
               }
               else
               {
                  this.ax[param1] = param2 - this.arad[param1];
                  this.lax[param1] = param2 - this.arad[param1];
                  this.atox[param1] = -this.Math_abs(this.atox[param1]) * 0.5;
                  if(this.ay[param1] >= param3 + this.arad[param1] + 30)
                  {
                     if(this.ay[param1] <= param3 - this.arad[param1] + param5 - 30)
                     {
                        this.pres_left = true;
                        this.pres_ok = true;
                     }
                  }
               }
            }
            else
            {
               if(this.around[param1])
               {
                  this.atox[param1] *= Math.pow(0.95,this.thispulspeed);
               }
               else
               {
                  this.atox[param1] = (param6 + this.atox[param1] * 5) / 6;
                  if(this.amat[param1] == 6)
                  {
                     this.atox[param1] = param6;
                  }
                  if(this.atox[param1] > param6 + this.gravity * 1)
                  {
                     this.atox[param1] -= this.gravity * 1;
                  }
                  else if(this.atox[param1] < param6 - this.gravity * 1)
                  {
                     this.atox[param1] += this.gravity * 1;
                  }
                  else
                  {
                     this.atox[param1] = param6;
                  }
               }
               if(this.cy < 0)
               {
                  this.ay[param1] = param3 + this.arad[param1] + param5;
                  this.lay[param1] = param3 + this.arad[param1] + param5;
                  this.atoy[param1] = param7 + this.Math_abs(this.atoy[param1] - param7) * 0.5;
                  if(this.ax[param1] >= param2 + this.arad[param1] + 30)
                  {
                     if(this.ax[param1] <= param2 - this.arad[param1] + param4 - 30)
                     {
                        this.pres_bottom = true;
                        this.pres_ok = true;
                     }
                  }
               }
               else
               {
                  if(this.amat[param1] == 6)
                  {
                     this.ay[param1] = param3 - this.arad[param1] + 2;
                     this.lay[param1] = param3 - this.arad[param1] + 2;
                     if(this.atoy[param1] > 0)
                     {
                        this.atoy[param1] = 1;
                     }
                  }
                  else
                  {
                     this.ay[param1] = param3 - this.arad[param1];
                     this.lay[param1] = param3 - this.arad[param1];
                     this.atoy[param1] = param7 - this.Math_abs(this.atoy[param1] - param7) * 0.5;
                  }
                  if(this.ax[param1] >= param2 + this.arad[param1] + 30)
                  {
                     if(this.ax[param1] <= param2 - this.arad[param1] + param4 - 30)
                     {
                        this.pres_top = true;
                        this.pres_ok = true;
                     }
                  }
               }
            }
         }
      }
      
      public function MeasureStart(param1:uint) : void
      {
      }
      
      public function MeasureStop(param1:uint) : void
      {
      }
      
      public function MeasuresReset() : void
      {
      }
      
      public function MeasuresMaybePrint() : void
      {
         var _loc1_:uint = 0;
      }
      
      public function Physics() : void
      {
         var _loc1_:Number = NaN;
         var _loc2_:Object = null;
         if(this.GET_LITE_PHYS())
         {
            if(this.LITE_PHYS_tim)
            {
               this.LITE_PHYS_from = 0;
            }
            else
            {
               this.LITE_PHYS_from = 1;
            }
            this.extra_low_mult = 2;
         }
         else
         {
            this.LITE_PHYS_from = 0;
            this.extra_low_mult = 1;
         }
         this.i = 0;
         while(this.i < this.atotal)
         {
            if(this.GET_LITE_PHYS() && Math.ceil(this.aof[this.i] / 2 - Math.floor(this.aof[this.i] / 2)) == this.LITE_PHYS_from)
            {
               this.MeasureStart(0);
               if(this.aio[this.i] == true)
               {
                  if(!this.MP_mode || this.TraceLineF_nopushers(this.ax[this.i],this.ay[this.i],this.lax[this.i] + this.atox[this.i],this.lay[this.i] + this.atoy[this.i]))
                  {
                     this.ax[this.i] = this.lax[this.i] + this.atox[this.i] * this.GSPEED;
                     this.ay[this.i] = this.lay[this.i] + this.atoy[this.i] * this.GSPEED;
                  }
               }
               this.MeasureStop(0);
            }
            else if(this.aio[this.i] != -1)
            {
               this.MeasureStart(1);
               if(this.aof[this.i] == this.MP_myid)
               {
                  this.thispulspeed = this.GSPEED2;
               }
               else
               {
                  this.thispulspeed = this.GSPEED;
               }
               if(this.GET_LITE_PHYS())
               {
                  this.thispulspeed *= 2;
                  this.lax[this.i] = this.ax[this.i];
                  this.lay[this.i] = this.ay[this.i];
               }
               if(this.aactive[this.i] == 1000 || Boolean(this.aactive[this.aof[this.i]]))
               {
                  this.MeasureStart(4);
                  if(this.RAGDOLL_COLLIDE && (this.MP_gamestate != 2 || !this.MP_mode))
                  {
                     if(this.arad[this.i] > 1)
                     {
                        if(this.aio[this.i] != -1)
                        {
                           if(this.amat[this.i] != -1)
                           {
                              this.i2 = this.i + 1;
                              while(this.i2 < this.atotal)
                              {
                                 this.MeasureStart(2);
                                 _loc1_ = this.arad[this.i] + this.arad[this.i2];
                                 if(this.ax[this.i] > this.ax[this.i2] - _loc1_)
                                 {
                                    if(this.ax[this.i] < this.ax[this.i2] + _loc1_)
                                    {
                                       if(this.ay[this.i] > this.ay[this.i2] - _loc1_)
                                       {
                                          if(this.ay[this.i] < this.ay[this.i2] + _loc1_)
                                          {
                                             if(this.aof[this.i] != this.aof[this.i2])
                                             {
                                                if(this.aio[this.i2] == true || this.aio[this.i] == true)
                                                {
                                                   if(Boolean(this.aactive[this.aof[this.i2]]) || this.aactive[this.i2] == 1000)
                                                   {
                                                      if(this.aio[this.i2] != -1)
                                                      {
                                                         if(this.amat[this.i2] != -1)
                                                         {
                                                            if(this.arad[this.i2] > 1)
                                                            {
                                                               if(this.aof[this.i] < 0 || this.mens[this.aof[this.i]].incar == -1)
                                                               {
                                                                  if(this.aof[this.i2] < 0 || this.mens[this.aof[this.i2]].incar == -1)
                                                                  {
                                                                     this.MeasureStop(2);
                                                                     this.xx = this.Dist2D(this.ax[this.i],this.ay[this.i],this.ax[this.i2],this.ay[this.i2]);
                                                                     if(this.xx > 1)
                                                                     {
                                                                        if(this.xx < _loc1_)
                                                                        {
                                                                           this.MeasureStart(3);
                                                                           this.cx = (this.ax[this.i] + this.ax[this.i2]) * 0.5;
                                                                           this.cy = (this.ay[this.i] + this.ay[this.i2]) * 0.5;
                                                                           this.offset_balance = this.arad[this.i2] / (this.arad[this.i] + this.arad[this.i2]);
                                                                           this.temp_coef = 20 / this.xx * (this.GSPEED < 2 ? this.GSPEED : 2) * (this.arad[this.i] + this.arad[this.i2] - this.xx) / (this.arad[this.i] + this.arad[this.i2]);
                                                                           this.yy = this.offset_balance * this.temp_coef;
                                                                           this.atox[this.i] += (this.ax[this.i] - this.cx) * this.yy;
                                                                           this.atoy[this.i] += (this.ay[this.i] - this.cy) * this.yy;
                                                                           this.ax[this.i] += (this.ax[this.i] - this.cx) * this.yy;
                                                                           this.ay[this.i] += (this.ay[this.i] - this.cy) * this.yy;
                                                                           this.yy = (1 - this.offset_balance) * this.temp_coef;
                                                                           this.atox[this.i2] += (this.ax[this.i2] - this.cx) * this.yy;
                                                                           this.atoy[this.i2] += (this.ay[this.i2] - this.cy) * this.yy;
                                                                           this.ax[this.i2] += (this.ax[this.i2] - this.cx) * this.yy;
                                                                           this.ay[this.i2] += (this.ay[this.i2] - this.cy) * this.yy;
                                                                           this.cx = (this.atox[this.i] + this.atox[this.i2]) * 0.5;
                                                                           this.cy = (this.atoy[this.i] + this.atoy[this.i2]) * 0.5;
                                                                           this.atox[this.i] = (this.atox[this.i] * 3 + this.cx) * 0.25;
                                                                           this.atoy[this.i] = (this.atoy[this.i] * 3 + this.cy) * 0.25;
                                                                           this.atox[this.i2] = (this.atox[this.i2] * 3 + this.cx) * 0.25;
                                                                           this.atoy[this.i2] = (this.atoy[this.i2] * 3 + this.cy) * 0.25;
                                                                           if(this.arad[this.i2] > 25 && this.arad[this.i] > 25)
                                                                           {
                                                                              this.acollided[this.i] = 1;
                                                                              this.acollided[this.i2] = 1;
                                                                              if(this.amat[this.i] == 6)
                                                                              {
                                                                                 this.atoy[this.i] -= 0.2;
                                                                              }
                                                                              if(this.amat[this.i2] == 6)
                                                                              {
                                                                                 this.atoy[this.i2] -= 0.2;
                                                                              }
                                                                           }
                                                                           if(this.VectorDist2D(this.atox[this.i],this.atoy[this.i]) + this.VectorDist2D(this.atox[this.i2],this.atoy[this.i2]) > 2 * (this.GSPEED > 1 ? this.GSPEED : 1) * (this.GET_LITE_PHYS() ? 2 : 1))
                                                                           {
                                                                              this.WakeUpAtom(this.i2);
                                                                              this.WakeUpAtom(this.i);
                                                                           }
                                                                           else
                                                                           {
                                                                              this.ForceAtomSleep(this.i2);
                                                                              this.ForceAtomSleep(this.i);
                                                                           }
                                                                           this.MeasureStop(3);
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                                 ++this.i2;
                              }
                           }
                        }
                     }
                  }
                  this.MeasureStop(4);
                  if(this.aio[this.i] == true)
                  {
                     this.MeasureStart(5);
                     this.ax[this.i] += this.atox[this.i] * this.thispulspeed;
                     this.ay[this.i] += this.atoy[this.i] * this.thispulspeed;
                     this.i2 = 0;
                     while(this.i2 < this.pushstotal)
                     {
                        if(this.ax[this.i] > this.pushx[this.i2])
                        {
                           if(this.ax[this.i] < this.pushw[this.i2])
                           {
                              if(this.ay[this.i] > this.pushy[this.i2])
                              {
                                 if(this.ay[this.i] < this.pushh[this.i2])
                                 {
                                    this.atox[this.i] += this.pushtox[this.i2] * this.thispulspeed;
                                    this.atoy[this.i] += this.pushtoy[this.i2] * this.thispulspeed;
                                 }
                              }
                           }
                        }
                        ++this.i2;
                     }
                     if(this.ay[this.i] > this.g_maxy)
                     {
                        this.atox[this.i] *= 0.5;
                        this.atoy[this.i] *= 0.5;
                        this.atoy[this.i] -= this.gravity * 2;
                     }
                     this.xx = this.VectorDist2D(this.atox[this.i],this.atoy[this.i]);
                     if(this.ainwater[this.i])
                     {
                        this.xx *= 2;
                     }
                     if(this.GSPEED > 1)
                     {
                        this.xx /= this.GSPEED;
                     }
                     if(this.GET_LITE_PHYS())
                     {
                        this.xx /= 2;
                     }
                     if(this.xx < this.gravity * 2.5)
                     {
                        this.atim[this.i] += this.GSPEED;
                        if(this.atim[this.i] > 10)
                        {
                           this.ForceAtomSleep(this.i);
                        }
                     }
                     else if(this.ax[this.i] > this.render_minX && this.ax[this.i] < this.render_maxX && this.ay[this.i] > this.render_minY && this.ay[this.i] < this.render_maxY)
                     {
                        this.atim[this.i] = 0;
                     }
                     else if(this.xx < this.gravity * 3)
                     {
                        this.atim[this.i] += this.GSPEED;
                        if(this.atim[this.i] > 20)
                        {
                           this.ForceAtomSleep(this.i);
                        }
                     }
                     if(this.acollided[this.i] == 1)
                     {
                        this.acollided[this.i] = 2;
                     }
                     else
                     {
                        this.acollided[this.i] = 0;
                     }
                     this.ok = false;
                     this.i2 = 0;
                     while(this.i2 < this.watertotal && !this.ok)
                     {
                        if(this.ax[this.i] > this.wax[this.i2])
                        {
                           if(this.ax[this.i] < this.wax[this.i2] + this.waw[this.i2])
                           {
                              if(this.ay[this.i] > this.way[this.i2])
                              {
                                 if(this.ay[this.i] < this.way[this.i2] + this.wah[this.i2])
                                 {
                                    this.ok = true;
                                    this.u = this.way[this.i2];
                                    this.ainwater_shape[this.i] = this.i2;
                                 }
                              }
                           }
                        }
                        ++this.i2;
                     }
                     if(this.ok)
                     {
                        if(!this.ainwater[this.i])
                        {
                           if(this.wa_friction[this.ainwater_shape[this.i]])
                           {
                              if(this.xx > 4)
                              {
                                 this.Effect(this.ax[this.i],this.u,3,0,this.atoy[this.i]);
                              }
                           }
                           this.ainwater[this.i] = true;
                        }
                        if(this.wa_friction[this.ainwater_shape[this.i]])
                        {
                           if(this.aof[this.i] >= 0)
                           {
                              if(this.mens[this.aof[this.i]].hea > 0)
                              {
                                 this.atoy[this.i] -= this.gravity * this.thispulspeed;
                              }
                              else
                              {
                                 this.atoy[this.i] -= this.gravity * 1.5 * this.thispulspeed;
                              }
                           }
                           else
                           {
                              this.atoy[this.i] -= this.gravity * 0.5 * this.thispulspeed;
                           }
                           if(this.amat[this.i] == 4 || this.amat[this.i] == 5)
                           {
                              this.atoy[this.i] -= this.gravity * this.thispulspeed;
                           }
                           this.atox[this.i] *= Math.pow(0.9,this.thispulspeed);
                           this.atoy[this.i] *= Math.pow(0.9,this.thispulspeed);
                        }
                        else
                        {
                           this.atoy[this.i] -= this.gravity * this.thispulspeed;
                        }
                     }
                     else if(this.ainwater[this.i])
                     {
                        if(this.wa_friction[this.ainwater_shape[this.i]])
                        {
                           if(this.xx > 4)
                           {
                              this.Effect(this.ax[this.i],this.ay[this.i],3,0,this.atoy[this.i]);
                           }
                        }
                        this.ainwater[this.i] = false;
                     }
                     if(this.aof[this.i] >= 0 && this.mens[this.aof[this.i]].incar == -1)
                     {
                        if(this.ablood[this.i] > 0)
                        {
                           if(this.ablood[this.i] > 10)
                           {
                              this.ablood[this.i] = 10;
                           }
                           else if(Boolean(this.mens[this.aof[this.i]].dead) || !this.mens[this.aof[this.i]].dying)
                           {
                              this.ablood[this.i] -= 0.2 * this.thispulspeed;
                           }
                           if(Math.random() > 0.8)
                           {
                              if(this.mens[this.aof[this.i]].armored < 2)
                              {
                                 this.effcolor = this.aof[this.i];
                                 this.FlowAt(this.ax[this.i],this.ay[this.i],0,this.atox[this.i],this.atoy[this.i],1);
                              }
                              else
                              {
                                 this.Effect(this.ax[this.i],this.ay[this.i],8,0,-2);
                              }
                           }
                        }
                     }
                     this.pres_ok = false;
                     this.pres_left = this.pres_right = this.pres_top = this.pres_bottom = false;
                     this.near_atom = this.GetNearBoxBSP_at(this.ax[this.i],this.ay[this.i]);
                     this.f_ok = true;
                     this.f_min = this.gravity * this.thispulspeed;
                     this.MeasureStop(5);
                     this.MeasureStart(6);
                     for each(this.i2 in this.near_atom)
                     {
                        if(this.ax[this.i] >= this.boxx[this.i2] && this.ax[this.i] <= this.boxx[this.i2] + this.boxw[this.i2] && this.ay[this.i] + this.arad[this.i] + this.thispulspeed >= this.boxy[this.i2] && this.ay[this.i] <= this.boxy[this.i2] + this.boxh[this.i2])
                        {
                           this.f_ok = false;
                           this.f_min = Math.min(this.boxy[this.i2] - (this.ay[this.i] + this.arad[this.i]),this.f_min);
                           break;
                        }
                     }
                     if(this.f_ok)
                     {
                        this.atoy[this.i] += this.f_min;
                     }
                     this.MeasureStop(6);
                     this.MeasureStart(7);
                     _loc2_ = this.GetAtomOriginalPosition(this.i);
                     if(this.amat[this.i] != 1 && this.amat[this.i] != 0 || (this.amat[this.i] == 1 || this.amat[this.i] == 0) && this.mens[this.aof[this.i]].incar == -1)
                     {
                        for each(this.i2 in this.near_atom)
                        {
                           this.PhysHit(this.i,this.boxx[this.i2],this.boxy[this.i2],this.boxw[this.i2],this.boxh[this.i2],0,0,_loc2_);
                        }
                        this.i2 = 0;
                        while(this.i2 < this.doorstotal)
                        {
                           this.PhysHit(this.i,this.doors[this.i2].x,this.doors[this.i2].y,this.doors[this.i2].w,this.doors[this.i2].h,this.doors[this.i2].tox,this.doors[this.i2].toy,_loc2_);
                           ++this.i2;
                        }
                     }
                     this.MeasureStop(7);
                     this.MeasureStart(8);
                     if(this.pres_ok)
                     {
                        if(this.aof[this.i] >= 0 && this.aof[this.i] < 100)
                        {
                           if(this.mens[this.aof[this.i]].io)
                           {
                              this.mc = this.mens[this.aof[this.i]];
                              if(!this.MP_mode || !this.mc.isplayer || this.aof[this.i] == this.MP_myid)
                              {
                                 if(this.mc.stability <= 0)
                                 {
                                    if(this.pres_left && this.pres_right || this.pres_top && this.pres_bottom)
                                    {
                                       this.mc.stability = Math.min(this.mc.stability,-0.1);
                                       if(this.mc.pressure > 10)
                                       {
                                          if(this.i == this.mc.b_body || this.i == this.mc.b_toe)
                                          {
                                             this.mc.hp_body = 0;
                                             this.mc.hea = 0;
                                             this.Hurt(this.aof[this.i]);
                                          }
                                          if(Boolean(this.mc.dying) || Boolean(this.mc.dead))
                                          {
                                             if(this.i == this.mc.b_leg1 || this.i == this.mc.b_leg2)
                                             {
                                                this.mc.hp_legs = 0;
                                                this.Hurt(this.aof[this.i]);
                                             }
                                             if(this.i == this.mc.b_head_end)
                                             {
                                                this.mc.hp_head = 0;
                                                this.Hurt(this.aof[this.i]);
                                             }
                                             if(this.i == this.mc.b_arm1 || this.i == this.mc.b_arm2)
                                             {
                                                this.mc.hp_arms = 0;
                                                this.Hurt(this.aof[this.i]);
                                             }
                                          }
                                          if(this.mc.team != this.mens[this.MP_myid].team)
                                          {
                                             this.incBadge(8);
                                          }
                                       }
                                       else
                                       {
                                          if(this.mc.pressure == 0)
                                          {
                                             this.Hurt(this.aof[this.i]);
                                          }
                                          this.mc.pressure += Math.ceil(4 * this.GSPEED);
                                       }
                                    }
                                    else if(!this.mc.dead)
                                    {
                                       if(this.mc.pressure > 0)
                                       {
                                          this.mc.pressure -= Math.ceil(2 * this.GSPEED);
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                     this.MeasureStop(8);
                  }
                  else if(this.aio[this.i] == false)
                  {
                     this.atox[this.i] = 0;
                     this.atoy[this.i] = 0;
                  }
               }
               else if(this.TracePointNoRagdolls(this.ax[this.i],this.ay[this.i] + this.arad[this.i] + 3))
               {
                  this.atox[this.i] *= 0.98;
                  this.atoy[this.i] *= 0.98;
               }
               else
               {
                  this.ForceAtomSleep(this.i);
               }
               this.MeasureStop(1);
            }
            ++this.i;
         }
         this.MeasuresMaybePrint();
         this.Physics2();
      }
      
      public function Physics2() : void
      {
         this.phys_stress = 0;
         this.phys_got_stress = true;
         while(this.phys_stress < 4 && this.phys_got_stress)
         {
            this.phys_got_stress = false;
            this.i2 = 0;
            while(this.i2 < this.chtotal)
            {
               if(this.chio[this.i2] != -1)
               {
                  if(this.aactive[this.chP[this.i2]] == 1000 || Boolean(this.aactive[this.aof[this.chP[this.i2]]]))
                  {
                     if(this.chio[this.i2] == true || this.chio[this.i2] == false)
                     {
                        if(this.DEBUG_MODE)
                        {
                           this.ok = false;
                        }
                        if(this.aio[this.chP[this.i2]] == 2 || this.aio[this.chC[this.i2]] == 2)
                        {
                           this.chio[this.i2] = 2;
                        }
                        if(this.aio[this.chP[this.i2]] == -1 || this.aio[this.chC[this.i2]] == -1)
                        {
                           this.chio[this.i2] = -1;
                           this.DisposeAtom(this.chP[this.i2]);
                           this.DisposeAtom(this.chC[this.i2]);
                        }
                        if(this.chio[this.i2] == true || this.chio[this.i2] == false)
                        {
                           if(this.aio[this.chP[this.i2]] == false && this.aio[this.chC[this.i2]] == false)
                           {
                              this.chio[this.i2] = false;
                           }
                           else
                           {
                              this.chio[this.i2] = true;
                              this.WakeUpAtom(this.chP[this.i2],false);
                              this.WakeUpAtom(this.chC[this.i2],false);
                           }
                        }
                        if(this.chio[this.i2] == true)
                        {
                           this.cx = (this.ax[this.chP[this.i2]] + this.ax[this.chC[this.i2]]) * 0.5;
                           this.cy = (this.ay[this.chP[this.i2]] + this.ay[this.chC[this.i2]]) * 0.5;
                           if(this.aof[this.chP[this.i2]] == this.MP_myid)
                           {
                              this.thispulspeed = this.GSPEED2;
                           }
                           else
                           {
                              this.thispulspeed = this.GSPEED;
                           }
                           if(this.GET_LITE_PHYS())
                           {
                              this.thispulspeed *= 2;
                           }
                           this.xx = this.Dist2D(this.ax[this.chP[this.i2]],this.ay[this.chP[this.i2]],this.ax[this.chC[this.i2]],this.ay[this.chC[this.i2]]);
                           this.yy = this.Math_abs(this.xx - this.chdef[this.i2]) * this.chdamp[this.i2] * 0.5;
                           if(this.MP_mode)
                           {
                              if(this.thispulspeed > 1)
                              {
                                 this.yy /= this.thispulspeed * this.thispulspeed;
                              }
                           }
                           else if(this.thispulspeed > 1)
                           {
                              this.yy /= this.thispulspeed;
                           }
                           if(this.xx < 1)
                           {
                              this.xx = 1;
                           }
                           if(this.xx > this.chdef[this.i2])
                           {
                              if(this.chtypa[this.i2] == 0 || this.chtypa[this.i2] == 2)
                              {
                                 this.u = (this.ax[this.chP[this.i2]] - this.ax[this.chC[this.i2]]) / this.xx * this.yy;
                                 this.v = (this.ay[this.chP[this.i2]] - this.ay[this.chC[this.i2]]) / this.xx * this.yy;
                                 this.atox[this.chC[this.i2]] += this.u;
                                 this.atoy[this.chC[this.i2]] += this.v;
                                 this.atox[this.chP[this.i2]] -= this.u;
                                 this.atoy[this.chP[this.i2]] -= this.v;
                                 if(this.DEBUG_MODE)
                                 {
                                    this.ok = true;
                                 }
                              }
                           }
                           else if(this.xx < this.chdef[this.i2])
                           {
                              if(this.chtypa[this.i2] == 0 || this.chtypa[this.i2] == 1)
                              {
                                 this.u = (this.ax[this.chP[this.i2]] - this.ax[this.chC[this.i2]]) / this.xx * this.yy;
                                 this.v = (this.ay[this.chP[this.i2]] - this.ay[this.chC[this.i2]]) / this.xx * this.yy;
                                 this.atox[this.chC[this.i2]] -= this.u;
                                 this.atoy[this.chC[this.i2]] -= this.v;
                                 this.atox[this.chP[this.i2]] += this.u;
                                 this.atoy[this.chP[this.i2]] += this.v;
                                 if(this.DEBUG_MODE)
                                 {
                                    this.ok = true;
                                 }
                              }
                           }
                           if(this.chdamp[this.i2] == 1)
                           {
                              if(this.chtypa[this.i2] == 0 || this.xx > this.chdef[this.i2] && this.chtypa[this.i2] == 2 || this.xx < this.chdef[this.i2] && this.chtypa[this.i2] == 1)
                              {
                                 this.u = (this.ax[this.chP[this.i2]] - this.cx) * this.chdef[this.i2] / this.xx;
                                 this.v = (this.ay[this.chP[this.i2]] - this.cy) * this.chdef[this.i2] / this.xx;
                                 this.ax[this.chP[this.i2]] = this.cx + this.u;
                                 this.ay[this.chP[this.i2]] = this.cy + this.v;
                                 this.ax[this.chC[this.i2]] = this.cx - this.u;
                                 this.ay[this.chC[this.i2]] = this.cy - this.v;
                              }
                           }
                           if(this.chtypa[this.i2] == 0 || this.chtypa[this.i2] == 2)
                           {
                              if(this.xx > this.chdef[this.i2] + 10 || this.xx > this.chdef[this.i2] * 1.5 + 5 || this.xx < this.chdef[this.i2] * 0.75 - 5)
                              {
                                 if(!this.TracePointNoRagdolls(this.cx,this.cy))
                                 {
                                    this.ax[this.chP[this.i2]] += this.cx - this.ax[this.chC[this.i2]];
                                    this.ay[this.chP[this.i2]] += this.cy - this.ay[this.chC[this.i2]];
                                    this.ax[this.chC[this.i2]] += this.cx - this.ax[this.chC[this.i2]];
                                    this.ay[this.chC[this.i2]] += this.cy - this.ay[this.chC[this.i2]];
                                    this.atox[this.chP[this.i2]] *= 0.5;
                                    this.atoy[this.chP[this.i2]] *= 0.5;
                                    this.atox[this.chC[this.i2]] *= 0.5;
                                    this.atoy[this.chC[this.i2]] *= 0.5;
                                 }
                              }
                           }
                        }
                        if(this.DEBUG_MODE)
                        {
                           if(this.ok)
                           {
                              this.debug_screen.graphics.lineStyle((this.arad[this.chP[this.i2]] * 2 * 2 + this.arad[this.chC[this.i2]] * 2) / 3,16711680,0.1);
                              this.debug_screen.graphics.moveTo(this.ax[this.chP[this.i2]],this.ay[this.chP[this.i2]]);
                              this.debug_screen.graphics.lineTo((this.ax[this.chC[this.i2]] + this.ax[this.chP[this.i2]]) / 2,(this.ay[this.chC[this.i2]] + this.ay[this.chP[this.i2]]) / 2);
                              this.debug_screen.graphics.lineStyle((this.arad[this.chP[this.i2]] * 2 + this.arad[this.chC[this.i2]] * 2 * 2) / 3,16711680,0.1);
                              this.debug_screen.graphics.moveTo((this.ax[this.chC[this.i2]] + this.ax[this.chP[this.i2]]) / 2,(this.ay[this.chC[this.i2]] + this.ay[this.chP[this.i2]]) / 2);
                              this.debug_screen.graphics.lineTo(this.ax[this.chC[this.i2]],this.ay[this.chC[this.i2]]);
                           }
                           this.debug_screen.graphics.lineStyle(1,16776960,1);
                           this.debug_screen.graphics.moveTo(this.ax[this.chP[this.i2]],this.ay[this.chP[this.i2]]);
                           this.debug_screen.graphics.lineTo(this.ax[this.chC[this.i2]],this.ay[this.chC[this.i2]]);
                        }
                     }
                  }
               }
               ++this.i2;
            }
            this.i2 = 0;
            while(this.i2 < this.chtotal && !this.phys_got_stress)
            {
               if(this.chio[this.i2] != -1)
               {
                  if(this.aactive[this.chP[this.i2]] == 1000 || Boolean(this.aactive[this.aof[this.chP[this.i2]]]))
                  {
                     if(this.chio[this.i2] == true)
                     {
                        if(this.chdamp[this.i2] == 1)
                        {
                           this.xx = this.Dist2D(this.ax[this.chP[this.i2]],this.ay[this.chP[this.i2]],this.ax[this.chC[this.i2]],this.ay[this.chC[this.i2]]);
                           if(this.chtypa[this.i2] == 0 || this.xx > this.chdef[this.i2] && this.chtypa[this.i2] == 2 || this.xx < this.chdef[this.i2] && this.chtypa[this.i2] == 1)
                           {
                              this.yy = Math.abs(this.chdef[this.i2] - this.xx);
                              if(this.yy > 15 && this.yy > this.chdef[this.i2] * 0.5)
                              {
                                 ++this.phys_stress;
                                 this.phys_got_stress = true;
                              }
                           }
                        }
                     }
                  }
               }
               ++this.i2;
            }
         }
         if(this.GET_LITE_PHYS())
         {
            this.i = 0;
            while(this.i < this.atotal)
            {
               if(this.aio[this.i] != -1)
               {
                  this.xx = this.ax[this.i];
                  this.yy = this.ay[this.i];
                  this.ax[this.i] = (this.ax[this.i] + this.lax[this.i]) / 2;
                  this.ay[this.i] = (this.ay[this.i] + this.lay[this.i]) / 2;
                  this.lax[this.i] = this.xx;
                  this.lay[this.i] = this.yy;
               }
               ++this.i;
            }
         }
         if(this.DEBUG_MODE)
         {
            this.i = 0;
            while(this.i < this.atotal)
            {
               if(this.aio[this.i] != -1)
               {
                  if(this.aio[this.i] == true)
                  {
                     this.debug_screen.graphics.lineStyle(this.arad[this.i] * 2,65280,0.3);
                  }
                  else
                  {
                     this.debug_screen.graphics.lineStyle(this.arad[this.i] * 2,255,0.5);
                  }
                  this.debug_screen.graphics.moveTo(this.ax[this.i],this.ay[this.i]);
                  this.debug_screen.graphics.lineTo(this.ax[this.i],this.ay[this.i] + 1);
               }
               ++this.i;
            }
         }
      }
      
      public function StartMiniScenario(param1:int) : Boolean
      {
         if(this.mini_scenario_cur == -1)
         {
            this.mini_scenario_cur = param1;
            this.mini_scenario_phase = 0;
            return true;
         }
         return false;
      }
      
      public function k_down(param1:KeyboardEvent) : void
      {
         var _loc2_:int = 0;
         var _loc3_:String = null;
         var _loc4_:* = undefined;
         var _loc5_:* = undefined;
         var _loc6_:* = undefined;
         var _loc7_:* = undefined;
         var _loc8_:String = null;
         var _loc9_:int = 0;
         var _loc10_:String = null;
         var _loc11_:int = 0;
         var _loc12_:* = undefined;
         var _loc13_:Number = NaN;
         var _loc14_:Number = NaN;
         this.VarChangePreventStart();
         if(this.last_key_code != param1.keyCode)
         {
            this.last_key_code = param1.keyCode;
            this.keys_are_being_pressed = true;
         }
         if(param1.keyCode == Keyboard.CONTROL)
         {
            this.key_ctrl = true;
         }
         if(currentLabel == "intro")
         {
            if(param1.keyCode == 27)
            {
               intr.removeChild(vidobj);
               nc.close();
               ns.close();
               gotoAndStop("ads");
            }
         }
         if(currentLabel == "loginform")
         {
            if(param1.keyCode == 13 || param1.keyCode == 32 && stage.focus != this.flogin && stage.focus != this.fpassword)
            {
               this.proceed();
            }
         }
         if(currentLabel == "gaming")
         {
            if(param1.keyCode == 112)
            {
               this.TakeScreenShot(0,0.75);
            }
            else if(!this.MP_mode)
            {
               if(param1.keyCode == 113)
               {
                  this.TakeScreenShot(0,0.5);
               }
               else if(param1.keyCode == 114)
               {
                  this.TakeScreenShot(0,0.25);
               }
               else if(param1.keyCode == 115)
               {
                  this.TakeScreenShot(0,0.1);
               }
            }
            if(param1.keyCode == 27)
            {
               if(!this.gamemenu.visible)
               {
                  if(!this.MP_mode)
                  {
                     this.system_non_stop = false;
                     if(this.MP_myid < this.playerstotal && !this.mens[this.MP_myid].dead)
                     {
                        this.pauze.visible = true;
                     }
                     this.stoped_by_focus = false;
                  }
                  this.gamemenu.visible = true;
                  this.setTrapAllKeys(false);
                  this.myCursor.alpha = 1;
               }
               else if(this.conmenu_set.visible)
               {
                  this.conmenu_set.visible = false;
               }
               else if(this.conmenu.visible)
               {
                  this.conmenu.visible = false;
               }
               else
               {
                  if(!this.MP_mode)
                  {
                     this.system_non_stop = true;
                     if(this.MP_myid < this.playerstotal && !this.mens[this.MP_myid].dead)
                     {
                        this.pauze.visible = false;
                     }
                  }
                  this.gamemenu.visible = false;
                  this.setTrapAllKeys(true);
                  this.lobbywindow.visible = false;
                  if(this.lobby_chat_enabled)
                  {
                     this.disableLobbyChat();
                  }
               }
            }
            if(this.lobbywindow.visible && param1.keyCode == Keyboard.ENTER)
            {
               this.sendLobbyMessage();
            }
            if(this.lobbywindow.visible)
            {
               return;
            }
            if(this.trigger_to_key_binds_down[param1.keyCode] != undefined)
            {
               this.EXEC_TRIGGER(this.trigger_to_key_binds_down[param1.keyCode]);
            }
            if(param1.keyCode == 9 || param1.keyCode == 35)
            {
               if(this.MP_mode)
               {
                  if(!this.herolist.visible)
                  {
                     _loc2_ = 0;
                     while(_loc2_ < this.MP_playerstotal)
                     {
                        this.UpdateHeroList(_loc2_);
                        _loc2_++;
                     }
                     this.herolist.visible = true;
                  }
               }
               else if(this.CASUAL_MODE)
               {
                  this.ok = true;
                  _loc2_ = this.MP_myid;
                  this.i4 = _loc2_ + 1;
                  while(this.i4 != _loc2_ && this.ok)
                  {
                     if(this.i4 >= this.playerstotal)
                     {
                        this.i4 = 0;
                     }
                     else
                     {
                        if(this.mens[this.i4].io)
                        {
                           if(this.mens[this.i4].team == this.mens[this.MP_myid].team)
                           {
                              if(this.mens[this.i4].hea > 0)
                              {
                                 if(!this.mens[this.i4].dying)
                                 {
                                    this.ok = false;
                                    this.MP_myid = this.i4;
                                    this.GSPEED = 0.01;
                                    this.new_active.visible = true;
                                    this.new_active.gotoAndPlay(1);
                                    this.PlaySound_full(this.s_team_switch);
                                    this.mens[this.i4].isplayer = true;
                                    this.mens[_loc2_].isplayer = false;
                                    this.UpdateWeps();
                                 }
                              }
                           }
                        }
                        ++this.i4;
                     }
                  }
               }
            }
            if(this.MP_spectator && this.MP_mode)
            {
               if(this.MP_chat_input)
               {
                  if(param1.keyCode == 13)
                  {
                     this.MP_chat_input = false;
                     this.gamechat_input_text = this.chat_win.gamechat_input.text;
                     this.chat_win.gamechat_input.text = "";
                     _loc3_ = this.gamechat_input_text.replace(/^\s+|\s+$/g,"");
                     if(_loc3_.length > 0)
                     {
                        if(this.chatHistory.length == 0 || this.chatHistory[this.chatHistory.length - 1] != _loc3_)
                        {
                           this.chatHistory.push(_loc3_);
                        }
                        this.currentHistoryIndex = this.chatHistory.length;
                     }
                     if(this.gamechat_input_text.length > 0)
                     {
                        while(this.gamechat_input_text != this.gamechat_input_text.replace("=","[eq]"))
                        {
                           this.gamechat_input_text = this.gamechat_input_text.replace("=","[eq]");
                        }
                        while(this.gamechat_input_text != this.gamechat_input_text.replace("|","[i]"))
                        {
                           this.gamechat_input_text = this.gamechat_input_text.replace("|","[i]");
                        }
                        while(this.gamechat_input_text != this.gamechat_input_text.replace(";","[dc]"))
                        {
                           this.gamechat_input_text = this.gamechat_input_text.replace(";","[dc]");
                        }
                        while(this.gamechat_input_text != this.gamechat_input_text.replace("<","[lt]"))
                        {
                           this.gamechat_input_text = this.gamechat_input_text.replace("<","[lt]");
                        }
                        while(this.gamechat_input_text != this.gamechat_input_text.replace(">","[gt]"))
                        {
                           this.gamechat_input_text = this.gamechat_input_text.replace(">","[gt]");
                        }
                        while(this.gamechat_input_text != this.gamechat_input_text.replace("\"","[2q]"))
                        {
                           this.gamechat_input_text = this.gamechat_input_text.replace("\"","[2q]");
                        }
                        while(this.gamechat_input_text != this.gamechat_input_text.replace("/","[sl]"))
                        {
                           this.gamechat_input_text = this.gamechat_input_text.replace("/","[sl]");
                        }
                        while(this.gamechat_input_text != this.gamechat_input_text.replace("\\","[rsl]"))
                        {
                           this.gamechat_input_text = this.gamechat_input_text.replace("\\","[rsl]");
                        }
                        if(this.MP_chat_input_for == "all")
                        {
                           this.MP_custom_events += ";chat|" + this.gamechat_input_text;
                        }
                        else if(this.MP_chat_input_for == "team")
                        {
                           this.MP_custom_events += ";tchat|" + this.gamechat_input_text;
                        }
                        if(this.DISPLAY_CHAT < 1)
                        {
                           if(this.MP_mode)
                           {
                              this.DialogSay("Note: You\'ve said something, but you have \'\'DISPLAY CHAT\'\' set to \'\'NO\'\' in your Graphics & Gameplay settings.","#FFFF00");
                           }
                        }
                     }
                     this.chat_win.visible = false;
                     this.setTrapAllKeys(true);
                  }
                  else if(param1.keyCode == Keyboard.UP && this.chat_win.visible == true)
                  {
                     if(this.currentHistoryIndex > 0)
                     {
                        --this.currentHistoryIndex;
                        this.chat_win.gamechat_input.text = this.chatHistory[this.currentHistoryIndex];
                        this.chat_win.gamechat_input.setSelection(this.chat_win.gamechat_input.text.length,this.chat_win.gamechat_input.text.length);
                     }
                  }
                  else if(param1.keyCode == Keyboard.DOWN && this.chat_win.visible == true)
                  {
                     if(this.currentHistoryIndex < this.chatHistory.length - 1)
                     {
                        ++this.currentHistoryIndex;
                        this.chat_win.gamechat_input.text = this.chatHistory[this.currentHistoryIndex];
                        this.chat_win.gamechat_input.setSelection(this.chat_win.gamechat_input.text.length,this.chat_win.gamechat_input.text.length);
                     }
                     else if(this.currentHistoryIndex == this.chatHistory.length - 1)
                     {
                        ++this.currentHistoryIndex;
                        this.chat_win.gamechat_input.text = "";
                     }
                     else if(this.chat_win.gamechat_input.text == "")
                     {
                     }
                  }
               }
               else if(param1.keyCode == 13)
               {
                  if(this.MP_login_name == "" || this.MP_login_name == ".guest")
                  {
                     this.DialogSay("Guests do not support chat function","#FF0000");
                  }
                  else
                  {
                     this.MP_chat_input = true;
                     this.MP_chat_input_for = "all";
                     this.chat_win.gamechat_input.text = "";
                     this.gamechat_input_text = "";
                     this.chat_win.chatmode.gotoAndStop(this.MP_chat_input_for);
                     this.chat_win.visible = true;
                     this.setTrapAllKeys(false);
                     stage.focus = this.chat_win.gamechat_input;
                  }
               }
               if(this.MP_clan == "1" || this.MP_clan == "2")
               {
                  if(this.MP_chat_input == false)
                  {
                     switch(param1.keyCode)
                     {
                        case 37:
                        case 65:
                           this.key_left = true;
                           break;
                        case 39:
                        case 68:
                           this.key_right = true;
                           break;
                        case 32:
                        case 38:
                        case 87:
                           this.key_up = true;
                           break;
                        case 17:
                        case 40:
                        case 83:
                           this.key_down = true;
                     }
                  }
               }
               this.VarChangePreventEnd();
               return;
            }
            if(param1.keyCode == 13 || this.MP_mode && param1.keyCode == 77 && !this.MP_chat_input)
            {
               if(this.MP_chat_input && param1.keyCode == 13)
               {
                  this.MP_chat_input = false;
                  this.gamechat_input_text = this.chat_win.gamechat_input.text;
                  this.chat_win.gamechat_input.text = "";
                  _loc3_ = this.gamechat_input_text.replace(/^\s+|\s+$/g,"");
                  if(_loc3_.length > 0)
                  {
                     if(this.chatHistory.length == 0 || this.chatHistory[this.chatHistory.length - 1] != _loc3_)
                     {
                        this.chatHistory.push(_loc3_);
                     }
                     this.currentHistoryIndex = this.chatHistory.length;
                  }
                  if(!this.MP_mode || this.gamechat_input_text == "bot 1" || this.gamechat_input_text == "bot 0" || this.gamechat_input_text.indexOf("-fps ") == 0 || this.gamechat_input_text.indexOf("-cursor.size ") == 0 || this.gamechat_input_text == "-show.frags 0" || this.gamechat_input_text == "-show.frags 1" || this.gamechat_input_text.indexOf("-cursor.style ") == 0 || this.gamechat_input_text == "-cursor.reset" || this.gamechat_input_text == "-cursor.static 1" || this.gamechat_input_text == "-cursor.static 0")
                  {
                     if(this.gamechat_input_text.length > 0)
                     {
                        if(this.FORCE_CUSTOM_MAP)
                        {
                           this.ChatNewMsg("<font color=\"#78DBE2\">" + this.mens[this.MP_myid].nick + "</font><font color=\"#FFFFFF\"> :  " + this.gamechat_input_text + "</font>");
                           this.PlaySound_full(this.s_chat);
                           this.UserSays(this.MP_myid,this.gamechat_input_text);
                        }
                        else
                        {
                           this.ChatNewMsg(this.new_nick2 + this.gamechat_input_text);
                           this.ok = true;
                           if(this.gamechat_input_text == "god 1" || this.gamechat_input_text == "god")
                           {
                              this.mens[this.MP_myid].hmax *= 100000;
                              this.mens[this.MP_myid].hea = this.mens[this.MP_myid].hmax;
                              if(this.mens[this.MP_myid].dead)
                              {
                                 this.mens[this.MP_myid].dead = false;
                              }
                              if(this.mens[this.MP_myid].dying)
                              {
                                 this.mens[this.MP_myid].dying = false;
                              }
                              this.Hurt_nopain(this.MP_myid);
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "-show.frags 0")
                           {
                              this.SHOW_FRAG_MESSAGES = false;
                              this.DialogSay("Frag messages have been disabled.","#00FF00");
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "-show.frags 1")
                           {
                              this.SHOW_FRAG_MESSAGES = true;
                              this.DialogSay("Frag messages have been enabled.","#00FF00");
                              this.ok = false;
                           }
                           if(this.gamechat_input_text.indexOf("-cursor.size ") == 0)
                           {
                              _loc4_ = this.gamechat_input_text.substr(13);
                              if(_loc4_.indexOf(".") == -1)
                              {
                                 _loc5_ = int(parseInt(_loc4_));
                                 if(_loc5_ >= 1 && _loc5_ <= 100)
                                 {
                                    this.myCursor.scaleX = _loc5_ / 50;
                                    this.myCursor.scaleY = _loc5_ / 50;
                                    this.DialogSay("Game : You set Cursor Scale to " + _loc5_ / 50 + "x","#00FF00");
                                    this.ok = false;
                                 }
                                 else
                                 {
                                    this.DialogSay("Game Error: Invalid FPS value - The range is between 20-60","#FF0000");
                                    this.ok = false;
                                 }
                              }
                              else
                              {
                                 this.DialogSay("Game Error: Invalid Cursor Scale value - Decimal points are not allowed","#FF0000");
                                 this.ok = false;
                              }
                           }
                           if(this.gamechat_input_text.indexOf("-cursor.style ") == 0)
                           {
                              _loc6_ = this.gamechat_input_text.substr(14);
                              if(_loc6_.indexOf(".") == -1)
                              {
                                 _loc7_ = int(parseInt(_loc6_));
                                 if(_loc7_ >= 1 && _loc7_ <= 3)
                                 {
                                    this.forced_cursor = true;
                                    this.cursor_selected = _loc7_ - 1;
                                    this.DialogSay("Game : You\'ve set the cursor style to " + _loc7_,"#00FF00");
                                    this.ok = false;
                                 }
                                 else
                                 {
                                    this.DialogSay("Game Error: Invalid Cursor model - The range is 1,2,3.","#FF0000");
                                    this.ok = false;
                                 }
                              }
                              else
                              {
                                 this.ok = false;
                              }
                           }
                           if(this.gamechat_input_text == "-cursor.reset")
                           {
                              this.forced_cursor = false;
                              this.myCursor.scaleX = 1;
                              this.myCursor.scaleY = 1;
                              this.cursor_static = false;
                              this.DialogSay("Game : You\'ve reset the cursor successfully.","#00FF00");
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "-cursor.static 1")
                           {
                              this.cursor_static = true;
                              this.DialogSay("Game : You\'ve set the cursor to static.","#00FF00");
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "-cursor.static 0")
                           {
                              this.cursor_static = false;
                              this.DialogSay("Game : You\'ve set the cursor to dynamic.","#00FF00");
                              this.ok = false;
                           }
                           if(this.gamechat_input_text.indexOf("-fps ") == 0)
                           {
                              _loc8_ = this.gamechat_input_text.substr(5);
                              if(_loc8_.indexOf(".") == -1)
                              {
                                 _loc9_ = int(parseInt(_loc8_));
                                 if(_loc9_ >= 20 && _loc9_ <= 60)
                                 {
                                    stage.frameRate = _loc9_;
                                    this.DialogSay("Game : You set FPS Limit to " + _loc9_,"#00FF00");
                                    this.ok = false;
                                 }
                                 else
                                 {
                                    this.DialogSay("Game Error: Invalid FPS value - The range is between 20-60","#FF0000");
                                    this.ok = false;
                                 }
                              }
                              else
                              {
                                 this.DialogSay("Game Error: Invalid FPS value - Decimal points are not allowed","#FF0000");
                                 this.ok = false;
                              }
                           }
                           if(this.gamechat_input_text == "-debugfps")
                           {
                              stage.frameRate = 120;
                              this.DialogSay("Lin : Current FPS : 120 , Note: Flash Player may not support","#00FF00");
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "gm")
                           {
                              this.ARCADE_GAME_MODE = !this.ARCADE_GAME_MODE;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "grow")
                           {
                              this.SetPlayerScale(this.mens[this.MP_myid],this.mens[this.MP_myid].scale * 1.25);
                              this.mens[this.MP_myid].hmax *= 1.25 * 1.25;
                              this.mens[this.MP_myid].hea *= 1.25 * 1.25;
                              this.game_scale /= 1.25;
                              this.IM_A_CHEATER = true;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "shrink")
                           {
                              this.SetPlayerScale(this.mens[this.MP_myid],this.mens[this.MP_myid].scale / 1.25);
                              this.mens[this.MP_myid].hmax /= 1.25 * 1.25;
                              this.mens[this.MP_myid].hea /= 1.25 * 1.25;
                              this.game_scale *= 1.25;
                              this.IM_A_CHEATER = true;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "grow enemies")
                           {
                              _loc2_ = 0;
                              while(_loc2_ < this.playerstotal)
                              {
                                 if(_loc2_ != this.MP_myid)
                                 {
                                    this.SetPlayerScale(this.mens[_loc2_],this.mens[_loc2_].scale * 1.25);
                                    this.mens[_loc2_].hmax *= 1.25 * 1.25;
                                    this.mens[_loc2_].hea *= 1.25 * 1.25;
                                 }
                                 _loc2_++;
                              }
                              this.IM_A_CHEATER = true;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "shrink enemies")
                           {
                              _loc2_ = 0;
                              while(_loc2_ < this.playerstotal)
                              {
                                 if(_loc2_ != this.MP_myid)
                                 {
                                    this.SetPlayerScale(this.mens[_loc2_],this.mens[_loc2_].scale / 1.25);
                                    this.mens[_loc2_].hmax /= 1.25 * 1.25;
                                    this.mens[_loc2_].hea /= 1.25 * 1.25;
                                 }
                                 _loc2_++;
                              }
                              this.IM_A_CHEATER = true;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text.indexOf("give ") == 0)
                           {
                              _loc10_ = this.gamechat_input_text.substr(5);
                              this.mc = this.MakeGunByClass(_loc10_,{
                                 "x":this.mens[this.MP_myid].x,
                                 "y":this.mens[this.MP_myid].y,
                                 "upg":3,
                                 "command":-1
                              });
                              this.IM_A_CHEATER = true;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text.indexOf("skin enemies ") == 0)
                           {
                              _loc2_ = 0;
                              while(_loc2_ < this.playerstotal)
                              {
                                 if(_loc2_ != this.MP_myid)
                                 {
                                    _loc11_ = int(this.gamechat_input_text.substr(13));
                                    this.mc = this.mens[_loc2_];
                                    this.mc.palette[0] = this.mc.palette[1] = this.mc.palette[2] = this.mc.palette[3] = "-";
                                    this.mc.char = _loc11_;
                                    this.mc.mdl_head = this.mc.char;
                                    this.mc.mdl_leg1_upper = this.mc.char;
                                    this.mc.mdl_leg1_middle = this.mc.char;
                                    this.mc.mdl_leg1_lower = this.mc.char;
                                    this.mc.mdl_leg2_upper = this.mc.char;
                                    this.mc.mdl_leg2_middle = this.mc.char;
                                    this.mc.mdl_leg2_lower = this.mc.char;
                                    this.mc.mdl_arm1_upper = this.mc.char;
                                    this.mc.mdl_arm1_lower = this.mc.char;
                                    this.mc.mdl_arm2_upper = this.mc.char;
                                    this.mc.mdl_arm2_lower = this.mc.char;
                                    this.mc.mdl_toe = this.mc.char;
                                    this.mc.mdl_body = this.mc.char;
                                    this.mc.alpha = 1;
                                    this.UpdateCharProps(this.mc);
                                    this.SpawnPlayerImmediately(this.mc);
                                 }
                                 _loc2_++;
                              }
                           }
                           else if(this.gamechat_input_text.indexOf("skin ") == 0)
                           {
                              _loc2_ = this.MP_myid;
                              _loc11_ = int(this.gamechat_input_text.substr(5));
                              this.mc = this.mens[_loc2_];
                              this.mc.palette[0] = this.mc.palette[1] = this.mc.palette[2] = this.mc.palette[3] = "-";
                              this.mc.char = _loc11_;
                              this.mc.mdl_head = this.mc.char;
                              this.mc.mdl_leg1_upper = this.mc.char;
                              this.mc.mdl_leg1_middle = this.mc.char;
                              this.mc.mdl_leg1_lower = this.mc.char;
                              this.mc.mdl_leg2_upper = this.mc.char;
                              this.mc.mdl_leg2_middle = this.mc.char;
                              this.mc.mdl_leg2_lower = this.mc.char;
                              this.mc.mdl_arm1_upper = this.mc.char;
                              this.mc.mdl_arm1_lower = this.mc.char;
                              this.mc.mdl_arm2_upper = this.mc.char;
                              this.mc.mdl_arm2_lower = this.mc.char;
                              this.mc.mdl_toe = this.mc.char;
                              this.mc.mdl_body = this.mc.char;
                              this.mc.alpha = 1;
                              this.UpdateCharProps(this.mc);
                              this.SpawnPlayerImmediately(this.mc);
                           }
                           if(this.gamechat_input_text == "quick start")
                           {
                              this.CMPG_money = 999999;
                              if(this.LEVELS_PASSED < this.LEVELS_TOTAL)
                              {
                                 this.LEVELS_PASSED = this.LEVELS_TOTAL;
                              }
                              this.IM_A_CHEATER = true;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text.indexOf("hero1skin ") != -1)
                           {
                              this.skin_model[0] = int(this.gamechat_input_text.split(" ")[1]);
                              this.ok = false;
                           }
                           if(this.gamechat_input_text.indexOf("hero2skin ") != -1)
                           {
                              this.skin_model[1] = int(this.gamechat_input_text.split(" ")[1]);
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "no players")
                           {
                              this.playerstotal = 1;
                              this.MP_myid = 0;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "no barrels")
                           {
                              this.barrelstotal = 0;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "no vehicles")
                           {
                              this.vehiclestotal = 0;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "no lights" || this.gamechat_input_text == "no lamps")
                           {
                              this.lampstotal = 0;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "no guns")
                           {
                              this.gunstotal = 0;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "debug" || this.gamechat_input_text == "debug 1")
                           {
                              this.DEBUG_MODE = true;
                              this.debug_screen.visible = true;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "debug 0")
                           {
                              this.DEBUG_MODE = false;
                              this.debug_screen.graphics.clear();
                              this.debug_screen.visible = false;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "god 0")
                           {
                              this.mens[this.MP_myid].hea /= 100000;
                              this.mens[this.MP_myid].hmax /= 100000;
                              this.Hurt_nopain(this.MP_myid);
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "headshot")
                           {
                              this.xx = this.mens[this.MP_myid].hea;
                              this.mens[this.MP_myid].hp_head = 0;
                              this.Hurt(this.MP_myid);
                              this.mens[this.MP_myid].hea = this.xx;
                              this.mens[this.MP_myid].dead = false;
                              this.mens[this.MP_myid].dying = false;
                              this.mens[this.MP_myid].stability = -2;
                              this.atoy[this.mens[this.MP_myid].b_head_end] -= 10;
                              this.atox[this.mens[this.MP_myid].b_head_end] -= this.mens[this.MP_myid].side * 5;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "friends")
                           {
                              _loc2_ = 0;
                              while(_loc2_ < this.playerstotal)
                              {
                                 if(this.mens[_loc2_].io)
                                 {
                                    this.mens[_loc2_].team = 0;
                                 }
                                 _loc2_++;
                              }
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "dm")
                           {
                              _loc2_ = 0;
                              while(_loc2_ < this.playerstotal)
                              {
                                 if(this.mens[_loc2_].io)
                                 {
                                    this.mens[_loc2_].team = _loc2_;
                                 }
                                 _loc2_++;
                              }
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "kill enemies")
                           {
                              _loc2_ = 0;
                              while(_loc2_ < this.playerstotal)
                              {
                                 if(this.mens[_loc2_].io)
                                 {
                                    if(this.mens[_loc2_].team != this.mens[this.MP_myid].team)
                                    {
                                       this.mens[_loc2_].hea = 0;
                                       this.Hurt_nopain(_loc2_);
                                    }
                                 }
                                 _loc2_++;
                              }
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "hyper jump")
                           {
                              this.mens[this.MP_myid].toy = -25;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "over fast")
                           {
                              this.MP_fps = this.DEFAULT_FPS * 5;
                              this.ok = false;
                              this.SP_unlimit_framerate = true;
                           }
                           if(this.gamechat_input_text == "uber fast")
                           {
                              this.MP_fps = this.DEFAULT_FPS * 4;
                              this.ok = false;
                              this.SP_unlimit_framerate = true;
                           }
                           if(this.gamechat_input_text == "extra fast")
                           {
                              this.MP_fps = this.DEFAULT_FPS * 3;
                              this.ok = false;
                              this.SP_unlimit_framerate = true;
                           }
                           if(this.gamechat_input_text == "very fast")
                           {
                              this.MP_fps = this.DEFAULT_FPS * 2;
                              this.ok = false;
                              this.SP_unlimit_framerate = true;
                           }
                           if(this.gamechat_input_text == "faster")
                           {
                              this.MP_fps = this.DEFAULT_FPS * 1.5;
                              this.ok = false;
                              this.SP_unlimit_framerate = true;
                           }
                           if(this.gamechat_input_text == "fast")
                           {
                              this.MP_fps = this.DEFAULT_FPS * 1.25;
                              this.ok = false;
                              this.SP_unlimit_framerate = true;
                           }
                           if(this.gamechat_input_text == "normal")
                           {
                              this.MP_fps = this.DEFAULT_FPS;
                              this.ok = false;
                              this.SP_unlimit_framerate = false;
                           }
                           if(this.gamechat_input_text == "slow")
                           {
                              this.MP_fps = this.DEFAULT_FPS * 0.75;
                              this.ok = false;
                              this.SP_unlimit_framerate = true;
                           }
                           if(this.gamechat_input_text == "slower")
                           {
                              this.MP_fps = this.DEFAULT_FPS * 0.5;
                              this.ok = false;
                              this.SP_unlimit_framerate = true;
                           }
                           if(this.gamechat_input_text == "very slow")
                           {
                              this.MP_fps = this.DEFAULT_FPS * 0.25;
                              this.ok = false;
                              this.SP_unlimit_framerate = true;
                           }
                           if(this.gamechat_input_text == "zoom 100")
                           {
                              this.game_scale = 1;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "zoom 200")
                           {
                              this.game_scale = 2;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "zoom 50")
                           {
                              this.game_scale = 0.5;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "zoom 25")
                           {
                              this.game_scale = 0.25;
                              this.ok = false;
                           }
                           if(this.gamechat_input_text == "give all")
                           {
                              _loc2_ = 0;
                              while(_loc2_ < this.inventoryC.length)
                              {
                                 this.mc = this.MakeGunByClass(this.inventoryC[_loc2_].mdl,{
                                    "x":this.mens[this.MP_myid].x,
                                    "y":this.mens[this.MP_myid].y,
                                    "upg":this.inventoryC[_loc2_].upg,
                                    "command":-1
                                 });
                                 _loc2_++;
                              }
                              if(!this.FORCE_CUSTOM_MAP)
                              {
                                 this.IM_A_CHEATER = true;
                              }
                              this.ok = false;
                           }
                           if(this.ok)
                           {
                              this.ChatNewMsg("bash: " + this.gamechat_input_text + ": command not found");
                              this.PlaySound_full(this.s_chat);
                           }
                           else
                           {
                              this.BADGES_ENABLED = false;
                           }
                           if(this.IM_A_CHEATER)
                           {
                              this.SaveGame();
                           }
                           this.UserSays(this.MP_myid,this.gamechat_input_text);
                        }
                     }
                     if(this.gamechat_input_text == "render 0")
                     {
                        this.game.visible = false;
                        this.graphics_3d_front.visible = false;
                        this.graphics_3d.visible = false;
                        this.sky.visible = false;
                     }
                     if(this.gamechat_input_text == "render 1")
                     {
                        this.game.visible = true;
                        this.graphics_3d_front.visible = true;
                        this.graphics_3d.visible = true;
                        this.sky.visible = true;
                     }
                     if(this.gamechat_input_text == "bot 1")
                     {
                        this.MP_half_bot = true;
                        if(this.MP_mode)
                        {
                           this.EASY_MODE = true;
                           this.PRO_BOTS = false;
                           this.LOW_HPS = false;
                        }
                     }
                     if(this.gamechat_input_text == "bot 1pro")
                     {
                        this.MP_half_bot = true;
                        if(this.MP_mode)
                        {
                           this.PRO_BOTS = true;
                        }
                     }
                     if(this.gamechat_input_text == "bot 0")
                     {
                        this.MP_half_bot = false;
                     }
                     if(this.gamechat_input_text == "kill")
                     {
                        this.mens[this.MP_myid].hp_head = 0;
                        this.Hurt(this.MP_myid);
                        this.mens[this.MP_myid].hea = 0;
                     }
                     if(this.gamechat_input_text == "p1")
                     {
                        this.graphics_texture_front0_toggled = true;
                        this.DialogSay("You enabled experimental performance option. Rejoin to see changes.","#FFFF00");
                        this.ok = false;
                     }
                     if(this.gamechat_input_text == "p0")
                     {
                        this.graphics_texture_front0_toggled = false;
                        this.DialogSay("You disabled experimental performance option. Rejoin to see changes.","#FFFF00");
                        this.ok = false;
                     }
                  }
                  else
                  {
                     this.ok = true;
                     if(this.gamechat_input_text == "-kill")
                     {
                        this.mens[this.MP_myid].hp_head = 0;
                        this.Hurt(this.MP_myid);
                        this.mens[this.MP_myid].hea = 0;
                        this.ok = false;
                     }
                     if(this.gamechat_input_text.substr(0,5) == "-ping")
                     {
                        if(getTimer() - this.LAST_VOTE > 60000)
                        {
                           _loc12_ = Number(this.gamechat_input_text.substr(6,this.gamechat_input_text.length));
                           if(Boolean(isNaN(_loc12_)) || !isNaN(_loc12_) && (_loc12_ < 10 || _loc12_ > 1000))
                           {
                              this.DialogSay("\'\'" + this.gamechat_input_text.substr(6,this.gamechat_input_text.length) + "\'\' is not a correct ping value.","#FFFF00");
                              if(!isNaN(_loc12_) && (_loc12_ < 10 || _loc12_ > 1000))
                              {
                                 this.LAST_VOTE = getTimer();
                              }
                           }
                           else
                           {
                              this.MP_custom_events += ";voteping|" + this.gamechat_input_text.substr(6,this.gamechat_input_text.length);
                              this.LAST_VOTE = getTimer();
                           }
                        }
                        else
                        {
                           this.DialogSay("You will be allowed to vote again in " + Math.ceil((60000 - (getTimer() - this.LAST_VOTE)) / 1000) + " seconds.","#FFFF00");
                        }
                     }
                     if(this.MP_type == 3)
                     {
                        if(this.gamechat_input_text == "-blue")
                        {
                           this.mc = this.mens[this.MP_myid];
                           if(getTimer() - this.mc.whenlastshot > 7000)
                           {
                              this.mc.lastshotby = -1;
                           }
                           if(this.mc.dead || this.mc.lastshotby == -1 || this.mc.lastshotby == this.MP_myid)
                           {
                              this.mc.team = 13;
                              if(this.MP_giveguns)
                              {
                                 this.mc.char = this.skin_model[3];
                              }
                              else
                              {
                                 this.mc.char = this.skin_model[3];
                                 this.mc.palette[0] = this.mc.palette[1] = this.mc.palette[2] = this.mc.palette[3] = "B";
                              }
                              this.spawn = false;
                              this.mc.hea = 0;
                              this.mc.mdl_head = this.mc.char;
                              this.mc.mdl_leg1_upper = this.mc.char;
                              this.mc.mdl_leg1_middle = this.mc.char;
                              this.mc.mdl_leg1_lower = this.mc.char;
                              this.mc.mdl_leg2_upper = this.mc.char;
                              this.mc.mdl_leg2_middle = this.mc.char;
                              this.mc.mdl_leg2_lower = this.mc.char;
                              this.mc.mdl_arm1_upper = this.mc.char;
                              this.mc.mdl_arm1_lower = this.mc.char;
                              this.mc.mdl_arm2_upper = this.mc.char;
                              this.mc.mdl_arm2_lower = this.mc.char;
                              this.mc.mdl_toe = this.mc.char;
                              this.mc.mdl_body = this.mc.char;
                              this.UpdateCharProps(this.mc);
                              this.ok = false;
                              this.UpdateTeamTable();
                              _loc2_ = 0;
                              while(_loc2_ < this.playerstotal)
                              {
                                 this.UpdateTeamColor(this.mens[_loc2_]);
                                 _loc2_++;
                              }
                           }
                           else
                           {
                              this.DialogSay("Can\'t change team during fight.","#FFFF00");
                           }
                        }
                        if(this.gamechat_input_text == "-red")
                        {
                           this.mc = this.mens[this.MP_myid];
                           if(getTimer() - this.mc.whenlastshot > 7000)
                           {
                              this.mc.lastshotby = -1;
                           }
                           if(this.mc.dead || this.mc.lastshotby == -1 || this.mc.lastshotby == this.MP_myid)
                           {
                              this.mc.team = 12;
                              if(this.MP_giveguns)
                              {
                                 this.mc.char = this.skin_model[3] + 1;
                              }
                              else
                              {
                                 this.mc.char = this.skin_model[3];
                                 this.mc.palette[0] = this.mc.palette[1] = this.mc.palette[2] = this.mc.palette[3] = "R";
                              }
                              this.spawn = false;
                              this.mc.hea = 0;
                              this.mc.mdl_head = this.mc.char;
                              this.mc.mdl_leg1_upper = this.mc.char;
                              this.mc.mdl_leg1_middle = this.mc.char;
                              this.mc.mdl_leg1_lower = this.mc.char;
                              this.mc.mdl_leg2_upper = this.mc.char;
                              this.mc.mdl_leg2_middle = this.mc.char;
                              this.mc.mdl_leg2_lower = this.mc.char;
                              this.mc.mdl_arm1_upper = this.mc.char;
                              this.mc.mdl_arm1_lower = this.mc.char;
                              this.mc.mdl_arm2_upper = this.mc.char;
                              this.mc.mdl_arm2_lower = this.mc.char;
                              this.mc.mdl_toe = this.mc.char;
                              this.mc.mdl_body = this.mc.char;
                              this.UpdateCharProps(this.mc);
                              this.ok = false;
                              this.UpdateTeamTable();
                              _loc2_ = 0;
                              while(_loc2_ < this.playerstotal)
                              {
                                 this.UpdateTeamColor(this.mens[_loc2_]);
                                 _loc2_++;
                              }
                           }
                           else
                           {
                              this.DialogSay("Can\'t change team during fight.","#FFFF00");
                           }
                        }
                     }
                     if(this.ok)
                     {
                        if(this.gamechat_input_text.length > 0)
                        {
                           this.MP_last_message_patience -= (getTimer() - this.MP_last_message) / 550;
                           if(this.MP_last_message_patience < 0)
                           {
                              this.MP_last_message_patience = 0;
                           }
                           this.MP_last_message_patience += 20000 / Math.max(300,getTimer() - this.MP_last_message);
                           this.MP_last_message = getTimer();
                           if(this.MP_pass == "")
                           {
                              if(this.MP_last_message_patience > 125)
                              {
                                 if(this.mens[this.MP_myid].dead || this.mens[this.MP_myid].lastshotby == -1 || getTimer() - this.mens[this.MP_myid].whenlastshot > 7000)
                                 {
                                    this.DialogSay("Disconnected. You didn\'t stopped it, so we are sorry","#FF0000");
                                    this.MP_force_disconnect = true;
                                 }
                              }
                              else if(this.MP_last_message_patience > 105)
                              {
                                 this.DialogSay("Please don\'t send messages so quickly. You will be disconnected if you will continue","#FFFF00");
                              }
                              else if(this.MP_last_message_patience > 95)
                              {
                                 this.DialogSay("Please don\'t send messages so quickly. It is not allowed","#FFFF00");
                              }
                           }
                           while(this.gamechat_input_text != this.gamechat_input_text.replace("=","[eq]"))
                           {
                              this.gamechat_input_text = this.gamechat_input_text.replace("=","[eq]");
                           }
                           while(this.gamechat_input_text != this.gamechat_input_text.replace("|","[i]"))
                           {
                              this.gamechat_input_text = this.gamechat_input_text.replace("|","[i]");
                           }
                           while(this.gamechat_input_text != this.gamechat_input_text.replace(";","[dc]"))
                           {
                              this.gamechat_input_text = this.gamechat_input_text.replace(";","[dc]");
                           }
                           while(this.gamechat_input_text != this.gamechat_input_text.replace("<","[lt]"))
                           {
                              this.gamechat_input_text = this.gamechat_input_text.replace("<","[lt]");
                           }
                           while(this.gamechat_input_text != this.gamechat_input_text.replace(">","[gt]"))
                           {
                              this.gamechat_input_text = this.gamechat_input_text.replace(">","[gt]");
                           }
                           while(this.gamechat_input_text != this.gamechat_input_text.replace("\"","[2q]"))
                           {
                              this.gamechat_input_text = this.gamechat_input_text.replace("\"","[2q]");
                           }
                           while(this.gamechat_input_text != this.gamechat_input_text.replace("/","[sl]"))
                           {
                              this.gamechat_input_text = this.gamechat_input_text.replace("/","[sl]");
                           }
                           while(this.gamechat_input_text != this.gamechat_input_text.replace("\\","[rsl]"))
                           {
                              this.gamechat_input_text = this.gamechat_input_text.replace("\\","[rsl]");
                           }
                           if(this.MP_chat_input_for == "all")
                           {
                              this.MP_custom_events += ";chat|" + this.gamechat_input_text;
                           }
                           else if(this.MP_chat_input_for == "team")
                           {
                              this.MP_custom_events += ";tchat|" + this.gamechat_input_text;
                           }
                           if(this.DISPLAY_CHAT < 1)
                           {
                              if(this.MP_mode)
                              {
                                 this.DialogSay("Note: You\'ve said something, but you have \'\'DISPLAY CHAT\'\' set to \'\'NO\'\' in your Graphics & Gameplay settings.","#FFFF00");
                              }
                           }
                        }
                     }
                  }
                  this.chat_win.visible = false;
                  this.setTrapAllKeys(true);
               }
               else if(this.LEVELS_PASSED >= this.LEVELS_TOTAL || this.MP_mode || this.FORCE_CUSTOM_MAP)
               {
                  this.MP_chat_input = true;
                  if(this.MP_mode && param1.keyCode == 77)
                  {
                     this.MP_chat_input_for = "team";
                  }
                  else
                  {
                     this.MP_chat_input_for = "all";
                  }
                  this.chat_win.gamechat_input.text = "";
                  this.gamechat_input_text = "";
                  this.chat_win.chatmode.gotoAndStop(this.MP_chat_input_for);
                  this.chat_win.visible = true;
                  this.setTrapAllKeys(false);
                  stage.focus = this.chat_win.gamechat_input;
               }
               else
               {
                  this.ChatNewMsg("E: Access denied; complete all campaign levels first");
               }
            }
            else if(param1.keyCode == Keyboard.UP && this.chat_win.visible == true)
            {
               if(this.currentHistoryIndex > 0)
               {
                  --this.currentHistoryIndex;
                  this.chat_win.gamechat_input.text = this.chatHistory[this.currentHistoryIndex];
                  this.chat_win.gamechat_input.setSelection(this.chat_win.gamechat_input.text.length,this.chat_win.gamechat_input.text.length);
               }
            }
            else if(param1.keyCode == Keyboard.DOWN && this.chat_win.visible == true)
            {
               if(this.currentHistoryIndex < this.chatHistory.length - 1)
               {
                  ++this.currentHistoryIndex;
                  this.chat_win.gamechat_input.text = this.chatHistory[this.currentHistoryIndex];
                  this.chat_win.gamechat_input.setSelection(this.chat_win.gamechat_input.text.length,this.chat_win.gamechat_input.text.length);
               }
               else if(this.currentHistoryIndex == this.chatHistory.length - 1)
               {
                  ++this.currentHistoryIndex;
                  this.chat_win.gamechat_input.text = "";
               }
               else if(this.chat_win.gamechat_input.text == "")
               {
               }
            }
            else if(!this.MP_chat_input)
            {
               if(param1.keyCode == 65 || param1.keyCode == 37)
               {
                  this.key_left = true;
               }
               if(param1.keyCode == 68 || param1.keyCode == 39)
               {
                  this.key_right = true;
               }
               if(param1.keyCode == 32 || param1.keyCode == 82)
               {
                  if(this.LEVEL_END_FORCE != "" && this.LEVEL_END_FORCE != "complete" && this.LEVEL_END_FORCE != "credits")
                  {
                     if(!this.MP_mode)
                     {
                        if(this.darkness.alpha > 0.02)
                        {
                           this.darkness.visible = true;
                           this.darkness.alpha = 1;
                           if(this.LEVEL_END_FORCE == "failed")
                           {
                              this.LEVEL_END_FORCE = "restart";
                           }
                        }
                     }
                  }
               }
               if(param1.keyCode == 87 || param1.keyCode == 38 || param1.keyCode == 32)
               {
                  this.key_up = true;
               }
               if(param1.keyCode == 71 || param1.keyCode == 96)
               {
                  if(!this.MP_mode)
                  {
                     this.StartMiniScenario(0);
                  }
                  else if(this.MP_type != 2 || this.MP_gamestate == 0)
                  {
                     if(this.grenades_total > 0)
                     {
                        if(this.mini_scenario_cur == -1 && !this.mens[this.MP_myid].dead && !this.mens[this.MP_myid].brk_arms)
                        {
                           this.MP_myspecials[this.MP_myspecials_total] = new Object();
                           this.MP_myspecials[this.MP_myspecials_total].stat = 1;
                           this.MP_myspecials[this.MP_myspecials_total].id_in_full_list = -1;
                           this.MP_myspecials[this.MP_myspecials_total].nadekind = 1;
                           this.MP_custom_events += ";gren|1#" + this.MP_myspecials_total;
                           ++this.MP_myspecials_total;
                        }
                     }
                  }
               }
               if(this.MP_mode)
               {
                  if(this.MP_type != 2 || this.MP_gamestate == 0)
                  {
                     if(param1.keyCode == 67)
                     {
                        if(this.grenades_port_total > 0)
                        {
                           if(this.mini_scenario_cur == -1 && !this.mens[this.MP_myid].dead && !this.mens[this.MP_myid].brk_arms)
                           {
                              this.MP_myspecials[this.MP_myspecials_total] = new Object();
                              this.MP_myspecials[this.MP_myspecials_total].stat = 1;
                              this.MP_myspecials[this.MP_myspecials_total].id_in_full_list = -1;
                              this.MP_myspecials[this.MP_myspecials_total].nadekind = 2;
                              this.MP_custom_events += ";gren|2#" + this.MP_myspecials_total;
                              ++this.MP_myspecials_total;
                           }
                        }
                     }
                     if(param1.keyCode == 90)
                     {
                        if(this.grenades_sh_total > 0)
                        {
                           if(this.mini_scenario_cur == -1 && !this.mens[this.MP_myid].dead && !this.mens[this.MP_myid].brk_arms)
                           {
                              this.MP_myspecials[this.MP_myspecials_total] = new Object();
                              this.MP_myspecials[this.MP_myspecials_total].stat = 1;
                              this.MP_myspecials[this.MP_myspecials_total].id_in_full_list = -1;
                              this.MP_myspecials[this.MP_myspecials_total].nadekind = 3;
                              this.MP_custom_events += ";gren|3#" + this.MP_myspecials_total;
                              ++this.MP_myspecials_total;
                           }
                        }
                     }
                  }
               }
               if(param1.keyCode == 86 || param1.keyCode == 8)
               {
                  this.key_grab = true;
               }
               if(param1.keyCode == 81)
               {
                  if(this.last_gun_b4_psi != -1)
                  {
                     if(this.last_gun_b4_psi < this.gunstotal)
                     {
                        this.mc = this.guns[this.last_gun_b4_psi];
                        if(this.mc.picken_by == this.MP_myid && !this.mc.forcars)
                        {
                           if(this.mc.model != "item_grenade" || this.mc.wep >= 0)
                           {
                              this.i4 = this.mens[this.MP_myid].curwea;
                              this.mens[this.MP_myid].curwea = this.last_gun_b4_psi;
                              this.last_gun_b4_psi = this.i4;
                              this.ChangedGun(this.MP_myid);
                           }
                        }
                     }
                  }
                  else
                  {
                     this.i4 = this.mens[this.MP_myid].curwea;
                     this.mens[this.MP_myid].curwea = this.last_gun_b4_psi;
                     this.last_gun_b4_psi = this.i4;
                     this.ChangedGun(this.MP_myid);
                  }
               }
               if(param1.keyCode == 70)
               {
               }
               if(!this.MP_mode)
               {
                  if(param1.keyCode == 80)
                  {
                     if(this.system_non_stop)
                     {
                        this.system_non_stop = false;
                        if(!this.mens[this.MP_myid].dead)
                        {
                           this.pauze.visible = true;
                        }
                     }
                     else
                     {
                        this.system_non_stop = true;
                        if(!this.mens[this.MP_myid].dead)
                        {
                           this.pauze.visible = false;
                        }
                     }
                     this.stoped_by_focus = false;
                  }
               }
               if(param1.keyCode == 83 || param1.keyCode == 40 || param1.keyCode == 17)
               {
                  this.key_down = true;
               }
               if(param1.keyCode == 71 || param1.keyCode == 96 || param1.keyCode == 13)
               {
                  this.key_grenade = true;
               }
               if(param1.keyCode == 69 || param1.keyCode == 45)
               {
                  this.key_pick = true;
               }
               if(param1.keyCode == 88)
               {
                  this.key_fall = true;
               }
               if(param1.keyCode == 90)
               {
                  if(!this.key_alt)
                  {
                     if(!this.MP_mode)
                     {
                        this.key_alt = true;
                        if(this.timeshift > 0)
                        {
                           this.timeshift = 0;
                           this.timeshiftch = this.s_slow_up.play(0,0,this.vol);
                           if(this.HQ && this.SCREEN_EFFECTS)
                           {
                              this.whitness.alpha += 1;
                              this.whitness.visible = true;
                           }
                        }
                        else if(this.ALLOW_TIMESHIFT)
                        {
                           if(this.energy > 10)
                           {
                              if(!this.mens[this.MP_myid].dead)
                              {
                                 this.energy -= 10;
                                 this.timeshift = 1;
                                 this.timeshiftch = this.s_slow_down.play(0,0,this.vol);
                                 if(this.HQ && this.SCREEN_EFFECTS)
                                 {
                                    this.whitness.alpha += 1;
                                    this.whitness.visible = true;
                                 }
                              }
                           }
                        }
                     }
                  }
               }
               if(param1.keyCode == 34)
               {
                  if(!this.key_alt)
                  {
                     if(!this.MP_mode)
                     {
                        this.key_alt = true;
                        if(this.timeshift > 0)
                        {
                           this.timeshift = 0;
                           this.timeshiftch = this.s_slow_up.play(0,0,this.vol);
                           if(this.HQ && this.SCREEN_EFFECTS)
                           {
                              this.whitness.alpha += 1;
                              this.whitness.visible = true;
                           }
                        }
                     }
                  }
               }
               if(param1.keyCode == 33)
               {
                  if(!this.key_alt)
                  {
                     if(!this.MP_mode)
                     {
                        this.key_alt = true;
                        if(this.timeshift <= 0)
                        {
                           if(this.ALLOW_TIMESHIFT)
                           {
                              if(this.energy > 10)
                              {
                                 if(!this.mens[this.MP_myid].dead)
                                 {
                                    this.energy -= 10;
                                    this.timeshift = 1;
                                    this.timeshiftch = this.s_slow_down.play(0,0,this.vol);
                                    if(this.HQ && this.SCREEN_EFFECTS)
                                    {
                                       this.whitness.alpha += 1;
                                       this.whitness.visible = true;
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
               if(this.KINETIC_MODULE_ENABLED)
               {
                  if(param1.keyCode == 67)
                  {
                     if(!this.key_kinetic)
                     {
                        this.key_kinetic = true;
                        this.cinetic_target = -1;
                        _loc13_ = -1;
                        _loc2_ = 0;
                        while(_loc2_ < this.atotal)
                        {
                           if(this.aio[_loc2_] == true || this.aio[_loc2_] == false)
                           {
                              if(this.aof[_loc2_] >= 0 && this.aof[_loc2_] < 100 && this.mens[this.aof[_loc2_]].incar == -1 && this.aof[_loc2_] != this.MP_myid || this.aof[_loc2_] >= 100 || this.aof[_loc2_] > -200 && this.aof[_loc2_] <= -100 || this.aof[_loc2_] < 0 && this.aof[_loc2_] > -100 && !this.guns[-this.aof[_loc2_] - 1].forcars && this.guns[-this.aof[_loc2_] - 1].alpha > 0)
                              {
                                 if(this.arad[_loc2_] < 16)
                                 {
                                    if(this.arad[_loc2_] > 0)
                                    {
                                       _loc14_ = this.Dist2D(this.ax[_loc2_],this.ay[_loc2_],this.mens[this.MP_myid].tarx,this.mens[this.MP_myid].tary);
                                       if(_loc14_ < this.arad[_loc2_] + 40)
                                       {
                                          this.ok = true;
                                          if(this.aactive[_loc2_] != 1000)
                                          {
                                             if(this.aof[_loc2_] < 0 && this.aof[_loc2_] > -100)
                                             {
                                                if(this.guns[-this.aof[_loc2_] - 1].picken_by != -1)
                                                {
                                                   if(!this.guns[-this.aof[_loc2_] - 1].forcars)
                                                   {
                                                      if(this.guns[-this.aof[_loc2_] - 1].picken_by == this.MP_myid || this.mens[this.guns[-this.aof[_loc2_] - 1].picken_by].team != this.mens[this.MP_myid].team)
                                                      {
                                                         this.ok = false;
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                          if(this.ok)
                                          {
                                             if(_loc14_ < _loc13_ || _loc13_ == -1)
                                             {
                                                this.cinetic_target = _loc2_;
                                                _loc13_ = _loc14_;
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                           _loc2_++;
                        }
                     }
                  }
               }
               if(this.mens[this.MP_myid].hea > 0)
               {
                  if(param1.keyCode >= 48 && param1.keyCode <= 57 || param1.keyCode == 167 || param1.keyCode == 192 || param1.keyCode == 0)
                  {
                     if(param1.keyCode == 48 || param1.keyCode == 167 || param1.keyCode == 192 || param1.keyCode == 0)
                     {
                        if(this.mens[this.MP_myid].curwea != -1)
                        {
                           this.last_gun_b4_psi = this.mens[this.MP_myid].curwea;
                           this.mens[this.MP_myid].curwea = -1;
                           this.ChangedGun(this.MP_myid);
                           this.UpdateCurGun();
                        }
                     }
                     else
                     {
                        _loc2_ = 0;
                        while(_loc2_ < this.gunstotal)
                        {
                           if(this.guns[_loc2_].io)
                           {
                              this.mc = this.guns[_loc2_];
                              if(this.mc.picken_by == this.MP_myid && !this.mc.forcars)
                              {
                                 if(this.mc.wep == param1.keyCode - 48)
                                 {
                                    if(this.mens[this.MP_myid].curwea != _loc2_)
                                    {
                                       this.last_gun_b4_psi = this.mens[this.MP_myid].curwea;
                                       this.mens[this.MP_myid].curwea = _loc2_;
                                       this.ChangedGun(this.MP_myid);
                                       this.UpdateCurGun();
                                    }
                                 }
                              }
                           }
                           _loc2_++;
                        }
                     }
                  }
               }
            }
         }
         if(currentLabel == "channel")
         {
            if(this.lobbywindow.visible && param1.keyCode == Keyboard.ENTER)
            {
               this.sendLobbyMessage();
            }
         }
         this.VarChangePreventEnd();
      }
      
      public function onMouseWheelEvent(param1:Event) : void
      {
         this.VarChangePreventStart();
         if(this.MOUSE_WHEEL)
         {
            if(currentLabel == "gaming")
            {
               if(!this.MP_spectator)
               {
                  if(!this.OVERSCROLL || getTimer() > this.let_scroll_last + 150)
                  {
                     this.let_scroll_last = getTimer();
                     if(this.mens[this.MP_myid].hea > 0)
                     {
                        this.ok = true;
                        this.last_gun_b4_psi = this.mens[this.MP_myid].curwea;
                        if(this.mens[this.MP_myid].curwea == -1)
                        {
                           this.i = -1;
                        }
                        else
                        {
                           this.i = this.guns[this.mens[this.MP_myid].curwea].wep;
                        }
                        if(param1.delta > 0)
                        {
                           this.i2 = 1;
                        }
                        else
                        {
                           this.i2 = -1;
                        }
                        this.i3 = this.mens[this.MP_myid].curwea;
                        while(this.ok)
                        {
                           this.i += this.i2;
                           if(this.i > 9)
                           {
                              this.i = -1;
                           }
                           if(this.i < -1)
                           {
                              this.i = 9;
                           }
                           if(this.i == -1)
                           {
                              this.mens[this.MP_myid].curwea = -1;
                              this.ok = false;
                              this.ChangedGun(this.MP_myid);
                              this.UpdateCurGun();
                           }
                           else
                           {
                              this.i4 = 0;
                              while(this.i4 < this.gunstotal)
                              {
                                 if(this.guns[this.i4].io)
                                 {
                                    this.mc = this.guns[this.i4];
                                    if(this.mc.picken_by == this.MP_myid && !this.mc.forcars)
                                    {
                                       if(this.mc.wep == this.i)
                                       {
                                          this.mens[this.MP_myid].curwea = this.i4;
                                          this.ok = false;
                                          this.ChangedGun(this.MP_myid);
                                          this.UpdateCurGun();
                                       }
                                    }
                                 }
                                 ++this.i4;
                              }
                           }
                        }
                     }
                  }
               }
               else if(this.MP_clan == "1" || this.MP_clan == "2")
               {
                  if(param1.delta > 0 && this.game_scale <= 9)
                  {
                     this.game_scale += 0.03;
                  }
                  else if(this.game_scale >= 0.05)
                  {
                     this.game_scale -= 0.03;
                  }
               }
            }
         }
         this.VarChangePreventEnd();
      }
      
      public function k_up(param1:KeyboardEvent) : void
      {
         this.VarChangePreventStart();
         if(param1.keyCode == Keyboard.CONTROL)
         {
            this.key_ctrl = false;
         }
         if(currentLabel == "gaming")
         {
            if(this.trigger_to_key_binds_up[param1.keyCode] != undefined)
            {
               this.EXEC_TRIGGER(this.trigger_to_key_binds_up[param1.keyCode]);
            }
            if(param1.keyCode == 65 || param1.keyCode == 37)
            {
               this.key_left = false;
            }
            if(param1.keyCode == 68 || param1.keyCode == 39)
            {
               this.key_right = false;
            }
            if(param1.keyCode == 87 || param1.keyCode == 38 || param1.keyCode == 32)
            {
               this.key_up = false;
            }
            if(param1.keyCode == 83 || param1.keyCode == 40 || param1.keyCode == 17)
            {
               this.key_down = false;
            }
            if(param1.keyCode == 71 || param1.keyCode == 96 || param1.keyCode == 13)
            {
               this.key_grenade = false;
            }
            if(param1.keyCode == 69 || param1.keyCode == 45)
            {
               this.key_pick = false;
            }
            if(param1.keyCode == 88)
            {
               this.key_fall = false;
            }
            if(param1.keyCode == 90 || param1.keyCode == 34 || param1.keyCode == 33)
            {
               this.key_alt = false;
            }
            if(param1.keyCode == 9 || param1.keyCode == 35)
            {
               if(this.MP_mode)
               {
                  this.herolist.visible = false;
               }
            }
            if(param1.keyCode == 67)
            {
               this.key_kinetic = false;
            }
            if(param1.keyCode == 71)
            {
               key_nade = false;
            }
            if(param1.keyCode == 86 || param1.keyCode == 8)
            {
               this.key_grab = false;
            }
         }
         this.VarChangePreventEnd();
      }
      
      public function m_press(param1:Event) : void
      {
         var event:Event = param1;
         this.VarChangePreventStart();
         if(!this.Disable_next_click)
         {
            is_firing = true;
         }
         else
         {
            this.Disable_next_click = false;
         }
         if(mouseY < 50)
         {
            if(this.pcg.hitTestPoint(mouseX,mouseY,false))
            {
               if(this.key_ctrl)
               {
                  is_firing = false;
                  this.PlaySound_full(this.ss_info_act);
                  this.key_ctrl = false;
                  try
                  {
                     navigateToURL(new URLRequest("http://www.coolbuddy.com"),"_blank");
                  }
                  catch(e:Error)
                  {
                  }
               }
               else
               {
                  this.DialogSay("Hold \'\'Ctrl\'\' (\'\'Cmd\'\') key to press this button","#FFFF00");
               }
            }
            if(this.qmenu.hitTestPoint(mouseX,mouseY,false))
            {
               if(this.key_ctrl)
               {
                  is_firing = false;
                  this.PlaySound_full(this.ss_info_act);
                  this.key_ctrl = false;
                  if(!this.gamemenu.visible)
                  {
                     if(!this.MP_mode)
                     {
                        this.system_non_stop = false;
                        if(!this.mens[this.MP_myid].dead)
                        {
                           this.pauze.visible = true;
                        }
                        this.stoped_by_focus = false;
                     }
                     this.gamemenu.visible = true;
                     if(this.myCursor.visible)
                     {
                        Mouse.show();
                     }
                     this.setTrapAllKeys(false);
                     this.myCursor.alpha = 1;
                  }
               }
               else
               {
                  this.DialogSay("Hold \'\'Ctrl\'\' (\'\'Cmd\'\') key to press this button","#FFFF00");
               }
            }
         }
         if(this.MP_mode)
         {
            if(this.herolist.visible)
            {
               this.i = 0;
               while(this.i < this.MP_playerstotal)
               {
                  if(this.hero[this.i].alpha > 0.1)
                  {
                     if(this.hero[this.i].f1.text != "Empty")
                     {
                        if(mouseX >= this.herolist.x + this.hero[this.i].x + this.hero[this.i].vbtn1.x)
                        {
                           if(mouseX <= this.herolist.x + this.hero[this.i].x + this.hero[this.i].vbtn1.x + 25 * this.hero[this.i].vbtn1.scaleX)
                           {
                              if(mouseY >= this.herolist.y + this.hero[this.i].y + this.hero[this.i].vbtn1.y)
                              {
                                 if(mouseY <= this.herolist.y + this.hero[this.i].y + this.hero[this.i].vbtn1.y + 25 * this.hero[this.i].vbtn1.scaleY)
                                 {
                                    this.PlaySound_full(this.ss_info_act);
                                    is_firing = false;
                                    this.DialogSay("Visiting profile page of \'\'" + this.mens[this.i].login_name + "\'\'...","#FFFF00");
                                    try
                                    {
                                       navigateToURL(new URLRequest("http://www.plazmaburst2.com/?s=7&ac=" + this.mens[this.i].login_name),"_blank");
                                    }
                                    catch(e:Error)
                                    {
                                    }
                                 }
                              }
                           }
                        }
                        if(mouseX >= this.herolist.x + this.hero[this.i].x + this.hero[this.i].vbtn2.x)
                        {
                           if(mouseX <= this.herolist.x + this.hero[this.i].x + this.hero[this.i].vbtn2.x + 25 * this.hero[this.i].vbtn2.scaleX)
                           {
                              if(mouseY >= this.herolist.y + this.hero[this.i].y + this.hero[this.i].vbtn2.y)
                              {
                                 if(mouseY <= this.herolist.y + this.hero[this.i].y + this.hero[this.i].vbtn2.y + 25 * this.hero[this.i].vbtn2.scaleY)
                                 {
                                    is_firing = false;
                                    this.PlaySound_full(this.ss_info_act);
                                    if(getTimer() - this.LAST_VOTE > 3000)
                                    {
                                       this.MP_custom_events += ";votekick|" + this.i + "#" + this.MP_myid;
                                       this.LAST_VOTE = getTimer();
                                    }
                                    else
                                    {
                                       this.DialogSay("You will be allowed to vote again in " + Math.ceil((3000 - (getTimer() - this.LAST_VOTE)) / 1000) + " seconds.","#FFFF00");
                                    }
                                 }
                              }
                           }
                        }
                        if(mouseX >= this.herolist.x + this.hero[this.i].x + this.hero[this.i].vbtn3.x)
                        {
                           if(mouseX <= this.herolist.x + this.hero[this.i].x + this.hero[this.i].vbtn3.x + 25 * this.hero[this.i].vbtn3.scaleX)
                           {
                              if(mouseY >= this.herolist.y + this.hero[this.i].y + this.hero[this.i].vbtn3.y)
                              {
                                 if(mouseY <= this.herolist.y + this.hero[this.i].y + this.hero[this.i].vbtn3.y + 25 * this.hero[this.i].vbtn3.scaleY)
                                 {
                                    this.PlaySound_full(this.ss_info_act);
                                    is_firing = false;
                                    if(Boolean(this.mens[this.MP_myid].dead) || this.MP_spectator)
                                    {
                                       this.death_cam = this.i;
                                    }
                                    else
                                    {
                                       this.DialogSay("Death Camera can be changed to different players only when you are dead.","#FFFF00");
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
                  ++this.i;
               }
            }
            if(this.MP_type == 3)
            {
               if(this.team_blue.hitTestPoint(mouseX,mouseY,false))
               {
                  if(this.key_ctrl)
                  {
                     this.PlaySound_full(this.ss_info_act);
                     this.key_ctrl = false;
                     this.mc = this.mens[this.MP_myid];
                     if(getTimer() - this.mc.whenlastshot > 7000)
                     {
                        this.mc.lastshotby = -1;
                     }
                     if(this.mc.dead || this.mc.lastshotby == -1 || this.mc.lastshotby == this.MP_myid)
                     {
                        this.mc.team = 13;
                        this.mc.palette[0] = this.mc.palette[1] = this.mc.palette[2] = this.mc.palette[3] = "B";
                        this.spawn = false;
                        this.mc.hea = 0;
                        this.mc.mdl_head = this.mc.char;
                        this.mc.mdl_leg1_upper = this.mc.char;
                        this.mc.mdl_leg1_middle = this.mc.char;
                        this.mc.mdl_leg1_lower = this.mc.char;
                        this.mc.mdl_leg2_upper = this.mc.char;
                        this.mc.mdl_leg2_middle = this.mc.char;
                        this.mc.mdl_leg2_lower = this.mc.char;
                        this.mc.mdl_arm1_upper = this.mc.char;
                        this.mc.mdl_arm1_lower = this.mc.char;
                        this.mc.mdl_arm2_upper = this.mc.char;
                        this.mc.mdl_arm2_lower = this.mc.char;
                        this.mc.mdl_toe = this.mc.char;
                        this.mc.mdl_body = this.mc.char;
                        this.UpdateCharProps(this.mc);
                        this.UpdateTeamTable();
                        this.i = 0;
                        while(this.i < this.playerstotal)
                        {
                           this.UpdateTeamColor(this.mens[this.i]);
                           ++this.i;
                        }
                     }
                     else
                     {
                        this.DialogSay("Can\'t change team during fight.","#FFFF00");
                     }
                  }
                  else
                  {
                     this.DialogSay("Hold \'\'Ctrl\'\' (\'\'Cmd\'\') key to press this button","#FFFF00");
                  }
               }
               if(this.team_red.hitTestPoint(mouseX,mouseY,false))
               {
                  if(this.key_ctrl)
                  {
                     this.PlaySound_full(this.ss_info_act);
                     this.key_ctrl = false;
                     this.mc = this.mens[this.MP_myid];
                     if(getTimer() - this.mc.whenlastshot > 7000)
                     {
                        this.mc.lastshotby = -1;
                     }
                     if(this.mc.dead || this.mc.lastshotby == -1 || this.mc.lastshotby == this.MP_myid)
                     {
                        this.mc.team = 12;
                        this.mc.palette[0] = this.mc.palette[1] = this.mc.palette[2] = this.mc.palette[3] = "R";
                        this.spawn = false;
                        this.mc.hea = 0;
                        this.mc.mdl_head = this.mc.char;
                        this.mc.mdl_leg1_upper = this.mc.char;
                        this.mc.mdl_leg1_middle = this.mc.char;
                        this.mc.mdl_leg1_lower = this.mc.char;
                        this.mc.mdl_leg2_upper = this.mc.char;
                        this.mc.mdl_leg2_middle = this.mc.char;
                        this.mc.mdl_leg2_lower = this.mc.char;
                        this.mc.mdl_arm1_upper = this.mc.char;
                        this.mc.mdl_arm1_lower = this.mc.char;
                        this.mc.mdl_arm2_upper = this.mc.char;
                        this.mc.mdl_arm2_lower = this.mc.char;
                        this.mc.mdl_toe = this.mc.char;
                        this.mc.mdl_body = this.mc.char;
                        this.UpdateCharProps(this.mc);
                        this.UpdateTeamTable();
                        this.i = 0;
                        while(this.i < this.playerstotal)
                        {
                           this.UpdateTeamColor(this.mens[this.i]);
                           ++this.i;
                        }
                     }
                     else
                     {
                        this.DialogSay("Can\'t change team during fight.","#FFFF00");
                     }
                  }
                  else
                  {
                     this.DialogSay("Hold \'\'Ctrl\'\' (\'\'Cmd\'\') key to press this button","#FFFF00");
                  }
               }
            }
         }
         this.VarChangePreventEnd();
      }
      
      public function m_release(param1:Event) : void
      {
         is_firing = false;
      }
      
      public function mov2(param1:MouseEvent) : void
      {
         if(!this.stoped_by_focus)
         {
            if(!param1.buttonDown)
            {
               is_firing = false;
            }
         }
      }
      
      public function mouseLeaveListener(param1:Event) : void
      {
         if(this.game_focus_ever_lost)
         {
            return;
         }
         this.game_focus_ever_lost = true;
         if(currentLabel == "gaming")
         {
            if(!this.MP_mode)
            {
               this.system_non_stop = false;
               this.stoped_by_focus = true;
               if(!this.mens[this.MP_myid].dead)
               {
                  this.pauze.visible = true;
               }
            }
         }
      }
      
      public function mouseMoveListener(param1:Event) : void
      {
         if(!this.game_focus_ever_lost)
         {
            return;
         }
         this.game_focus_ever_lost = false;
         if(currentLabel == "gaming")
         {
            if(!this.MP_mode)
            {
               if(!this.gamemenu.visible)
               {
                  if(this.stoped_by_focus)
                  {
                     this.system_non_stop = true;
                  }
                  if(!this.mens[this.MP_myid].dead)
                  {
                     this.pauze.visible = false;
                  }
               }
            }
            this.key_left = false;
            this.key_right = false;
            this.key_up = false;
            this.key_down = false;
            this.key_grenade = false;
            this.key_pick = false;
            this.key_alt = false;
            this.key_grab = false;
            this.key_kinetic = false;
            this.key_fall = false;
            if(!this.MP_mode)
            {
               this.Disable_next_click = true;
            }
         }
      }
      
      public function r2(param1:Number) : String
      {
         return String(Math.round(param1 * 100) / 100);
      }
      
      public function DoorLogic() : void
      {
         this.i = 0;
         while(this.i < this.doorstotal)
         {
            if(this.doors[this.i].moving)
            {
               this.xx2 = this.Dist2D(this.doors[this.i].tarx,this.doors[this.i].tary,this.doors[this.i].x,this.doors[this.i].y);
               this.yy2 = this.doors[this.i].maxspeed;
               if(this.doors[this.i].forcehyperjump_float > 0)
               {
                  this.doors[this.i].forcehyperjump_float -= 0.1;
                  this.yy2 = this.yy2 * 0.9 + this.yy2 * this.MP_ping2 / this.c_sim_rt2 * 0.1;
               }
               if(this.xx2 <= this.yy2 + 1)
               {
                  if(this.doors[this.i].playsounds)
                  {
                     if(this.doors[this.i].vis)
                     {
                        this.PlaySound(this.s_t_door1_stop,this.doors[this.i].x + this.doors[this.i].w / 2,this.doors[this.i].y + this.doors[this.i].h / 2,this.doors[this.i]);
                     }
                  }
                  this.doors[this.i].moving = false;
                  this.doors[this.i].tox = 0;
                  this.doors[this.i].toy = 0;
                  this.doors[this.i].x = this.doors[this.i].tarx;
                  this.doors[this.i].y = this.doors[this.i].tary;
                  this.i2 = 0;
                  while(this.i2 < this.regionstotal)
                  {
                     if(this.regions[this.i2].use_on == 5)
                     {
                        if(this.doors[this.i].x == this.regions[this.i2].x)
                        {
                           if(this.doors[this.i].y == this.regions[this.i2].y)
                           {
                              if(this.doors[this.i].w == this.regions[this.i2].w)
                              {
                                 if(this.doors[this.i].h == this.regions[this.i2].h)
                                 {
                                    if(this.regions[this.i2].use_target != -1 && !this.regions[this.i2].uses_timer)
                                    {
                                       this.triggers[this.regions[this.i2].use_target].forcehyperjump = false;
                                       this.EXEC_TRIGGER(this.regions[this.i2].use_target);
                                    }
                                    else if(this.regions[this.i2].use_target != -1 && Boolean(this.regions[this.i2].uses_timer))
                                    {
                                       this.timers[this.regions[this.i2].use_target].forcehyperjump = false;
                                       this.timers[this.regions[this.i2].use_target].enabledd = true;
                                    }
                                 }
                              }
                           }
                        }
                     }
                     ++this.i2;
                  }
               }
               else
               {
                  this.doors[this.i].tox = (this.doors[this.i].tarx - this.doors[this.i].x) / this.xx2;
                  this.doors[this.i].toy = (this.doors[this.i].tary - this.doors[this.i].y) / this.xx2;
                  this.doors[this.i].x += this.doors[this.i].tox * this.yy2 * this.GSPEED;
                  this.doors[this.i].y += this.doors[this.i].toy * this.yy2 * this.GSPEED;
                  this.i2 = 0;
                  while(this.i2 < this.atotal)
                  {
                     if(this.aio[this.i2] == false)
                     {
                        if(this.ax[this.i2] > this.doors[this.i].x - this.Math_abs(this.doors[this.i].tox * this.yy2) - this.arad[this.i2] - 10)
                        {
                           if(this.ay[this.i2] > this.doors[this.i].y - this.Math_abs(this.doors[this.i].toy * this.yy2) - this.arad[this.i2] - 10)
                           {
                              if(this.ax[this.i2] < this.doors[this.i].x + this.doors[this.i].w + this.Math_abs(this.doors[this.i].tox * this.yy2) + this.arad[this.i2] + 10)
                              {
                                 if(this.ay[this.i2] < this.doors[this.i].y + this.doors[this.i].h + this.Math_abs(this.doors[this.i].toy * this.yy2) + this.arad[this.i2] + 10)
                                 {
                                    this.WakeUpAtom(this.i2);
                                 }
                              }
                           }
                        }
                     }
                     ++this.i2;
                  }
                  this.doors[this.i].tox *= this.doors[this.i].maxspeed;
                  this.doors[this.i].toy *= this.doors[this.i].maxspeed;
               }
               this.UpdateDoorAttachments(this.i,this.yy2);
            }
            ++this.i;
         }
      }
      
      public function UpdateDoorAttachments(param1:int, param2:Number) : void
      {
         var _loc3_:int = 0;
         _loc3_ = 0;
         while(_loc3_ < this.attachments.length)
         {
            if(this.attachments[_loc3_].parent === this.doors[param1])
            {
               if(this.attachments[_loc3_].type === 0)
               {
                  this.attachments[_loc3_].child.moving = false;
                  this.attachments[_loc3_].child.x = this.doors[param1].x + this.attachments[_loc3_].dx;
                  this.attachments[_loc3_].child.y = this.doors[param1].y + this.attachments[_loc3_].dy;
                  this.attachments[_loc3_].child.tox = this.doors[param1].tox;
                  this.attachments[_loc3_].child.toy = this.doors[param1].toy;
                  this.i2 = 0;
                  while(this.i2 < this.atotal)
                  {
                     if(this.aio[this.i2] == false)
                     {
                        if(this.ax[this.i2] > this.attachments[_loc3_].x - this.Math_abs(this.attachments[_loc3_].tox * param2) - this.arad[this.i2] - 10)
                        {
                           if(this.ay[this.i2] > this.attachments[_loc3_].y - this.Math_abs(this.attachments[_loc3_].toy * param2) - this.arad[this.i2] - 10)
                           {
                              if(this.ax[this.i2] < this.attachments[_loc3_].x + this.attachments[_loc3_].w + this.Math_abs(this.attachments[_loc3_].tox * param2) + this.arad[this.i2] + 10)
                              {
                                 if(this.ay[this.i2] < this.attachments[_loc3_].y + this.attachments[_loc3_].h + this.Math_abs(this.attachments[_loc3_].toy * param2) + this.arad[this.i2] + 10)
                                 {
                                    this.WakeUpAtom(this.i2);
                                 }
                              }
                           }
                        }
                     }
                     ++this.i2;
                  }
               }
               else if(this.attachments[_loc3_].type == 1 || this.attachments[_loc3_].type == 2 || this.attachments[_loc3_].type == 4)
               {
                  this.attachments[_loc3_].child.x = this.doors[param1].x + this.attachments[_loc3_].dx;
                  this.attachments[_loc3_].child.y = this.doors[param1].y + this.attachments[_loc3_].dy;
                  if(this.attachments[_loc3_].type == 2)
                  {
                     if(this.attachments[_loc3_].child.onMove)
                     {
                        this.attachments[_loc3_].child.onMove();
                     }
                  }
               }
               else if(this.attachments[_loc3_].type == 3)
               {
                  this.pushx[this.attachments[_loc3_].child] = this.doors[param1].x + this.attachments[_loc3_].dx;
                  this.pushy[this.attachments[_loc3_].child] = this.doors[param1].y + this.attachments[_loc3_].dy;
                  this.pushw[this.attachments[_loc3_].child] = this.doors[param1].x + this.attachments[_loc3_].dx2;
                  this.pushh[this.attachments[_loc3_].child] = this.doors[param1].y + this.attachments[_loc3_].dy2;
               }
               else if(this.attachments[_loc3_].type == 5)
               {
                  this.wax[this.attachments[_loc3_].id] = this.attachments[_loc3_].child.x = this.doors[param1].x + this.attachments[_loc3_].dx;
                  this.way[this.attachments[_loc3_].id] = this.attachments[_loc3_].child.y = this.doors[param1].y + this.attachments[_loc3_].dy;
               }
            }
            _loc3_++;
         }
      }
      
      public function BulletLogic() : void
      {
         var _loc1_:int = 0;
         var _loc2_:int = 0;
         var _loc3_:Number = NaN;
         var _loc4_:int = 0;
         var _loc5_:Number = NaN;
         var _loc6_:Number = NaN;
         var _loc7_:Number = NaN;
         var _loc8_:Number = NaN;
         var _loc9_:Number = NaN;
         var _loc10_:Number = NaN;
         var _loc11_:Number = NaN;
         var _loc12_:Number = NaN;
         var _loc13_:int = 0;
         var _loc14_:int = 0;
         var _loc15_:Number = NaN;
         var _loc16_:Number = NaN;
         var _loc17_:Number = NaN;
         var _loc18_:Number = NaN;
         var _loc19_:Number = NaN;
         var _loc20_:Number = NaN;
         var _loc21_:Boolean = false;
         var _loc22_:Boolean = false;
         var _loc23_:* = false;
         _loc1_ = 0;
         while(_loc1_ <= this.pulsmax)
         {
            if(this.puls[_loc1_] != null)
            {
               if(this.puls[_loc1_].visible == true)
               {
                  if(this.puls[_loc1_].power <= 0)
                  {
                     this.i6 = -1;
                     this.puls[_loc1_].visible = false;
                  }
                  if(this.puls[_loc1_].lag <= 0)
                  {
                     this.i7 = 0;
                     while((this.puls[_loc1_].cclass == 2 && (this.i7 == 0 || !this.puls[_loc1_].inwater) || this.puls[_loc1_].cclass == 3 || (this.i7 < -this.puls[_loc1_].lag || this.i7 == 0)) && this.puls[_loc1_].visible || this.puls[_loc1_].cclass != 2 && this.i7 == 0 || this.puls[_loc1_].power > 4 && this.puls[_loc1_].cclass == 0 && this.i7 <= 1 && this.puls[_loc1_].visible || this.puls[_loc1_].currentFrame == 15 && this.puls[_loc1_].visible)
                     {
                        this.RegisterPossibleBullet(this.puls[_loc1_]);
                        this.puls[_loc1_].lag = 0;
                        if(this.puls[_loc1_].cclass == 2 || this.puls[_loc1_].cclass == 3)
                        {
                           this.thispulspeed = 1;
                        }
                        else if(this.puls[_loc1_].master == this.MP_myid)
                        {
                           this.thispulspeed = this.GSPEED2;
                        }
                        else
                        {
                           this.thispulspeed = this.GSPEED;
                        }
                        if(this.puls[_loc1_].cclass == 2)
                        {
                           _loc4_ = 0;
                           while(_loc4_ <= this.pulsmax)
                           {
                              if(_loc1_ != _loc4_)
                              {
                                 if(this.puls[_loc4_] != null)
                                 {
                                    if(this.puls[_loc4_].visible == true)
                                    {
                                       if(this.mens[this.puls[_loc4_].master].team != this.mens[this.puls[_loc1_].master].team)
                                       {
                                          if(this.puls[_loc4_].lastin != this.puls[_loc1_].master)
                                          {
                                             if(this.puls[_loc4_].cclass == 5)
                                             {
                                                this.rx = this.puls[_loc1_].nx - this.puls[_loc1_].lx;
                                                this.ry = this.puls[_loc1_].ny - this.puls[_loc1_].ly;
                                                this.xx = this.VectorDist2D(this.rx,this.ry);
                                                this.rx /= this.xx;
                                                this.ry /= this.xx;
                                                this.x3 = this.puls[_loc4_].nx + this.ry * 10;
                                                this.y3 = this.puls[_loc4_].ny - this.rx * 10;
                                                this.x4 = this.puls[_loc4_].nx - this.ry * 10;
                                                this.y4 = this.puls[_loc4_].ny + this.rx * 10;
                                                this.xx = this.puls[_loc1_].nx;
                                                this.yy = this.puls[_loc1_].ny;
                                                this.xx2 = this.puls[_loc1_].lx;
                                                this.yy2 = this.puls[_loc1_].ly;
                                                this.rx = undefined;
                                                this.ry = undefined;
                                                this.v = ((this.xx - this.xx2) * (this.y3 - this.yy2) + (this.yy - this.yy2) * (this.xx2 - this.x3)) / ((this.yy - this.yy2) * (this.x4 - this.x3) - (this.xx - this.xx2) * (this.y4 - this.y3));
                                                this.retux = this.x3 + (this.x4 - this.x3) * this.v;
                                                this.retuy = this.y3 + (this.y4 - this.y3) * this.v;
                                                if((this.xx2 < this.xx ? this.xx2 : this.xx) - 1 <= this.retux)
                                                {
                                                   if((this.xx2 > this.xx ? this.xx2 : this.xx) + 1 >= this.retux)
                                                   {
                                                      if((this.yy2 < this.yy ? this.yy2 : this.yy) - 1 <= this.retuy)
                                                      {
                                                         if((this.yy2 > this.yy ? this.yy2 : this.yy) + 1 >= this.retuy)
                                                         {
                                                            if((this.x3 < this.x4 ? this.x3 : this.x4) - 1 <= this.retux)
                                                            {
                                                               if((this.x3 > this.x4 ? this.x3 : this.x4) + 1 >= this.retux)
                                                               {
                                                                  if((this.y3 < this.y4 ? this.y3 : this.y4) - 1 <= this.retuy)
                                                                  {
                                                                     if((this.y3 > this.y4 ? this.y3 : this.y4) + 1 >= this.retuy)
                                                                     {
                                                                        if(this.i6 != -2)
                                                                        {
                                                                           if(undefined == this.rx || this.Dist2D(this.rx,this.ry,this.puls[_loc1_].lx,this.puls[_loc1_].ly) > this.Dist2D(this.retux,this.retuy,this.puls[_loc1_].lx,this.puls[_loc1_].ly))
                                                                           {
                                                                              this.rx = this.retux;
                                                                              this.ry = this.retuy;
                                                                              this.cx = this.puls[_loc4_].power;
                                                                              if(this.puls[_loc1_].power > 0)
                                                                              {
                                                                                 this.puls[_loc4_].power -= this.puls[_loc1_].power * 0.5;
                                                                              }
                                                                              if(this.cx > 0)
                                                                              {
                                                                                 this.puls[_loc1_].power -= this.cx * 3;
                                                                              }
                                                                              if(this.puls[_loc4_].power < 0.5)
                                                                              {
                                                                                 this.puls[_loc4_].life = this.puls[_loc4_].maxbulletlife + 1;
                                                                                 this.puls[_loc4_].power = 0;
                                                                              }
                                                                              if(this.puls[_loc1_].power < 0.5)
                                                                              {
                                                                                 this.puls[_loc1_].visible = false;
                                                                                 this.puls[_loc1_].power = 0;
                                                                              }
                                                                              this.Effect(this.rx - this.puls[_loc1_].spx * 0.1,this.ry - this.puls[_loc1_].spy * 0.1,8,-this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.06,-this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.06);
                                                                              this.Effect(this.rx - this.puls[_loc1_].spx * 0.1,this.ry - this.puls[_loc1_].spy * 0.1,8,-this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.06,-this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.06);
                                                                              this.Effect(this.rx - this.puls[_loc1_].spx * 0.1,this.ry - this.puls[_loc1_].spy * 0.1,8,-this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.06,-this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.06);
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              _loc4_++;
                           }
                        }
                        if(this.puls[_loc1_].cclass != 6 && this.puls[_loc1_].cclass != 4)
                        {
                           _loc4_ = 0;
                           while(_loc4_ <= this.pulsmax)
                           {
                              if(_loc1_ != _loc4_)
                              {
                                 if(this.puls[_loc4_] != null)
                                 {
                                    if(this.puls[_loc4_].visible == true)
                                    {
                                       if(this.puls[_loc4_].cclass == 6 || this.puls[_loc4_].cclass == 4)
                                       {
                                          if(this.puls[_loc1_].lastin != -300 - _loc4_)
                                          {
                                             this.i3 = this.puls[_loc4_].attached;
                                             if(this.puls[_loc1_].nx > this.ax[this.i3] - 5 - Math.abs(this.puls[_loc1_].lx - this.puls[_loc1_].nx))
                                             {
                                                if(this.puls[_loc1_].nx < this.ax[this.i3] + 5 + Math.abs(this.puls[_loc1_].lx - this.puls[_loc1_].nx))
                                                {
                                                   if(this.puls[_loc1_].ny > this.ay[this.i3] - 5 - Math.abs(this.puls[_loc1_].ly - this.puls[_loc1_].ny))
                                                   {
                                                      if(this.puls[_loc1_].ny < this.ay[this.i3] + 5 + Math.abs(this.puls[_loc1_].ly - this.puls[_loc1_].ny))
                                                      {
                                                         if(this.CheckCross(this.puls[_loc1_].lx,this.puls[_loc1_].ly,this.puls[_loc1_].nx,this.puls[_loc1_].ny,this.ax[this.i3] - 5,this.ay[this.i3] - 5,this.ax[this.i3] + 5,this.ay[this.i3] + 5,_loc1_) || this.CheckCross(this.puls[_loc1_].lx,this.puls[_loc1_].ly,this.puls[_loc1_].nx,this.puls[_loc1_].ny,this.ax[this.i3] + 5,this.ay[this.i3] - 5,this.ax[this.i3] - 5,this.ay[this.i3] + 5,_loc1_))
                                                         {
                                                            this.puls[_loc1_].lastin = -300 - _loc4_;
                                                            this.atox[this.i3] += this.puls[_loc1_].spx * this.puls[_loc1_].power / this.arad[this.i3] * this.puls[_loc1_].knockback_multiplier;
                                                            this.atoy[this.i3] += this.puls[_loc1_].spy * this.puls[_loc1_].power / this.arad[this.i3] * this.puls[_loc1_].knockback_multiplier;
                                                            this.WakeUpAtom(this.i3);
                                                            this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,1,this.puls[_loc1_].power,0);
                                                            this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,8,-this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.04,-this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.04);
                                                            this.puls[_loc1_].power = Math.max(0,this.puls[_loc1_].power - 0.5);
                                                            if(this.puls[_loc1_].power < 0.4)
                                                            {
                                                               this.puls[_loc1_].visible = false;
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              _loc4_++;
                           }
                        }
                        if(this.puls[_loc1_].cclass == 3)
                        {
                           _loc4_ = 0;
                           while(_loc4_ <= this.pulsmax)
                           {
                              if(_loc1_ != _loc4_)
                              {
                                 if(this.puls[_loc4_] != null)
                                 {
                                    if(this.puls[_loc4_].visible == true)
                                    {
                                       if(this.mens[this.puls[_loc4_].master].team != this.mens[this.puls[_loc1_].master].team)
                                       {
                                          if(this.puls[_loc4_].lastin != this.puls[_loc1_].master)
                                          {
                                             if(this.puls[_loc4_].cclass == 0 || this.puls[_loc4_].currentFrame == 14)
                                             {
                                                if(this.Dist2D(this.puls[_loc1_].x,this.puls[_loc1_].y,this.puls[_loc4_].x,this.puls[_loc4_].y) < this.reflect_distance)
                                                {
                                                   if(this.puls[_loc4_].currentFrame == 14)
                                                   {
                                                      this.puls[_loc4_].dead = true;
                                                   }
                                                   else
                                                   {
                                                      this.u = this.VectorDist2D(this.puls[_loc1_].spx,this.puls[_loc1_].spy);
                                                      this.v = this.VectorDist2D(this.puls[_loc4_].spx,this.puls[_loc4_].spy);
                                                      this.puls[_loc4_].spx = this.puls[_loc1_].spx / this.u * 2 + this.puls[_loc4_].spx / this.v - 0.15 + Math.random() * 0.3;
                                                      this.puls[_loc4_].spy = this.puls[_loc1_].spy / this.u * 2 + this.puls[_loc4_].spy / this.v - 0.15 + Math.random() * 0.3;
                                                      this.xx = this.VectorDist2D(this.puls[_loc4_].spx,this.puls[_loc4_].spy);
                                                      this.puls[_loc4_].spx /= this.xx;
                                                      this.puls[_loc4_].spy /= this.xx;
                                                      this.puls[_loc4_].spx *= this.v;
                                                      this.puls[_loc4_].spy *= this.v;
                                                      this.puls[_loc4_].master = this.puls[_loc1_].master;
                                                      this.puls[_loc4_].lastin = this.puls[_loc1_].master;
                                                      this.puls[_loc4_].rotation = 270 - Math.atan2(this.puls[_loc4_].spx,this.puls[_loc4_].spy) / Math.PI * 180;
                                                      this.rx = (this.puls[_loc1_].x + this.puls[_loc4_].x) / 2;
                                                      this.ry = (this.puls[_loc1_].y + this.puls[_loc4_].y) / 2;
                                                      this.Effect(this.rx,this.ry,1,this.puls[_loc1_].power,0);
                                                      this.Effect(this.rx,this.ry,8,this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.06,this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.06);
                                                      this.Effect(this.rx,this.ry,8,this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.06,this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.06);
                                                      this.Effect(this.rx,this.ry,8,-this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.06,-this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.06);
                                                      if(this.mens[this.puls[_loc1_].master].isGhost)
                                                      {
                                                         if(this.mens[this.puls[_loc1_].master].alpha < 0.3)
                                                         {
                                                            this.mens[this.puls[_loc1_].master].alpha = 0.3;
                                                         }
                                                      }
                                                      if(this.puls[_loc1_].master == this.MP_myid)
                                                      {
                                                         this.incBadge(9);
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              _loc4_++;
                           }
                        }
                        if(this.puls[_loc1_].inwater)
                        {
                           if(this.puls[_loc1_].cclass == 0)
                           {
                              this.thispulspeed *= 0.3;
                           }
                           if(this.puls[_loc1_].cclass == 1)
                           {
                              this.thispulspeed *= 0.5;
                           }
                           if(this.puls[_loc1_].cclass == 4 || this.puls[_loc1_].cclass == 6)
                           {
                              this.puls[_loc1_].spy -= this.gravity * 0.5 * this.thispulspeed;
                              this.puls[_loc1_].spx *= 0.9 * this.thispulspeed;
                              this.puls[_loc1_].spy *= 0.9 * this.thispulspeed;
                           }
                        }
                        this.puls[_loc1_].lx = this.puls[_loc1_].nx - this.puls[_loc1_].spx * 0.5;
                        this.puls[_loc1_].ly = this.puls[_loc1_].ny - this.puls[_loc1_].spy * 0.5;
                        this.puls[_loc1_].x += this.puls[_loc1_].spx * this.thispulspeed;
                        this.puls[_loc1_].y += this.puls[_loc1_].spy * this.thispulspeed;
                        this.puls[_loc1_].nx = this.puls[_loc1_].x + this.puls[_loc1_].spx * 0.5;
                        this.puls[_loc1_].ny = this.puls[_loc1_].y + this.puls[_loc1_].spy * 0.5;
                        if(this.puls[_loc1_].life == 0)
                        {
                           this.puls[_loc1_].alpha = 1;
                        }
                        this.puls[_loc1_].life += this.thispulspeed;
                        if(this.puls[_loc1_].life > this.puls[_loc1_].maxbulletlife)
                        {
                           this.puls[_loc1_].visible = false;
                        }
                        if(this.puls[_loc1_].cclass == 4 || this.puls[_loc1_].cclass == 6)
                        {
                           this.puls[_loc1_].spx = this.atox[this.puls[_loc1_].attached];
                           this.puls[_loc1_].spy = this.atoy[this.puls[_loc1_].attached];
                           this.puls[_loc1_].x = this.ax[this.puls[_loc1_].attached];
                           this.puls[_loc1_].y = this.ay[this.puls[_loc1_].attached];
                           if(this.puls[_loc1_].currentFrame != 14)
                           {
                              if(this.puls[_loc1_].cclass == 6)
                              {
                                 if(this.puls[_loc1_].life > 50)
                                 {
                                    if(this.puls[_loc1_].notbliped)
                                    {
                                       this.puls[_loc1_].notbliped = false;
                                       if(this.puls[_loc1_].nadekind == 1)
                                       {
                                          this.puls[_loc1_].gotoAndStop(13);
                                          this.PlaySound(this.s_grenade_act,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                       }
                                       if(this.puls[_loc1_].nadekind == 2)
                                       {
                                          this.puls[_loc1_].gotoAndStop(18);
                                          this.PlaySound(this.s_portnade_act2,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                       }
                                       if(this.puls[_loc1_].nadekind == 3)
                                       {
                                          this.puls[_loc1_].gotoAndStop(20);
                                          this.PlaySound(this.s_shnade_act,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                       }
                                    }
                                 }
                                 if(this.puls[_loc1_].nadekind == 3)
                                 {
                                    if(this.puls[_loc1_].life > 60)
                                    {
                                       if(this.puls[_loc1_].hasexploded)
                                       {
                                          if(this.puls[_loc1_].life > this.puls[_loc1_].maxbulletlife)
                                          {
                                             this.puls[_loc1_].hea = 0;
                                          }
                                          if(this.puls[_loc1_].hea > 0)
                                          {
                                             if(!this.shnades[this.puls[_loc1_].childsh].io)
                                             {
                                                this.puls[_loc1_].hea = 0;
                                             }
                                             this.puls[_loc1_].base.scaleX = this.puls[_loc1_].base.scaleY = this.puls[_loc1_].radius / 100;
                                             this.puls[_loc1_].radius = (150 + this.puls[_loc1_].radius * 4 / this.GSPEED) / (1 + 4 / this.GSPEED);
                                             this.puls[_loc1_].losthea -= 10 * this.GSPEED;
                                             if(this.puls[_loc1_].losthea < 0)
                                             {
                                                this.puls[_loc1_].losthea = 0;
                                             }
                                             if(this.puls[_loc1_].heapo > 0)
                                             {
                                                this.puls[_loc1_].hea += this.puls[_loc1_].heapo - Math.max(this.puls[_loc1_].heapo - this.GSPEED * 5,0);
                                                this.puls[_loc1_].heapo -= this.GSPEED * 5;
                                             }
                                             this.puls[_loc1_].base.ounr.alpha = (this.puls[_loc1_].radius / 150 * 0.1 + this.puls[_loc1_].losthea * 0.1) * (1 - (100 - this.puls[_loc1_].hea) / 100 * Math.random());
                                             this.puls[_loc1_].base.innr.alpha = this.puls[_loc1_].radius / 150 * this.puls[_loc1_].losthea * 10 * this.puls[_loc1_].base.ounr.alpha * (90 - this.puls[_loc1_].heapo) / 90 + this.puls[_loc1_].heapo / 90;
                                             this.atox[this.puls[_loc1_].attached] = 0;
                                             this.atoy[this.puls[_loc1_].attached] = 0;
                                             this.ax[this.puls[_loc1_].attached] = this.puls[_loc1_].stuckx;
                                             this.ay[this.puls[_loc1_].attached] = this.puls[_loc1_].stucky;
                                             this.shnades[this.puls[_loc1_].childsh].x = this.puls[_loc1_].stuckx;
                                             this.shnades[this.puls[_loc1_].childsh].y = this.puls[_loc1_].stucky;
                                             this.shnades[this.puls[_loc1_].childsh].radius = this.puls[_loc1_].radius;
                                          }
                                          else
                                          {
                                             this.ExplodeShield(this.puls[_loc1_].childsh);
                                             this.atoy[this.puls[_loc1_].attached] -= this.GSPEED * 2;
                                             this.atim[this.puls[_loc1_].attached] = 0;
                                             this.DisposeAtom(this.puls[_loc1_].attached);
                                             this.shnades[this.puls[_loc1_].childsh].io = false;
                                             this.puls[_loc1_].visible = false;
                                          }
                                       }
                                       else
                                       {
                                          this.puls[_loc1_].hasexploded = true;
                                          this.PlaySound(this.s_shnade_explode,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                          this.puls[_loc1_].gotoAndStop(21);
                                          this.puls[_loc1_].base.ounr.alpha = 0;
                                          this.puls[_loc1_].base.innr.alpha = 0;
                                          this.puls[_loc1_].stuckx = this.puls[_loc1_].x;
                                          this.puls[_loc1_].stucky = this.puls[_loc1_].y;
                                          this.puls[_loc1_] = this.graphics_3d_front.addChildAt(this.puls[_loc1_],this.graphics_3d_front.numChildren);
                                          this.shnades[this.shnades_next] = new Object();
                                          this.shnades[this.shnades_next].io = true;
                                          this.shnades[this.shnades_next].x = this.puls[_loc1_].stuckx;
                                          this.shnades[this.shnades_next].y = this.puls[_loc1_].stucky;
                                          this.shnades[this.shnades_next].radius = 0;
                                          this.puls[_loc1_].childsh = this.shnades_next;
                                          this.shnades[this.shnades_next].parentish = _loc1_;
                                          this.nextsh();
                                       }
                                    }
                                 }
                              }
                           }
                        }
                        this.xx = this.puls[_loc1_].nx;
                        this.yy = this.puls[_loc1_].ny;
                        this.xx2 = this.puls[_loc1_].lx;
                        this.yy2 = this.puls[_loc1_].ly;
                        _loc4_ = 0;
                        while(_loc4_ < this.shnades_total)
                        {
                           if(this.shnades[_loc4_].io)
                           {
                              if(this.xx > this.shnades[_loc4_].x - this.shnades[_loc4_].radius - 100)
                              {
                                 if(this.xx < this.shnades[_loc4_].x + this.shnades[_loc4_].radius + 100)
                                 {
                                    if(this.yy > this.shnades[_loc4_].y - this.shnades[_loc4_].radius - 100)
                                    {
                                       if(this.yy < this.shnades[_loc4_].y + this.shnades[_loc4_].radius + 100)
                                       {
                                          if(this.Dist2D(this.xx,this.yy,this.shnades[_loc4_].x,this.shnades[_loc4_].y) < this.shnades[_loc4_].radius)
                                          {
                                             if(this.Dist2D(this.xx2,this.yy2,this.shnades[_loc4_].x,this.shnades[_loc4_].y) >= this.shnades[_loc4_].radius)
                                             {
                                                this.i3 = this.shnades[_loc4_].parentish;
                                                if(this.puls[_loc1_].cclass == 4 || this.puls[_loc1_].cclass == 6)
                                                {
                                                   _loc5_ = Math.atan2(this.puls[_loc1_].spy,this.puls[_loc1_].spx);
                                                   _loc6_ = this.VectorDist2D(this.puls[_loc1_].spy,this.puls[_loc1_].spx);
                                                   _loc7_ = Math.atan2(this.yy - this.puls[this.i3].y,this.xx - this.puls[this.i3].x);
                                                   _loc8_ = this.Dist2D(this.xx,this.yy,this.puls[this.i3].x,this.puls[this.i3].y);
                                                   this.ax[this.puls[_loc1_].attached] = this.puls[this.i3].x + Math.cos(_loc7_) * (_loc8_ + 2);
                                                   this.ay[this.puls[_loc1_].attached] = this.puls[this.i3].y + Math.sin(_loc7_) * (_loc8_ + 2);
                                                   _loc9_ = Math.atan2(Math.sin(_loc7_ - _loc5_),Math.cos(_loc7_ - _loc5_));
                                                   this.atox[this.puls[_loc1_].attached] -= Math.cos(_loc7_) * _loc6_ * Math.cos(_loc9_) * 2;
                                                   this.atoy[this.puls[_loc1_].attached] -= Math.sin(_loc7_) * _loc6_ * Math.cos(_loc9_) * 2;
                                                   if(_loc6_ > 4)
                                                   {
                                                      this.PlaySound(this.s_shnade_hit_low,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                                      this.puls[this.i3].losthea += 1 * 8;
                                                   }
                                                   _loc10_ = this.VectorDist2D(this.puls[_loc1_].spy,this.puls[_loc1_].spx);
                                                   if(_loc10_ > _loc6_ * 1.01)
                                                   {
                                                      this.atox[this.puls[_loc1_].attached] = this.atox[this.puls[_loc1_].attached] / _loc10_ * _loc6_;
                                                      this.atoy[this.puls[_loc1_].attached] = this.atoy[this.puls[_loc1_].attached] / _loc10_ * _loc6_;
                                                   }
                                                }
                                                else
                                                {
                                                   _loc11_ = Number(this.puls[this.i3].hea);
                                                   _loc12_ = Number(this.puls[_loc1_].power);
                                                   _loc7_ = Math.atan2(this.yy - this.puls[this.i3].y,this.xx - this.puls[this.i3].x);
                                                   _loc5_ = Math.atan2(this.puls[_loc1_].spy,this.puls[_loc1_].spx);
                                                   _loc9_ = Math.atan2(Math.sin(_loc7_ - _loc5_),Math.cos(_loc7_ - _loc5_));
                                                   _loc8_ = this.Dist2D(this.xx,this.yy,this.puls[this.i3].x,this.puls[this.i3].y);
                                                   if(this.puls[_loc1_].cclass == 0 && -Math.cos(_loc9_) < 1 / 2 || this.puls[_loc1_].cclass == 2)
                                                   {
                                                      _loc6_ = this.VectorDist2D(this.puls[_loc1_].spy,this.puls[_loc1_].spx);
                                                      this.puls[_loc1_].spx -= Math.cos(_loc7_) * _loc6_ * Math.cos(_loc9_) * 2;
                                                      this.puls[_loc1_].spy -= Math.sin(_loc7_) * _loc6_ * Math.cos(_loc9_) * 2;
                                                      _loc10_ = this.VectorDist2D(this.puls[_loc1_].spy,this.puls[_loc1_].spx);
                                                      if(_loc10_ > 0)
                                                      {
                                                         this.puls[_loc1_].spx = this.puls[_loc1_].spx / _loc10_ * _loc6_;
                                                         this.puls[_loc1_].spy = this.puls[_loc1_].spy / _loc10_ * _loc6_;
                                                      }
                                                      _loc12_ *= 0.5;
                                                      if(this.puls[_loc1_].cclass == 2)
                                                      {
                                                         if(this.puls[_loc1_].currentFrame == 29)
                                                         {
                                                            this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,21,this.puls[_loc1_].rotation,0);
                                                         }
                                                         else if(this.puls[_loc1_].currentFrame == 51)
                                                         {
                                                            this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,24,this.puls[_loc1_].rotation,0);
                                                         }
                                                         else if(this.puls[_loc1_].currentFrame == 40)
                                                         {
                                                            this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,22,this.puls[_loc1_].rotation,0);
                                                         }
                                                         else if(this.puls[_loc1_].currentFrame == 48 || this.puls[_loc1_].currentFrame == 22)
                                                         {
                                                            this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,23,this.puls[_loc1_].rotation,0);
                                                         }
                                                         else if(this.puls[_loc1_].maxpower < 5)
                                                         {
                                                            this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,5,this.puls[_loc1_].rotation,0);
                                                         }
                                                         else
                                                         {
                                                            this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,17,this.puls[_loc1_].rotation,0);
                                                         }
                                                         this.Effect(this.puls[this.i3].x + Math.cos(_loc7_) * _loc8_,this.puls[this.i3].y + Math.sin(_loc7_) * _loc8_,6,0,0);
                                                      }
                                                   }
                                                   this.cx = _loc12_;
                                                   if(this.puls[_loc1_].cclass == 2)
                                                   {
                                                      _loc13_ = 0;
                                                      while(_loc13_ < Math.sqrt(this.cx) * 2 || _loc13_ < 3)
                                                      {
                                                         this.Effect(this.puls[_loc1_].x - this.puls[_loc1_].spx,this.puls[_loc1_].y - this.puls[_loc1_].spy,8,-this.puls[_loc1_].spx * this.cx * 0.03 * Math.random(),-this.puls[_loc1_].spy * this.cx * 0.03 * Math.random());
                                                         _loc13_++;
                                                      }
                                                   }
                                                   else
                                                   {
                                                      _loc13_ = 0;
                                                      while(_loc13_ < Math.sqrt(this.cx) * 2 || _loc13_ < 3)
                                                      {
                                                         this.Effect(this.puls[this.i3].x + Math.cos(_loc7_) * _loc8_,this.puls[this.i3].y + Math.sin(_loc7_) * _loc8_,8,-this.puls[_loc1_].spx * this.cx * 0.03 * Math.random(),-this.puls[_loc1_].spy * this.cx * 0.03 * Math.random());
                                                         _loc13_++;
                                                      }
                                                   }
                                                   this.puls[this.i3].hea -= _loc12_ * 8;
                                                   this.puls[this.i3].losthea += _loc12_ * 8;
                                                   this.i4 = -1;
                                                   this.i4 = 0;
                                                   while(this.i4 < this.MP_specials.length)
                                                   {
                                                      if(this.MP_specials[this.i4] != undefined && this.MP_specials[this.i4].pul == this.i3)
                                                      {
                                                         found = true;
                                                         break;
                                                      }
                                                      ++this.i4;
                                                   }
                                                   if(this.i4 == this.MP_specials.length)
                                                   {
                                                      this.i4 = 0;
                                                      while(this.i4 < this.MP_myspecials_total)
                                                      {
                                                         if(this.MP_specials[this.i4] != undefined && this.MP_myspecials[this.i4].pul == this.i3)
                                                         {
                                                            this.i4 = this.MP_myspecials[this.i4].id_in_full_list;
                                                            found = true;
                                                            break;
                                                         }
                                                         ++this.i4;
                                                      }
                                                   }
                                                   this.MP_custom_events += ";shgh|" + this.puls[_loc1_].master + "#" + this.i4 + "#" + this.puls[this.i3].hea + "#" + _loc12_ * 8;
                                                   if(this.puls[this.i3].hea <= 0)
                                                   {
                                                      this.shnades[_loc4_].io = false;
                                                      this.ExplodeShield(_loc4_);
                                                      _loc12_ = -this.puls[this.i3].hea / 8;
                                                   }
                                                   if(_loc12_ > 0)
                                                   {
                                                      if(this.shnades[_loc4_].io)
                                                      {
                                                         if(_loc12_ > 1.2)
                                                         {
                                                            this.PlaySound(this.s_shnade_hit,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                                         }
                                                         else
                                                         {
                                                            this.PlaySound(this.s_shnade_hit_low,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                                         }
                                                      }
                                                      this.puls[_loc1_].power -= _loc12_;
                                                   }
                                                   if(this.puls[_loc1_].power < 0.4)
                                                   {
                                                      this.puls[_loc1_].visible = false;
                                                   }
                                                   else
                                                   {
                                                      this.puls[_loc1_].rotation = 270 - Math.atan2(this.puls[_loc1_].spx,this.puls[_loc1_].spy) / Math.PI * 180;
                                                      this.puls[_loc1_].lastin = -1;
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                           _loc4_++;
                        }
                        this.rx = undefined;
                        this.ry = undefined;
                        this.i6 = -1;
                        if(this.puls[_loc1_].cclass != 4)
                        {
                           for each(_loc4_ in this.GetNearBoxBSP_at(this.puls[_loc1_].x,this.puls[_loc1_].y))
                           {
                              if(this.puls[_loc1_].lastinbox != _loc4_)
                              {
                                 if(this.puls[_loc1_].x >= this.boxx[_loc4_] - this.Math_abs(this.puls[_loc1_].spx) * this.thispulspeed)
                                 {
                                    if(this.puls[_loc1_].x <= this.boxx[_loc4_] + this.boxw[_loc4_] + this.Math_abs(this.puls[_loc1_].spx) * this.thispulspeed)
                                    {
                                       if(this.puls[_loc1_].y >= this.boxy[_loc4_] - this.Math_abs(this.puls[_loc1_].spy) * this.thispulspeed)
                                       {
                                          if(this.puls[_loc1_].y <= this.boxy[_loc4_] + this.boxh[_loc4_] + this.Math_abs(this.puls[_loc1_].spy) * this.thispulspeed)
                                          {
                                             this.i3 = 0;
                                             while(this.i3 < 4)
                                             {
                                                if(this.puls[_loc1_].spx > 0 && this.i3 == 2 || this.puls[_loc1_].spx < 0 && this.i3 == 1 || this.puls[_loc1_].spy > 0 && this.i3 == 0 || this.puls[_loc1_].spy < 0 && this.i3 == 3)
                                                {
                                                   if(this.i3 == 0)
                                                   {
                                                      this.x3 = this.boxx[_loc4_];
                                                      this.y3 = this.boxy[_loc4_];
                                                      this.x4 = this.boxx[_loc4_] + this.boxw[_loc4_];
                                                      this.y4 = this.boxy[_loc4_];
                                                   }
                                                   else if(this.i3 == 1)
                                                   {
                                                      this.x3 = this.boxx[_loc4_] + this.boxw[_loc4_];
                                                      this.y3 = this.boxy[_loc4_];
                                                      this.x4 = this.boxx[_loc4_] + this.boxw[_loc4_];
                                                      this.y4 = this.boxy[_loc4_] + this.boxh[_loc4_];
                                                   }
                                                   else if(this.i3 == 2)
                                                   {
                                                      this.x3 = this.boxx[_loc4_];
                                                      this.y3 = this.boxy[_loc4_];
                                                      this.x4 = this.boxx[_loc4_];
                                                      this.y4 = this.boxy[_loc4_] + this.boxh[_loc4_];
                                                   }
                                                   else
                                                   {
                                                      this.x3 = this.boxx[_loc4_];
                                                      this.y3 = this.boxy[_loc4_] + this.boxh[_loc4_];
                                                      this.x4 = this.boxx[_loc4_] + this.boxw[_loc4_];
                                                      this.y4 = this.boxy[_loc4_] + this.boxh[_loc4_];
                                                   }
                                                   this.v = ((this.xx - this.xx2) * (this.y3 - this.yy2) + (this.yy - this.yy2) * (this.xx2 - this.x3)) / ((this.yy - this.yy2) * (this.x4 - this.x3) - (this.xx - this.xx2) * (this.y4 - this.y3));
                                                   this.retux = this.x3 + (this.x4 - this.x3) * this.v;
                                                   this.retuy = this.y3 + (this.y4 - this.y3) * this.v;
                                                   if((this.xx2 < this.xx ? this.xx2 : this.xx) - 1 <= this.retux)
                                                   {
                                                      if((this.xx2 > this.xx ? this.xx2 : this.xx) + 1 >= this.retux)
                                                      {
                                                         if((this.yy2 < this.yy ? this.yy2 : this.yy) - 1 <= this.retuy)
                                                         {
                                                            if((this.yy2 > this.yy ? this.yy2 : this.yy) + 1 >= this.retuy)
                                                            {
                                                               if(this.boxx[_loc4_] - 1 <= this.retux)
                                                               {
                                                                  if(this.boxx[_loc4_] + 1 + this.boxw[_loc4_] >= this.retux)
                                                                  {
                                                                     if(this.boxy[_loc4_] - 1 <= this.retuy)
                                                                     {
                                                                        if(this.boxy[_loc4_] + 1 + this.boxh[_loc4_] >= this.retuy)
                                                                        {
                                                                           if(this.i6 != -2)
                                                                           {
                                                                              if(this.i6 == -1 || this.Dist2D(this.rx,this.ry,this.puls[_loc1_].lx,this.puls[_loc1_].ly) > this.Dist2D(this.retux,this.retuy,this.puls[_loc1_].lx,this.puls[_loc1_].ly))
                                                                              {
                                                                                 this.rx = this.retux;
                                                                                 this.ry = this.retuy;
                                                                                 this.i6 = this.i3;
                                                                                 this.puls[_loc1_].lastinbox = _loc4_;
                                                                              }
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                                ++this.i3;
                                             }
                                          }
                                       }
                                    }
                                 }
                                 if(this.i6 == -1)
                                 {
                                    if(this.puls[_loc1_].x >= this.boxx[_loc4_])
                                    {
                                       if(this.puls[_loc1_].x <= this.boxx[_loc4_] + this.boxw[_loc4_])
                                       {
                                          if(this.puls[_loc1_].y >= this.boxy[_loc4_])
                                          {
                                             if(this.puls[_loc1_].y <= this.boxy[_loc4_] + this.boxh[_loc4_])
                                             {
                                                this.rx = this.puls[_loc1_].x;
                                                this.ry = this.puls[_loc1_].y;
                                                this.i6 = -2;
                                                this.puls[_loc1_].lastinbox = _loc4_;
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                           _loc4_ = 0;
                           while(_loc4_ < this.doorstotal)
                           {
                              if(this.puls[_loc1_].lastinbox != -1 - _loc4_)
                              {
                                 if(this.puls[_loc1_].x >= this.doors[_loc4_].x - this.Math_abs(this.puls[_loc1_].spx) * this.thispulspeed)
                                 {
                                    if(this.puls[_loc1_].x <= this.doors[_loc4_].x + this.doors[_loc4_].w + this.Math_abs(this.puls[_loc1_].spx) * this.thispulspeed)
                                    {
                                       if(this.puls[_loc1_].y >= this.doors[_loc4_].y - this.Math_abs(this.puls[_loc1_].spy) * this.thispulspeed)
                                       {
                                          if(this.puls[_loc1_].y <= this.doors[_loc4_].y + this.doors[_loc4_].h + this.Math_abs(this.puls[_loc1_].spy) * this.thispulspeed)
                                          {
                                             this.i3 = 0;
                                             while(this.i3 < 4)
                                             {
                                                if(this.puls[_loc1_].spx > 0 && this.i3 == 2 || this.puls[_loc1_].spx < 0 && this.i3 == 1 || this.puls[_loc1_].spy > 0 && this.i3 == 0 || this.puls[_loc1_].spy < 0 && this.i3 == 3)
                                                {
                                                   if(this.i3 == 0)
                                                   {
                                                      this.x3 = this.doors[_loc4_].x;
                                                      this.y3 = this.doors[_loc4_].y;
                                                      this.x4 = this.doors[_loc4_].x + this.doors[_loc4_].w;
                                                      this.y4 = this.doors[_loc4_].y;
                                                   }
                                                   else if(this.i3 == 1)
                                                   {
                                                      this.x3 = this.doors[_loc4_].x + this.doors[_loc4_].w;
                                                      this.y3 = this.doors[_loc4_].y;
                                                      this.x4 = this.doors[_loc4_].x + this.doors[_loc4_].w;
                                                      this.y4 = this.doors[_loc4_].y + this.doors[_loc4_].h;
                                                   }
                                                   else if(this.i3 == 2)
                                                   {
                                                      this.x3 = this.doors[_loc4_].x;
                                                      this.y3 = this.doors[_loc4_].y;
                                                      this.x4 = this.doors[_loc4_].x;
                                                      this.y4 = this.doors[_loc4_].y + this.doors[_loc4_].h;
                                                   }
                                                   else if(this.i3 == 3)
                                                   {
                                                      this.x3 = this.doors[_loc4_].x;
                                                      this.y3 = this.doors[_loc4_].y + this.doors[_loc4_].h;
                                                      this.x4 = this.doors[_loc4_].x + this.doors[_loc4_].w;
                                                      this.y4 = this.doors[_loc4_].y + this.doors[_loc4_].h;
                                                   }
                                                   this.v = ((this.xx - this.xx2) * (this.y3 - this.yy2) + (this.yy - this.yy2) * (this.xx2 - this.x3)) / ((this.yy - this.yy2) * (this.x4 - this.x3) - (this.xx - this.xx2) * (this.y4 - this.y3));
                                                   this.retux = this.x3 + (this.x4 - this.x3) * this.v;
                                                   this.retuy = this.y3 + (this.y4 - this.y3) * this.v;
                                                   if((this.xx2 < this.xx ? this.xx2 : this.xx) - 1 <= this.retux)
                                                   {
                                                      if((this.xx2 > this.xx ? this.xx2 : this.xx) + 1 >= this.retux)
                                                      {
                                                         if((this.yy2 < this.yy ? this.yy2 : this.yy) - 1 <= this.retuy)
                                                         {
                                                            if((this.yy2 > this.yy ? this.yy2 : this.yy) + 1 >= this.retuy)
                                                            {
                                                               if(this.doors[_loc4_].x - 1 <= this.retux)
                                                               {
                                                                  if(this.doors[_loc4_].x + 1 + this.doors[_loc4_].w >= this.retux)
                                                                  {
                                                                     if(this.doors[_loc4_].y - 1 <= this.retuy)
                                                                     {
                                                                        if(this.doors[_loc4_].y + 1 + this.doors[_loc4_].h >= this.retuy)
                                                                        {
                                                                           if(this.i6 != -2)
                                                                           {
                                                                              if(this.i6 == -1 || this.Dist2D(this.rx,this.ry,this.puls[_loc1_].lx,this.puls[_loc1_].ly) > this.Dist2D(this.retux,this.retuy,this.puls[_loc1_].lx,this.puls[_loc1_].ly))
                                                                              {
                                                                                 this.rx = this.retux;
                                                                                 this.ry = this.retuy;
                                                                                 this.i6 = this.i3;
                                                                                 this.puls[_loc1_].lastinbox = -1 - _loc4_;
                                                                                 if(this.doors[_loc4_].onshot != -1)
                                                                                 {
                                                                                    if(this.puls[_loc1_].master == this.MP_myid || !this.MP_mode)
                                                                                    {
                                                                                       this.TRIGGER_PLAYER_INITIATOR = this.MP_myid;
                                                                                       this.TRIGGER_PROJECTILE_POWER = this.puls[_loc1_].power;
                                                                                       if(this.EXEC_TRIGGER(this.doors[_loc4_].onshot))
                                                                                       {
                                                                                          if(this.puls[_loc1_].master == this.MP_myid)
                                                                                          {
                                                                                             if(this.MP_mode)
                                                                                             {
                                                                                                this.MP_custom_events += ";exec|" + this.doors[_loc4_].onshot + "#" + this.MP_myid + "#" + -1 + "#" + this.puls[_loc1_].power;
                                                                                             }
                                                                                          }
                                                                                       }
                                                                                    }
                                                                                 }
                                                                              }
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                                ++this.i3;
                                             }
                                          }
                                       }
                                    }
                                 }
                                 if(this.i6 == -1)
                                 {
                                    if(this.puls[_loc1_].x >= this.boxx[_loc4_])
                                    {
                                       if(this.puls[_loc1_].x <= this.boxx[_loc4_] + this.boxw[_loc4_])
                                       {
                                          if(this.puls[_loc1_].y >= this.boxy[_loc4_])
                                          {
                                             if(this.puls[_loc1_].y <= this.boxy[_loc4_] + this.boxh[_loc4_])
                                             {
                                                this.rx = this.puls[_loc1_].x;
                                                this.ry = this.puls[_loc1_].y;
                                                this.i6 = -2;
                                                this.puls[_loc1_].lastinbox = -1 - _loc4_;
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              _loc4_++;
                           }
                           if(this.i6 != -1)
                           {
                              if(this.puls[_loc1_].cclass == 1 || this.puls[_loc1_].cclass == 3 || this.puls[_loc1_].cclass == 5)
                              {
                                 this.puls[_loc1_].visible = false;
                              }
                              if(this.puls[_loc1_].cclass == 3)
                              {
                                 this.Effect(this.rx,this.ry,1,this.puls[_loc1_].power,0);
                                 this.Effect(this.rx - this.puls[_loc1_].spx * 0.1,this.ry - this.puls[_loc1_].spy * 0.1,8,-this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.06,-this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.06);
                                 this.Effect(this.rx - this.puls[_loc1_].spx * 0.1,this.ry - this.puls[_loc1_].spy * 0.1,8,-this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.06,-this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.06);
                                 this.Effect(this.rx - this.puls[_loc1_].spx * 0.1,this.ry - this.puls[_loc1_].spy * 0.1,8,-this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.06,-this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.06);
                              }
                              this.puls[_loc1_].nx = this.rx;
                              this.puls[_loc1_].ny = this.ry;
                              if(this.puls[_loc1_].cclass == 0)
                              {
                                 this.Effect(this.rx,this.ry,1,this.puls[_loc1_].power,0);
                                 if(this.i6 == 0 || this.i6 == 3)
                                 {
                                    this.xx = this.Math_abs(this.puls[_loc1_].spx);
                                    this.yy = this.Math_abs(this.puls[_loc1_].spy);
                                 }
                                 else
                                 {
                                    this.xx = this.Math_abs(this.puls[_loc1_].spy);
                                    this.yy = this.Math_abs(this.puls[_loc1_].spx);
                                 }
                                 if((this.yy < this.xx / 2 || this.puls[_loc1_].currentFrame == 38) && this.i6 != -2)
                                 {
                                    if(this.i6 == 0)
                                    {
                                       this.puls[_loc1_].spy = -this.Math_abs(this.puls[_loc1_].spy);
                                    }
                                    if(this.i6 == 3)
                                    {
                                       this.puls[_loc1_].spy = this.Math_abs(this.puls[_loc1_].spy);
                                    }
                                    if(this.i6 == 1)
                                    {
                                       this.puls[_loc1_].spx = this.Math_abs(this.puls[_loc1_].spx);
                                    }
                                    if(this.i6 == 2)
                                    {
                                       this.puls[_loc1_].spx = -this.Math_abs(this.puls[_loc1_].spx);
                                    }
                                    if(this.puls[_loc1_].currentFrame == 38)
                                    {
                                       this.puls[_loc1_].power *= 0.75;
                                       if(this.puls[_loc1_].power < 0.4)
                                       {
                                          this.puls[_loc1_].visible = false;
                                       }
                                       else
                                       {
                                          this.PlaySound(this.s_bounce_bullet,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                          this.puls[_loc1_].x = this.rx + this.puls[_loc1_].spx / this.Math_abs(this.puls[_loc1_].spx);
                                          this.puls[_loc1_].y = this.ry + this.puls[_loc1_].spy / this.Math_abs(this.puls[_loc1_].spy);
                                          this.puls[_loc1_].rotation = -90 - Math.atan2(this.puls[_loc1_].spx,this.puls[_loc1_].spy) / Math.PI * 180;
                                       }
                                    }
                                    else
                                    {
                                       this.puls[_loc1_].power *= 0.5;
                                       if(this.puls[_loc1_].power < 0.4)
                                       {
                                          this.puls[_loc1_].visible = false;
                                       }
                                       else
                                       {
                                          this.puls[_loc1_].x = this.rx + this.puls[_loc1_].spx / this.Math_abs(this.puls[_loc1_].spx);
                                          this.puls[_loc1_].y = this.ry + this.puls[_loc1_].spy / this.Math_abs(this.puls[_loc1_].spy);
                                          this.puls[_loc1_].rotation = -90 - Math.atan2(this.puls[_loc1_].spx,this.puls[_loc1_].spy) / Math.PI * 180;
                                       }
                                    }
                                 }
                                 else
                                 {
                                    this.xx = this.puls[_loc1_].power * 0.57 * this.weapon_penetration_factor;
                                    if(this.xx > 0.816 * this.weapon_penetration_factor)
                                    {
                                       this.xx = 0.816 * this.weapon_penetration_factor;
                                    }
                                    if(this.TracePointNoRagdolls(this.rx + this.puls[_loc1_].spx * this.xx,this.ry + this.puls[_loc1_].spy * this.xx))
                                    {
                                       this.Effect(this.rx + this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.5,this.ry + this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.5,8,this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.06,this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.06);
                                       this.Effect(this.rx + this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.5,this.ry + this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.5,8,this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.06,this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.06);
                                       this.Effect(this.rx,this.ry,8,-this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.06,-this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.06);
                                       this.Effect(this.rx,this.ry,8,-this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.06,-this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.06);
                                       this.puls[_loc1_].power *= 0.7;
                                       if(this.puls[_loc1_].power < 0.4)
                                       {
                                          this.puls[_loc1_].visible = false;
                                       }
                                    }
                                    else
                                    {
                                       this.puls[_loc1_].visible = false;
                                    }
                                 }
                              }
                              if(this.puls[_loc1_].cclass == 2 && this.MP_mode && this.MP_type != 2)
                              {
                                 this.puls[_loc1_].power *= 0.35;
                                 if(this.puls[_loc1_].power < 0.4)
                                 {
                                    this.puls[_loc1_].visible = false;
                                 }
                                 else
                                 {
                                    this.puls[_loc1_].lastin = -1;
                                    if(this.i6 != -2)
                                    {
                                       if(this.puls[_loc1_].currentFrame == 29)
                                       {
                                          this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,21,this.puls[_loc1_].rotation,0);
                                       }
                                       else if(this.puls[_loc1_].currentFrame == 51)
                                       {
                                          this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,24,this.puls[_loc1_].rotation,0);
                                       }
                                       else if(this.puls[_loc1_].currentFrame == 40)
                                       {
                                          this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,22,this.puls[_loc1_].rotation,0);
                                       }
                                       else if(this.puls[_loc1_].currentFrame == 48 || this.puls[_loc1_].currentFrame == 22)
                                       {
                                          this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,23,this.puls[_loc1_].rotation,0);
                                       }
                                       else if(this.puls[_loc1_].maxpower < 5)
                                       {
                                          this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,5,this.puls[_loc1_].rotation,0);
                                       }
                                       else
                                       {
                                          this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,17,this.puls[_loc1_].rotation,0);
                                       }
                                       this.Effect(this.rx,this.ry,6,0,0);
                                    }
                                    if(this.i6 == 0)
                                    {
                                       this.puls[_loc1_].spy = -this.Math_abs(this.puls[_loc1_].spy);
                                    }
                                    if(this.i6 == 3)
                                    {
                                       this.puls[_loc1_].spy = this.Math_abs(this.puls[_loc1_].spy);
                                    }
                                    if(this.i6 == 1)
                                    {
                                       this.puls[_loc1_].spx = this.Math_abs(this.puls[_loc1_].spx);
                                    }
                                    if(this.i6 == 2)
                                    {
                                       this.puls[_loc1_].spx = -this.Math_abs(this.puls[_loc1_].spx);
                                    }
                                    if(this.i6 == -2)
                                    {
                                       this.puls[_loc1_].visible = false;
                                    }
                                    this.puls[_loc1_].x = this.rx + this.puls[_loc1_].spx / this.Math_abs(this.puls[_loc1_].spx);
                                    this.puls[_loc1_].y = this.ry + this.puls[_loc1_].spy / this.Math_abs(this.puls[_loc1_].spy);
                                    this.puls[_loc1_].x += this.puls[_loc1_].spx * 0.5;
                                    this.puls[_loc1_].y += this.puls[_loc1_].spy * 0.5;
                                    this.puls[_loc1_].rotation = -90 - Math.atan2(this.puls[_loc1_].spx,this.puls[_loc1_].spy) / Math.PI * 180;
                                 }
                              }
                              else if(this.puls[_loc1_].cclass == 2)
                              {
                                 this.puls[_loc1_].visible = false;
                              }
                           }
                           this.ok = true;
                           _loc4_ = 0;
                           while(_loc4_ < this.watertotal)
                           {
                              if(this.puls[_loc1_].x > this.wax[_loc4_])
                              {
                                 if(this.puls[_loc1_].x < this.wax[_loc4_] + this.waw[_loc4_])
                                 {
                                    if(this.puls[_loc1_].y > this.way[_loc4_])
                                    {
                                       if(this.puls[_loc1_].y < this.way[_loc4_] + this.wah[_loc4_])
                                       {
                                          if(this.wa_friction[_loc4_])
                                          {
                                             if(this.SUPER_COMPUTER && !this.c_sim_stress)
                                             {
                                                this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,2,0,0);
                                             }
                                             this.ok = false;
                                             if(this.puls[_loc1_].inwater == false)
                                             {
                                                this.Effect(this.puls[_loc1_].x,this.way[_loc4_],3,0,this.puls[_loc1_].spy);
                                                this.puls[_loc1_].inwater = true;
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              _loc4_++;
                           }
                           if(this.ok)
                           {
                              if(this.puls[_loc1_].inwater)
                              {
                                 this.puls[_loc1_].inwater = false;
                                 this.Effect(this.puls[_loc1_].x - this.puls[_loc1_].spx / 2,this.puls[_loc1_].y - this.puls[_loc1_].spy / 2,3,0,this.puls[_loc1_].spy);
                              }
                           }
                        }
                        if(this.puls[_loc1_].cclass != 6)
                        {
                           this.i3 = 0;
                           while(this.i3 < this.vehiclestotal)
                           {
                              if(this.vehicles[this.i3].io)
                              {
                                 if(this.puls[_loc1_].master == -1 || this.vehicles[this.i3].master == -1 || this.mens[this.puls[_loc1_].master].team != this.mens[this.vehicles[this.i3].master].team || this.vehicles[this.i3].typ == 7 && this.puls[_loc1_].master != this.vehicles[this.i3].master)
                                 {
                                    this.ok = false;
                                    if(this.vehicles[this.i3].typ == 0)
                                    {
                                       this.i4 = 0;
                                       while(this.i4 < 7 && !this.ok)
                                       {
                                          if(this.i4 == this.MP_myid)
                                          {
                                             _loc4_ = int(this.vehicles[this.i3].b_w1);
                                          }
                                          if(this.i4 == 1)
                                          {
                                             _loc4_ = int(this.vehicles[this.i3].b_w2);
                                          }
                                          if(this.i4 == 2)
                                          {
                                             _loc4_ = int(this.vehicles[this.i3].b_c);
                                          }
                                          if(this.i4 == 3)
                                          {
                                             _loc4_ = int(this.vehicles[this.i3].b_c2);
                                          }
                                          if(this.i4 == 4)
                                          {
                                             _loc4_ = int(this.vehicles[this.i3].b_c3);
                                          }
                                          if(this.i4 == 5)
                                          {
                                             _loc4_ = int(this.vehicles[this.i3].b_w1b);
                                          }
                                          if(this.i4 == 6)
                                          {
                                             _loc4_ = int(this.vehicles[this.i3].b_w2b);
                                          }
                                          if(this.puls[_loc1_].x >= this.ax[_loc4_] - this.arad[_loc4_] * 0.8 - this.Math_abs(this.puls[_loc1_].spx) / 2 + this.puls[_loc1_].spx)
                                          {
                                             if(this.puls[_loc1_].x <= this.ax[_loc4_] + this.arad[_loc4_] * 0.8 + this.Math_abs(this.puls[_loc1_].spx) / 2 + this.puls[_loc1_].spx)
                                             {
                                                if(this.puls[_loc1_].y >= this.ay[_loc4_] - this.arad[_loc4_] * 0.8 - this.Math_abs(this.puls[_loc1_].spy) / 2 + this.puls[_loc1_].spy)
                                                {
                                                   if(this.puls[_loc1_].y <= this.ay[_loc4_] + this.arad[_loc4_] * 0.8 + this.Math_abs(this.puls[_loc1_].spy) / 2 + this.puls[_loc1_].spy)
                                                   {
                                                      this.ok = true;
                                                      this.atox[_loc4_] = (this.atox[_loc4_] * 40 + this.puls[_loc1_].spx * this.puls[_loc1_].power * this.puls[_loc1_].knockback_multiplier) / (39 + this.puls[_loc1_].power);
                                                      this.atoy[_loc4_] = (this.atoy[_loc4_] * 40 + this.puls[_loc1_].spy * this.puls[_loc1_].power * this.puls[_loc1_].knockback_multiplier) / (39 + this.puls[_loc1_].power);
                                                      this.WakeUpAtom(_loc4_);
                                                      this.vehicles[this.i3].hea -= this.puls[_loc1_].power * 10;
                                                      this.puls[_loc1_].visible = false;
                                                      this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,1,this.puls[_loc1_].power,0);
                                                      this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,8,-this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.04,-this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.04);
                                                      this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,8,-this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.05,-this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.05);
                                                      this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,8,-this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.1,-this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.1);
                                                   }
                                                }
                                             }
                                          }
                                          ++this.i4;
                                       }
                                    }
                                    if(this.vehicles[this.i3].typ == 1)
                                    {
                                       this.i4 = 0;
                                       while(this.i4 < 7 && !this.ok)
                                       {
                                          if(this.i4 == this.MP_myid)
                                          {
                                             _loc4_ = int(this.vehicles[this.i3].b_w1);
                                          }
                                          if(this.i4 == 1)
                                          {
                                             _loc4_ = int(this.vehicles[this.i3].b_w2);
                                          }
                                          if(this.i4 == 2)
                                          {
                                             _loc4_ = int(this.vehicles[this.i3].b_p1);
                                          }
                                          if(this.i4 == 3)
                                          {
                                             _loc4_ = int(this.vehicles[this.i3].b_p2);
                                          }
                                          if(this.i4 == 4)
                                          {
                                             _loc4_ = int(this.vehicles[this.i3].b_p3);
                                          }
                                          if(this.i4 == 5)
                                          {
                                             _loc4_ = int(this.vehicles[this.i3].b_w1b);
                                          }
                                          if(this.i4 == 6)
                                          {
                                             _loc4_ = int(this.vehicles[this.i3].b_w2b);
                                          }
                                          if(this.puls[_loc1_].x >= this.ax[_loc4_] - this.arad[_loc4_] * 0.8 - this.Math_abs(this.puls[_loc1_].spx) / 2 + this.puls[_loc1_].spx)
                                          {
                                             if(this.puls[_loc1_].x <= this.ax[_loc4_] + this.arad[_loc4_] * 0.8 + this.Math_abs(this.puls[_loc1_].spx) / 2 + this.puls[_loc1_].spx)
                                             {
                                                if(this.puls[_loc1_].y >= this.ay[_loc4_] - this.arad[_loc4_] * 0.8 - this.Math_abs(this.puls[_loc1_].spy) / 2 + this.puls[_loc1_].spy)
                                                {
                                                   if(this.puls[_loc1_].y <= this.ay[_loc4_] + this.arad[_loc4_] * 0.8 + this.Math_abs(this.puls[_loc1_].spy) / 2 + this.puls[_loc1_].spy)
                                                   {
                                                      this.ok = true;
                                                      this.atox[_loc4_] = (this.atox[_loc4_] * 40 + this.puls[_loc1_].spx * this.puls[_loc1_].power * this.puls[_loc1_].knockback_multiplier) / (39 + this.puls[_loc1_].power);
                                                      this.atoy[_loc4_] = (this.atoy[_loc4_] * 40 + this.puls[_loc1_].spy * this.puls[_loc1_].power * this.puls[_loc1_].knockback_multiplier) / (39 + this.puls[_loc1_].power);
                                                      this.WakeUpAtom(_loc4_);
                                                      this.vehicles[this.i3].hea -= this.puls[_loc1_].power * 10;
                                                      this.puls[_loc1_].visible = false;
                                                      this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,1,this.puls[_loc1_].power,0);
                                                      this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,8,-this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.04,-this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.04);
                                                      this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,8,-this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.05,-this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.05);
                                                      this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,8,-this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.1,-this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.1);
                                                   }
                                                }
                                             }
                                          }
                                          ++this.i4;
                                       }
                                    }
                                    if(this.vehicles[this.i3].typ == 3)
                                    {
                                       if(this.vehicles[this.i3].hea > 0)
                                       {
                                          _loc4_ = int(this.vehicles[this.i3].b_c);
                                          if(this.puls[_loc1_].x >= this.ax[_loc4_] - 30 - this.Math_abs(this.puls[_loc1_].spx) / 2 + this.puls[_loc1_].spx)
                                          {
                                             if(this.puls[_loc1_].x <= this.ax[_loc4_] + 30 + this.Math_abs(this.puls[_loc1_].spx) / 2 + this.puls[_loc1_].spx)
                                             {
                                                if(this.puls[_loc1_].y >= this.ay[_loc4_] - 30 - this.Math_abs(this.puls[_loc1_].spy) / 2 + this.puls[_loc1_].spy)
                                                {
                                                   if(this.puls[_loc1_].y <= this.ay[_loc4_] + 30 + this.Math_abs(this.puls[_loc1_].spy) / 2 + this.puls[_loc1_].spy)
                                                   {
                                                      this.ok = true;
                                                      this.atox[_loc4_] += this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.03 * this.puls[_loc1_].knockback_multiplier;
                                                      this.atoy[_loc4_] += this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.03 * this.puls[_loc1_].knockback_multiplier;
                                                      this.atox[this.vehicles[this.i3].b_lt] += this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.03 * this.puls[_loc1_].knockback_multiplier;
                                                      this.atoy[this.vehicles[this.i3].b_lt] += this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.03 * this.puls[_loc1_].knockback_multiplier;
                                                      this.atox[this.vehicles[this.i3].b_rt] += this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.03 * this.puls[_loc1_].knockback_multiplier;
                                                      this.atoy[this.vehicles[this.i3].b_rt] += this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.03 * this.puls[_loc1_].knockback_multiplier;
                                                      this.atox[this.vehicles[this.i3].b_lb] += this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.03 * this.puls[_loc1_].knockback_multiplier;
                                                      this.atoy[this.vehicles[this.i3].b_lb] += this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.03 * this.puls[_loc1_].knockback_multiplier;
                                                      this.atox[this.vehicles[this.i3].b_rb] += this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.03 * this.puls[_loc1_].knockback_multiplier;
                                                      this.atoy[this.vehicles[this.i3].b_rb] += this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.03 * this.puls[_loc1_].knockback_multiplier;
                                                      this.WakeUpAtom(_loc4_);
                                                      this.aio[this.vehicles[this.i3].b_lt] = true;
                                                      this.aio[this.vehicles[this.i3].b_rt] = true;
                                                      this.aio[this.vehicles[this.i3].b_lb] = true;
                                                      this.aio[this.vehicles[this.i3].b_rb] = true;
                                                      this.vehicles[this.i3].hea -= this.puls[_loc1_].power * 10;
                                                      this.atim[this.vehicles[this.i3].b_lt] = 0;
                                                      this.atim[this.vehicles[this.i3].b_rt] = 0;
                                                      this.atim[this.vehicles[this.i3].b_lb] = 0;
                                                      this.atim[this.vehicles[this.i3].b_rb] = 0;
                                                      this.puls[_loc1_].visible = false;
                                                      this.Effect(this.puls[_loc1_].x - this.puls[_loc1_].spx,this.puls[_loc1_].y - this.puls[_loc1_].spy,1,this.puls[_loc1_].power,0);
                                                      this.Effect(this.puls[_loc1_].x - this.puls[_loc1_].spx,this.puls[_loc1_].y - this.puls[_loc1_].spy,8,-this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.04,-this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.04);
                                                      this.Effect(this.puls[_loc1_].x - this.puls[_loc1_].spx,this.puls[_loc1_].y - this.puls[_loc1_].spy,8,-this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.05,-this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.05);
                                                      this.Effect(this.puls[_loc1_].x - this.puls[_loc1_].spx,this.puls[_loc1_].y - this.puls[_loc1_].spy,8,-this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.1,-this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.1);
                                                      this.PlaySound(this.s_box_hard,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                    if(this.vehicles[this.i3].typ == 4 || this.vehicles[this.i3].typ == 7)
                                    {
                                       _loc4_ = int(this.vehicles[this.i3].b_c);
                                       if(this.vehicles[this.i3].typ == 4)
                                       {
                                          this.u = 20;
                                          this.v = 20;
                                       }
                                       else
                                       {
                                          this.u = 75;
                                          this.v = 50;
                                       }
                                       if(this.puls[_loc1_].x >= this.ax[_loc4_] - this.u - this.Math_abs(this.puls[_loc1_].spx) / 2 + this.puls[_loc1_].spx)
                                       {
                                          if(this.puls[_loc1_].x <= this.ax[_loc4_] + this.u + this.Math_abs(this.puls[_loc1_].spx) / 2 + this.puls[_loc1_].spx)
                                          {
                                             if(this.puls[_loc1_].y >= this.ay[_loc4_] - this.v - this.Math_abs(this.puls[_loc1_].spy) / 2 + this.puls[_loc1_].spy)
                                             {
                                                if(this.puls[_loc1_].y <= this.ay[_loc4_] + this.v + this.Math_abs(this.puls[_loc1_].spy) / 2 + this.puls[_loc1_].spy)
                                                {
                                                   this.ok = true;
                                                   if(this.vehicles[this.i3].typ == 4)
                                                   {
                                                      this.u = this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.05 * this.puls[_loc1_].knockback_multiplier;
                                                      this.v = this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.05 * this.puls[_loc1_].knockback_multiplier;
                                                   }
                                                   else
                                                   {
                                                      this.u = this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.01 * this.puls[_loc1_].knockback_multiplier;
                                                      this.v = this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.01 * this.puls[_loc1_].knockback_multiplier;
                                                   }
                                                   this.atox[_loc4_] += this.u;
                                                   this.atoy[_loc4_] += this.v;
                                                   this.atox[this.vehicles[this.i3].b_c1] += this.u;
                                                   this.atoy[this.vehicles[this.i3].b_c1] += this.v;
                                                   this.atox[this.vehicles[this.i3].b_c2] += this.u;
                                                   this.atoy[this.vehicles[this.i3].b_c2] += this.v;
                                                   this.atox[this.vehicles[this.i3].b_c3] += this.u;
                                                   this.atoy[this.vehicles[this.i3].b_c3] += this.v;
                                                   this.aio[_loc4_] = true;
                                                   this.aio[this.vehicles[this.i3].b_c1] = true;
                                                   this.aio[this.vehicles[this.i3].b_c2] = true;
                                                   this.aio[this.vehicles[this.i3].b_c3] = true;
                                                   this.vehicles[this.i3].hea -= this.puls[_loc1_].power * 10;
                                                   this.atim[_loc4_] = 0;
                                                   this.atim[this.vehicles[this.i3].b_c1] = 0;
                                                   this.atim[this.vehicles[this.i3].b_c2] = 0;
                                                   this.atim[this.vehicles[this.i3].b_c3] = 0;
                                                   this.puls[_loc1_].visible = false;
                                                   this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,1,this.puls[_loc1_].power,0);
                                                   this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,8,-this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.04,-this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.04);
                                                   this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,8,-this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.05,-this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.05);
                                                   this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,8,-this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.1,-this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.1);
                                                   if(this.vehicles[this.i3].typ == 4)
                                                   {
                                                      if(!this.vehicles[this.i3].dead)
                                                      {
                                                         this.Say(this.vehicles[this.i3],this.s_drone_hurt,true);
                                                      }
                                                      if(Math.random() > 0.5)
                                                      {
                                                         this.PlaySound(this.s_capsule_hit1,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                                      }
                                                      else
                                                      {
                                                         this.PlaySound(this.s_capsule_hit2,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                                      }
                                                   }
                                                   else
                                                   {
                                                      this.PlaySound(this.s_metal_hit,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                    if(this.ok)
                                    {
                                       if(this.vehicles[this.i3].master != -1)
                                       {
                                          if(!this.vehicles[this.i3].dead)
                                          {
                                             this.Alerted(this.mens[this.vehicles[this.i3].master]);
                                             this.mens[this.vehicles[this.i3].master].hunt = this.puls[_loc1_].master;
                                             if(this.puls[_loc1_].master == this.MP_myid)
                                             {
                                                if(!this.vehicles[this.i3].dead)
                                                {
                                                   ++this.FUN_NICE_BULLETS;
                                                   this.FUN_DAMAGE_MADE += this.puls[_loc1_].power * 10;
                                                }
                                             }
                                             if(this.puls[_loc1_].master == this.MP_myid)
                                             {
                                                if(this.HQ && this.SCREEN_EFFECTS)
                                                {
                                                   this.whitness.alpha += this.puls[_loc1_].power * 10 / this.vehicles[this.i3].hmax;
                                                   if(this.vehicles[this.i3].hea <= 0)
                                                   {
                                                      this.whitness.alpha += 0.5;
                                                   }
                                                   this.whitness.visible = true;
                                                }
                                                this.DamageReport(this.puls[_loc1_].power * 10);
                                                if(this.vehicles[this.i3].hea <= 0)
                                                {
                                                   this.FragReport(this.mens[this.vehicles[this.i3].master].team == this.mens[this.MP_myid].team,this.mens[this.vehicles[this.i3].master]);
                                                }
                                             }
                                             if(this.mens[this.vehicles[this.i3].master].team != this.mens[this.MP_myid].team)
                                             {
                                                if(!this.vehicles[this.i3].dead)
                                                {
                                                   if(this.vehicles[this.i3].hea <= 0)
                                                   {
                                                      if(this.puls[_loc1_].thisis == "swords")
                                                      {
                                                         this.incBadge(17);
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              ++this.i3;
                           }
                        }
                        if(this.puls[_loc1_].cclass != 6)
                        {
                           _loc4_ = 0;
                           while(_loc4_ < this.gunstotal)
                           {
                              if(this.puls[_loc1_].lastin != -_loc4_ - 100)
                              {
                                 if(this.guns[_loc4_].io)
                                 {
                                    if(this.guns[_loc4_].picken_by != this.puls[_loc1_].master)
                                    {
                                       if(this.guns[_loc4_].picken_by == -1)
                                       {
                                          this.mc2 = this.guns[_loc4_];
                                          if(this.puls[_loc1_].x >= this.mc2.x - 100)
                                          {
                                             if(this.puls[_loc1_].x <= this.mc2.x + 100)
                                             {
                                                if(this.puls[_loc1_].y >= this.mc2.y - 100)
                                                {
                                                   if(this.puls[_loc1_].y <= this.mc2.y + 100)
                                                   {
                                                      if(!this.MP_giveguns && (this.CheckHit(_loc1_,this.mc2.b_p1) || this.CheckHit(_loc1_,this.mc2.b_p2) || this.CheckCross(this.puls[_loc1_].lx,this.puls[_loc1_].ly,this.puls[_loc1_].nx,this.puls[_loc1_].ny,this.ax[this.mc2.b_p1],this.ay[this.mc2.b_p1],this.ax[this.mc2.b_p2],this.ay[this.mc2.b_p2],_loc1_)))
                                                      {
                                                         this.puls[_loc1_].lastin = -_loc4_ - 100;
                                                         if(this.puls[_loc1_].power < 1)
                                                         {
                                                            this.PlaySound(this.s_wea1,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                                         }
                                                         else
                                                         {
                                                            this.PlaySound(this.s_wea2,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                                         }
                                                         this.xx = this.Dist2D(this.puls[_loc1_].x,this.puls[_loc1_].y,this.ax[this.mc2.b_p1],this.ay[this.mc2.b_p1]);
                                                         this.xx2 = this.Dist2D(this.puls[_loc1_].x,this.puls[_loc1_].y,this.ax[this.mc2.b_p2],this.ay[this.mc2.b_p2]);
                                                         this.u = this.xx + this.xx2;
                                                         if(this.u > 1)
                                                         {
                                                            this.xx /= this.u;
                                                            this.xx2 /= this.u;
                                                         }
                                                         this.atox[this.mc2.b_p1] += this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.1 * this.xx2 * this.puls[_loc1_].knockback_multiplier;
                                                         this.atoy[this.mc2.b_p1] += this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.1 * this.xx2 * this.puls[_loc1_].knockback_multiplier;
                                                         this.atox[this.mc2.b_p2] += this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.1 * this.xx * this.puls[_loc1_].knockback_multiplier;
                                                         this.atoy[this.mc2.b_p2] += this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.1 * this.xx * this.puls[_loc1_].knockback_multiplier;
                                                         this.WakeUpAtom(this.mc2.b_p1);
                                                         this.WakeUpAtom(this.mc2.b_p2);
                                                         this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,1,this.puls[_loc1_].power,0);
                                                         this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,8,-this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.04,-this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.04);
                                                         this.puls[_loc1_].power = Math.max(0,this.puls[_loc1_].power - 0.5);
                                                         if(this.puls[_loc1_].power < 0.4)
                                                         {
                                                            this.puls[_loc1_].visible = false;
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              _loc4_++;
                           }
                        }
                        if(this.ALLOW_LIGHT_BREAK)
                        {
                           if(this.puls[_loc1_].cclass != 6)
                           {
                              _loc4_ = 0;
                              while(_loc4_ < this.lampstotal)
                              {
                                 if(this.lamps_power2[_loc4_] > 0)
                                 {
                                    if(this.puls[_loc1_].nx > this.lamps_x[_loc4_] - 20 - Math.abs(this.puls[_loc1_].lx - this.puls[_loc1_].nx))
                                    {
                                       if(this.puls[_loc1_].nx < this.lamps_x[_loc4_] + 20 + Math.abs(this.puls[_loc1_].lx - this.puls[_loc1_].nx))
                                       {
                                          if(this.puls[_loc1_].ny > this.lamps_y[_loc4_] - 20 - Math.abs(this.puls[_loc1_].ly - this.puls[_loc1_].ny))
                                          {
                                             if(this.puls[_loc1_].ny < this.lamps_y[_loc4_] + 20 + Math.abs(this.puls[_loc1_].ly - this.puls[_loc1_].ny))
                                             {
                                                if(this.CheckCross(this.puls[_loc1_].lx,this.puls[_loc1_].ly,this.puls[_loc1_].nx,this.puls[_loc1_].ny,this.lamps_x[_loc4_] - 20,this.lamps_y[_loc4_] - 20,this.lamps_x[_loc4_] + 20,this.lamps_y[_loc4_] + 20,_loc1_) || this.CheckCross(this.puls[_loc1_].lx,this.puls[_loc1_].ly,this.puls[_loc1_].nx,this.puls[_loc1_].ny,this.lamps_x[_loc4_] + 20,this.lamps_y[_loc4_] - 20,this.lamps_x[_loc4_] - 20,this.lamps_y[_loc4_] + 20,_loc1_))
                                                {
                                                   this.Effect(this.puls[_loc1_].x - this.puls[_loc1_].spx / 2,this.puls[_loc1_].y - this.puls[_loc1_].spy / 2,8,this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.04,this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.04);
                                                   this.Effect(this.puls[_loc1_].x - this.puls[_loc1_].spx / 2,this.puls[_loc1_].y - this.puls[_loc1_].spy / 2,8,this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.05,this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.05);
                                                   this.Effect(this.puls[_loc1_].x - this.puls[_loc1_].spx / 2,this.puls[_loc1_].y - this.puls[_loc1_].spy / 2,8,this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.1,this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.1);
                                                   this.Effect(this.puls[_loc1_].x - this.puls[_loc1_].spx / 2,this.puls[_loc1_].y - this.puls[_loc1_].spy / 2,8,this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.09,this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.04);
                                                   this.Effect(this.puls[_loc1_].x - this.puls[_loc1_].spx / 2,this.puls[_loc1_].y - this.puls[_loc1_].spy / 2,8,this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.1,this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.05);
                                                   this.Effect(this.puls[_loc1_].x - this.puls[_loc1_].spx / 2,this.puls[_loc1_].y - this.puls[_loc1_].spy / 2,8,this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.2,this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.1);
                                                   this.puls[_loc1_].power = Math.max(0,this.puls[_loc1_].power - 1.5);
                                                   if(this.puls[_loc1_].power < 0.4)
                                                   {
                                                      this.puls[_loc1_].visible = false;
                                                   }
                                                   this.ShotLight(_loc4_);
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                                 _loc4_++;
                              }
                           }
                        }
                        if(this.puls[_loc1_].cclass != 6)
                        {
                           _loc4_ = 0;
                           while(_loc4_ < this.barrelstotal)
                           {
                              if(this.puls[_loc1_].lastin != -_loc4_ - 1)
                              {
                                 if(this.barrels[_loc4_].hea > 0)
                                 {
                                    this.mc2 = this.barrels[_loc4_];
                                    if(this.puls[_loc1_].nx > this.mc2.x - 30 - Math.abs(this.puls[_loc1_].lx - this.puls[_loc1_].nx))
                                    {
                                       if(this.puls[_loc1_].nx < this.mc2.x + 30 + Math.abs(this.puls[_loc1_].lx - this.puls[_loc1_].nx))
                                       {
                                          if(this.puls[_loc1_].ny > this.mc2.y - 30 - Math.abs(this.puls[_loc1_].ly - this.puls[_loc1_].ny))
                                          {
                                             if(this.puls[_loc1_].ny < this.mc2.y + 30 + Math.abs(this.puls[_loc1_].ly - this.puls[_loc1_].ny))
                                             {
                                                if(this.CheckCross(this.puls[_loc1_].lx,this.puls[_loc1_].ly,this.puls[_loc1_].nx,this.puls[_loc1_].ny,this.ax[this.mc2.b_left_bottom],this.ay[this.mc2.b_left_bottom],this.ax[this.mc2.b_right_top],this.ay[this.mc2.b_right_top],_loc1_) || this.CheckCross(this.puls[_loc1_].lx,this.puls[_loc1_].ly,this.puls[_loc1_].nx,this.puls[_loc1_].ny,this.ax[this.mc2.b_left_top],this.ay[this.mc2.b_left_top],this.ax[this.mc2.b_right_bottom],this.ay[this.mc2.b_right_bottom],_loc1_))
                                                {
                                                   this.puls[_loc1_].lastin = -_loc4_ - 1;
                                                   this.atox[this.mc2.b_left_top] = (this.atox[this.mc2.b_left_top] * 7 + this.puls[_loc1_].spx * this.puls[_loc1_].power * this.puls[_loc1_].knockback_multiplier) / (7 + this.puls[_loc1_].power);
                                                   this.atoy[this.mc2.b_left_top] = (this.atoy[this.mc2.b_left_top] * 7 + this.puls[_loc1_].spy * this.puls[_loc1_].power * this.puls[_loc1_].knockback_multiplier) / (7 + this.puls[_loc1_].power);
                                                   this.atox[this.mc2.b_right_top] = (this.atox[this.mc2.b_right_top] * 7 + this.puls[_loc1_].spx * this.puls[_loc1_].power * this.puls[_loc1_].knockback_multiplier) / (7 + this.puls[_loc1_].power);
                                                   this.atoy[this.mc2.b_right_top] = (this.atoy[this.mc2.b_right_top] * 7 + this.puls[_loc1_].spy * this.puls[_loc1_].power * this.puls[_loc1_].knockback_multiplier) / (7 + this.puls[_loc1_].power);
                                                   this.atox[this.mc2.b_right_bottom] = (this.atox[this.mc2.b_right_bottom] * 7 + this.puls[_loc1_].spx * this.puls[_loc1_].power * this.puls[_loc1_].knockback_multiplier) / (7 + this.puls[_loc1_].power);
                                                   this.atoy[this.mc2.b_right_bottom] = (this.atoy[this.mc2.b_right_bottom] * 7 + this.puls[_loc1_].spy * this.puls[_loc1_].power * this.puls[_loc1_].knockback_multiplier) / (7 + this.puls[_loc1_].power);
                                                   this.atox[this.mc2.b_left_bottom] = (this.atox[this.mc2.b_left_bottom] * 7 + this.puls[_loc1_].spx * this.puls[_loc1_].power * this.puls[_loc1_].knockback_multiplier) / (7 + this.puls[_loc1_].power);
                                                   this.atoy[this.mc2.b_left_bottom] = (this.atoy[this.mc2.b_left_bottom] * 7 + this.puls[_loc1_].spy * this.puls[_loc1_].power * this.puls[_loc1_].knockback_multiplier) / (7 + this.puls[_loc1_].power);
                                                   this.mc2.hea -= this.puls[_loc1_].power * 20;
                                                   this.mc2.master = this.puls[_loc1_].master;
                                                   this.HurtBarrel(_loc4_);
                                                   this.aio[this.mc2.b_left_top] = true;
                                                   this.aio[this.mc2.b_right_top] = true;
                                                   this.aio[this.mc2.b_right_bottom] = true;
                                                   this.aio[this.mc2.b_left_bottom] = true;
                                                   this.Effect(this.puls[_loc1_].x - this.puls[_loc1_].spx / 2,this.puls[_loc1_].y - this.puls[_loc1_].spy / 2,1,this.puls[_loc1_].power,0);
                                                   this.Effect(this.puls[_loc1_].x - this.puls[_loc1_].spx / 2,this.puls[_loc1_].y - this.puls[_loc1_].spy / 2,8,-this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.04,-this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.04);
                                                   this.Effect(this.puls[_loc1_].x - this.puls[_loc1_].spx / 2,this.puls[_loc1_].y - this.puls[_loc1_].spy / 2,8,-this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.05,-this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.05);
                                                   this.Effect(this.puls[_loc1_].x - this.puls[_loc1_].spx / 2,this.puls[_loc1_].y - this.puls[_loc1_].spy / 2,8,-this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.1,-this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.1);
                                                   if(this.mc2.hea > 0)
                                                   {
                                                      this.puls[_loc1_].power = Math.max(0,this.puls[_loc1_].power - 1.5);
                                                      if(this.puls[_loc1_].master == this.MP_myid)
                                                      {
                                                         ++this.FUN_NICE_BULLETS;
                                                      }
                                                   }
                                                   if(this.puls[_loc1_].power < 0.4)
                                                   {
                                                      this.puls[_loc1_].visible = false;
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                                 else
                                 {
                                    this.mc2 = this.barrels[_loc4_];
                                    this.i3 = 1;
                                    while(this.i3 <= 2)
                                    {
                                       if(this.puls[_loc1_].x - this.puls[_loc1_].spx / 2 >= this.mc2.x + this.mc2["b" + this.i3].x - this.Math_abs(this.puls[_loc1_].spx) * 0.8 - 10)
                                       {
                                          if(this.puls[_loc1_].x - this.puls[_loc1_].spx / 2 <= this.mc2.x + this.mc2["b" + this.i3].x + this.Math_abs(this.puls[_loc1_].spx) * 0.8 + 10)
                                          {
                                             if(this.puls[_loc1_].y - this.puls[_loc1_].spy / 2 >= this.mc2.y + this.mc2["b" + this.i3].y - this.Math_abs(this.puls[_loc1_].spy) * 0.8 - 10)
                                             {
                                                if(this.puls[_loc1_].y - this.puls[_loc1_].spy / 2 <= this.mc2.y + this.mc2["b" + this.i3].y + this.Math_abs(this.puls[_loc1_].spy) * 0.8 + 10)
                                                {
                                                   this.puls[_loc1_].lastin = -_loc4_ - 1;
                                                   if(this.i3 == 1)
                                                   {
                                                      this.atox[this.mc2.b_left_top] = (this.atox[this.mc2.b_left_top] * 7 + this.puls[_loc1_].spx * this.puls[_loc1_].power * this.puls[_loc1_].knockback_multiplier) / (7 + this.puls[_loc1_].power);
                                                      this.atoy[this.mc2.b_left_top] = (this.atoy[this.mc2.b_left_top] * 7 + this.puls[_loc1_].spy * this.puls[_loc1_].power * this.puls[_loc1_].knockback_multiplier) / (7 + this.puls[_loc1_].power);
                                                      this.atox[this.mc2.b_right_top] = (this.atox[this.mc2.b_right_top] * 7 + this.puls[_loc1_].spx * this.puls[_loc1_].power * this.puls[_loc1_].knockback_multiplier) / (7 + this.puls[_loc1_].power);
                                                      this.atoy[this.mc2.b_right_top] = (this.atoy[this.mc2.b_right_top] * 7 + this.puls[_loc1_].spy * this.puls[_loc1_].power * this.puls[_loc1_].knockback_multiplier) / (7 + this.puls[_loc1_].power);
                                                      this.atox[this.mc2.b_right1] = (this.atox[this.mc2.b_right1] * 7 + this.puls[_loc1_].spx * this.puls[_loc1_].power * this.puls[_loc1_].knockback_multiplier) / (7 + this.puls[_loc1_].power);
                                                      this.atoy[this.mc2.b_right1] = (this.atoy[this.mc2.b_right1] * 7 + this.puls[_loc1_].spy * this.puls[_loc1_].power * this.puls[_loc1_].knockback_multiplier) / (7 + this.puls[_loc1_].power);
                                                      this.atox[this.mc2.b_left1] = (this.atox[this.mc2.b_left1] * 7 + this.puls[_loc1_].spx * this.puls[_loc1_].power * this.puls[_loc1_].knockback_multiplier) / (7 + this.puls[_loc1_].power);
                                                      this.atoy[this.mc2.b_left1] = (this.atoy[this.mc2.b_left1] * 7 + this.puls[_loc1_].spy * this.puls[_loc1_].power * this.puls[_loc1_].knockback_multiplier) / (7 + this.puls[_loc1_].power);
                                                      this.aio[this.mc2.b_left_top] = true;
                                                      this.aio[this.mc2.b_right_top] = true;
                                                      this.aio[this.mc2.b_right1] = true;
                                                      this.aio[this.mc2.b_left1] = true;
                                                   }
                                                   else
                                                   {
                                                      this.atox[this.mc2.b_left2] = (this.atox[this.mc2.b_left2] * 7 + this.puls[_loc1_].spx * this.puls[_loc1_].power * this.puls[_loc1_].knockback_multiplier) / (7 + this.puls[_loc1_].power);
                                                      this.atoy[this.mc2.b_left2] = (this.atoy[this.mc2.b_left2] * 7 + this.puls[_loc1_].spy * this.puls[_loc1_].power * this.puls[_loc1_].knockback_multiplier) / (7 + this.puls[_loc1_].power);
                                                      this.atox[this.mc2.b_right2] = (this.atox[this.mc2.b_right2] * 7 + this.puls[_loc1_].spx * this.puls[_loc1_].power * this.puls[_loc1_].knockback_multiplier) / (7 + this.puls[_loc1_].power);
                                                      this.atoy[this.mc2.b_right2] = (this.atoy[this.mc2.b_right2] * 7 + this.puls[_loc1_].spy * this.puls[_loc1_].power * this.puls[_loc1_].knockback_multiplier) / (7 + this.puls[_loc1_].power);
                                                      this.atox[this.mc2.b_right_bottom] = (this.atox[this.mc2.b_right_bottom] * 7 + this.puls[_loc1_].spx * this.puls[_loc1_].power * this.puls[_loc1_].knockback_multiplier) / (7 + this.puls[_loc1_].power);
                                                      this.atoy[this.mc2.b_right_bottom] = (this.atoy[this.mc2.b_right_bottom] * 7 + this.puls[_loc1_].spy * this.puls[_loc1_].power * this.puls[_loc1_].knockback_multiplier) / (7 + this.puls[_loc1_].power);
                                                      this.atox[this.mc2.b_left_bottom] = (this.atox[this.mc2.b_left_bottom] * 7 + this.puls[_loc1_].spx * this.puls[_loc1_].power * this.puls[_loc1_].knockback_multiplier) / (7 + this.puls[_loc1_].power);
                                                      this.atoy[this.mc2.b_left_bottom] = (this.atoy[this.mc2.b_left_bottom] * 7 + this.puls[_loc1_].spy * this.puls[_loc1_].power * this.puls[_loc1_].knockback_multiplier) / (7 + this.puls[_loc1_].power);
                                                      this.aio[this.mc2.b_right_bottom] = true;
                                                      this.aio[this.mc2.b_left_bottom] = true;
                                                      this.aio[this.mc2.b_right2] = true;
                                                      this.aio[this.mc2.b_left2] = true;
                                                   }
                                                   this.Effect(this.puls[_loc1_].x - this.puls[_loc1_].spx / 2,this.puls[_loc1_].y - this.puls[_loc1_].spy / 2,1,this.puls[_loc1_].power,0);
                                                   this.puls[_loc1_].power = Math.max(0,this.puls[_loc1_].power - 0.3);
                                                   if(this.puls[_loc1_].power < 0.4)
                                                   {
                                                      this.puls[_loc1_].visible = false;
                                                   }
                                                   this.Effect(this.puls[_loc1_].x - this.puls[_loc1_].spx / 2,this.puls[_loc1_].y - this.puls[_loc1_].spy / 2,8,-this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.04,-this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.04);
                                                   this.Effect(this.puls[_loc1_].x - this.puls[_loc1_].spx / 2,this.puls[_loc1_].y - this.puls[_loc1_].spy / 2,8,-this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.05,-this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.05);
                                                   this.Effect(this.puls[_loc1_].x - this.puls[_loc1_].spx / 2,this.puls[_loc1_].y - this.puls[_loc1_].spy / 2,8,-this.puls[_loc1_].spx * this.puls[_loc1_].power * 0.1,-this.puls[_loc1_].spy * this.puls[_loc1_].power * 0.1);
                                                }
                                             }
                                          }
                                       }
                                       ++this.i3;
                                    }
                                 }
                              }
                              _loc4_++;
                           }
                        }
                        if(this.puls[_loc1_].currentFrame == 43 || this.puls[_loc1_].currentFrame == 54)
                        {
                           _loc14_ = -1;
                           _loc15_ = 600;
                           _loc4_ = 0;
                           while(_loc4_ < this.playerstotal)
                           {
                              if(this.mens[_loc4_].io)
                              {
                                 if(this.mens[_loc4_].team != this.mens[this.puls[_loc1_].master].team)
                                 {
                                    if(this.mens[_loc4_].incar == -1)
                                    {
                                       if(this.mens[_loc4_].hea > 0)
                                       {
                                          this.mc2 = this.mens[_loc4_];
                                          if(this.TraceLine(this.puls[_loc1_].x,this.puls[_loc1_].y,this.ax[this.mc2.b_toe],this.ay[this.mc2.b_toe]))
                                          {
                                             _loc16_ = this.Dist2D(this.puls[_loc1_].x,this.puls[_loc1_].y,this.ax[this.mc2.b_toe],this.ay[this.mc2.b_toe]);
                                             if(_loc16_ < _loc15_)
                                             {
                                                _loc15_ = _loc16_;
                                                _loc14_ = _loc4_;
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              _loc4_++;
                           }
                           if(_loc14_ != -1)
                           {
                              if(_loc15_ > 1)
                              {
                                 this.mc2 = this.mens[_loc14_];
                                 _loc13_ = 0;
                                 while(_loc13_ < 3)
                                 {
                                    _loc17_ = this.ax[this.mc2.b_toe] + (this.atox[this.mc2.b_toe] - this.puls[_loc1_].spx) * (_loc15_ / 25 / this.rocket_speed_mult);
                                    _loc18_ = this.ay[this.mc2.b_toe] + (this.atoy[this.mc2.b_toe] - this.puls[_loc1_].spy) * (_loc15_ / 25 / this.rocket_speed_mult);
                                    _loc15_ = this.Dist2D(this.puls[_loc1_].x,this.puls[_loc1_].y,_loc17_,_loc18_);
                                    _loc13_++;
                                 }
                                 _loc19_ = (_loc17_ - this.puls[_loc1_].x) / _loc15_ * 25 * this.rocket_speed_mult;
                                 _loc20_ = (_loc18_ - this.puls[_loc1_].y) / _loc15_ * 25 * this.rocket_speed_mult;
                                 this.puls[_loc1_].spx = this.MorphWithTimeScale(this.puls[_loc1_].spx,_loc19_,0.95,this.thispulspeed);
                                 this.puls[_loc1_].spy = this.MorphWithTimeScale(this.puls[_loc1_].spy,_loc20_,0.95,this.thispulspeed);
                                 _loc15_ = this.Dist2D(this.puls[_loc1_].spx,this.puls[_loc1_].spy,0,0);
                                 if(_loc15_ > 1)
                                 {
                                    _loc19_ = this.puls[_loc1_].spx / _loc15_ * 25 * this.rocket_speed_mult;
                                    _loc20_ = this.puls[_loc1_].spy / _loc15_ * 25 * this.rocket_speed_mult;
                                    this.puls[_loc1_].spx = this.MorphWithTimeScale(this.puls[_loc1_].spx,_loc19_,0.95,this.thispulspeed);
                                    this.puls[_loc1_].spy = this.MorphWithTimeScale(this.puls[_loc1_].spy,_loc20_,0.95,this.thispulspeed);
                                 }
                                 this.puls[_loc1_].rotation = 270 - Math.atan2(this.puls[_loc1_].spx,this.puls[_loc1_].spy) / Math.PI * 180;
                              }
                           }
                        }
                        _loc2_ = this.MP_custom_events.length;
                        _loc3_ = Number(this.mens[this.MP_myid].hea);
                        if(this.puls[_loc1_].cclass != 6)
                        {
                           _loc4_ = 0;
                           while(_loc4_ < this.playerstotal)
                           {
                              if(this.mens[_loc4_].io)
                              {
                                 if(this.mens[_loc4_].can_be_hit)
                                 {
                                    if(_loc4_ != this.puls[_loc1_].master || this.puls[_loc1_].cclass == 2 || this.puls[_loc1_].currentFrame == 41 && this.mens[_loc4_].dying)
                                    {
                                       if(this.puls[_loc1_].lastin != _loc4_ || this.puls[_loc1_].currentFrame == 41 && this.mens[_loc4_].dying)
                                       {
                                          if(this.mens[_loc4_].team != this.mens[this.puls[_loc1_].master].team || this.puls[_loc1_].currentFrame == 41 || this.mens[_loc4_].team != 0 && !this.PRO_BOTS && !this.MP_mode || (this.mens[_loc4_].hea <= 0 || this.mens[_loc4_].dying && !this.MP_mode) || this.MP_mode && this.MP_type == 1 || this.MP_mode && this.MP_type == 4)
                                          {
                                             if(this.mens[_loc4_].incar == -1)
                                             {
                                                this.mc2 = this.mens[_loc4_];
                                                this.i3 = -1;
                                                if(this.Dist2D(this.puls[_loc1_].x,this.puls[_loc1_].y,this.ax[this.mc2.b_toe],this.ay[this.mc2.b_toe]) < 300 * this.mc2.scale)
                                                {
                                                   if(this.CheckHit(_loc1_,this.mc2.b_head_end) || this.CheckHit(_loc1_,this.mc2.b_head_start))
                                                   {
                                                      this.i3 = this.mc2.b_head_end;
                                                      this.str = "head";
                                                   }
                                                   else if(this.CheckHit(_loc1_,this.mc2.b_body) || !this.mc2.brk_body && this.CheckCross(this.puls[_loc1_].lx,this.puls[_loc1_].ly,this.puls[_loc1_].nx,this.puls[_loc1_].ny,this.ax[this.mc2.b_body],this.ay[this.mc2.b_body],this.ax[this.mc2.b_toe],this.ay[this.mc2.b_toe],_loc1_))
                                                   {
                                                      this.i3 = this.mc2.b_body;
                                                      this.str = "body";
                                                   }
                                                   else if(this.CheckHit(_loc1_,this.mc2.b_toe))
                                                   {
                                                      this.i3 = this.mc2.b_toe;
                                                      this.str = "legs";
                                                   }
                                                   else if(this.CheckHit(_loc1_,this.mc2.b_arm1))
                                                   {
                                                      this.i3 = this.mc2.b_arm1;
                                                      this.str = "arms";
                                                   }
                                                   else if(this.CheckHit(_loc1_,this.mc2.b_arm2))
                                                   {
                                                      this.i3 = this.mc2.b_arm2;
                                                      this.str = "arms";
                                                   }
                                                   else if(this.CheckHit(_loc1_,this.mc2.b_leg1) || this.CheckCross(this.puls[_loc1_].lx,this.puls[_loc1_].ly,this.puls[_loc1_].nx,this.puls[_loc1_].ny,this.ax[this.mc2.b_toe],this.ay[this.mc2.b_toe],this.ax[this.mc2.b_leg1],this.ay[this.mc2.b_leg1],_loc1_))
                                                   {
                                                      this.i3 = this.mc2.b_leg1;
                                                      this.str = "legs";
                                                   }
                                                   else if(this.CheckHit(_loc1_,this.mc2.b_leg2) || this.CheckCross(this.puls[_loc1_].lx,this.puls[_loc1_].ly,this.puls[_loc1_].nx,this.puls[_loc1_].ny,this.ax[this.mc2.b_toe],this.ay[this.mc2.b_toe],this.ax[this.mc2.b_leg2],this.ay[this.mc2.b_leg2],_loc1_))
                                                   {
                                                      this.i3 = this.mc2.b_leg2;
                                                      this.str = "legs";
                                                   }
                                                   else
                                                   {
                                                      this.i3 = -1;
                                                   }
                                                }
                                                if(this.i3 != -1)
                                                {
                                                   if(this.MP_mode)
                                                   {
                                                      if(this.mc2.hea > 0)
                                                      {
                                                         if(Boolean(this.mc2.isplayer) && this.MP_myid != _loc4_)
                                                         {
                                                            if(this.INTRUDER_DATABASE[this.mc2.login_name] == undefined || this.INTRUDER_DATABASE[this.mc2.login_name] == null)
                                                            {
                                                               this.INTRUDER_DATABASE[this.mc2.login_name] = new Object();
                                                               this.INTRUDER_DATABASE[this.mc2.login_name].unregistered_shots = 1;
                                                               this.INTRUDER_DATABASE[this.mc2.login_name].registered_shots = 0;
                                                               this.INTRUDER_DATABASE[this.mc2.login_name].activity_start = getTimer();
                                                               this.INTRUDER_DATABASE[this.mc2.login_name].activity_end = getTimer();
                                                               this.INTRUDER_DATABASE[this.mc2.login_name].ping_min = this.mc2.ping;
                                                               this.INTRUDER_DATABASE[this.mc2.login_name].ping_max = this.mc2.ping;
                                                               this.INTRUDER_DATABASE[this.mc2.login_name].seen_deaths = 0;
                                                               this.INTRUDER_DATABASE[this.mc2.login_name].max_hea = this.mc2.hea;
                                                               this.INTRUDER_DATABASE[this.mc2.login_name].min_hea = this.mc2.hea;
                                                            }
                                                            else
                                                            {
                                                               this.INTRUDER_DATABASE[this.mc2.login_name].unregistered_shots += 1;
                                                               this.INTRUDER_DATABASE[this.mc2.login_name].activity_end = getTimer();
                                                               this.INTRUDER_DATABASE[this.mc2.login_name].ping_min = Math.min(this.INTRUDER_DATABASE[this.mc2.login_name].ping_min,this.mc2.ping);
                                                               this.INTRUDER_DATABASE[this.mc2.login_name].ping_max = Math.max(this.INTRUDER_DATABASE[this.mc2.login_name].ping_max,this.mc2.ping);
                                                               this.INTRUDER_DATABASE[this.mc2.login_name].max_hea = Math.max(this.INTRUDER_DATABASE[this.mc2.login_name].max_hea,this.mc2.hea);
                                                               this.INTRUDER_DATABASE[this.mc2.login_name].min_hea = Math.min(this.INTRUDER_DATABASE[this.mc2.login_name].min_hea,this.mc2.hea);
                                                            }
                                                         }
                                                      }
                                                   }
                                                   if(this.str == "arms")
                                                   {
                                                      if(this.mc2.brk_arms)
                                                      {
                                                         this.str = "body";
                                                      }
                                                   }
                                                   if(this.str == "body")
                                                   {
                                                      if(this.mc2.brk_body)
                                                      {
                                                         if(this.mc2.brk_arms)
                                                         {
                                                            this.str = "head";
                                                         }
                                                         else
                                                         {
                                                            this.str = "arms";
                                                         }
                                                      }
                                                   }
                                                   if(this.mc2.brk_legs)
                                                   {
                                                      if(this.str == "legs")
                                                      {
                                                         this.str = "body";
                                                      }
                                                   }
                                                   if(this.mc2.brk_head)
                                                   {
                                                      if(this.str == "head")
                                                      {
                                                         if(this.mc2.brk_body)
                                                         {
                                                            this.str = "arms";
                                                         }
                                                         else
                                                         {
                                                            this.str = "body";
                                                         }
                                                      }
                                                   }
                                                   _loc21_ = false;
                                                   _loc22_ = this.MP_mode && this.MP_myid == _loc4_;
                                                   _loc23_ = this.mc2.hea > 0;
                                                   if(this.MP_favor_the_shooter)
                                                   {
                                                      if(!this.MP_mode || this.puls[_loc1_].master == this.MP_myid || !this.mens[this.puls[_loc1_].master].isplayer)
                                                      {
                                                         _loc21_ = true;
                                                      }
                                                      if(this.MP_mode)
                                                      {
                                                         if(this.mens[this.puls[_loc1_].master].isplayer)
                                                         {
                                                            _loc22_ = false;
                                                         }
                                                      }
                                                   }
                                                   else if(this.MP_myid == _loc4_ && !this.MP_spectator || !this.MP_mode || !this.mc2.isplayer)
                                                   {
                                                      _loc21_ = true;
                                                   }
                                                   if(this.MP_mode)
                                                   {
                                                      if(this.MP_favor_the_shooter)
                                                      {
                                                         if(this.puls[_loc1_].master == this.MP_myid)
                                                         {
                                                            this.MP_custom_events += ";hit|" + [this.MP_myid,_loc4_,this.str,this.r2(this.puls[_loc1_].power),this.r2(this.puls[_loc1_].knockback_multiplier),this.puls[_loc1_].currentFrame,this.r2(this.ax[this.i3]),this.r2(this.ay[this.i3]),this.r2(this.puls[_loc1_].spx),this.r2(this.puls[_loc1_].spy),this.puls[_loc1_].cclass,this.puls[_loc1_].thisis,this.GlobalAtomIDToPlayerLocalAtomID(this.i3,this.mens[_loc4_])].join("#");
                                                         }
                                                      }
                                                   }
                                                   this.puls[_loc1_].power = this.ApplyLimbDamageToPlayer(this.mc2,_loc4_,this.str,this.puls[_loc1_].master,this.puls[_loc1_].power,this.puls[_loc1_].knockback_multiplier,this.puls[_loc1_].currentFrame,this.puls[_loc1_].x,this.puls[_loc1_].y,this.puls[_loc1_].spx,this.puls[_loc1_].spy,this.puls[_loc1_].cclass,this.puls[_loc1_].thisis,_loc21_,_loc23_,_loc22_,this.i3,true);
                                                   if(this.MP_favor_the_shooter)
                                                   {
                                                      if(_loc23_)
                                                      {
                                                         if(!this.MP_allow_client_side_kills)
                                                         {
                                                            if(!this.mc2.dead)
                                                            {
                                                               this.mc2.hea = Math.max(10,this.mc2.hea);
                                                            }
                                                         }
                                                         this.ApplyLoweredHP(this.mc2,this.mc2.hea,this.mc2.dying,-Infinity);
                                                      }
                                                   }
                                                   if(!(this.MP_mode && this.MP_myid != this.puls[_loc1_].master && this.MP_favor_the_shooter && this.AllowExtraBulletClassSync(this.puls[_loc1_]) && Boolean(this.mens[this.puls[_loc1_].master].isplayer)))
                                                   {
                                                      this.i4 = 0;
                                                      while(this.i4 < this.atotal)
                                                      {
                                                         if(this.aof[this.i4] == this.aof[this.i3])
                                                         {
                                                            if(this.aio[this.i4] == true || this.aio[this.i4] == false)
                                                            {
                                                               if(this.i4 == this.i3 || this.Math_pow2(this.ax[this.i4] - this.ax[this.i3]) + this.Math_pow2(this.ay[this.i4] - this.ay[this.i3]) < 900)
                                                               {
                                                                  this.atox[this.i4] += this.puls[_loc1_].spx * Math.sqrt(this.puls[_loc1_].power) * 0.05 * (Math.min(this.mc2.mobility * this.mc2.mobility,1) + 1) * this.puls[_loc1_].knockback_multiplier / this.mc2.scale;
                                                                  this.atoy[this.i4] += this.puls[_loc1_].spy * Math.sqrt(this.puls[_loc1_].power) * 0.05 * (Math.min(this.mc2.mobility * this.mc2.mobility,1) + 1) * this.puls[_loc1_].knockback_multiplier / this.mc2.scale;
                                                                  this.xx2 = this.ax[this.i4] + this.puls[_loc1_].spx * Math.sqrt(this.puls[_loc1_].power) * 0.05 * (Math.min(this.mc2.mobility * this.mc2.mobility,1) + 1) * this.GSPEED;
                                                                  this.yy2 = this.ay[this.i4] + this.puls[_loc1_].spy * Math.sqrt(this.puls[_loc1_].power) * 0.05 * (Math.min(this.mc2.mobility * this.mc2.mobility,1) + 1) * this.GSPEED;
                                                                  if(this.TraceLineF_nopushers(this.ax[this.i4],this.ay[this.i4],this.xx2,this.yy2))
                                                                  {
                                                                     this.ax[this.i4] = this.xx2;
                                                                     this.ay[this.i4] = this.yy2;
                                                                  }
                                                                  this.WakeUpAtom(this.i4);
                                                               }
                                                            }
                                                         }
                                                         ++this.i4;
                                                      }
                                                      if(this.puls[_loc1_].cclass == 1 || this.puls[_loc1_].cclass == 4 || this.puls[_loc1_].cclass == 5)
                                                      {
                                                         this.puls[_loc1_].visible = false;
                                                      }
                                                      else
                                                      {
                                                         if(this.mc2.hea > 0)
                                                         {
                                                            this.puls[_loc1_].power = Math.max(0,this.puls[_loc1_].power * 0.3);
                                                         }
                                                         else
                                                         {
                                                            this.puls[_loc1_].power = Math.max(0,this.puls[_loc1_].power * 0.6);
                                                         }
                                                         this.puls[_loc1_].lastin = _loc4_;
                                                         if(this.puls[_loc1_].power < 0.4)
                                                         {
                                                            this.puls[_loc1_].visible = false;
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              _loc4_++;
                           }
                        }
                        if(this.MP_mode)
                        {
                           if(!this.MP_favor_the_shooter)
                           {
                              if(_loc2_ != this.MP_custom_events.length && this.MP_custom_events.indexOf(";gshot|") != -1)
                              {
                                 if(_loc3_ == this.mens[this.MP_myid].hea)
                                 {
                                    if(_loc3_ > 0)
                                    {
                                       if(this.MP_app || !this.MP_app && _loc3_ < 1000000)
                                       {
                                          this.stable = false;
                                          this.unstable = 3;
                                          this.unstable_m = _loc2_ + " != " + this.MP_custom_events.length + " :: " + _loc3_ + " == " + this.mens[this.MP_myid].hea + " :: " + this.MP_custom_events;
                                       }
                                    }
                                 }
                              }
                           }
                        }
                        if(this.puls[_loc1_].cclass == 1)
                        {
                           this.puls[_loc1_].spx *= Math.pow(1.02,this.thispulspeed);
                           this.puls[_loc1_].spy *= Math.pow(1.02,this.thispulspeed);
                           if(this.puls[_loc1_].visible == false)
                           {
                              this.expl_hurt_full = true;
                              if(this.i6 == -1)
                              {
                                 this.PhysicsExplosion(this.puls[_loc1_].x - this.puls[_loc1_].spx * 0.5,this.puls[_loc1_].y - this.puls[_loc1_].spy * 0.5,50 * this.puls[_loc1_].maxpower,5 * this.puls[_loc1_].maxpower * this.puls[_loc1_].knockback_multiplier,40 * this.puls[_loc1_].maxpower,this.puls[_loc1_].master,this.puls[_loc1_].thisis);
                              }
                              else
                              {
                                 this.PhysicsExplosion(this.rx - this.puls[_loc1_].spx * 0.5 * this.thispulspeed,this.ry - this.puls[_loc1_].spy * 0.5 * this.thispulspeed,50 * this.puls[_loc1_].maxpower,5 * this.puls[_loc1_].maxpower * this.puls[_loc1_].knockback_multiplier,40 * this.puls[_loc1_].maxpower,this.puls[_loc1_].master,this.puls[_loc1_].thisis);
                              }
                              this.expl_hurt_full = false;
                              this.ExplosionSound(this.puls[_loc1_].x - this.puls[_loc1_].spx * this.thispulspeed,this.puls[_loc1_].y - this.puls[_loc1_].spy * this.thispulspeed);
                           }
                        }
                        if(this.puls[_loc1_].cclass == 5)
                        {
                           if(this.puls[_loc1_].visible == false)
                           {
                              if(this.puls[_loc1_].currentFrame == 10 || this.puls[_loc1_].currentFrame == 32 || this.puls[_loc1_].currentFrame == 22)
                              {
                                 this.expl_hurt_full = true;
                              }
                              if(this.i6 == -1)
                              {
                                 this.PhysicsExplosionNoSprite(this.puls[_loc1_].x - this.puls[_loc1_].spx * this.thispulspeed,this.puls[_loc1_].y - this.puls[_loc1_].spy * this.thispulspeed,44 * this.puls[_loc1_].maxpower,3 * this.puls[_loc1_].maxpower * this.puls[_loc1_].knockback_multiplier,35 * this.puls[_loc1_].maxpower,this.puls[_loc1_].master,true,this.puls[_loc1_].thisis);
                                 if(this.puls[_loc1_].currentFrame == 10)
                                 {
                                    this.Effect(this.puls[_loc1_].x - this.puls[_loc1_].spx * 0.5,this.puls[_loc1_].y - this.puls[_loc1_].spy * 0.5,11,1,0);
                                 }
                                 if(this.puls[_loc1_].currentFrame == 32 || this.puls[_loc1_].currentFrame == 22)
                                 {
                                    this.Effect(this.puls[_loc1_].x - this.puls[_loc1_].spx * 0.5,this.puls[_loc1_].y - this.puls[_loc1_].spy * 0.5,11,0.25,0);
                                 }
                                 if(this.puls[_loc1_].currentFrame == 12 || this.puls[_loc1_].currentFrame == 37 || this.puls[_loc1_].currentFrame == 46 || this.puls[_loc1_].currentFrame == 6 || this.puls[_loc1_].currentFrame == 53)
                                 {
                                    this.Effect(this.puls[_loc1_].x - this.puls[_loc1_].spx * 0.5,this.puls[_loc1_].y - this.puls[_loc1_].spy * 0.5,16,1,0);
                                 }
                              }
                              else
                              {
                                 this.PhysicsExplosionNoSprite(this.rx - this.puls[_loc1_].spx * 0.5 * this.thispulspeed,this.ry - this.puls[_loc1_].spy * 0.5 * this.thispulspeed,44 * this.puls[_loc1_].maxpower,3 * this.puls[_loc1_].maxpower * this.puls[_loc1_].knockback_multiplier,35 * this.puls[_loc1_].maxpower,this.puls[_loc1_].master,true,this.puls[_loc1_].thisis);
                                 if(this.puls[_loc1_].currentFrame == 10)
                                 {
                                    this.Effect(this.rx - this.puls[_loc1_].spx * 0.5 * this.thispulspeed,this.ry - this.puls[_loc1_].spy * 0.5 * this.thispulspeed,11,1,0);
                                 }
                                 if(this.puls[_loc1_].currentFrame == 32 || this.puls[_loc1_].currentFrame == 22)
                                 {
                                    this.Effect(this.rx - this.puls[_loc1_].spx * 0.5 * this.thispulspeed,this.ry - this.puls[_loc1_].spy * 0.5 * this.thispulspeed,11,0.25,0);
                                 }
                                 if(this.puls[_loc1_].currentFrame == 12 || this.puls[_loc1_].currentFrame == 37 || this.puls[_loc1_].currentFrame == 46 || this.puls[_loc1_].currentFrame == 6 || this.puls[_loc1_].currentFrame == 53)
                                 {
                                    this.Effect(this.rx - this.puls[_loc1_].spx * 0.5 * this.thispulspeed,this.ry - this.puls[_loc1_].spy * 0.5 * this.thispulspeed,16,1,0);
                                 }
                              }
                              if(this.puls[_loc1_].currentFrame == 10 || this.puls[_loc1_].currentFrame == 32 || this.puls[_loc1_].currentFrame == 22)
                              {
                                 this.expl_hurt_full = false;
                              }
                              if(this.puls[_loc1_].currentFrame == 10 || this.puls[_loc1_].currentFrame == 32 || this.puls[_loc1_].currentFrame == 22)
                              {
                                 this.PlaySound(this.s_explode_bfg,this.puls[_loc1_].x,this.puls[_loc1_].y);
                              }
                              if(this.puls[_loc1_].currentFrame == 12 || this.puls[_loc1_].currentFrame == 37 || this.puls[_loc1_].currentFrame == 46 || this.puls[_loc1_].currentFrame == 6 || this.puls[_loc1_].currentFrame == 53)
                              {
                                 this.PlaySound(this.s_plasma_explosion,this.puls[_loc1_].x,this.puls[_loc1_].y);
                              }
                           }
                           else if(this.puls[_loc1_].currentFrame == 10)
                           {
                              if(this.puls[_loc1_].life > 3 / this.thispulspeed)
                              {
                                 this.expl_hurt_full = true;
                                 this.PhysicsExplosionNoSprite(this.puls[_loc1_].x,this.puls[_loc1_].y,80,0.5 * this.puls[_loc1_].maxpower * this.thispulspeed * this.puls[_loc1_].knockback_multiplier,15 * this.puls[_loc1_].maxpower * this.thispulspeed,this.puls[_loc1_].master,true,this.puls[_loc1_].thisis);
                                 this.expl_hurt_full = false;
                              }
                           }
                        }
                        if(this.puls[_loc1_].cclass == 4 || this.puls[_loc1_].cclass == 6)
                        {
                           if(this.puls[_loc1_].currentFrame == 52)
                           {
                              if(this.puls[_loc1_].life > 6 / this.thispulspeed)
                              {
                                 this.expl_hurt_full = true;
                                 this.PhysicsExplosionNoSprite(this.puls[_loc1_].x,this.puls[_loc1_].y,100,0,2 * this.puls[_loc1_].maxpower * this.thispulspeed,this.puls[_loc1_].master,false,this.puls[_loc1_].thisis);
                                 this.expl_hurt_full = false;
                              }
                              if(this.puls[_loc1_].visible == false)
                              {
                                 this.effcolor = -1;
                                 this.FlowAt(this.puls[_loc1_].x,this.puls[_loc1_].y,0,-30 + Math.random() * 60,-30 + Math.random() * 60 - 5,2);
                                 this.FlowAt(this.puls[_loc1_].x,this.puls[_loc1_].y,0,-30 + Math.random() * 60,-30 + Math.random() * 60 - 10,2);
                                 this.FlowAt(this.puls[_loc1_].x,this.puls[_loc1_].y,0,-40 + Math.random() * 80,-40 + Math.random() * 80 - 10,3);
                                 if(Math.random() > 0.5)
                                 {
                                    this.PlaySound(this.s_blood_head,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                 }
                                 else
                                 {
                                    this.PlaySound(this.s_blood_head2,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                 }
                              }
                           }
                           if(this.puls[_loc1_].currentFrame == 14)
                           {
                              if(this.puls[_loc1_].dead)
                              {
                                 this.puls[_loc1_].visible = false;
                              }
                              if(this.puls[_loc1_].visible == false)
                              {
                                 this.DisposeAtom(this.puls[_loc1_].attached);
                                 this.effcolor = -1;
                                 this.FlowAt(this.puls[_loc1_].x,this.puls[_loc1_].y,0,-30 + Math.random() * 60,-30 + Math.random() * 60 - 5,2);
                                 this.FlowAt(this.puls[_loc1_].x,this.puls[_loc1_].y,0,-30 + Math.random() * 60,-30 + Math.random() * 60 - 10,2);
                                 this.FlowAt(this.puls[_loc1_].x,this.puls[_loc1_].y,0,-40 + Math.random() * 80,-40 + Math.random() * 80 - 10,3);
                                 if(Math.random() > 0.5)
                                 {
                                    this.PlaySound(this.s_blood_head,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                 }
                                 else
                                 {
                                    this.PlaySound(this.s_blood_head2,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                 }
                              }
                              else
                              {
                                 this.puls[_loc1_].rotation += this.puls[_loc1_].spx;
                                 this.WakeUpAtom(this.puls[_loc1_].attached);
                                 if(!this.TracePointNoRagdolls(this.puls[_loc1_].x,this.puls[_loc1_].y + 10))
                                 {
                                    if(Math.random() < 0.5 * this.GSPEED)
                                    {
                                       this.i3 = -1;
                                       this.xx = 0;
                                       _loc4_ = 0;
                                       while(_loc4_ < this.playerstotal)
                                       {
                                          if(this.mens[_loc4_].io)
                                          {
                                             if(!this.mens[_loc4_].dead)
                                             {
                                                if(this.mens[_loc4_].team != this.mens[this.puls[_loc1_].master].team)
                                                {
                                                   if(this.TraceLine(this.puls[_loc1_].x,this.puls[_loc1_].y - 20,this.mens[_loc4_].x,this.mens[_loc4_].y - 40))
                                                   {
                                                      this.mc2 = this.mens[_loc4_];
                                                      this.yy = this.Dist2D(this.puls[_loc1_].x,this.puls[_loc1_].y,this.mc2.x,this.mc2.y);
                                                      if(this.i3 == -1 || this.yy < this.xx)
                                                      {
                                                         this.i3 = _loc4_;
                                                         this.xx = this.yy;
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                          _loc4_++;
                                       }
                                       if(this.i3 != -1)
                                       {
                                          if(this.xx > 1)
                                          {
                                             this.atox[this.puls[_loc1_].attached] = (this.mens[this.i3].x - this.puls[_loc1_].x) / this.xx * 15 * 0.8;
                                             this.atoy[this.puls[_loc1_].attached] = (this.mens[this.i3].y - this.puls[_loc1_].y) / this.xx * 15 * 1.3 - 4;
                                             this.PlaySound(this.s_robo_bug_jump,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                          }
                                       }
                                       else
                                       {
                                          this.atox[this.puls[_loc1_].attached] *= 0.5;
                                          this.atoy[this.puls[_loc1_].attached] *= 0.5;
                                       }
                                    }
                                 }
                                 else
                                 {
                                    _loc4_ = 0;
                                    while(_loc4_ < this.playerstotal)
                                    {
                                       if(this.mens[_loc4_].io)
                                       {
                                          if(!this.mens[_loc4_].dead)
                                          {
                                             if(this.mens[_loc4_].hea > 0)
                                             {
                                                if(this.mens[_loc4_].team != this.mens[this.puls[_loc1_].master].team)
                                                {
                                                   if(this.Dist2D(this.puls[_loc1_].x,this.puls[_loc1_].y * 0.5,this.mens[_loc4_].x,(this.mens[_loc4_].y - 40) * 0.5) < 25)
                                                   {
                                                      if(this.TraceLine(this.puls[_loc1_].x,this.puls[_loc1_].y - 20,this.mens[_loc4_].x,this.mens[_loc4_].y - 40))
                                                      {
                                                         if(this.mens[_loc4_].notspawned)
                                                         {
                                                            this.SpawnPlayerImmediately(this.mens[_loc4_]);
                                                         }
                                                         this.atox[this.puls[_loc1_].attached] = (this.atox[this.puls[_loc1_].attached] + this.atox[this.mens[_loc4_].b_body] * 3) / 4;
                                                         this.atoy[this.puls[_loc1_].attached] = (this.atoy[this.puls[_loc1_].attached] + this.atoy[this.mens[_loc4_].b_body] * 3) / 4;
                                                         if(Math.random() < 0.2 * this.GSPEED)
                                                         {
                                                            this.mens[_loc4_].lastshotby = this.puls[_loc1_].master;
                                                            this.mens[_loc4_].lastshotbygun = this.puls[_loc1_].thisis;
                                                            this.mens[_loc4_].whenlastshot = getTimer();
                                                            this.mens[_loc4_].hea -= 15 * this.puls[_loc1_].power;
                                                            this.PlaySound(this.s_blood_hit,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                                            this.effcolor = _loc4_;
                                                            this.FlowAt(this.puls[_loc1_].x,this.puls[_loc1_].y,0,-this.puls[_loc1_].spx,-this.puls[_loc1_].spy,2);
                                                            if(this.puls[_loc1_].master == this.MP_myid)
                                                            {
                                                               if(!this.mens[_loc4_].dead)
                                                               {
                                                                  if(this.HQ && this.SCREEN_EFFECTS)
                                                                  {
                                                                     this.whitness.alpha += 15 * this.puls[_loc1_].power / this.mens[_loc4_].hmax;
                                                                     if(this.mens[_loc4_].hea <= 0)
                                                                     {
                                                                        this.whitness.alpha += 0.5;
                                                                     }
                                                                     this.whitness.visible = true;
                                                                  }
                                                                  this.DamageReport(15 * this.puls[_loc1_].power);
                                                                  if(this.mens[_loc4_].hea <= 0)
                                                                  {
                                                                     this.FragReport(this.mens[_loc4_].team == this.mens[this.MP_myid].team,this.mens[_loc4_]);
                                                                  }
                                                               }
                                                            }
                                                            this.Hurt(_loc4_);
                                                            if(_loc4_ == this.MP_myid)
                                                            {
                                                               this.HurtMyPlayer(this.puls[_loc1_].x - this.mens[_loc4_].x,this.puls[_loc1_].y - this.mens[_loc4_].y + 40,15 * this.puls[_loc1_].power);
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                       _loc4_++;
                                    }
                                 }
                              }
                           }
                           else if(this.puls[_loc1_].visible == false)
                           {
                              this.DisposeAtom(this.puls[_loc1_].attached);
                              if(this.puls[_loc1_].cclass == 4)
                              {
                                 this.PhysicsExplosion(this.puls[_loc1_].x - this.puls[_loc1_].spx * 0.5 * this.thispulspeed,this.puls[_loc1_].y - this.puls[_loc1_].spy * 0.5 * this.thispulspeed,50 * this.puls[_loc1_].maxpower,5 * this.puls[_loc1_].maxpower * this.puls[_loc1_].knockback_multiplier,40 * this.puls[_loc1_].maxpower,this.puls[_loc1_].master,this.puls[_loc1_].thisis);
                                 this.ExplosionSound(this.puls[_loc1_].x - this.puls[_loc1_].spx * 0.5 * this.thispulspeed,this.puls[_loc1_].y - this.puls[_loc1_].spy * 0.5 * this.thispulspeed);
                              }
                              else if(this.puls[_loc1_].cclass == 6)
                              {
                                 if(this.puls[_loc1_].nadekind == 1)
                                 {
                                    if(this.MP_mode)
                                    {
                                       this.PhysicsExplosion(this.puls[_loc1_].x - this.puls[_loc1_].spx * 0.5 * this.thispulspeed,this.puls[_loc1_].y - this.puls[_loc1_].spy * 0.5 * this.thispulspeed,50 * this.puls[_loc1_].maxpower,5 * this.puls[_loc1_].maxpower * this.puls[_loc1_].knockback_multiplier,50 * this.puls[_loc1_].maxpower,this.puls[_loc1_].master,this.puls[_loc1_].thisis);
                                    }
                                    else
                                    {
                                       this.PhysicsExplosion(this.puls[_loc1_].x - this.puls[_loc1_].spx * 0.5 * this.thispulspeed,this.puls[_loc1_].y - this.puls[_loc1_].spy * 0.5 * this.thispulspeed,50 * this.puls[_loc1_].maxpower,5 * this.puls[_loc1_].maxpower * this.puls[_loc1_].knockback_multiplier,100 * this.puls[_loc1_].maxpower,this.puls[_loc1_].master,this.puls[_loc1_].thisis);
                                    }
                                    this.ExplosionSound(this.puls[_loc1_].x - this.puls[_loc1_].spx * 0.5 * this.thispulspeed,this.puls[_loc1_].y - this.puls[_loc1_].spy * 0.5 * this.thispulspeed);
                                 }
                                 if(this.puls[_loc1_].nadekind == 2)
                                 {
                                    this.PlaySound(this.s_portnade_explode,this.puls[_loc1_].x,this.puls[_loc1_].y);
                                    this.mcc = this.mens[this.puls[_loc1_].master];
                                    if(this.mcc.hea > 0)
                                    {
                                       this.mcc.stability = -1;
                                       this.u = this.ax[this.mcc.b_toe] - this.puls[_loc1_].x;
                                       this.v = this.ay[this.mcc.b_toe] - this.puls[_loc1_].y;
                                       this.mcc.tox += this.puls[_loc1_].spx;
                                       this.mcc.toy += this.puls[_loc1_].spy;
                                       if(this.puls[_loc1_].master == this.MP_myid && !this.MP_spectator || this.MP_spectator && this.death_cam >= 0 && this.puls[_loc1_].master == this.MP_myid)
                                       {
                                          this.game.x += this.u;
                                          this.game.y += this.v;
                                       }
                                       this.i4 = 0;
                                       while(this.i4 < this.atotal)
                                       {
                                          if(this.aof[this.i4] == this.mcc.idd)
                                          {
                                             this.ax[this.i4] -= this.u;
                                             this.ay[this.i4] -= this.v;
                                             this.atox[this.i4] += this.puls[_loc1_].spx;
                                             this.atoy[this.i4] += this.puls[_loc1_].spy;
                                             if(this.GET_LITE_PHYS())
                                             {
                                                this.lax[this.i4] -= this.u;
                                                this.lay[this.i4] -= this.v;
                                             }
                                          }
                                          ++this.i4;
                                       }
                                       this.Effect(this.mcc.x,this.mcc.y - 41,14,1,0);
                                       this.mcc.x -= this.u;
                                       this.mcc.y -= this.v;
                                       this.Effect(this.mcc.x,this.mcc.y - 41,14,1,0);
                                       this.i4 = 0;
                                       while(this.i4 < this.vehiclestotal)
                                       {
                                          if(this.vehicles[this.i4].io)
                                          {
                                             if(this.vehicles[this.i4].master == this.mcc.idd)
                                             {
                                                if(this.vehicles[this.i4].typ == 5 || this.vehicles[this.i4].typ == 6)
                                                {
                                                   this.vehicles[this.i4].master = -1;
                                                }
                                             }
                                          }
                                          ++this.i4;
                                       }
                                       if(this.mcc.incar != -1)
                                       {
                                          PutOutCar(this.mcc.incar);
                                       }
                                    }
                                 }
                              }
                           }
                           else
                           {
                              this.puls[_loc1_].rotation += this.puls[_loc1_].spx;
                           }
                        }
                        if(this.puls[_loc1_].cclass == 2)
                        {
                           if(this.puls[_loc1_].currentFrame != 15)
                           {
                              this.PAlert(this.puls[_loc1_].x,this.puls[_loc1_].y);
                              if(this.puls[_loc1_].visible)
                              {
                                 if(this.puls[_loc1_].currentFrame == 29)
                                 {
                                    this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,21,this.puls[_loc1_].rotation,0);
                                 }
                                 else if(this.puls[_loc1_].currentFrame == 51)
                                 {
                                    this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,24,this.puls[_loc1_].rotation,0);
                                 }
                                 else if(this.puls[_loc1_].currentFrame == 40)
                                 {
                                    this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,22,this.puls[_loc1_].rotation,0);
                                 }
                                 else if(this.puls[_loc1_].currentFrame == 48 || this.puls[_loc1_].currentFrame == 22)
                                 {
                                    this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,23,this.puls[_loc1_].rotation,0);
                                 }
                                 else if(this.puls[_loc1_].maxpower < 5)
                                 {
                                    this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,5,this.puls[_loc1_].rotation,0);
                                 }
                                 else
                                 {
                                    this.Effect(this.puls[_loc1_].x,this.puls[_loc1_].y,17,this.puls[_loc1_].rotation,0);
                                 }
                              }
                              else
                              {
                                 this.Effect(this.puls[_loc1_].x - this.puls[_loc1_].spx / 2,this.puls[_loc1_].y - this.puls[_loc1_].spy / 2,6,0,0);
                                 this.cx = (this.puls[_loc1_].maxpower + this.puls[_loc1_].power) / 2;
                                 _loc4_ = 0;
                                 while(_loc4_ < Math.sqrt(this.cx) * 2 || _loc4_ < 3)
                                 {
                                    this.Effect(this.puls[_loc1_].x - this.puls[_loc1_].spx,this.puls[_loc1_].y - this.puls[_loc1_].spy,8,-this.puls[_loc1_].spx * this.cx * 0.03 * Math.random(),-this.puls[_loc1_].spy * this.cx * 0.03 * Math.random());
                                    _loc4_++;
                                 }
                              }
                           }
                           else if(!this.puls[_loc1_].visible)
                           {
                              this.Effect(this.puls[_loc1_].x - this.puls[_loc1_].spx,this.puls[_loc1_].y - this.puls[_loc1_].spy,8,-this.puls[_loc1_].spx * this.puls[_loc1_].maxpower * 0.03,-this.puls[_loc1_].spy * this.puls[_loc1_].maxpower * 0.03);
                              this.Effect(this.puls[_loc1_].x - this.puls[_loc1_].spx,this.puls[_loc1_].y - this.puls[_loc1_].spy,8,-this.puls[_loc1_].spx * this.puls[_loc1_].maxpower * 0.03,-this.puls[_loc1_].spy * this.puls[_loc1_].maxpower * 0.03);
                              this.Effect(this.puls[_loc1_].x - this.puls[_loc1_].spx,this.puls[_loc1_].y - this.puls[_loc1_].spy,8,-this.puls[_loc1_].spx * this.puls[_loc1_].maxpower * 0.03,-this.puls[_loc1_].spy * this.puls[_loc1_].maxpower * 0.03);
                           }
                        }
                        if(this.puls[_loc1_].currentFrame == 48)
                        {
                           if(!this.puls[_loc1_].visible)
                           {
                              this.effcolor = -1;
                              this.FlowAt(this.puls[_loc1_].x,this.puls[_loc1_].y,0,-this.puls[_loc1_].spx * 0.5,-this.puls[_loc1_].spy * 0.5,2);
                           }
                        }
                        if(this.DEBUG_MODE)
                        {
                           this.debug_screen.graphics.lineStyle(4,0);
                           this.debug_screen.graphics.moveTo(this.puls[_loc1_].lx,this.puls[_loc1_].ly);
                           this.debug_screen.graphics.lineTo(this.puls[_loc1_].nx,this.puls[_loc1_].ny);
                           this.debug_screen.graphics.lineStyle(2,65280);
                           this.debug_screen.graphics.moveTo(this.puls[_loc1_].lx,this.puls[_loc1_].ly);
                           this.debug_screen.graphics.lineTo(this.puls[_loc1_].nx,this.puls[_loc1_].ny);
                        }
                        ++this.i7;
                     }
                  }
                  else
                  {
                     --this.puls[_loc1_].lag;
                     if(this.puls[_loc1_].lag <= 0)
                     {
                        this.puls[_loc1_].lag = 0;
                     }
                  }
                  if(this.puls[_loc1_].rot_glow.visible)
                  {
                     this.puls[_loc1_].rot_glow.rotation = -this.puls[_loc1_].rotation;
                  }
                  if(this.MP_favor_the_shooter)
                  {
                     if(!this.puls[_loc1_].visible)
                     {
                        this.SyncBulletApprox(this.puls[_loc1_]);
                     }
                  }
               }
            }
            _loc1_++;
         }
      }
      
      public function GlobalAtomIDToPlayerLocalAtomID(param1:int, param2:*) : int
      {
         if(param2.b_toe == param1)
         {
            return 0;
         }
         if(param2.b_leg1 == param1)
         {
            return 1;
         }
         if(param2.b_leg2 == param1)
         {
            return 2;
         }
         if(param2.b_arm1 == param1)
         {
            return 3;
         }
         if(param2.b_arm2 == param1)
         {
            return 4;
         }
         if(param2.b_body == param1)
         {
            return 5;
         }
         if(param2.b_head_start == param1)
         {
            return 6;
         }
         if(param2.b_head_end == param1)
         {
            return 7;
         }
         if(param2.b_brk1 == param1)
         {
            return 8;
         }
         if(param2.b_brk2 == param1)
         {
            return 9;
         }
         return -1;
      }
      
      public function PlayerLocalAtomIDToGlobalAtomID(param1:int, param2:*) : int
      {
         if(0 == param1)
         {
            return param2.b_toe;
         }
         if(1 == param1)
         {
            return param2.b_leg1;
         }
         if(2 == param1)
         {
            return param2.b_leg2;
         }
         if(3 == param1)
         {
            return param2.b_arm1;
         }
         if(4 == param1)
         {
            return param2.b_arm2;
         }
         if(5 == param1)
         {
            return param2.b_body;
         }
         if(6 == param1)
         {
            return param2.b_head_start;
         }
         if(7 == param1)
         {
            return param2.b_head_end;
         }
         if(8 == param1)
         {
            return param2.b_brk1;
         }
         if(9 == param1)
         {
            return param2.b_brk2;
         }
         return -1;
      }
      
      public function ApplyWaveDamageToPlayerAtom(param1:*, param2:*, param3:*, param4:*, param5:*, param6:*, param7:*, param8:*, param9:*, param10:*, param11:*, param12:*, param13:*, param14:* = -1, param15:* = "?") : void
      {
         var particle_show:Boolean = false;
         var target_was_alive:Boolean = false;
         var by:* = param1;
         var mens_aof_i6:* = param2;
         var i6_local:* = param3;
         var ax_i6_minus_x:* = param4;
         var ay_i6_minus_y:* = param5;
         var xx:* = param6;
         var damage:* = param7;
         var expl_hurt_full:* = param8;
         var size:* = param9;
         var power:* = param10;
         var apply_hitpoint_damage:* = param11;
         var expl_x:* = param12;
         var expl_y:* = param13;
         var event_time:* = param14;
         var by_weapon_model:* = param15;
         this.i6 = this.PlayerLocalAtomIDToGlobalAtomID(i6_local,mens_aof_i6);
         if(this.i6 == -1)
         {
            return;
         }
         if(this.MP_mode)
         {
            if(damage <= 0)
            {
               return;
            }
         }
         if(event_time == -1)
         {
            event_time = getTimer();
         }
         if(!this.IsBulletHerePossible(expl_x,expl_y,by,this.aof[this.i6],this.ax[this.i6],this.ay[this.i6],-1,-1,true,by_weapon_model))
         {
            if(event_time + this.maximum_hit_delay_time > getTimer())
            {
               this.SetTimeout(function():*
               {
                  ApplyWaveDamageToPlayerAtom(by,mens_aof_i6,i6_local,ax_i6_minus_x,ay_i6_minus_y,xx,damage,expl_hurt_full,size,power,apply_hitpoint_damage,expl_x,expl_y,event_time,by_weapon_model);
               },this.hit_retry_time);
            }
            return;
         }
         if(by_weapon_model === "ship")
         {
            this.VarChangePreventStart();
         }
         this.yy = Math.sqrt(this.arad[this.i6]);
         if(this.yy < 5)
         {
            this.yy = 5;
         }
         this.WakeUpAtom(this.i6);
         mens_aof_i6.stability -= this.Math_abs(power) * 0.1 / 4 * mens_aof_i6.mobility / mens_aof_i6.scale;
         mens_aof_i6.tox += ax_i6_minus_x * xx / this.yy * mens_aof_i6.mobility * mens_aof_i6.mobility / mens_aof_i6.scale;
         mens_aof_i6.toy += ay_i6_minus_y * xx / this.yy * mens_aof_i6.mobility * mens_aof_i6.mobility / mens_aof_i6.scale;
         this.atox[this.i6] += ax_i6_minus_x * xx / this.yy * 7 * mens_aof_i6.mobility * mens_aof_i6.mobility / mens_aof_i6.scale;
         this.atoy[this.i6] += ay_i6_minus_y * xx / this.yy * 7 * mens_aof_i6.mobility * mens_aof_i6.mobility / mens_aof_i6.scale;
         if(xx < size * 0.75)
         {
            if(this.amat[this.i6] == 1 || this.amat[this.i6] == 0)
            {
               if(mens_aof_i6.io)
               {
                  if(mens_aof_i6.incar == -1)
                  {
                     if(damage > 0)
                     {
                        particle_show = Math.random() * 50 < damage;
                        target_was_alive = mens_aof_i6.hea > 0;
                        if(by == -1 || mens_aof_i6.team != this.mens[by].team || by == this.aof[this.i6] || expl_hurt_full)
                        {
                           if(!this.MP_mode || this.MP_myid == this.aof[this.i6] && !this.MP_spectator || !mens_aof_i6.isplayer || this.MP_favor_the_shooter)
                           {
                              if(by == this.aof[this.i6])
                              {
                                 if(mens_aof_i6.whenlastshot < getTimer() - 7000)
                                 {
                                    mens_aof_i6.lastshotby = by;
                                 }
                              }
                              else
                              {
                                 mens_aof_i6.lastshotby = by;
                              }
                              mens_aof_i6.lastshotbygun = by_weapon_model;
                              mens_aof_i6.whenlastshot = getTimer();
                              if(!expl_hurt_full)
                              {
                                 if(this.MP_mode)
                                 {
                                    if(this.aof[this.i6] == by)
                                    {
                                       damage *= 0.5;
                                    }
                                 }
                                 else if(this.aof[this.i6] == by)
                                 {
                                    damage *= 0.3;
                                 }
                              }
                              if(apply_hitpoint_damage)
                              {
                                 mens_aof_i6.hea -= Math.max(0.1,this.Math_abs(damage) / 6);
                                 if(!this.MP_mode || !mens_aof_i6.isplayer || this.MP_myid == this.aof[this.i6])
                                 {
                                    if(this.i6 == mens_aof_i6.b_leg1 || this.i6 == mens_aof_i6.b_leg2)
                                    {
                                       mens_aof_i6.hp_legs -= this.Math_abs(damage) / 6;
                                    }
                                    else if(this.i6 == mens_aof_i6.b_body || this.i6 == mens_aof_i6.b_toe)
                                    {
                                       mens_aof_i6.hp_body -= this.Math_abs(damage) / 6;
                                    }
                                    else if(this.i6 == mens_aof_i6.b_head_end || this.i6 == mens_aof_i6.b_head_start)
                                    {
                                       mens_aof_i6.hp_head -= this.Math_abs(damage) / 6;
                                    }
                                    else if(this.i6 == mens_aof_i6.b_arm1 || this.i6 == mens_aof_i6.b_arm2)
                                    {
                                       mens_aof_i6.hp_arms -= this.Math_abs(damage) / 6;
                                    }
                                 }
                              }
                              if(!this.MP_mode || !mens_aof_i6.isplayer || this.MP_favor_the_shooter)
                              {
                                 if(particle_show)
                                 {
                                    this.effcolor = this.aof[this.i6];
                                    this.FlowAt(this.ax[this.i6],this.ay[this.i6],0,ax_i6_minus_x * xx * 7,ay_i6_minus_y * xx * 7,2);
                                 }
                              }
                           }
                           if(!this.MP_favor_the_shooter)
                           {
                              if(this.MP_mode)
                              {
                                 if(this.MP_myid == this.aof[this.i6] && !this.MP_spectator)
                                 {
                                    if(particle_show)
                                    {
                                       this.effcolor = this.aof[this.i6];
                                       this.FlowAt(this.ax[this.i6],this.ay[this.i6],0,ax_i6_minus_x * xx * 7,ay_i6_minus_y * xx * 7,2);
                                       this.MP_custom_events += ";gshot|" + this.aof[this.i6] + "#" + this.r2(this.ax[this.i6]) + "#" + this.r2(this.ay[this.i6]) + "#" + this.r2(ax_i6_minus_x * xx * 7) + "#" + this.r2(ay_i6_minus_y * xx * 7) + "#" + 2 + "#" + by + "#2" + "#" + int(damage / 6);
                                    }
                                 }
                              }
                           }
                        }
                        if(by == this.MP_myid)
                        {
                           if(!mens_aof_i6.dead)
                           {
                              if(!this.MP_mode || !mens_aof_i6.isplayer || this.MP_favor_the_shooter)
                              {
                                 if(mens_aof_i6.team != this.mens[by].team)
                                 {
                                    if(this.HQ && this.SCREEN_EFFECTS)
                                    {
                                       this.whitness.alpha += this.Math_abs(damage) / 6 / mens_aof_i6.hmax;
                                       if(mens_aof_i6.hea <= 0)
                                       {
                                          this.whitness.alpha += 0.5;
                                       }
                                       this.whitness.visible = true;
                                    }
                                    this.DamageReport(damage / 6);
                                    if(mens_aof_i6.hea <= 0 && !mens_aof_i6.isplayer)
                                    {
                                       this.FragReport(mens_aof_i6.team == this.mens[this.MP_myid].team,mens_aof_i6);
                                    }
                                 }
                              }
                           }
                        }
                        if(this.MP_favor_the_shooter && this.MP_mode)
                        {
                           this.Hurt(this.aof[this.i6],particle_show ? 1 : 0);
                           if(by == this.MP_myid)
                           {
                              if(this.aof[this.i6] != this.MP_myid)
                              {
                                 if(target_was_alive)
                                 {
                                    if(!this.MP_allow_client_side_kills)
                                    {
                                       if(!mens_aof_i6.dead)
                                       {
                                          mens_aof_i6.hea = Math.max(10,mens_aof_i6.hea);
                                       }
                                    }
                                    this.ApplyLoweredHP(mens_aof_i6,mens_aof_i6.hea,mens_aof_i6.dying,-Infinity);
                                 }
                              }
                           }
                        }
                        else if(!this.MP_mode || !mens_aof_i6.isplayer || this.MP_mode && this.aof[this.i6] == this.MP_myid)
                        {
                           this.Hurt(this.aof[this.i6],particle_show ? 1 : 0);
                        }
                        if(this.aof[this.i6] == this.MP_myid)
                        {
                           this.HurtMyPlayer(x - this.ax[this.i6],y - this.ay[this.i6],this.Math_abs(damage) / 6);
                        }
                     }
                  }
               }
            }
         }
         if(by_weapon_model === "ship")
         {
            this.VarChangePreventEnd();
         }
      }
      
      public function NewBullet(param1:*) : void
      {
         param1.rot_glow.visible = false;
      }
      
      public function RegisterPossibleBullet(param1:*) : void
      {
         var _loc2_:* = undefined;
         if(this.MP_mode)
         {
            if(this.MP_favor_the_shooter)
            {
               if(param1.master != this.MP_myid)
               {
                  _loc2_ = getTimer();
                  while(this.possible_bullet_data.length > 0 && (this.possible_bullet_data[0].timer < _loc2_ - 3000 || this.possible_bullet_data.length > 1000))
                  {
                     if(this.possible_bullet_data.length > 1000)
                     {
                     }
                     this.possible_bullet_data.shift();
                  }
                  this.possible_bullet_data.push({
                     "x":param1.x,
                     "y":param1.y,
                     "currentFrame":param1.currentFrame,
                     "master":param1.master,
                     "timer":_loc2_
                  });
               }
            }
         }
      }
      
      public function IsBulletHerePossible(param1:*, param2:*, param3:*, param4:*, param5:*, param6:*, param7:* = -1, param8:* = -1, param9:Boolean = true, param10:String = "") : Boolean
      {
         var _loc11_:Number = NaN;
         var _loc12_:Boolean = false;
         var _loc13_:* = undefined;
         var _loc14_:int = 0;
         if(!this.MP_mode)
         {
            return true;
         }
         if(!this.MP_favor_the_shooter)
         {
            return true;
         }
         if(this.NAIVE_HIT_CONFIRMATION)
         {
            return true;
         }
         if(param3 == -1)
         {
            return true;
         }
         if(param3 == this.MP_myid)
         {
            return true;
         }
         if(param10 != "swords")
         {
            if(param10 != "item_grenade")
            {
               _loc12_ = false;
               _loc13_ = 0;
               while(_loc13_ < this.gunstotal)
               {
                  if(this.guns[_loc13_].io)
                  {
                     if(this.guns[_loc13_].model == param10)
                     {
                        _loc12_ = true;
                        break;
                     }
                  }
                  _loc13_++;
               }
               if(!_loc12_)
               {
                  return false;
               }
            }
         }
         _loc11_ = this.Dist2D(param1,param2,param5,param6);
         if(_loc11_ > 200)
         {
            if(_loc11_ > Math.max(200,Math.min((this.MP_ping2 + this.mc2.ping) * 1.75,700)))
            {
               return false;
            }
            if(!this.TraceLineF_nopushers(param1,param2,param5,param6))
            {
               return false;
            }
         }
         if(param9)
         {
            _loc14_ = 0;
            while(_loc14_ < this.possible_bullet_data.length)
            {
               if(param7 == -1 || this.possible_bullet_data[_loc14_].currentFrame == param7)
               {
                  if(this.possible_bullet_data[_loc14_].master == param3)
                  {
                     _loc11_ = this.Dist2D(param1,param2,this.possible_bullet_data[_loc14_].x,this.possible_bullet_data[_loc14_].y);
                     if(_loc11_ < 300)
                     {
                        if(_loc11_ < 50 || this.TraceLineF_nopushers(param1,param2,this.possible_bullet_data[_loc14_].x,this.possible_bullet_data[_loc14_].y))
                        {
                           return true;
                        }
                     }
                  }
               }
               _loc14_++;
            }
            if(this.Dist2D(param1,param2,this.ax[this.mens[param3].b_body],this.ay[this.mens[param3].b_body]) < 200)
            {
               if(this.mens[param3].curwea == -1 || Boolean(this.guns[this.mens[param3].curwea].ready))
               {
                  return true;
               }
            }
            return false;
         }
         return true;
      }
      
      public function ApplyLimbDamageToPlayer(param1:*, param2:*, param3:*, param4:*, param5:*, param6:*, param7:*, param8:*, param9:*, param10:*, param11:*, param12:*, param13:*, param14:*, param15:*, param16:*, param17:*, param18:* = true, param19:* = -1) : Number
      {
         var v:Number = NaN;
         var physhit:Number = NaN;
         var dmg_scaler:Number = NaN;
         var i4:int = 0;
         var mc2:* = param1;
         var i2:* = param2;
         var str:* = param3;
         var puls_i_master:* = param4;
         var puls_power:* = param5;
         var puls_knockback_multiplier:* = param6;
         var puls_frame:* = param7;
         var puls_x:* = param8;
         var puls_y:* = param9;
         var puls_spx:* = param10;
         var puls_spy:* = param11;
         var puls_cclass:* = param12;
         var puls_thisis:* = param13;
         var show_damage:* = param14;
         var target_was_alive:* = param15;
         var send_admit_damage_event:* = param16;
         var i3:* = param17;
         var apply_hitpoint_damage:* = param18;
         var event_time:* = param19;
         if(event_time == -1)
         {
            event_time = getTimer();
         }
         if(Boolean(isNaN(puls_power)) || puls_power == undefined)
         {
            puls_power = 1;
         }
         else if(puls_power > 100000)
         {
            puls_power = 100000;
         }
         if(Boolean(isNaN(puls_spx)) || puls_spx == undefined)
         {
            puls_spx = 0;
         }
         if(Boolean(isNaN(puls_spy)) || puls_spy == undefined)
         {
            puls_spy = 0;
         }
         if(Boolean(isNaN(puls_x)) || puls_x == undefined)
         {
            puls_x = 0;
         }
         if(Boolean(isNaN(puls_y)) || puls_y == undefined)
         {
            puls_y = 0;
         }
         if(Boolean(isNaN(puls_knockback_multiplier)) || puls_knockback_multiplier == undefined)
         {
            puls_knockback_multiplier = 1;
         }
         else if(puls_knockback_multiplier > 100000)
         {
            puls_knockback_multiplier = 100000;
         }
         if(show_damage)
         {
            if(!this.IsBulletHerePossible(puls_x,puls_y,puls_i_master,i2,this.ax[i3],this.ay[i3],puls_frame,puls_power,true,puls_thisis))
            {
               if(event_time + this.maximum_hit_delay_time > getTimer())
               {
                  this.SetTimeout(function():*
                  {
                     ApplyLimbDamageToPlayer(mc2,i2,str,puls_i_master,puls_power,puls_knockback_multiplier,puls_frame,puls_x,puls_y,puls_spx,puls_spy,puls_cclass,puls_thisis,show_damage,target_was_alive,send_admit_damage_event,i3,apply_hitpoint_damage,event_time);
                  },this.hit_retry_time);
               }
               return 0;
            }
         }
         if(show_damage)
         {
            if(puls_cclass == 3)
            {
               this.SimHitSound(mc2,puls_x,puls_y,1);
            }
            else if(puls_frame == 29 || puls_frame == 51)
            {
               this.SimHitSound(mc2,puls_x,puls_y,2);
            }
            else
            {
               this.SimHitSound(mc2,puls_x,puls_y,0);
            }
         }
         v = puls_power;
         if(puls_frame == 41)
         {
            v = 0;
         }
         this.u = this.Dist2D(puls_spx * 0.3,puls_spy * 0.3,-this.atox[i3],-this.atoy[i3]);
         if(this.u > 25)
         {
            v += this.u * 0;
         }
         if(mc2.curwea == -1 && Boolean(mc2.isplayer))
         {
            v *= 1.1;
         }
         if(this.MP_mode)
         {
            if(this.mens[puls_i_master].team == mc2.team && (Boolean(mc2.isplayer) || Boolean(this.mens[puls_i_master].isplayer)))
            {
               v *= 0.1;
            }
         }
         if(puls_i_master == this.MP_myid)
         {
            if(mc2.hea > -50)
            {
               ++this.FUN_NICE_BULLETS;
            }
         }
         if(target_was_alive)
         {
            if(puls_frame != 41 || this.mens[puls_i_master].team != mc2.team)
            {
               mc2.lastshot = str;
               if(puls_i_master == i2)
               {
                  if(mc2.whenlastshot < getTimer() - 7000)
                  {
                     mc2.lastshotby = puls_i_master;
                  }
               }
               else
               {
                  mc2.lastshotby = puls_i_master;
               }
               mc2.whenlastshot = getTimer();
               mc2.lastshotbygun = puls_thisis;
            }
         }
         physhit = 1;
         if(!this.MP_mode)
         {
            if(this.LOW_HPS)
            {
               if(this.STRICT_MODE)
               {
                  if(mc2.team == this.mens[this.MP_myid].team)
                  {
                     if(mc2.hea > -50)
                     {
                        if(mc2.hea > 0)
                        {
                           physhit *= 0.2;
                        }
                        else
                        {
                           physhit *= 0.4;
                        }
                     }
                  }
               }
            }
         }
         if(v < 0.01)
         {
            v = 0.01;
         }
         dmg_scaler = 0;
         if(show_damage)
         {
            if(str == "body")
            {
               if(apply_hitpoint_damage)
               {
                  if(this.PLAZMA_GAME)
                  {
                     mc2.hp_body -= v * 25 * physhit;
                  }
                  mc2.hea -= v * 27;
               }
               dmg_scaler = 25;
               this.ablood[mc2.b_body] += v * 2;
               mc2.stability -= v * 0.1 * mc2.mobility;
               if(puls_i_master == this.MP_myid)
               {
                  if(!mc2.dead)
                  {
                     this.FUN_DAMAGE_MADE += v * 25;
                  }
               }
               if(this.MP_myid == i2)
               {
                  this.FUN_DAMAGE_TAKEN += v * 25;
               }
            }
            else if(str == "head")
            {
               if(apply_hitpoint_damage)
               {
                  if(this.PLAZMA_GAME)
                  {
                     mc2.hp_head -= v * 25 * physhit;
                  }
                  mc2.hea -= v * 55;
               }
               dmg_scaler = 55;
               this.ablood[mc2.b_head_start] += v * 4;
               mc2.stability -= v * 0.19 * mc2.mobility;
               if(puls_i_master == this.MP_myid)
               {
                  if(!mc2.dead)
                  {
                     ++this.FUN_HEADSHOTS_MADE;
                     this.FUN_DAMAGE_MADE += v * 55;
                  }
               }
               if(this.MP_myid == i2)
               {
                  this.FUN_DAMAGE_TAKEN += v * 55;
               }
            }
            else if(str == "legs")
            {
               if(apply_hitpoint_damage)
               {
                  if(this.PLAZMA_GAME)
                  {
                     mc2.hp_legs -= v * 25 * physhit;
                  }
                  mc2.hea -= v * 30;
               }
               dmg_scaler = 30;
               if(Math.random() > 0.5)
               {
                  this.ablood[mc2.b_leg1] += v * 2;
               }
               else
               {
                  this.ablood[mc2.b_leg2] += v * 2;
               }
               mc2.stability -= v * 0.15 * mc2.mobility;
               if(puls_i_master == this.MP_myid)
               {
                  if(!mc2.dead)
                  {
                     this.FUN_DAMAGE_MADE += v * 35;
                  }
               }
               if(this.MP_myid == i2)
               {
                  this.FUN_DAMAGE_TAKEN += v * 35;
               }
            }
            else if(str == "arms")
            {
               if(apply_hitpoint_damage)
               {
                  if(this.PLAZMA_GAME)
                  {
                     mc2.hp_arms -= v * 25 * physhit;
                  }
                  mc2.hea -= v * 20;
               }
               dmg_scaler = 20;
               if(Math.random() > 0.5)
               {
                  this.ablood[mc2.b_arm1] += v * 2;
               }
               else
               {
                  this.ablood[mc2.b_arm2] += v * 2;
               }
               mc2.stability -= v * 0.05 * mc2.mobility;
               if(puls_i_master == this.MP_myid)
               {
                  if(!mc2.dead)
                  {
                     this.FUN_DAMAGE_MADE += v * 20;
                  }
               }
               if(this.MP_myid == i2)
               {
                  this.FUN_DAMAGE_TAKEN += v * 20;
               }
            }
            if(target_was_alive)
            {
               this.xx = puls_x - puls_spx / 2 * this.thispulspeed;
               this.yy = puls_y - puls_spy / 2 * this.thispulspeed;
               if(this.xx < mc2.x - 10 * mc2.scale)
               {
                  this.xx = mc2.x - 10 * mc2.scale;
               }
               if(this.xx > mc2.x + 10 * mc2.scale)
               {
                  this.xx = mc2.x + 10 * mc2.scale;
               }
               if(this.yy < mc2.y - 82 * mc2.scale)
               {
                  this.yy = mc2.y - 82 * mc2.scale;
               }
               if(this.yy > mc2.y - mc2.sit * this.sitmax * mc2.scale)
               {
                  this.yy = mc2.y - mc2.sit * this.sitmax * mc2.scale;
               }
               this.effcolor = i2;
               if(str == "head")
               {
                  this.FlowAt(this.xx,this.yy,0,puls_spx * Math.sqrt(puls_power) / 2,puls_spy * Math.sqrt(puls_power) / 2,Math.min(5 * puls_power,7));
                  if(send_admit_damage_event)
                  {
                     this.MP_custom_events += ";gshot|" + i2 + "#" + this.r2(this.xx) + "#" + this.r2(this.yy) + "#" + this.r2(puls_spx * Math.sqrt(puls_power) / 2) + "#" + this.r2(puls_spy * Math.sqrt(puls_power) / 2) + "#" + this.r2(5 * puls_power) + "#" + puls_i_master + "#" + (puls_cclass == 3 ? "1" : "0") + "#" + int(v * dmg_scaler);
                  }
               }
               else
               {
                  this.FlowAt(this.xx,this.yy,0,puls_spx * Math.sqrt(puls_power) / 2,puls_spy * Math.sqrt(puls_power) / 2,Math.min(2 * puls_power,7));
                  if(send_admit_damage_event)
                  {
                     this.MP_custom_events += ";gshot|" + i2 + "#" + this.r2(this.xx) + "#" + this.r2(this.yy) + "#" + this.r2(puls_spx * Math.sqrt(puls_power) / 2) + "#" + this.r2(puls_spy * Math.sqrt(puls_power) / 2) + "#" + this.r2(2 * puls_power) + "#" + puls_i_master + "#" + (puls_cclass == 3 ? "1" : "0") + "#" + int(v * dmg_scaler);
                  }
               }
               mc2.tox += puls_spx * Math.sqrt(puls_power) * 0.05 * (mc2.mobility * mc2.mobility + 1) * 0.66 * puls_knockback_multiplier / mc2.scale;
               mc2.toy += puls_spy * Math.sqrt(puls_power) * 0.05 * (mc2.mobility * mc2.mobility + 1) * 0.66 * puls_knockback_multiplier / mc2.scale;
            }
            else
            {
               this.effcolor = i2;
               this.xx = this.ax[i3];
               this.yy = this.ay[i3];
               if(str == "head")
               {
                  this.FlowAt(this.xx,this.yy,0,puls_spx * Math.sqrt(puls_power) / 2,puls_spy * Math.sqrt(puls_power) / 2,5 * puls_power);
                  if(send_admit_damage_event)
                  {
                     this.MP_custom_events += ";gshot|" + i2 + "#" + this.r2(this.xx) + "#" + this.r2(this.yy) + "#" + this.r2(puls_spx * Math.sqrt(puls_power) / 2) + "#" + this.r2(puls_spy * Math.sqrt(puls_power) / 2) + "#" + this.r2(5 * puls_power) + "#" + puls_i_master + "#" + (puls_cclass == 3 ? "1" : "0") + "#" + 0;
                  }
               }
               else
               {
                  this.FlowAt(this.xx,this.yy,0,puls_spx * Math.sqrt(puls_power) / 2,puls_spy * Math.sqrt(puls_power) / 2,2 * puls_power);
                  if(send_admit_damage_event)
                  {
                     this.MP_custom_events += ";gshot|" + i2 + "#" + this.r2(this.xx) + "#" + this.r2(this.yy) + "#" + this.r2(puls_spx * Math.sqrt(puls_power) / 2) + "#" + this.r2(puls_spy * Math.sqrt(puls_power) / 2) + "#" + this.r2(2 * puls_power) + "#" + puls_i_master + "#" + (puls_cclass == 3 ? "1" : "0") + "#" + 0;
                  }
               }
            }
            if(i2 == this.MP_myid)
            {
               this.HurtMyPlayer(-puls_spx,-puls_spy,v * 10);
            }
            i4 = 0;
            while(i4 < this.atotal)
            {
               if(this.aof[i4] == this.aof[i3])
               {
                  if(this.aio[i4] == true || this.aio[i4] == false)
                  {
                     if(i4 == i3 || this.Math_pow2(this.ax[i4] - this.ax[i3]) + this.Math_pow2(this.ay[i4] - this.ay[i3]) < 900)
                     {
                        this.atox[i4] += puls_spx * Math.sqrt(puls_power) * 0.05 * (Math.min(mc2.mobility * mc2.mobility,1) + 1) * puls_knockback_multiplier / mc2.scale;
                        this.atoy[i4] += puls_spy * Math.sqrt(puls_power) * 0.05 * (Math.min(mc2.mobility * mc2.mobility,1) + 1) * puls_knockback_multiplier / mc2.scale;
                        this.xx2 = this.ax[i4] + puls_spx * Math.sqrt(puls_power) * 0.05 * (Math.min(mc2.mobility * mc2.mobility,1) + 1) * this.GSPEED;
                        this.yy2 = this.ay[i4] + puls_spy * Math.sqrt(puls_power) * 0.05 * (Math.min(mc2.mobility * mc2.mobility,1) + 1) * this.GSPEED;
                        if(this.TraceLineF_nopushers(this.ax[i4],this.ay[i4],this.xx2,this.yy2))
                        {
                           this.ax[i4] = this.xx2;
                           this.ay[i4] = this.yy2;
                        }
                        this.WakeUpAtom(i4);
                     }
                  }
               }
               i4++;
            }
            if(!this.MP_mode || !mc2.isplayer || this.MP_favor_the_shooter)
            {
               if(puls_i_master == this.MP_myid)
               {
                  if(i2 != puls_i_master)
                  {
                     if(!mc2.dead)
                     {
                        if(this.HQ && this.SCREEN_EFFECTS)
                        {
                           this.whitness.alpha += Math.max(puls_power * 50 / mc2.hmax,0.3);
                           if(mc2.hea <= 0)
                           {
                              this.whitness.alpha += 0.5;
                           }
                           this.whitness.visible = true;
                        }
                        this.DamageReport(v * dmg_scaler);
                        if(mc2.hea <= 0 && !mc2.isplayer)
                        {
                           this.FragReport(mc2.team == this.mens[this.MP_myid].team,mc2);
                        }
                     }
                  }
               }
            }
            if(this.aio[i3] == false)
            {
               this.WakeUpAtom(i3);
            }
         }
         if(show_damage || Boolean(mc2.dead))
         {
            this.Hurt(i2);
         }
         if(this.MP_gamestate == 0)
         {
            if(this.MP_mode && !mc2.isplayer && puls_i_master == this.MP_myid)
            {
               this.MP_custom_events += ";eh|" + i2 + "#" + mc2.hea + "#" + mc2.hp_head + "#" + mc2.hp_body + "#" + mc2.hp_arms + "#" + mc2.hp_legs;
               t2 = -1;
            }
         }
         if(puls_frame == 41)
         {
            if(show_damage)
            {
               this.HealGunApplied(i2,this.mens[puls_i_master],puls_power,true,puls_thisis);
            }
            puls_power = 0;
         }
         if(puls_frame == 48)
         {
            if(show_damage)
            {
               if((!this.MP_mode || !mc2.isplayer || i2 == this.MP_myid) && apply_hitpoint_damage)
               {
                  mc2.effects.push({
                     "type":"DOT",
                     "power":puls_power * 0.5,
                     "duration":110
                  });
               }
               else
               {
                  mc2.effects.push({
                     "type":"DOT",
                     "power":0,
                     "duration":110
                  });
               }
               if(this.MP_mode && i2 == this.MP_myid)
               {
                  this.MP_custom_events += ";ef_dot|" + i2 + "#" + 120;
               }
            }
         }
         if(!mc2.dead)
         {
            if(mc2.hea <= 0)
            {
               if(puls_i_master != mc2.team)
               {
                  this.i5 = 0;
                  while(this.i5 < this.playerstotal)
                  {
                     if(this.i5 != i2)
                     {
                        if(this.mens[this.i5].io)
                        {
                           if(this.mens[this.i5].hea > 0)
                           {
                              if(this.mens[this.i5].team == mc2.team)
                              {
                                 if(this.mens[this.i5].hunt == -1)
                                 {
                                    if(this.mens[this.i5].x > mc2.x - 500)
                                    {
                                       if(this.mens[this.i5].x < mc2.x + 500)
                                       {
                                          if(this.mens[this.i5].y > mc2.y - 300)
                                          {
                                             if(this.mens[this.i5].y < mc2.y + 300)
                                             {
                                                if(this.TraceLine(this.mens[this.i5].x,this.mens[this.i5].y - 50,mc2.x,mc2.y - 50))
                                                {
                                                   if(this.mens[this.i5].last_contact > this.HUNT_LOST)
                                                   {
                                                      this.Alerted(this.mens[this.i5]);
                                                   }
                                                   if(this.mens[this.i5].last_contact > mc2.last_contact + 10)
                                                   {
                                                      this.mens[this.i5].last_contact = mc2.last_contact + 10;
                                                      this.mens[this.i5].hunt = mc2.lastshotby;
                                                      this.mens[this.i5].tarx = puls_x - puls_spx * 6 - 100 + Math.random() * 200;
                                                      this.mens[this.i5].tary = puls_y - puls_spy * 6 - 50 + Math.random() * 100;
                                                      if(this.mens[this.i5].enemy_vis_tim > mc2.enemy_vis_tim)
                                                      {
                                                         this.mens[this.i5].enemy_vis_tim = mc2.enemy_vis_tim;
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                     ++this.i5;
                  }
               }
               if(mc2.team != this.mens[this.MP_myid].team)
               {
                  if(puls_i_master == this.MP_myid)
                  {
                     if(puls_thisis == "swords")
                     {
                        if(mc2.dying)
                        {
                           this.incBadge(7);
                        }
                     }
                     else if(str == "head")
                     {
                        this.incBadge(2);
                     }
                  }
               }
            }
         }
         if(!this.mens[puls_i_master].dead)
         {
            if(!mc2.dead)
            {
               if(!mc2.isplayer || !this.MP_mode)
               {
                  if(puls_frame != 41 || this.mens[puls_i_master].team != mc2.team)
                  {
                     this.Alerted(mc2);
                     mc2.hunt = puls_i_master;
                     mc2.last_contact = 0;
                  }
               }
            }
         }
         return puls_power;
      }
      
      public function Logic_eff_blood(param1:MovieClip) : void
      {
         var _loc2_:Number = NaN;
         param1.float_frame += param1.framespeed * this.GSPEED;
         if(param1.float_frame > 90)
         {
            param1.visible = false;
         }
         else
         {
            if(param1.float_frame < 6)
            {
               param1.inner_blood_cloud.alpha = 1 - param1.float_frame / 6;
            }
            else if(param1.inner_blood_cloud.visible)
            {
               param1.inner_blood_cloud.visible = false;
            }
            if(param1.float_frame < 20)
            {
               param1.inner_blood_detail1.alpha = 1 - param1.float_frame / 20;
               param1.inner_blood_detail1.x = param1.inner_blood_detail1.y = -6 * (1 - param1.float_frame / 20);
            }
            else if(param1.inner_blood_detail1.visible)
            {
               param1.inner_blood_detail1.visible = false;
            }
            if(param1.float_frame < 15)
            {
               param1.inner_blood_detail2.alpha = 1 - param1.float_frame / 15;
               param1.inner_blood_detail2.y = -8 * (1 - param1.float_frame / 15);
            }
            else if(param1.inner_blood_detail2.visible)
            {
               param1.inner_blood_detail2.visible = false;
            }
            if(param1.float_frame < 20)
            {
               _loc2_ = param1.float_frame / 20;
               param1.inner_blood_detail3.scaleX = param1.inner_blood_detail3.scaleY = 2 * (1 - _loc2_) + 1 * _loc2_;
            }
            else if(param1.float_frame < 85)
            {
               if(param1.inner_blood_detail3.scaleY != 1)
               {
                  param1.inner_blood_detail3.scaleX = param1.inner_blood_detail3.scaleY = 1;
               }
            }
            else
            {
               param1.inner_blood_detail3.alpha = 1 - (param1.float_frame - 85) / 5;
            }
         }
      }
      
      public function Logic_eff_blood_sprite(param1:MovieClip) : void
      {
         var _loc2_:Number = NaN;
         param1.float_frame += param1.framespeed * this.GSPEED;
         if(param1.float_frame > 35)
         {
            param1.visible = false;
         }
         else
         {
            _loc2_ = 1 - Math.pow(1 - param1.float_frame / 35,2);
            param1.inner_blood_splat1.scaleX = 0.179 * (1 - _loc2_) + 0.864 * _loc2_;
            param1.inner_blood_splat1.scaleY = 0.179 * (1 - _loc2_) + 1.163 * _loc2_;
            param1.inner_blood_splat1.alpha = 1 - _loc2_;
            if(param1.float_frame < 5)
            {
               _loc2_ = param1.float_frame / 5;
               param1.inner_blood_splat2.scaleX = param1.inner_blood_splat2.scaleY = 1 - _loc2_ + 1.88 * _loc2_;
               param1.inner_blood_splat2.alpha = 1 - _loc2_ + 0.59 * _loc2_;
            }
            else if(param1.float_frame < 15)
            {
               _loc2_ = (param1.float_frame - 5) / 10;
               param1.inner_blood_splat2.scaleX = param1.inner_blood_splat2.scaleY = 1.88 * (1 - _loc2_) + 3.11 * _loc2_;
               param1.inner_blood_splat2.alpha = 0.59 * (1 - _loc2_);
            }
            else if(param1.inner_blood_splat2.visible)
            {
               param1.inner_blood_splat2.visible = false;
            }
            if(param1.float_frame < 4)
            {
               _loc2_ = param1.float_frame / 4;
               param1.inner_blood_splat3.scaleX = 0.307 * (1 - _loc2_) + 0.554 * _loc2_;
               param1.inner_blood_splat3.scaleY = 0.307 * (1 - _loc2_) + 0.636 * _loc2_;
               param1.inner_blood_splat3.alpha = 1 - _loc2_ + 0.71 * _loc2_;
            }
            else if(param1.float_frame < 4)
            {
               _loc2_ = (param1.float_frame - 4) / 31;
               param1.inner_blood_splat3.scaleX = 0.554 * (1 - _loc2_) + 0.815 * _loc2_;
               param1.inner_blood_splat3.scaleY = 0.636 * (1 - _loc2_) + 1.096 * _loc2_;
               param1.inner_blood_splat3.alpha = 0.71 * (1 - _loc2_);
            }
         }
      }
      
      public function EffectsLogic() : void
      {
         var _loc1_:int = 0;
         this.i = 0;
         while(this.i < this.maxef)
         {
            if(this.ef[this.i] != null)
            {
               if(this.ef[this.i].visible)
               {
                  if(this.ef[this.i].typ == 0)
                  {
                     if(this.ef[this.i].expl != undefined)
                     {
                        if(this.ef[this.i].expl != null)
                        {
                           if(this.ef[this.i].contains(this.ef[this.i].expl))
                           {
                              this.MeasureStart(9);
                              this.ef[this.i].expl.gotoAndStop(Math.min(this.ef[this.i].expl.totalFrames,this.ef[this.i].expl.currentFrame + Math.ceil(this.ef[this.i].framespeed * this.GSPEED)));
                              this.MeasureStop(9);
                           }
                        }
                     }
                  }
                  if(this.ef[this.i].typ == 1 || this.ef[this.i].typ == 4)
                  {
                     this.ok = true;
                     for each(this.i2 in this.GetNearBoxBSP_at(this.ef[this.i].x,this.ef[this.i].y))
                     {
                        if(this.ef[this.i].x > this.boxx[this.i2])
                        {
                           if(this.ef[this.i].x < this.boxx[this.i2] + this.boxw[this.i2])
                           {
                              if(this.ef[this.i].y > this.boxy[this.i2])
                              {
                                 if(this.ef[this.i].y < this.boxy[this.i2] + this.boxh[this.i2])
                                 {
                                    this.ok = false;
                                    break;
                                 }
                              }
                           }
                        }
                     }
                     if(this.ok)
                     {
                        this.ef[this.i].x += this.ef[this.i].tox * this.GSPEED;
                        this.ef[this.i].y += this.ef[this.i].toy * this.GSPEED;
                        this.ef[this.i].toy += this.gravity * this.GSPEED;
                        if(this.ef[this.i].typ == 1)
                        {
                           this.ef[this.i].rotation += this.ef[this.i].toang * this.GSPEED;
                        }
                        else
                        {
                           this.ef[this.i].rotation = -Math.atan2(this.ef[this.i].tox,this.ef[this.i].toy) / Math.PI * 180;
                        }
                     }
                     this.ok = false;
                     this.i2 = 0;
                     while(this.i2 < this.watertotal && !this.ok)
                     {
                        if(this.ef[this.i].x > this.wax[this.i2])
                        {
                           if(this.ef[this.i].x < this.wax[this.i2] + this.waw[this.i2])
                           {
                              if(this.ef[this.i].y > this.way[this.i2])
                              {
                                 if(this.ef[this.i].y < this.way[this.i2] + this.wah[this.i2])
                                 {
                                    if(this.wa_friction[this.i2])
                                    {
                                       this.ok = true;
                                    }
                                 }
                              }
                           }
                        }
                        ++this.i2;
                     }
                     if(this.ok)
                     {
                        if(this.ef[this.i].typ == 1)
                        {
                           this.ef[this.i].tox *= Math.pow(0.9,this.GSPEED);
                           this.ef[this.i].toy *= Math.pow(0.9,this.GSPEED);
                           this.ef[this.i].toy -= this.gravity * 1.1 * this.GSPEED;
                           this.ef[this.i].toang = Math.pow(0.9,this.GSPEED);
                        }
                        else
                        {
                           this.ef[this.i].visible = false;
                        }
                     }
                     if(this.ef[this.i].typ == 1)
                     {
                        this.MeasureStart(10);
                        if(this.ef[this.i].inner_blood_cloud == undefined)
                        {
                           _loc1_ = Math.ceil(this.ef[this.i].framespeed * this.GSPEED);
                           while(_loc1_ > 0)
                           {
                              this.ef[this.i].nextFrame();
                              _loc1_--;
                           }
                        }
                        else
                        {
                           this.Logic_eff_blood(this.ef[this.i]);
                        }
                        this.MeasureStop(10);
                     }
                  }
                  if(this.ef[this.i].typ == 2)
                  {
                     this.ef[this.i].x += -1 + Math.random() * 2;
                     this.ef[this.i].y -= this.gravity * 5;
                     this.ok = false;
                     this.i2 = 0;
                     while(this.i2 < this.watertotal && !this.ok)
                     {
                        if(this.ef[this.i].x > this.wax[this.i2])
                        {
                           if(this.ef[this.i].x < this.wax[this.i2] + this.waw[this.i2])
                           {
                              if(this.ef[this.i].y > this.way[this.i2])
                              {
                                 if(this.ef[this.i].y < this.way[this.i2] + this.wah[this.i2])
                                 {
                                    if(this.wa_friction[this.i2])
                                    {
                                       this.ok = true;
                                       break;
                                    }
                                 }
                              }
                           }
                        }
                        ++this.i2;
                     }
                     if(this.ok)
                     {
                        for each(this.i2 in this.GetNearBoxBSP_at(this.ef[this.i].x,this.ef[this.i].y))
                        {
                           if(this.ef[this.i].x > this.boxx[this.i2])
                           {
                              if(this.ef[this.i].x < this.boxx[this.i2] + this.boxw[this.i2])
                              {
                                 if(this.ef[this.i].y > this.boxy[this.i2])
                                 {
                                    if(this.ef[this.i].y < this.boxy[this.i2] + this.boxh[this.i2])
                                    {
                                       this.ok = false;
                                       break;
                                    }
                                 }
                              }
                           }
                        }
                     }
                     if(!this.ok)
                     {
                        this.ef[this.i].visible = false;
                     }
                  }
                  if(this.ef[this.i].typ == 3)
                  {
                     this.ef[this.i].x += this.ef[this.i].tox * this.GSPEED;
                     this.ef[this.i].y += this.ef[this.i].toy * this.GSPEED;
                     this.ef[this.i].toy += this.gravity * this.GSPEED;
                     this.ok = true;
                     this.i2 = 0;
                     while(this.i2 < this.watertotal && this.ok)
                     {
                        if(this.ef[this.i].x > this.wax[this.i2])
                        {
                           if(this.ef[this.i].x < this.wax[this.i2] + this.waw[this.i2])
                           {
                              if(this.ef[this.i].y > this.way[this.i2])
                              {
                                 if(this.ef[this.i].y < this.way[this.i2] + this.wah[this.i2])
                                 {
                                    if(this.wa_friction[this.i2])
                                    {
                                       this.ef[this.i].visible = false;
                                       this.ok = false;
                                    }
                                 }
                              }
                           }
                        }
                        ++this.i2;
                     }
                     this.ok = true;
                     for each(this.i2 in this.GetNearBoxBSP_at(this.ef[this.i].x,this.ef[this.i].y))
                     {
                        if(this.ef[this.i].x > this.boxx[this.i2])
                        {
                           if(this.ef[this.i].x < this.boxx[this.i2] + this.boxw[this.i2])
                           {
                              if(this.ef[this.i].y > this.boxy[this.i2])
                              {
                                 if(this.ef[this.i].y < this.boxy[this.i2] + this.boxh[this.i2])
                                 {
                                    this.ef[this.i].tox = 0;
                                    this.ef[this.i].toy = 0;
                                    this.ok = false;
                                    break;
                                 }
                              }
                           }
                        }
                     }
                  }
                  if(this.ef[this.i].typ == 5)
                  {
                     this.ok = false;
                     for each(this.i2 in this.GetNearBoxBSP_at(this.ef[this.i].x,this.ef[this.i].y))
                     {
                        if(this.ef[this.i].x > this.boxx[this.i2])
                        {
                           if(this.ef[this.i].x < this.boxx[this.i2] + this.boxw[this.i2])
                           {
                              if(this.ef[this.i].y > this.boxy[this.i2])
                              {
                                 if(this.ef[this.i].y < this.boxy[this.i2] + this.boxh[this.i2])
                                 {
                                    this.ok = true;
                                    break;
                                 }
                              }
                           }
                        }
                     }
                     if(this.ok)
                     {
                        this.ef[this.i].tox *= Math.pow(0.5,this.GSPEED);
                        this.ef[this.i].toy *= Math.pow(0.5,this.GSPEED);
                        this.ef[this.i].alpha -= 50 * this.GSPEED;
                        if(this.ef[this.i].alpha < 0)
                        {
                           this.ef[this.i].visible = false;
                        }
                     }
                     this.ef[this.i].x += this.ef[this.i].tox * this.GSPEED;
                     this.ef[this.i].y += this.ef[this.i].toy * this.GSPEED;
                     this.ef[this.i].toy += this.gravity * this.GSPEED;
                     this.MeasureStart(11);
                     if(this.ef[this.i].inner_blood_splat1 == undefined)
                     {
                        _loc1_ = Math.ceil(this.ef[this.i].framespeed * this.GSPEED);
                        while(_loc1_ > 0)
                        {
                           this.ef[this.i].nextFrame();
                           _loc1_--;
                        }
                     }
                     else
                     {
                        this.Logic_eff_blood_sprite(this.ef[this.i]);
                     }
                     this.MeasureStop(11);
                  }
                  if(this.ef[this.i].typ == 6)
                  {
                     if(Math.abs(this.ef[this.i].x - this.ax[this.mens[this.ef[this.i].attached].b_head_start]) < 200)
                     {
                        if(Math.abs(this.ef[this.i].y - (this.ay[this.mens[this.ef[this.i].attached].b_head_start] - 30)) < 200)
                        {
                           this.ef[this.i].x = (this.ax[this.mens[this.ef[this.i].attached].b_head_start] * this.GSPEED + this.ef[this.i].x * 5) / (5 + this.GSPEED);
                           this.ef[this.i].y = ((this.ay[this.mens[this.ef[this.i].attached].b_head_start] - 30) * this.GSPEED + this.ef[this.i].y * 5) / (5 + this.GSPEED);
                        }
                     }
                     if(this.ef[this.i].totalFrames < 90)
                     {
                        if(this.ef[this.i].currentFrame > 20 + this.ef[this.i].msgtext.text.length * 2)
                        {
                           this.ef[this.i].alpha -= this.GSPEED * 0.1;
                           if(this.ef[this.i].alpha < 0)
                           {
                              this.ef[this.i].visible = false;
                           }
                        }
                     }
                  }
               }
            }
            ++this.i;
         }
      }
      
      public function PlayerLogic() : void
      {
         var i:int = 0;
         var last_act_fire:Boolean = false;
         var betterdist:Number = NaN;
         var betteri:int = 0;
         var newdis:Number = NaN;
         var init_shot_rot:Number = NaN;
         var ping_limited:Number = NaN;
         var correct_not_fine:Boolean = false;
         var step:Number = NaN;
         var side:Number = NaN;
         var bullet_dist:Number = NaN;
         var water_friction:Boolean = false;
         var dot_effects:Boolean = false;
         var e:int = 0;
         var target_frame:int = 0;
         var ef:Object = null;
         var inverse_legs:Boolean = false;
         var dx:Number = NaN;
         var dy:Number = NaN;
         var di:Number = NaN;
         var bodyParts:Array = null;
         var part:Object = null;
         i = 0;
         while(i < this.playerstotal)
         {
            if(this.mens[i].io)
            {
               if(i == this.MP_myid)
               {
                  this.thispulspeed = this.GSPEED2;
               }
               else
               {
                  this.thispulspeed = this.GSPEED;
               }
               if(this.mens[i].team == this.mens[this.MP_myid].team || this.PRO_BOTS || Boolean(this.mens[i].isplayer))
               {
                  if(!this.mens[i].dying)
                  {
                     if(!this.mens[i].dead)
                     {
                        if(this.mens[i].hea > 0)
                        {
                           if(this.mens[i].regentim * this.thispulspeed < 180 * this.GLOBAL_REGEN_DELAY)
                           {
                              ++this.mens[i].regentim;
                           }
                           if(this.mens[i].regentim * this.thispulspeed > 30 * this.GLOBAL_REGEN_DELAY)
                           {
                              if(this.mens[i].hea < this.mens[i].hmax)
                              {
                                 if(!this.ARCADE_GAME_MODE)
                                 {
                                    if(this.mens[i].regentim * this.thispulspeed > 60 * this.GLOBAL_REGEN_DELAY)
                                    {
                                       this.mens[i].hea = Math.min(this.mens[i].hea + 1 * this.GLOBAL_REGEN_SPEED,this.mens[i].hmax);
                                       if(this.MP_mode && Boolean(this.mens[i].isplayer))
                                       {
                                          this.IncludeRegenInHPLimit(this.mens[i],1 * this.GLOBAL_REGEN_SPEED);
                                       }
                                    }
                                 }
                                 else if(this.mens[i].regentim * this.thispulspeed < 60 * this.GLOBAL_REGEN_DELAY)
                                 {
                                    this.mens[i].hea = Math.min(this.mens[i].hea + 1 * this.GLOBAL_REGEN_SPEED,this.mens[i].hmax);
                                    if(this.MP_mode && Boolean(this.mens[i].isplayer))
                                    {
                                       this.IncludeRegenInHPLimit(this.mens[i],1 * this.GLOBAL_REGEN_SPEED);
                                    }
                                 }
                                 else if(this.mens[i].regentim * this.thispulspeed < 90 * this.GLOBAL_REGEN_DELAY)
                                 {
                                    this.mens[i].hea = Math.min(this.mens[i].hea + 2 * this.GLOBAL_REGEN_SPEED,this.mens[i].hmax);
                                    if(this.MP_mode && Boolean(this.mens[i].isplayer))
                                    {
                                       this.IncludeRegenInHPLimit(this.mens[i],2 * this.GLOBAL_REGEN_SPEED);
                                    }
                                 }
                                 else
                                 {
                                    this.mens[i].hea = Math.min(this.mens[i].hea + 4 * this.GLOBAL_REGEN_SPEED,this.mens[i].hmax);
                                    if(this.MP_mode && Boolean(this.mens[i].isplayer))
                                    {
                                       this.IncludeRegenInHPLimit(this.mens[i],4 * this.GLOBAL_REGEN_SPEED);
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
               if(this.mens[i].brk_body && (this.ax[this.mens[i].b_body] > this.render_minX && this.ax[this.mens[i].b_body] < this.render_maxX && this.ay[this.mens[i].b_body] > this.render_minY && this.ay[this.mens[i].b_body] < this.render_maxY || this.ax[this.mens[i].b_toe] > this.render_minX && this.ax[this.mens[i].b_toe] < this.render_maxX && this.ay[this.mens[i].b_toe] > this.render_minY && this.ay[this.mens[i].b_toe] < this.render_maxY) || !this.mens[i].brk_body && this.ax[this.mens[i].b_body] > this.render_minX && this.ax[this.mens[i].b_body] < this.render_maxX && this.ay[this.mens[i].b_body] > this.render_minY && this.ay[this.mens[i].b_body] < this.render_maxY || this.mens[i].x > this.render_minX && this.mens[i].x < this.render_maxX && this.mens[i].y > this.render_minY && this.mens[i].y < this.render_maxY || this.mens[i].isplayer || this.mens[i].hunt != -1 || !this.mens[i].isplayer && this.mens[i].botaction == 1 || this.mens[i].incar != -1 && this.aactive[-200 - this.mens[i].incar])
               {
                  this.aactive[i] = true;
                  this.mc = this.mens[i];
                  if(!this.mc.isplayer || i == this.MP_myid || !this.MP_mode)
                  {
                     this.mc.real_hea = this.mc.hea;
                  }
                  if(this.mc.notspawned)
                  {
                     this.SpawnPlayerImmediately(this.mc);
                  }
                  if(this.MP_mode)
                  {
                     this.VeriftMP(this.mc.b_body,-7);
                     this.VeriftMP(this.mc.b_toe,-7);
                     this.VeriftMP(this.mc.b_leg1,-7);
                     this.VeriftMP(this.mc.b_leg2,-7);
                     this.VeriftMP(this.mc.b_arm1,-7);
                     this.VeriftMP(this.mc.b_arm2,-7);
                     this.VeriftMP(this.mc.b_head_start,-7);
                     this.VeriftMP(this.mc.b_head_end,-7);
                     if(isNaN(this.mc.hea))
                     {
                        this.mc.hea = 0;
                     }
                     if(isNaN(this.mc.real_hea))
                     {
                        this.mc.real_hea = this.mc.hea;
                     }
                  }
                  if(this.MP_gamestate != 1 || !this.mc.dead)
                  {
                     if(!this.mc.dead || !this.mc.brk_body && !this.mc.brk_head)
                     {
                        if(this.mc.isplayer)
                        {
                           if(this.mc.mp_controlled)
                           {
                              this.u = this.mens[i].mp_x - this.ax[this.mens[i].b_toe];
                              this.v = this.mens[i].mp_y - this.ay[this.mens[i].b_toe];
                              this.u2 = this.mens[i].mp_x2 - this.ax[this.mens[i].b_body];
                              this.v2 = this.mens[i].mp_y2 - this.ay[this.mens[i].b_body];
                              this.u += this.mens[i].mp_tox * this.mc.mp_time;
                              this.v += this.mens[i].mp_toy * this.mc.mp_time;
                              this.u2 += this.mens[i].mp_tox2 * this.mc.mp_time;
                              this.v2 += this.mens[i].mp_toy2 * this.mc.mp_time;
                              this.xx2 = Math.cos(this.mc.mp_time) * 0.5 + 0.5;
                              this.mc.mp_time += this.GSPEED * 0.2;
                              if(this.mc.mp_time > Math.PI)
                              {
                                 this.mc.mp_controlled = false;
                              }
                              this.xx = this.VectorDist2D(this.u,this.v);
                              if(Boolean(isNaN(this.u)) || Boolean(isNaN(this.v)) || this.u == undefined || this.v == undefined)
                              {
                              }
                              if(this.xx < 200)
                              {
                                 this.xx2 = this.xx2 / 200 * this.xx;
                                 if(this.xx > 5)
                                 {
                                    this.TurnMPBone(this.mens[i].b_toe,this.mens[i].mp_tox,this.mens[i].mp_toy,this.u,this.v);
                                    this.TurnMPBone(this.mens[i].b_leg1,this.mens[i].mp_tox,this.mens[i].mp_toy,this.u,this.v);
                                    this.TurnMPBone(this.mens[i].b_leg2,this.mens[i].mp_tox,this.mens[i].mp_toy,this.u,this.v);
                                    this.TurnMPBone(this.mens[i].b_body,this.mens[i].mp_tox2,this.mens[i].mp_toy2,this.u2,this.v2);
                                    this.TurnMPBone(this.mens[i].b_head_start,this.mens[i].mp_tox2,this.mens[i].mp_toy2,this.u2,this.v2);
                                    this.TurnMPBone(this.mens[i].b_head_end,this.mens[i].mp_tox2,this.mens[i].mp_toy2,this.u2,this.v2);
                                    this.TurnMPBone(this.mens[i].b_arm1,this.mens[i].mp_tox2,this.mens[i].mp_toy2,this.u2,this.v2);
                                    this.TurnMPBone(this.mens[i].b_arm2,this.mens[i].mp_tox2,this.mens[i].mp_toy2,this.u2,this.v2);
                                 }
                              }
                              else
                              {
                                 this.ax[this.mens[i].b_toe] += this.u;
                                 this.ay[this.mens[i].b_toe] += this.v;
                                 this.ax[this.mens[i].b_body] += this.u;
                                 this.ay[this.mens[i].b_body] += this.v;
                                 this.ax[this.mens[i].b_head_start] += this.u;
                                 this.ay[this.mens[i].b_head_start] += this.v;
                                 this.ax[this.mens[i].b_head_end] += this.u;
                                 this.ay[this.mens[i].b_head_end] += this.v;
                                 this.ax[this.mens[i].b_arm1] += this.u;
                                 this.ay[this.mens[i].b_arm1] += this.v;
                                 this.ax[this.mens[i].b_arm2] += this.u;
                                 this.ay[this.mens[i].b_arm2] += this.v;
                                 this.ax[this.mens[i].b_leg1] += this.u;
                                 this.ay[this.mens[i].b_leg1] += this.v;
                                 this.ax[this.mens[i].b_leg2] += this.u;
                                 this.ay[this.mens[i].b_leg2] += this.v;
                                 if(this.mc.b_brk1 != this.mc.b_body)
                                 {
                                    this.ax[this.mens[i].b_brk1] += this.u;
                                    this.ay[this.mens[i].b_brk1] += this.v;
                                 }
                                 if(this.mc.b_brk2 != this.mc.b_body)
                                 {
                                    this.ax[this.mens[i].b_brk2] += this.u;
                                    this.ay[this.mens[i].b_brk2] += this.v;
                                 }
                                 if(this.GET_LITE_PHYS())
                                 {
                                    this.lax[this.mens[i].b_toe] += this.u;
                                    this.lay[this.mens[i].b_toe] += this.v;
                                    this.lax[this.mens[i].b_body] += this.u;
                                    this.lay[this.mens[i].b_body] += this.v;
                                    this.lax[this.mens[i].b_head_start] += this.u;
                                    this.lay[this.mens[i].b_head_start] += this.v;
                                    this.lax[this.mens[i].b_head_end] += this.u;
                                    this.lay[this.mens[i].b_head_end] += this.v;
                                    this.lax[this.mens[i].b_arm1] += this.u;
                                    this.lay[this.mens[i].b_arm1] += this.v;
                                    this.lax[this.mens[i].b_arm2] += this.u;
                                    this.lay[this.mens[i].b_arm2] += this.v;
                                    this.lax[this.mens[i].b_leg1] += this.u;
                                    this.lay[this.mens[i].b_leg1] += this.v;
                                    this.lax[this.mens[i].b_leg2] += this.u;
                                    this.lay[this.mens[i].b_leg2] += this.v;
                                    if(this.mc.b_brk1 != this.mc.b_body)
                                    {
                                       this.lax[this.mens[i].b_brk1] += this.u;
                                       this.lay[this.mens[i].b_brk1] += this.v;
                                    }
                                    if(this.mc.b_brk2 != this.mc.b_body)
                                    {
                                       this.lax[this.mens[i].b_brk2] += this.u;
                                       this.lay[this.mens[i].b_brk2] += this.v;
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
                  if(this.MP_mode)
                  {
                     this.VeriftMP(this.mc.b_body,-6);
                     this.VeriftMP(this.mc.b_toe,-6);
                     this.VeriftMP(this.mc.b_leg1,-6);
                     this.VeriftMP(this.mc.b_leg2,-6);
                     this.VeriftMP(this.mc.b_arm1,-6);
                     this.VeriftMP(this.mc.b_arm2,-6);
                     this.VeriftMP(this.mc.b_head_start,-6);
                     this.VeriftMP(this.mc.b_head_end,-6);
                  }
                  if(this.mc.hea > 0)
                  {
                     this.i2 = 0;
                     while(this.i2 < this.regionstotal)
                     {
                        if(this.regions[this.i2].use_on != 0)
                        {
                           if(this.mc.x > this.regions[this.i2].x)
                           {
                              if(this.mc.x < this.regions[this.i2].x + this.regions[this.i2].w)
                              {
                                 if(this.mc.y - 41 > this.regions[this.i2].y)
                                 {
                                    if(this.mc.y - 41 < this.regions[this.i2].y + this.regions[this.i2].h)
                                    {
                                       if(this.regions[this.i2].use_on == 1 && (i == this.MP_myid && this.key_pick && this.mc.incar == -1) || this.regions[this.i2].use_on == 2 && this.mc.incar == -1 || this.regions[this.i2].use_on == 3 && this.mc.incar != -1 || this.regions[this.i2].use_on == 4 || (this.regions[this.i2].use_on == 6 || this.regions[this.i2].use_on == 7) && this.mc.isplayer && (!this.MP_mode || i == this.MP_myid) && this.mc.hea > 0 || this.regions[this.i2].use_on == 9 && (i == this.MP_myid && this.key_pick && this.mc.team == 12 && this.mc.incar == -1) || this.regions[this.i2].use_on == 10 && (i == this.MP_myid && this.key_pick && this.mc.team == 13 && this.mc.incar == -1) || this.regions[this.i2].use_on == 13 && (i == this.MP_myid && this.mc.team == 12 && this.mc.incar == -1 && this.mc.hea > 0) || this.regions[this.i2].use_on == 14 && (i == this.MP_myid && this.mc.team == 13 && this.mc.incar == -1 && this.mc.hea > 0) || this.regions[this.i2].use_on == 17 && ((!this.MP_mode || this.MP_mode) && i != this.MP_myid && this
                                       .mc.hea > 0) || this.regions[this.i2].use_on == 18 && ((!this.MP_mode || this.MP_mode) && i != this.MP_myid && (this.mc.team != this.mens[this.MP_myid].team && this.mc.hea > 0)))
                                       {
                                          if(this.regions[this.i2].use_on == 7)
                                          {
                                             this.ok2 = true;
                                             this.i4 = 0;
                                             this.i3 = 0;
                                             while(this.i3 < this.playerstotal)
                                             {
                                                if(this.mens[this.i3].team == this.mc.team)
                                                {
                                                   if(this.mens[this.i3].char == 1 || this.mens[this.i3].char == 3 || this.mens[this.i3].char == 13)
                                                   {
                                                      if(this.mens[this.i3].x > this.regions[this.i2].x && this.mens[this.i3].x < this.regions[this.i2].x + this.regions[this.i2].w && this.mens[this.i3].y - 41 > this.regions[this.i2].y && this.mens[this.i3].y - 41 < this.regions[this.i2].y + this.regions[this.i2].h && !this.mens[this.i3].dying)
                                                      {
                                                         ++this.i4;
                                                      }
                                                      else
                                                      {
                                                         this.ok2 = false;
                                                      }
                                                   }
                                                }
                                                ++this.i3;
                                             }
                                          }
                                          if(this.regions[this.i2].use_on == 6 || this.regions[this.i2].use_on < 6 || this.ok2 || this.regions[this.i2].use_on == 9 || this.regions[this.i2].use_on == 10 || this.regions[this.i2].use_on == 13 || this.regions[this.i2].use_on == 14 || this.regions[this.i2].use_on == 17 || this.regions[this.i2].use_on == 18)
                                          {
                                             if(this.regions[this.i2].use_target != -1)
                                             {
                                                if(this.regions[this.i2].use_on == 1 || this.regions[this.i2].use_on == 9 || this.regions[this.i2].use_on == 10)
                                                {
                                                   if(this.regions[this.i2].play_sound)
                                                   {
                                                      if(!this.regions[this.i2].uses_timer && this.triggers[this.regions[this.i2].use_target].enabledd && (this.triggers[this.regions[this.i2].use_target].maxcalls > 0 || this.triggers[this.regions[this.i2].use_target].maxcalls == -1) || this.regions[this.i2].uses_timer && (this.timers[this.regions[this.i2].use_target].maxcalls > 0 || this.timers[this.regions[this.i2].use_target].maxcalls == -1))
                                                      {
                                                         this.PlaySound(this.s_t_switch2,this.regions[this.i2].x + this.regions[this.i2].w / 2,this.regions[this.i2].y + this.regions[this.i2].h / 2);
                                                      }
                                                      else
                                                      {
                                                         this.PlaySound(this.s_t_switch_denied,this.regions[this.i2].x + this.regions[this.i2].w / 2,this.regions[this.i2].y + this.regions[this.i2].h / 2);
                                                      }
                                                   }
                                                   this.key_pick = false;
                                                }
                                                if(!this.regions[this.i2].uses_timer)
                                                {
                                                   if(this.MP_mode && i == this.MP_myid && this.triggers[this.regions[this.i2].use_target].enabledd && (this.triggers[this.regions[this.i2].use_target].maxcalls > 0 || this.triggers[this.regions[this.i2].use_target].maxcalls == -1))
                                                   {
                                                      this.MP_custom_events += ";exec|" + this.regions[this.i2].use_target + "#" + i + "#" + this.i2;
                                                   }
                                                }
                                                if(!this.MP_mode || this.regions[this.i2].use_on != 1)
                                                {
                                                   if(!this.regions[this.i2].uses_timer)
                                                   {
                                                      this.TRIGGER_PLAYER_INITIATOR = i;
                                                      this.triggers[this.regions[this.i2].use_target].forcehyperjump = false;
                                                      this.EXEC_TRIGGER(this.regions[this.i2].use_target);
                                                   }
                                                   else
                                                   {
                                                      this.timers[this.regions[this.i2].use_target].forcehyperjump = false;
                                                      this.timers[this.regions[this.i2].use_target].enabledd = true;
                                                   }
                                                }
                                                if(this.regions[this.i2].use_on == 1 || this.regions[this.i2].use_on == 9 || this.regions[this.i2].use_on == 10)
                                                {
                                                   if(this.regions[this.i2].mc != undefined)
                                                   {
                                                      if(!this.regions[this.i2].uses_timer && this.triggers[this.regions[this.i2].use_target].enabledd && (this.triggers[this.regions[this.i2].use_target].maxcalls > 0 || this.triggers[this.regions[this.i2].use_target].maxcalls == -1) || this.regions[this.i2].uses_timer && (this.timers[this.regions[this.i2].use_target].maxcalls > 0 || this.timers[this.regions[this.i2].use_target].maxcalls == -1))
                                                      {
                                                         this.regions[this.i2].mc.gotoAndStop(2);
                                                      }
                                                      else
                                                      {
                                                         this.regions[this.i2].mc.gotoAndStop(3);
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                        ++this.i2;
                     }
                     if(i == this.MP_myid && !this.MP_half_bot)
                     {
                        if(!this.MP_spectator)
                        {
                           if(this.MP_gamestate != 2)
                           {
                              if(this.key_left)
                              {
                                 this.mc.act_movex = -1;
                              }
                              else if(this.key_right)
                              {
                                 this.mc.act_movex = 1;
                              }
                              else
                              {
                                 this.mc.act_movex = 0;
                              }
                              if(this.key_up)
                              {
                                 this.mc.act_movey = -1;
                              }
                              else if(this.key_down)
                              {
                                 this.mc.act_movey = 1;
                              }
                              else
                              {
                                 this.mc.act_movey = 0;
                              }
                           }
                           else
                           {
                              this.mc.act_movex = 0;
                              this.mc.act_movey = 0;
                           }
                           this.mc.tarx = (this.mouse_x - this.game.x) / this.game_scale;
                           this.mc.tary = (this.mouse_y - this.game.y) / this.game_scale;
                           if(Boolean(is_firing) && this.MP_gamestate == 0)
                           {
                              if(this.FIX_GUN_DESYNCHRONIZATION)
                              {
                                 if(this.mc.curwea != -1)
                                 {
                                    if(this.mc.wep_pause <= 0 && Boolean(this.guns[this.mc.curwea].ready))
                                    {
                                       if(this.mc.act_fire == false && !this.MP_favor_the_shooter)
                                       {
                                          this.MP_custom_events += ";ss|" + this.MP_myid + "#" + this.mc.tarx + "#" + this.mc.tary + "#" + this.mc.curwea;
                                       }
                                       this.mc.act_fire = true;
                                    }
                                 }
                                 else
                                 {
                                    if(this.mc.act_fire == false && !this.MP_favor_the_shooter)
                                    {
                                       this.MP_custom_events += ";ss|" + this.MP_myid + "#" + this.mc.tarx + "#" + this.mc.tary + "#" + this.mc.curwea;
                                    }
                                    this.mc.act_fire = true;
                                 }
                              }
                              else
                              {
                                 if(this.mc.act_fire == false && !this.MP_favor_the_shooter)
                                 {
                                    this.MP_custom_events += ";ss|" + this.MP_myid + "#" + this.mc.tarx + "#" + this.mc.tary + "#" + -9999;
                                 }
                                 this.mc.act_fire = true;
                              }
                           }
                           else
                           {
                              this.mc.act_fire = false;
                           }
                           if(this.mc.act_fire || this.MP_mode || Math.random() > 0.97)
                           {
                              this.i2 = 0;
                              while(this.i2 < this.playerstotal)
                              {
                                 if(this.mens[this.i2].io)
                                 {
                                    if(this.mens[this.i2].team != this.mc.team)
                                    {
                                       if(!this.mens[this.i2].dead)
                                       {
                                          if(this.aactive[this.i2])
                                          {
                                             if(this.Dist2D(this.mc.tarx,this.mc.tary,this.mens[this.i2].x,this.mens[this.i2].y) < 150)
                                             {
                                                if(this.mc.hunt != this.i2)
                                                {
                                                   this.mc.hunt = -1;
                                                   this.Alerted(this.mc);
                                                   this.mc.hunt = this.i2;
                                                }
                                                this.i2 = this.playerstotal;
                                             }
                                          }
                                       }
                                    }
                                 }
                                 ++this.i2;
                              }
                           }
                           if(this.mc.hunt != -1)
                           {
                              if(this.mc.hunt >= 0 && this.mc.hunt < this.playerstotal)
                              {
                                 if(this.mens[this.mc.hunt].io)
                                 {
                                    if(this.mens[this.mc.hunt].dead)
                                    {
                                       this.MakeHappy(this.mc);
                                       this.mc.hunt = -1;
                                    }
                                    else if(this.Dist2D(this.mc.tarx,this.mc.tary,this.mens[this.mc.hunt].x,this.mens[this.mc.hunt].y) > 250)
                                    {
                                       this.mc.hunt = -1;
                                    }
                                 }
                              }
                           }
                        }
                     }
                     else if(this.mc.botaction != 4)
                     {
                        if(this.MP_gamestate != 2)
                        {
                           if(!this.mc.isplayer || this.MP_myid == i && this.MP_half_bot)
                           {
                              if(this.DEBUG_MODE)
                              {
                              }
                              last_act_fire = Boolean(this.mc.act_fire);
                              this.mc.act_fire = false;
                              this.bugs = false;
                              this.injured = false;
                              this.mc.act_movex = 0;
                              this.mc.act_movey = 0;
                              if(this.mc.team == this.mens[this.MP_myid].team || !this.EASY_MODE)
                              {
                                 this.i2 = 0;
                                 while(this.i2 <= this.pulsmax)
                                 {
                                    if(this.puls[this.i2] != null)
                                    {
                                       if(this.puls[this.i2].visible == true)
                                       {
                                          if(this.mens[this.puls[this.i2].master].team != this.mc.team)
                                          {
                                             if(this.puls[this.i2].currentFrame == 14)
                                             {
                                                if(this.Dist2D(this.mc.x,this.mc.y,this.puls[this.i2].x,this.puls[this.i2].y) < 100)
                                                {
                                                   this.bugs = true;
                                                   this.mc.tarx = (this.mc.tarx + this.puls[this.i2].x) / 2;
                                                   this.mc.tary = (this.mc.tary + this.puls[this.i2].y) / 2;
                                                }
                                             }
                                          }
                                       }
                                    }
                                    ++this.i2;
                                 }
                                 if((this.CASUAL_MODE || this.MP_mode) && this.AUTO_REVIVE || this.mc.team != this.mens[this.MP_myid].team)
                                 {
                                    if(this.mc.hunt == -1 || this.MP_mode && this.mc.dying || this.PRO_BOTS && (this.mc.hunt != -1 && this.mens[this.mc.hunt] != i))
                                    {
                                       this.i2 = this.mc.dying ? i : 0;
                                       while(this.i2 < this.playerstotal && !this.injured)
                                       {
                                          if(this.mens[this.i2].io)
                                          {
                                             if(this.mens[this.i2].team == this.mc.team)
                                             {
                                                if(Boolean(this.mens[this.i2].dead) || Boolean(this.mens[this.i2].dying))
                                                {
                                                   if(!this.mens[this.i2].brk_head && !this.mens[this.i2].brk_arms && !this.mens[this.i2].brk_legs && !this.mens[this.i2].brk_body || this.i2 == i && (this.mens[i].hunt == -1 || this.mens[i].hea <= 15))
                                                   {
                                                      if(this.Dist2D(this.ax[this.mens[this.i2].b_body],this.ay[this.mens[this.i2].b_body],this.mc.x,this.mc.y) < 400)
                                                      {
                                                         this.ok = true;
                                                         if(this.mc.curwea == -1 || this.guns[this.mc.curwea].stat_class != 7)
                                                         {
                                                            this.i3 = 0;
                                                            while(this.i3 < this.gunstotal && this.ok)
                                                            {
                                                               if(this.guns[this.i3].io)
                                                               {
                                                                  if(!this.guns[this.i3].forcars)
                                                                  {
                                                                     if(this.guns[this.i3].stat_class == 7)
                                                                     {
                                                                        if(this.guns[this.i3].picken_by == i)
                                                                        {
                                                                           this.ok = false;
                                                                           if(!(this.MP_mode && i == this.MP_myid) || Math.random() < 0.2)
                                                                           {
                                                                              this.mc.curwea = this.i3;
                                                                              this.ChangedGun(i);
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                               ++this.i3;
                                                            }
                                                         }
                                                         if(this.mc.curwea != -1)
                                                         {
                                                            if(this.guns[this.mc.curwea].stat_class == 7)
                                                            {
                                                               if(this.mc.x < this.ax[this.mens[this.i2].b_body])
                                                               {
                                                                  this.mc.act_movex = 1;
                                                               }
                                                               else
                                                               {
                                                                  this.mc.act_movex = -1;
                                                               }
                                                               this.mc.act_movey = 1;
                                                               if(this.i2 == i)
                                                               {
                                                                  this.mc.tarx = (this.mc.tarx + this.ax[this.mens[this.i2].b_leg1]) / 2;
                                                                  this.mc.tary = (this.mc.tary + this.ay[this.mens[this.i2].b_leg1] + 20) / 2;
                                                               }
                                                               else
                                                               {
                                                                  this.mc.tarx = (this.mc.tarx + this.ax[this.mens[this.i2].b_body]) / 2;
                                                                  this.mc.tary = (this.mc.tary + this.ay[this.mens[this.i2].b_body]) / 2;
                                                               }
                                                               if(this.Dist2D(this.ax[this.mens[this.i2].b_body],this.ay[this.mens[this.i2].b_body],this.mc.x,this.mc.y) < 100 || this.i2 == i)
                                                               {
                                                                  this.mc.act_fire = true;
                                                               }
                                                               this.mens[this.i2].deadtim = 0;
                                                               this.mens[this.i2].alpha = 1;
                                                               this.injured = true;
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                          ++this.i2;
                                       }
                                    }
                                 }
                              }
                              if(this.bugs || this.injured)
                              {
                                 if(this.bugs)
                                 {
                                    if(this.mc.curwea != -1)
                                    {
                                       this.mc.curwea = -1;
                                       this.ChangedGun(i);
                                    }
                                    else if(this.mc.team != this.mens[this.MP_myid].team || Math.random() > 0.95 || this.PRO_BOTS)
                                    {
                                       if(this.injured && Boolean(this.mc.act_fire))
                                       {
                                          this.mc.act_movex = -this.mc.side;
                                       }
                                       else
                                       {
                                          this.mc.act_fire = true;
                                       }
                                    }
                                 }
                                 this.ok = false;
                              }
                              else
                              {
                                 if(this.mc.isplayer && Math.random() > 0.5 || !this.mc.isplayer && Math.random() > 0.92)
                                 {
                                    this.mc.rand = Math.random();
                                    this.mc.rand2 = Math.random();
                                    this.mc.rand3 = Math.random();
                                    if(!(i == this.MP_myid && this.MP_mode) || Math.random() < 0.1)
                                    {
                                       if(!this.mc.dying)
                                       {
                                          if(this.mc.curwea != -1 && this.Dist2D(this.mc.x,this.mc.y,this.mc.tarx,this.mc.tary) < 100 && this.mc.hunt != -1)
                                          {
                                             this.mc.curwea = -1;
                                             this.ChangedGun(i);
                                          }
                                          else if(Math.random() > 0.8 || this.mc.curwea == -1 && this.Dist2D(this.mc.x,this.mc.y,this.mc.tarx,this.mc.tary) > 100)
                                          {
                                             this.i2 = 0;
                                             while(this.i2 < this.gunstotal)
                                             {
                                                if(this.guns[this.i2].io)
                                                {
                                                   if(this.guns[this.i2].picken_by == i)
                                                   {
                                                      if(!this.guns[this.i2].forcars)
                                                      {
                                                         if(this.i2 != this.mc.curwea)
                                                         {
                                                            if(this.guns[this.i2].wep > 0)
                                                            {
                                                               if(this.mc.curwea == -1 || this.CalcWepPriority(this.guns[this.mc.curwea]) < this.CalcWepPriority(this.guns[this.i2]))
                                                               {
                                                                  this.mc.curwea = this.i2;
                                                                  this.ChangedGun(i);
                                                                  this.i2 = this.gunstotal;
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                                ++this.i2;
                                             }
                                          }
                                       }
                                    }
                                 }
                                 this.ok = true;
                                 if(this.mc.hunt != -1)
                                 {
                                    if(this.mens[this.mc.hunt].io)
                                    {
                                       this.mc2 = this.mens[this.mc.hunt];
                                       this.mc.act_movex = 0;
                                       this.mc.act_movey = 0;
                                       this.mc.last_contact += 1;
                                       this.xx = this.Dist2D(this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1],this.ax[this.mc2.b_body],this.ay[this.mc2.b_body]);
                                       if(this.mc.curwea != -1)
                                       {
                                          this.i3 = this.guns[this.mc.curwea].stat_class;
                                       }
                                       else
                                       {
                                          this.i3 = -1;
                                       }
                                       if(this.mc2.hea > 0 && this.mc2.stability > 0)
                                       {
                                          if(this.i3 != 2)
                                          {
                                             this.rx = this.mc2.x - 30 + this.mc.rand * 60;
                                             this.ry = this.mc2.y + 10 - this.mc.rand2 * 102;
                                          }
                                          else
                                          {
                                             this.rx = this.mc2.x - 20 + this.mc.rand * 40;
                                             this.ry = this.mc2.y - this.mc.rand2 * 82;
                                          }
                                          if(!this.EASY_MODE || i == this.MP_myid)
                                          {
                                             if(this.xx < 270)
                                             {
                                                if(this.mc.rand3 > 0.9)
                                                {
                                                   this.ry = this.mc2.y - 82;
                                                }
                                             }
                                          }
                                       }
                                       else
                                       {
                                          this.rx = this.ax[this.mc2.b_body] - 25 + this.mc.rand * 50;
                                          this.ry = this.ay[this.mc2.b_body] - 25 + this.mc.rand2 * 50;
                                       }
                                       if(this.mc2.incar == -1)
                                       {
                                          if(this.i3 == 0)
                                          {
                                             this.rx += this.atox[this.mc2.b_toe] * this.xx / this.pspeed;
                                             this.ry += this.atoy[this.mc2.b_toe] * this.xx / this.pspeed;
                                             if(!this.TraceLine(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1]))
                                             {
                                                this.rx += (this.ax[this.mc.b_arm1] - this.ax[this.mc2.b_body]) / this.xx * 100;
                                                this.ry += (this.ay[this.mc.b_arm1] - this.ay[this.mc2.b_body]) / this.xx * 100;
                                             }
                                          }
                                          if(this.i3 == 1)
                                          {
                                             this.rx += this.atox[this.mc2.b_toe] * this.xx / this.pspeed;
                                             this.ry += this.atoy[this.mc2.b_toe] * this.xx / this.pspeed;
                                          }
                                          if(this.i3 == 2)
                                          {
                                          }
                                          if(this.i3 == 4 || this.i3 == 6)
                                          {
                                             this.rx += this.atox[this.mc2.b_toe] * this.xx / this.pspeed;
                                             this.ry += this.atoy[this.mc2.b_toe] * this.xx / this.pspeed + (this.ay[this.mc.b_arm1] - this.ay[this.mc2.b_body]) * 0.5 - this.Math_abs(this.ax[this.mc.b_arm1] - this.ax[this.mc2.b_body]) * 0.5;
                                          }
                                       }
                                       if(this.PRO_BOTS && (!this.LOW_HPS || this.FORCE_CUSTOM_MAP || this.MP_mode))
                                       {
                                          this.ok2 = true;
                                       }
                                       else
                                       {
                                          this.ok2 = (this.mc.side == 1 && this.mc.x < this.rx + 100 || this.mc.side == -1 && this.mc.x > this.rx - 100) && (this.mens[this.mc.hunt].alpha > 0.1 || this.mens[this.mc.hunt].incar != -1) && this.TraceLine(this.rx,this.ry,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1]) || this.xx < 100 || i == this.MP_myid;
                                       }
                                       if(this.mc.enemy_vis_tim > 0 || this.ok2)
                                       {
                                          --this.mc.enemy_vis_tim;
                                          if(this.ok2)
                                          {
                                             this.mc.enemy_vis_tim = 45 / this.thispulspeed;
                                          }
                                          if(i == this.MP_myid && this.MP_mode)
                                          {
                                             this.mc.tarx = (this.mc.tarx * 13 + this.rx) / 14;
                                             this.mc.tary = (this.mc.tary * 13 + this.ry) / 14;
                                          }
                                          else if(this.EASY_MODE && i != this.MP_myid)
                                          {
                                             this.mc.tarx = (this.mc.tarx * 13 + this.rx) / 14;
                                             this.mc.tary = (this.mc.tary * 13 + this.ry) / 14;
                                          }
                                          else
                                          {
                                             this.mc.tarx = (this.mc.tarx * 1 + this.rx) / 2;
                                             this.mc.tary = (this.mc.tary * 1 + this.ry) / 2;
                                          }
                                          this.ok = false;
                                       }
                                       else
                                       {
                                          if(this.TraceLine(this.rx,this.ry,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1]))
                                          {
                                             this.mc.tarx = (this.mc.tarx * 5 + this.rx) / 6;
                                             this.mc.tary = (this.mc.tary * 5 + this.ry) / 6;
                                          }
                                          if(this.Dist2D(this.mc.tarx,this.mc.tary,this.rx,this.ry) > 500)
                                          {
                                             this.mc.tarx = (this.mc.tarx * 10 + this.rx) / 11;
                                             this.mc.tary = (this.mc.tary * 50 + this.ry) / 51;
                                          }
                                          this.mc.act_movey = 1;
                                       }
                                       if((this.mc.curwea != -1 && this.guns[this.mc.curwea].ready || this.mc.arm1.lower.psi.visible) && (!this.mc.dying || !this.EASY_MODE && Math.random() > 0.85 || this.mc.incar != -1) && (this.mc.stability >= -0.1 || !this.EASY_MODE))
                                       {
                                          this.cx = this.mc.rand3 * 200;
                                          if(!this.ok && ((this.TraceLine(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1]) || this.mens[this.mc.hunt].alpha <= 0.1) && this.TraceAllyLine(i,this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1])))
                                          {
                                             this.mc.last_contact = 0;
                                             if(this.mc.curwea == -1 && Boolean(this.mc.arm1.lower.psi.visible))
                                             {
                                                if(this.Dist2D(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1]) > 50)
                                                {
                                                   if(this.ax[this.mc.b_arm1] > this.mc.tarx)
                                                   {
                                                      this.mc.act_movex = -1;
                                                   }
                                                   else
                                                   {
                                                      this.mc.act_movex = 1;
                                                   }
                                                }
                                                if(this.Dist2D(this.mc.tarx,this.mc.tary,this.rx,this.ry) < 200)
                                                {
                                                   if(this.Dist2D(this.rx,this.ry,this.mc.x,this.mc.y - 41) < 70)
                                                   {
                                                      this.mc.act_fire = true;
                                                   }
                                                }
                                             }
                                             else
                                             {
                                                if(this.xx > 570 / this.game_scale + this.cx && this.EASY_MODE || this.xx > 1400 / this.game_scale)
                                                {
                                                   this.mc.act_fire = false;
                                                }
                                                else if(this.i3 != 2 && this.Dist2D(this.mc.tarx,this.mc.tary,this.rx,this.ry) < 50 + this.cx * 0.1 || this.i3 == 2 && this.Dist2D(this.mc.tarx,this.mc.tary,this.rx,this.ry) < 30 || this.xx > 600 / this.game_scale && this.Dist2D(this.mc.tarx,this.mc.tary,this.rx,this.ry) < 100 + this.cx || this.mens[this.mc.hunt].alpha <= 0.1)
                                                {
                                                   if(i == this.MP_myid && this.MP_mode)
                                                   {
                                                      if(Math.random() < Math.pow(0.8,this.GSPEED))
                                                      {
                                                         this.mc.act_fire = true;
                                                      }
                                                   }
                                                   else if(this.EASY_MODE && i != this.MP_myid)
                                                   {
                                                      if(Math.random() < Math.pow(0.2,this.GSPEED))
                                                      {
                                                         this.mc.act_fire = true;
                                                      }
                                                   }
                                                   else
                                                   {
                                                      this.mc.tarx = this.rx;
                                                      this.mc.tary = this.ry;
                                                      this.mc.act_fire = true;
                                                   }
                                                }
                                                if(this.mc.hea > this.mc.hmax * 0.5)
                                                {
                                                   if(this.Dist2D(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1]) > 250 + this.cx)
                                                   {
                                                      if(this.ax[this.mc.b_arm1] > this.mc.tarx)
                                                      {
                                                         this.mc.act_movex = -1;
                                                      }
                                                      else
                                                      {
                                                         this.mc.act_movex = 1;
                                                      }
                                                   }
                                                }
                                                else if(this.Dist2D(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1]) < 350 + this.cx)
                                                {
                                                   if(this.ax[this.mc.b_arm1] < this.mc.tarx)
                                                   {
                                                      this.mc.act_movex = -1;
                                                   }
                                                   else
                                                   {
                                                      this.mc.act_movex = 1;
                                                   }
                                                   if(this.mens[this.mc.hunt].curwea == -1 && !this.mens[this.mc.hunt].dying)
                                                   {
                                                      this.mc.act_movex = -this.mc.act_movex;
                                                   }
                                                }
                                             }
                                          }
                                          else if(this.mc.hea > this.mc.hmax * 0.2 && this.mc.team != this.mens[this.MP_myid].team || this.mc.hea > this.mc.hmax * 0.5)
                                          {
                                             if(this.TraceLine(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1] - (100 + this.mc.rand * 100) - this.cx,this.ay[this.mc.b_arm1]) && this.TraceAllyLine(i,this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1]))
                                             {
                                                this.mc.act_movex = -1;
                                             }
                                             else if(this.TraceLine(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1] + (100 + this.mc.rand * 100) + this.cx,this.ay[this.mc.b_arm1]) && this.TraceAllyLine(i,this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1] + 50 + this.cx,this.ay[this.mc.b_arm1]))
                                             {
                                                this.mc.act_movex = 1;
                                             }
                                             else if(this.TraceLine(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1] - (100 + this.mc.rand * 100),this.ay[this.mc.b_arm1] - 100 * this.mc.mobility) && this.TraceAllyLine(i,this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1] - (100 + this.mc.rand * 100),this.ay[this.mc.b_arm1] - 100 * this.mc.mobility))
                                             {
                                                this.mc.act_movex = -1;
                                                this.mc.act_movey = -1;
                                             }
                                             else if(this.TraceLine(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1] + (100 + this.mc.rand * 100),this.ay[this.mc.b_arm1] - 100 * this.mc.mobility) && this.TraceAllyLine(i,this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1] + (100 + this.mc.rand * 100),this.ay[this.mc.b_arm1] - 100 * this.mc.mobility))
                                             {
                                                this.mc.act_movex = 1;
                                                this.mc.act_movey = -1;
                                             }
                                             else if(this.TraceLine(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1] - 100 * this.mc.mobility) && this.TraceAllyLine(i,this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1] - 100 * this.mc.mobility))
                                             {
                                                this.mc.act_movey = -1;
                                             }
                                             else if(this.mc.sit < 0.5 && this.TraceLine(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1] + 50) && this.TraceAllyLine(i,this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1] + 50))
                                             {
                                                this.mc.act_movey = 1;
                                             }
                                             else if(this.TraceLine(this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1],this.ax[this.mc.b_arm1] + (this.mc.rand - 0.5) * 800,this.ay[this.mc.b_arm1] - this.mc.rand2 * 200) && this.TraceLine(this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1] + (this.mc.rand - 0.5) * 800,this.ay[this.mc.b_arm1] - this.mc.rand2 * 200) && this.TraceAllyLine(i,this.mc.tarx,this.mc.tary,this.ax[this.mc.b_arm1] + (this.mc.rand - 0.5) * 800,this.ay[this.mc.b_arm1] - this.mc.rand2 * 200))
                                             {
                                                if(this.mc.rand > 0.5)
                                                {
                                                   this.mc.act_movex = 1;
                                                }
                                                else
                                                {
                                                   this.mc.act_movex = -1;
                                                }
                                                if(this.mc.rand2 > 0.5)
                                                {
                                                   this.mc.act_movey = -1;
                                                }
                                             }
                                             else if(this.cx > 80)
                                             {
                                                if(this.mc.tarx > this.mc.x)
                                                {
                                                   this.mc.act_movex = 1;
                                                }
                                                else
                                                {
                                                   this.mc.act_movex = -1;
                                                }
                                             }
                                          }
                                       }
                                       else if(this.mc.curwea != -1)
                                       {
                                          if(this.TraceLine(this.ax[this.mc.b_body],this.ay[this.mc.b_body],this.ax[this.mc2.b_arm1],this.ay[this.mc2.b_arm1]))
                                          {
                                             if(!this.TraceLine(this.ax[this.mc.b_body] + 30 + this.mc.rand3 * 100,this.ay[this.mc.b_body],this.ax[this.mc2.b_arm1],this.ay[this.mc2.b_arm1]))
                                             {
                                                this.mc.act_movex = 1;
                                             }
                                             else if(!this.TraceLine(this.ax[this.mc.b_body] - 30 - this.mc.rand3 * 100,this.ay[this.mc.b_body],this.ax[this.mc2.b_arm1],this.ay[this.mc2.b_arm1]))
                                             {
                                                this.mc.act_movex = -1;
                                             }
                                             else if(!this.TraceLine(this.ax[this.mc.b_body],this.ay[this.mc.b_body] - 100,this.ax[this.mc2.b_arm1],this.ay[this.mc2.b_arm1]))
                                             {
                                                this.mc.act_movey = -1;
                                             }
                                             else if(!this.TraceLine(this.ax[this.mc.b_body],this.ay[this.mc.b_body] + 50,this.ax[this.mc2.b_arm1],this.ay[this.mc2.b_arm1]))
                                             {
                                                this.mc.act_movey = 1;
                                             }
                                             else if(!this.TraceLine(this.ax[this.mc.b_body] - 200,this.ay[this.mc.b_body] - 100,this.ax[this.mc2.b_arm1],this.ay[this.mc2.b_arm1]))
                                             {
                                                this.mc.act_movey = -1;
                                                this.mc.act_movex = -1;
                                             }
                                             else if(!this.TraceLine(this.ax[this.mc.b_body] + 200,this.ay[this.mc.b_body] - 100,this.ax[this.mc2.b_arm1],this.ay[this.mc2.b_arm1]))
                                             {
                                                this.mc.act_movey = -1;
                                                this.mc.act_movex = 1;
                                             }
                                          }
                                       }
                                       else
                                       {
                                          this.i3 = -1;
                                          this.xx = 0;
                                          if(this.mc2.incar == -1)
                                          {
                                             this.i2 = 0;
                                             while(this.i2 < this.gunstotal)
                                             {
                                                if(this.guns[this.i2].io)
                                                {
                                                   this.mc2 = this.guns[this.i2];
                                                   this.yy = this.Dist2D(this.mc.x,this.mc.y,this.mc2.x,this.mc2.y);
                                                   if(this.yy < 800)
                                                   {
                                                      if(this.mc2.forcars == false)
                                                      {
                                                         if((this.mc2.picken_by == -1 || this.mens[this.mc2.picken_by].hea < 50) && (this.i3 == -1 || this.yy < this.xx) && (this.mc2.command == -1 || this.mc2.command != -1 && this.mc2.command == this.mc.team && (this.mc.isplayer || this.mens[this.MP_myid].team != this.mc.team)))
                                                         {
                                                            if(this.mc.x < this.mc2.x - 20)
                                                            {
                                                               this.mc.act_movex = 1;
                                                            }
                                                            else if(this.mc.x > this.mc2.x + 20)
                                                            {
                                                               this.mc.act_movex = -1;
                                                            }
                                                            else if(this.mc.y > this.mc2.y)
                                                            {
                                                               this.mc.act_movey = -1;
                                                            }
                                                            else
                                                            {
                                                               this.mc.act_movey = 1;
                                                            }
                                                            this.xx = this.yy;
                                                            this.i3 = this.i2;
                                                         }
                                                      }
                                                   }
                                                }
                                                ++this.i2;
                                             }
                                          }
                                       }
                                       if(Math.random() > 0.5)
                                       {
                                          this.i2 = 0;
                                          while(this.i2 < this.playerstotal)
                                          {
                                             if(this.i2 != i)
                                             {
                                                if(this.mens[this.i2].io)
                                                {
                                                   if(this.mens[this.i2].hea > 0)
                                                   {
                                                      if(this.mens[this.i2].team == this.mc.team)
                                                      {
                                                         if(this.mens[this.i2].hunt == -1)
                                                         {
                                                            if(this.mens[this.i2].x > this.mc.x - 500)
                                                            {
                                                               if(this.mens[this.i2].x < this.mc.x + 500)
                                                               {
                                                                  if(this.mens[this.i2].y > this.mc.y - 300)
                                                                  {
                                                                     if(this.mens[this.i2].y < this.mc.y + 300)
                                                                     {
                                                                        if(this.PRO_BOTS || this.TraceLine(this.mens[this.i2].x,this.mens[this.i2].y - 50,this.mc.x,this.mc.y - 50))
                                                                        {
                                                                           if(this.mens[this.i2].last_contact > this.HUNT_LOST)
                                                                           {
                                                                              this.Alerted(this.mens[this.i2]);
                                                                           }
                                                                           if(this.mens[this.i2].last_contact > this.mc.last_contact + 10)
                                                                           {
                                                                              this.mens[this.i2].last_contact = this.mc.last_contact + 10;
                                                                              this.mens[this.i2].hunt = this.mc.hunt;
                                                                              this.mens[this.i2].tarx = this.mc.tarx - 100 + Math.random() * 200;
                                                                              this.mens[this.i2].tary = this.mc.tary - 50 + Math.random() * 100;
                                                                              if(this.mens[this.i2].enemy_vis_tim > this.mc.enemy_vis_tim)
                                                                              {
                                                                                 this.mens[this.i2].enemy_vis_tim = this.mc.enemy_vis_tim;
                                                                              }
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                             ++this.i2;
                                          }
                                       }
                                       if(this.mc.incar != -1 && !this.vehicles[this.mc.incar].ecosystem)
                                       {
                                          if(this.mc.x < this.mens[this.mc.hunt].x)
                                          {
                                             this.mc.act_movex = 1;
                                          }
                                          else
                                          {
                                             this.mc.act_movex = -1;
                                          }
                                       }
                                       if(this.mens[this.mc.hunt].team == this.mc.team)
                                       {
                                          if(this.mc.team == 0 || this.PRO_BOTS)
                                          {
                                             this.mc.hunt = -1;
                                          }
                                          if(this.DEBUG_MODE)
                                          {
                                          }
                                       }
                                       if(this.mc2.dying && (Math.random() > 0.9 && this.mc.team != this.mens[this.MP_myid].team) || !this.mc2.io || this.mc2.hea < -30 || this.mc2.hea <= 0 && this.mc2.incar != -1)
                                       {
                                          if(!this.PRO_BOTS || Boolean(this.mc2.dead))
                                          {
                                             this.mc.hunt = -1;
                                          }
                                          if(this.DEBUG_MODE)
                                          {
                                          }
                                          if(this.mc.botaction == 0)
                                          {
                                             if(Math.random() > 0.5)
                                             {
                                                this.mc.botaction = 2;
                                             }
                                             else
                                             {
                                                this.mc.botaction = 3;
                                             }
                                          }
                                          this.MakeHappy(this.mc);
                                       }
                                       if(this.mc.hunt == i)
                                       {
                                          this.mc.hunt = -1;
                                          if(this.DEBUG_MODE)
                                          {
                                          }
                                          if(this.mc.botaction == 0)
                                          {
                                             this.mc.botaction = 3;
                                          }
                                       }
                                       if(this.mc.last_contact > this.HUNT_LOST && !this.PRO_BOTS)
                                       {
                                          this.mc.hunt = -1;
                                          if(this.mc.botaction == 0)
                                          {
                                             this.mc.botaction = 3;
                                          }
                                       }
                                    }
                                 }
                              }
                              if(this.DEBUG_MODE)
                              {
                              }
                              if(this.ok)
                              {
                                 if(this.mc.botaction == 1 && this.mc.team == this.mens[this.MP_myid].team && this.mens[this.MP_myid].hea > 0)
                                 {
                                    this.xx = this.mens[this.MP_myid].x + this.mc.side * 100;
                                    if(this.mens[this.MP_myid].act_movey == 1 && this.mens[this.MP_myid].side == this.mc.side)
                                    {
                                       this.xx = this.mens[this.MP_myid].x - this.mc.side * 100;
                                    }
                                    if(this.Math_abs(this.mc.x - this.xx) * (Math.sin(i) * 0.25 + 0.75) + this.Math_abs(this.mc.y - this.mens[this.MP_myid].y) > 100 || this.Math_abs(this.mc.x - this.mens[this.MP_myid].x) < 30)
                                    {
                                       if(this.mc.inwater)
                                       {
                                          if(this.mc.y > this.mens[this.MP_myid].y)
                                          {
                                             this.mc.act_movey = -1;
                                          }
                                          else
                                          {
                                             this.mc.act_movey = 1;
                                          }
                                       }
                                       if(this.mc.x > this.xx)
                                       {
                                          this.mc.act_movex = -1;
                                       }
                                       else
                                       {
                                          this.mc.act_movex = 1;
                                       }
                                    }
                                    else if(!this.mc.inwater)
                                    {
                                       if(this.mens[this.MP_myid].side == this.mc.side)
                                       {
                                          if(this.mens[this.MP_myid].act_movey != 1)
                                          {
                                             this.mc.act_movey = 1;
                                          }
                                       }
                                    }
                                    if(this.mens[this.MP_myid].hunt != -1 || Boolean(this.mens[this.MP_myid].act_fire))
                                    {
                                       this.mc.tarx = (this.mc.tarx * 3 + this.mens[this.MP_myid].tarx) / 4;
                                       this.mc.tary = (this.mc.tary * 3 + this.mens[this.MP_myid].tary) / 4;
                                    }
                                    else
                                    {
                                       if(this.mc.rand3 > 0.95)
                                       {
                                          this.mc.randtim = -this.mc.randtim;
                                          this.mc.rand3 = Math.random() * 0.95;
                                       }
                                       if(this.mc.randtim == 0)
                                       {
                                          this.mc.randtim = this.mc.side;
                                       }
                                       this.mc.tarx = (this.mc.tarx * 7 + this.mc.x + (this.mc.rand2 * 400 + 200) * this.mc.randtim) / 8;
                                       this.mc.tary = (this.mc.tary * 7 + this.mc.y - 50 + (this.mc.rand3 * 100 - 50)) / 8;
                                    }
                                 }
                                 else if(this.mc.hunt == -1)
                                 {
                                    if(this.mc.botaction == 2 || this.mc.botaction == 3)
                                    {
                                       if(this.mc.rand3 > 0.95)
                                       {
                                          this.mc.randtim = -this.mc.randtim;
                                       }
                                       else
                                       {
                                          if(this.mc.randtim == 0)
                                          {
                                             this.mc.randtim = this.mc.side;
                                          }
                                          this.mc.tarx = (this.mc.tarx * 10 + (this.mc.x + this.mc.randtim * 200)) / 11;
                                          this.mc.tary = (this.mc.tary * 10 + (this.mc.y - 41 + this.mc.rand2 * 100 - 50)) / 11;
                                       }
                                       if(this.mc.botaction == 3)
                                       {
                                          if(!this.TracePoint(this.mc.x + this.mc.side * 50,this.mc.y + 20) || !this.TracePoint(this.mc.x + this.mc.side * 50,this.mc.y + 150))
                                          {
                                             if(this.TracePoint(this.mc.x + this.mc.side * 100,this.mc.y - 40) || this.TracePoint(this.mc.x + this.mc.side * 100,this.mc.y - 100))
                                             {
                                                this.mc.act_movex = this.mc.side;
                                             }
                                          }
                                       }
                                    }
                                    else
                                    {
                                       this.mc.tarx = (this.mc.tarx * 10 + (this.mc.x + this.mc.side * 200)) / 11;
                                       this.mc.tary = (this.mc.tary * 10 + (this.mc.y - 41)) / 11;
                                    }
                                 }
                              }
                              if(this.mc.hunt == -1 || this.mc.act_movex == 0 && this.mc.act_movey == 0 && !this.mc.act_fire)
                              {
                                 this.i2 = 0;
                                 while(this.i2 < this.playerstotal)
                                 {
                                    if(this.i2 != i)
                                    {
                                       if(this.mens[this.i2].io)
                                       {
                                          this.mc2 = this.mens[this.i2];
                                          if(this.mc2.hea > 0 && !this.mc2.dying)
                                          {
                                             if(this.mc2.x > this.mc.x - this.hscreenX * 1.5 / this.game_scale)
                                             {
                                                if(this.mc2.x < this.mc.x + this.hscreenX * 1.5 / this.game_scale)
                                                {
                                                   if(this.mc2.y > this.mc.y - this.hscreenY * 1.5 / this.game_scale)
                                                   {
                                                      if(this.mc2.y < this.mc.y + this.hscreenY * 1.5 / this.game_scale)
                                                      {
                                                         if(this.mc2.x > this.mc.x - 100 && this.mc.side > 0 || this.mc2.x < this.mc.x + 100 && this.mc.side < 0 || this.PRO_BOTS)
                                                         {
                                                            if(this.mc2.team != this.mc.team)
                                                            {
                                                               if(this.PRO_BOTS || this.TraceLine(this.mc2.x - 25 + Math.random() * 50,this.mc2.y - Math.random() * 82,this.ax[this.mc.b_head_start] - 30 + Math.random() * 60,this.ay[this.mc.b_head_start] - 30 + Math.random() * 60))
                                                               {
                                                                  if(this.mc.hunt == -1)
                                                                  {
                                                                     this.Alerted(this.mc);
                                                                  }
                                                                  this.mc.hunt = this.i2;
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                    ++this.i2;
                                 }
                              }
                              if(!this.injured)
                              {
                                 this.i4 = 0;
                                 this.i3 = 0;
                                 this.i2 = 0;
                                 while(this.i2 < this.playerstotal)
                                 {
                                    if(this.i2 != i)
                                    {
                                       if(this.mens[this.i2].io)
                                       {
                                          this.mc2 = this.mens[this.i2];
                                          if(this.mc2.io)
                                          {
                                             if(this.mc2.hea > 0 && !this.mc2.dying)
                                             {
                                                if(this.mc2.x > this.mc.x - this.screenX / this.game_scale)
                                                {
                                                   if(this.mc2.x < this.mc.x + this.screenX / this.game_scale)
                                                   {
                                                      if(this.mc2.y > this.mc.y - this.screenY / this.game_scale)
                                                      {
                                                         if(this.mc2.y < this.mc.y + this.screenY / this.game_scale)
                                                         {
                                                            if(this.mc2.team == this.mc.team || this.TraceLine(this.mc2.x - 25,this.mc2.y - 41,this.ax[this.mc.b_head_start],this.ay[this.mc.b_head_start]))
                                                            {
                                                               if(this.mc2.team != this.mc.team)
                                                               {
                                                                  --this.i4;
                                                                  if(this.i2 != this.mc.hunt)
                                                                  {
                                                                     this.i3 = this.i2;
                                                                  }
                                                               }
                                                               else
                                                               {
                                                                  this.i4 += 1;
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                    ++this.i2;
                                 }
                                 if(this.i4 < -1)
                                 {
                                    if(this.mc.x > this.mens[this.i3].x)
                                    {
                                       this.mc.act_movex = 1;
                                    }
                                    else
                                    {
                                       this.mc.act_movex = -1;
                                    }
                                    if(this.mc.act_movey == 1)
                                    {
                                       this.mc.act_movey = 0;
                                    }
                                 }
                              }
                              if(this.mc.incar == -1)
                              {
                                 this.ok = true;
                                 this.i4 = -1;
                                 this.i2 = 0;
                                 while(this.i2 <= this.pulsmax)
                                 {
                                    if(this.puls[this.i2] != null)
                                    {
                                       if(this.puls[this.i2].visible == true)
                                       {
                                          if(this.mens[this.puls[this.i2].master].team != this.mc.team)
                                          {
                                             if(this.puls[this.i2].master >= 0)
                                             {
                                                if(this.puls[this.i2].cclass == 0 || this.puls[this.i2].cclass == 1 || this.puls[this.i2].cclass == 2)
                                                {
                                                   if((this.puls[this.i2].x > this.mc.x && this.mc.side > 0 || this.puls[this.i2].x < this.mc.x && this.mc.side < 0) && this.TraceLine(this.puls[this.i2].x,this.puls[this.i2].y,this.ax[this.mc.b_head_start],this.ay[this.mc.b_head_start]))
                                                   {
                                                      if(this.CheckCross(this.puls[this.i2].x,this.puls[this.i2].y,this.puls[this.i2].x + this.puls[this.i2].spx * 10,this.puls[this.i2].y + this.puls[this.i2].spy * 10,this.mc.x,this.mc.y,this.mc.x,this.mc.y - 60,this.i2))
                                                      {
                                                         this.mc.act_movey = -1;
                                                         if(!this.mens[this.puls[this.i2].master].dead)
                                                         {
                                                            if(this.mc.hunt == -1)
                                                            {
                                                               this.Alerted(this.mc);
                                                               this.mc.hunt = this.puls[this.i2].master;
                                                            }
                                                         }
                                                         this.ok = false;
                                                         this.i4 = this.i2;
                                                      }
                                                      if(this.CheckCross(this.puls[this.i2].x - this.puls[this.i2].spx * 5,this.puls[this.i2].y - this.puls[this.i2].spy * 5,this.puls[this.i2].x + this.puls[this.i2].spx * 20,this.puls[this.i2].y + this.puls[this.i2].spy * 20,this.mc.x,this.mc.y - 60,this.mc.x,this.mc.y - 102,this.i2))
                                                      {
                                                         this.mc.act_movey = 1;
                                                         if(!this.mens[this.puls[this.i2].master].dead)
                                                         {
                                                            if(this.mc.hunt == -1)
                                                            {
                                                               this.Alerted(this.mc);
                                                               this.mc.hunt = this.puls[this.i2].master;
                                                            }
                                                         }
                                                         this.ok = false;
                                                         this.i4 = this.i2;
                                                      }
                                                   }
                                                }
                                                if(this.puls[this.i2].cclass == 4 || this.puls[this.i2].cclass == 6)
                                                {
                                                   if(this.mc.x > this.puls[this.i2].x - 150)
                                                   {
                                                      if(this.mc.x < this.puls[this.i2].x + 150)
                                                      {
                                                         if(this.mc.y > this.puls[this.i2].y - 150)
                                                         {
                                                            if(this.mc.y < this.puls[this.i2].y + 150)
                                                            {
                                                               if(this.TraceLine(this.ax[this.mc.b_head_start],this.ay[this.mc.b_head_start],this.puls[this.i2].x,this.puls[this.i2].y))
                                                               {
                                                                  if(this.mc.x > this.puls[this.i2].x)
                                                                  {
                                                                     this.mc.act_movex = 1;
                                                                  }
                                                                  else
                                                                  {
                                                                     this.mc.act_movex = -1;
                                                                  }
                                                                  if(Math.random() > 0.9)
                                                                  {
                                                                     this.mc.act_movey = -1;
                                                                  }
                                                                  if(!this.mens[this.puls[this.i2].master].dead)
                                                                  {
                                                                     if(this.mc.hunt == -1)
                                                                     {
                                                                        this.Alerted(this.mc);
                                                                        this.mc.hunt = this.puls[this.i2].master;
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                                if(this.mc.hunt == -1)
                                                {
                                                   if(this.Dist2D(this.ax[this.mc.b_head_start],this.ay[this.mc.b_head_start],this.puls[this.i2].x,this.puls[this.i2].y) < 350)
                                                   {
                                                      if(this.puls[this.i2].x > this.mc.x && this.mc.side == 1 || this.puls[this.i2].x < this.mc.x && this.mc.side == -1)
                                                      {
                                                         if(this.TraceLine(this.ax[this.mc.b_head_start],this.ay[this.mc.b_head_start],this.puls[this.i2].x,this.puls[this.i2].y))
                                                         {
                                                            if(!this.mens[this.puls[this.i2].master].dead)
                                                            {
                                                               this.Alerted(this.mc);
                                                               this.mc.hunt = this.puls[this.i2].master;
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                    ++this.i2;
                                 }
                                 if(!this.ok)
                                 {
                                    if(this.i4 >= 0 && this.i4 <= this.pulsmax)
                                    {
                                       if(this.mc.curwea == -1 && Boolean(this.mc.arm1.lower.psi.visible))
                                       {
                                          if(Math.random() < Math.pow(0.3,this.GSPEED))
                                          {
                                             if(this.Dist2D(this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1],this.puls[this.i4].x,this.puls[this.i4].y) < 150)
                                             {
                                                this.mc.act_fire = true;
                                             }
                                          }
                                       }
                                    }
                                 }
                                 if(!this.mc.inwater)
                                 {
                                    if(this.TraceLineF(this.ax[this.mc.b_toe] + this.mc.act_movex * 50,this.ay[this.mc.b_toe] - 50,this.ax[this.mc.b_toe] + this.mc.act_movex * 100 + this.mc.tox * 10,this.ay[this.mc.b_toe] + 250))
                                    {
                                       if(this.TraceLineF(this.ax[this.mc.b_toe] + this.mc.act_movex * 50,this.ay[this.mc.b_toe] + 25,this.ax[this.mc.b_toe] + this.mc.act_movex * 150,this.ay[this.mc.b_toe] + 25))
                                       {
                                          this.mc.act_movey = -1;
                                       }
                                       else
                                       {
                                          this.mc.act_movex = -this.mc.act_movex;
                                          if(this.mc.act_movey == -1)
                                          {
                                             this.mc.act_movey = 0;
                                          }
                                       }
                                    }
                                    if(this.TraceLineF(this.ax[this.mc.b_toe],this.ay[this.mc.b_toe] - 50,this.ax[this.mc.b_toe] + this.mc.tox * 10,this.ay[this.mc.b_toe] + 250))
                                    {
                                       if(!this.TraceLineF(this.ax[this.mc.b_toe],this.ay[this.mc.b_toe] - 50,this.ax[this.mc.b_toe] + this.mc.tox * 10 + 100,this.ay[this.mc.b_toe] + 250))
                                       {
                                          this.mc.act_movex = 1;
                                       }
                                       if(!this.TraceLineF(this.ax[this.mc.b_toe],this.ay[this.mc.b_toe] - 50,this.ax[this.mc.b_toe] + this.mc.tox * 10 - 100,this.ay[this.mc.b_toe] + 250))
                                       {
                                          this.mc.act_movex = -1;
                                       }
                                    }
                                    if(this.mc.act_movex != 0)
                                    {
                                       if(!this.TracePointNoRagdolls(this.ax[this.mc.b_toe] + this.mc.act_movex * 50,this.ay[this.mc.b_toe] + 5) || this.Math_abs(this.mc.tox) < 4 && Math.random() > 0.9)
                                       {
                                          if(this.TracePointNoRagdolls(this.ax[this.mc.b_toe] + this.mc.act_movex * 50,this.ay[this.mc.b_toe] - 70) || this.TracePointNoRagdolls(this.ax[this.mc.b_toe] + this.mc.act_movex * 50,this.ay[this.mc.b_toe] - 170))
                                          {
                                             this.mc.act_movey = -1;
                                          }
                                          else
                                          {
                                             this.mc.act_movex = 0;
                                          }
                                       }
                                    }
                                 }
                              }
                              if(this.mc.botaction == 1)
                              {
                                 if(!this.mc.inwater)
                                 {
                                    if(this.mc.act_movex != 0)
                                    {
                                       if(this.mc.x == this.mc.walk_x)
                                       {
                                          if(this.mc.walk_bug == undefined)
                                          {
                                             this.mc.walk_bug = 0;
                                          }
                                          this.mc.walk_bug += this.GSPEED;
                                          if(this.mc.walk_bug > 5)
                                          {
                                             this.mc.act_movey = -1;
                                          }
                                       }
                                       else
                                       {
                                          this.mc.walk_bug = 0;
                                          this.mc.walk_x = this.mc.x;
                                       }
                                    }
                                 }
                              }
                              if(this.MP_half_bot)
                              {
                                 if(i == this.MP_myid)
                                 {
                                    if(is_firing)
                                    {
                                       this.mc.tarx = (this.mouse_x - this.game.x) / this.game_scale;
                                       this.mc.tary = (this.mouse_y - this.game.y) / this.game_scale;
                                    }
                                    if(this.key_up)
                                    {
                                       this.mc.act_movey = -1;
                                    }
                                    else if(this.key_down)
                                    {
                                       this.mc.act_movey = 1;
                                    }
                                    if(this.key_left)
                                    {
                                       this.mc.act_movex = -1;
                                    }
                                    else if(this.key_right)
                                    {
                                       this.mc.act_movex = 1;
                                    }
                                    if(this.MP_gamestate == 2)
                                    {
                                       this.mc.act_movex = 0;
                                       this.mc.act_movey = 0;
                                    }
                                    if(this.MP_mode)
                                    {
                                       if(!last_act_fire && Boolean(this.mc.act_fire))
                                       {
                                          if(!this.MP_favor_the_shooter)
                                          {
                                             if(this.FIX_GUN_DESYNCHRONIZATION)
                                             {
                                                if(this.mc.curwea != -1)
                                                {
                                                   if(this.mc.wep_pause <= 0 && Boolean(this.guns[this.mc.curwea].ready))
                                                   {
                                                      this.MP_custom_events += ";ss|" + this.MP_myid + "#" + this.mc.tarx + "#" + this.mc.tary + "#" + this.mc.curwea;
                                                   }
                                                }
                                                else
                                                {
                                                   this.MP_custom_events += ";ss|" + this.MP_myid + "#" + this.mc.tarx + "#" + this.mc.tary + "#" + this.mc.curwea;
                                                }
                                             }
                                             else
                                             {
                                                this.MP_custom_events += ";ss|" + this.MP_myid + "#" + this.mc.tarx + "#" + this.mc.tary + "#" + -9999;
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
                  if(this.MP_mode)
                  {
                     this.VeriftMP(this.mc.b_body,-5);
                     this.VeriftMP(this.mc.b_toe,-5);
                     this.VeriftMP(this.mc.b_leg1,-5);
                     this.VeriftMP(this.mc.b_leg2,-5);
                     this.VeriftMP(this.mc.b_arm1,-5);
                     this.VeriftMP(this.mc.b_arm2,-5);
                     this.VeriftMP(this.mc.b_head_start,-5);
                     this.VeriftMP(this.mc.b_head_end,-5);
                  }
                  if(this.mc.real_hea <= 0)
                  {
                     if(!this.mc.dead)
                     {
                        if(this.mc.hmax > 0 && (!this.MP_mode || !this.spawn))
                        {
                           if(this.mc.voice.death.length > 0)
                           {
                              if(!(this.mc.isplayer && this.MP_mode && (this.MP_myid != i || this.MP_spectator)))
                              {
                                 this.Say(this.mc,this.mc.voice.death[Math.floor(Math.random() * this.mc.voice.death.length)],true);
                              }
                           }
                        }
                        if(i == this.MP_myid)
                        {
                           if(this.CASUAL_MODE)
                           {
                              this.ok = true;
                              betterdist = 0;
                              betteri = -1;
                              this.i4 = 0;
                              while(this.i4 < this.playerstotal && this.ok)
                              {
                                 if(this.mens[this.i4].io)
                                 {
                                    if(this.mens[this.i4].team == this.mc.team)
                                    {
                                       if(this.mens[this.i4].hea > 0)
                                       {
                                          if(!this.mens[this.i4].dying)
                                          {
                                             newdis = this.Dist2D(this.mens[this.i4].x,this.mens[this.i4].y,this.mens[this.MP_myid].x,this.mens[this.MP_myid].y);
                                             if(betteri == -1 || betterdist > newdis)
                                             {
                                                betteri = this.i4;
                                                betterdist = newdis;
                                             }
                                          }
                                       }
                                    }
                                 }
                                 ++this.i4;
                              }
                              if(betteri != -1)
                              {
                                 this.ok = false;
                                 this.MP_myid = betteri;
                                 this.GSPEED = 0.01;
                                 this.new_active.visible = true;
                                 this.new_active.gotoAndPlay(1);
                                 this.PlaySound_full(this.s_team_switch);
                                 this.mens[betteri].isplayer = true;
                                 this.mens[i].isplayer = false;
                                 this.UpdateWeps();
                              }
                              if(this.ok)
                              {
                                 this.darkness.visible = true;
                                 if(!this.MP_spectator)
                                 {
                                    this.xx = Math.random() * Math.PI * 2;
                                    if(this.MP_mode)
                                    {
                                       this.xx *= 0.1;
                                    }
                                    this.game.x += Math.sin(this.xx) * 200;
                                    this.game.y += Math.cos(this.xx) * 200;
                                 }
                                 if(!this.MP_mode)
                                 {
                                    this.LEVEL_END_FORCE = "failed";
                                    this.LAST_ERROR = "YOUR TEAM IS DEAD.";
                                    if(HINTS)
                                    {
                                       this.SetHint("Your team is dead.");
                                    }
                                 }
                              }
                           }
                           else
                           {
                              this.darkness.visible = true;
                              if(!this.MP_spectator)
                              {
                                 this.xx = Math.random() * Math.PI * 2;
                                 if(this.MP_mode)
                                 {
                                    this.xx *= 0.1;
                                 }
                                 this.game.x += Math.sin(this.xx) * 200;
                                 this.game.y += Math.cos(this.xx) * 200;
                              }
                              if(!this.MP_mode)
                              {
                                 this.LEVEL_END_FORCE = "failed";
                                 if(this.mens[this.MP_myid].lastshotby == this.MP_myid || this.mens[this.MP_myid].lastshotby == -1)
                                 {
                                    this.LAST_ERROR = "BAD LUCK, YOU DIED.";
                                    if(HINTS)
                                    {
                                       this.SetHint("Try not to kill yourself.");
                                    }
                                 }
                                 else
                                 {
                                    this.LAST_ERROR = "YOU ARE DEAD.";
                                    if(HINTS)
                                    {
                                       this.SetHint("You are dead.");
                                    }
                                 }
                              }
                           }
                        }
                        if(this.mc.hp_legs > 100)
                        {
                           this.mc.hp_legs = 100;
                        }
                        if(this.mc.hp_arms > 100)
                        {
                           this.mc.hp_arms = 100;
                        }
                        if(this.mc.hp_body > 100)
                        {
                           this.mc.hp_body = 100;
                        }
                        if(this.mc.hp_head > 100)
                        {
                           this.mc.hp_head = 100;
                        }
                        if(this.MP_mode && this.MP_myid == i)
                        {
                           if(!this.spawn)
                           {
                              if(this.MP_enc_deaths >= 0)
                              {
                                 ++this.MP_enc_deaths;
                              }
                              this.MP_gbd = this.mc.curwea;
                              try
                              {
                                 if(getTimer() - this.mc.whenlastshot > 7000)
                                 {
                                    this.mc.lastshotby = -1;
                                 }
                              }
                              catch(error:Error)
                              {
                                 LAST_ERROR = "Oh! Something terrible happend :(\nData sent incorrectly (1):\n" + error.errorID + " :: " + error.message;
                                 DropGameTimer();
                                 gotoAndStop("menu");
                              }
                              try
                              {
                                 this.MP_kills_in_a_row = 0;
                                 this.MP_custom_events += ";frag|" + i + "#" + this.mc.lastshotby + "#" + this.mc.lastshotbygun + "#" + this.mc.lastshot + "#" + this.r2(Math.random());
                              }
                              catch(error:Error)
                              {
                                 LAST_ERROR = "Oh! Something terrible happend :(\nData sent incorrectly (2):\n" + error.errorID + " :: " + error.message;
                                 DropGameTimer();
                                 gotoAndStop("menu");
                              }
                              if(this.MP_real_deaths == this.MP_enc_deaths - 1 && !this.MP_favor_the_shooter)
                              {
                                 this.MP_custom_events += ";dd|" + i + "#" + this.r2(this.ax[this.mc.b_leg1]) + "#" + this.r2(this.ay[this.mc.b_leg1]) + "#" + this.r2(this.atox[this.mc.b_leg1]) + "#" + this.r2(this.atoy[this.mc.b_leg1]) + "#" + this.r2(this.ax[this.mc.b_leg2]) + "#" + this.r2(this.ay[this.mc.b_leg2]) + "#" + this.r2(this.atox[this.mc.b_leg2]) + "#" + this.r2(this.atoy[this.mc.b_leg2]) + "#" + this.r2(this.ax[this.mc.b_arm1]) + "#" + this.r2(this.ay[this.mc.b_arm1]) + "#" + this.r2(this.atox[this.mc.b_arm1]) + "#" + this.r2(this.atoy[this.mc.b_arm1]) + "#" + this.r2(this.ax[this.mc.b_arm2]) + "#" + this.r2(this.ay[this.mc.b_arm2]) + "#" + this.r2(this.atox[this.mc.b_arm2]) + "#" + this.r2(this.atoy[this.mc.b_arm2]) + "#" + this.r2(this.ax[this.mc.b_body]) + "#" + this.r2(this.ay[this.mc.b_body]) + "#" + this.r2(this.atox[this.mc.b_body]) + "#" + this.r2(this.atoy[this.mc.b_body]) + "#" + this.r2(this.ax[this.mc.b_toe]) + "#" + this.r2(this.ay[this.mc.b_toe]) + "#" + this.r2(this.atox[this.mc.b_toe]) + "#" + this
                                 .r2(this.atoy[this.mc.b_toe]) + "#" + this.r2(this.ax[this.mc.b_head_start]) + "#" + this.r2(this.ay[this.mc.b_head_start]) + "#" + this.r2(this.atox[this.mc.b_head_start]) + "#" + this.r2(this.atoy[this.mc.b_head_start]) + "#" + this.r2(this.ax[this.mc.b_head_end]) + "#" + this.r2(this.ay[this.mc.b_head_end]) + "#" + this.r2(this.atox[this.mc.b_head_end]) + "#" + this.r2(this.atoy[this.mc.b_head_end]) + "#" + this.r2(this.ax[this.mc.b_brk1]) + "#" + this.r2(this.ay[this.mc.b_brk1]) + "#" + this.r2(this.atox[this.mc.b_brk1]) + "#" + this.r2(this.atoy[this.mc.b_brk1]) + "#" + this.r2(this.ax[this.mc.b_brk2]) + "#" + this.r2(this.ay[this.mc.b_brk2]) + "#" + this.r2(this.atox[this.mc.b_brk2]) + "#" + this.r2(this.atoy[this.mc.b_brk2]);
                              }
                              else
                              {
                                 this.MP_enc_deaths = -1;
                              }
                              this.darkness.alpha = 0;
                              this.GCTime();
                           }
                           else
                           {
                              this.mc.alpha = 0;
                              this.spawn = false;
                           }
                        }
                        this.mc.dead = true;
                        if(this.mc.isGhost)
                        {
                           this.mc.alpha = 1;
                        }
                        if(this.mc.hmax > 0)
                        {
                           if(this.mc.team != this.mens[this.MP_myid].team)
                           {
                              ++this.FUN_ELEMINATED;
                              if(this.mc.lastshotby == this.MP_myid)
                              {
                                 this.incBadge(0);
                                 if(this.PRO_BOTS)
                                 {
                                    this.incBadge(19);
                                 }
                                 if(this.mc.lastshotbygun == "swords")
                                 {
                                    this.incBadge(1);
                                    if(this.mc.char == 12)
                                    {
                                       this.incBadge(18);
                                    }
                                 }
                                 if(this.mens[this.MP_myid].dead)
                                 {
                                    this.incBadge(3);
                                 }
                                 else if(this.mens[this.MP_myid].dying)
                                 {
                                    this.incBadge(4);
                                 }
                                 if(!this.mens[this.MP_myid].dead)
                                 {
                                    if(this.mens[this.MP_myid].stability <= 0)
                                    {
                                       this.incBadge(5);
                                    }
                                 }
                              }
                           }
                        }
                        this.mc.dying = true;
                        this.mc.stability = -2;
                        this.mc.arm1.lower.psi.visible = false;
                        this.mc.arm2.lower.psi.visible = false;
                        if(this.mc.ondeath != -1)
                        {
                           if(!this.mc.isplayer || i == this.MP_myid || !this.MP_mode)
                           {
                              this.TRIGGER_PLAYER_INITIATOR = i;
                              this.TRIGGER_PLAYER_KILLER = this.mc.lastshotby;
                              this.triggers[this.mc.ondeath].forcehyperjump = false;
                              this.EXEC_TRIGGER(this.mc.ondeath);
                           }
                        }
                     }
                  }
                  if(this.MP_mode)
                  {
                     this.VeriftMP(this.mc.b_body,-4);
                     this.VeriftMP(this.mc.b_toe,-4);
                     this.VeriftMP(this.mc.b_leg1,-4);
                     this.VeriftMP(this.mc.b_leg2,-4);
                     this.VeriftMP(this.mc.b_arm1,-4);
                     this.VeriftMP(this.mc.b_arm2,-4);
                     this.VeriftMP(this.mc.b_head_start,-4);
                     this.VeriftMP(this.mc.b_head_end,-4);
                  }
                  if((this.mc.real_hea > 0 || this.mc.last_shoot_chance) && this.mc.stability > -1)
                  {
                     if(i == this.MP_myid && this.key_grab || Boolean(this.mc.brk_arms))
                     {
                        if(this.mc.incar == -1)
                        {
                           if(this.mc.curwea != -1)
                           {
                              if(this.mc.can_drop_guns)
                              {
                                 this.mc2 = this.guns[this.mc.curwea];
                                 this.mc2.picken_by = -1;
                                 if(i == this.MP_myid && this.key_grab)
                                 {
                                    this.IgnoreGunPickTemp(this.mc2);
                                 }
                                 if(!this.mc.brk_arms)
                                 {
                                    this.atox[this.mc2.b_p1] += Math.sin(this.mc.ang) * 7;
                                    this.atoy[this.mc2.b_p1] += Math.cos(this.mc.ang) * 7 - 2;
                                    this.atox[this.mc2.b_p2] += Math.sin(this.mc.ang) * 1;
                                    this.atoy[this.mc2.b_p2] += Math.cos(this.mc.ang) * 1 + 2;
                                    this.ax[this.mc2.b_p1] += this.mc.side * 20;
                                    this.ax[this.mc2.b_p2] += this.mc.side * 20;
                                 }
                                 this.WakeUpAtom(this.mc2.b_p1);
                                 this.WakeUpAtom(this.mc2.b_p2);
                                 this.mc.curwea = -1;
                                 this.ChangedGun(i);
                              }
                           }
                        }
                     }
                     if(!this.mc.brk_arms)
                     {
                        if(this.mc.sword_spam_strength < 1)
                        {
                           if(this.MP_mode)
                           {
                              this.mc.sword_spam_strength = Math.min(1,this.mc.sword_spam_strength + this.thispulspeed / 3);
                           }
                           else
                           {
                              this.mc.sword_spam_strength = 1;
                           }
                        }
                        if(this.mc.mp_must_shoot_once != undefined && this.mc.mp_must_shoot_once > getTimer() - 500)
                        {
                           if(this.mc.change_gun != -9999)
                           {
                              this.mc.curwea = this.mc.change_gun;
                              this.RedrawPsi(i);
                           }
                           this.mc.act_fire = true;
                        }
                        if(Boolean(this.mc.act_fire) && this.mc.wep_pause <= 0)
                        {
                           if(this.mc.curwea != -1)
                           {
                              this.mc2 = this.guns[this.mc.curwea];
                              if(this.mc2.ready)
                              {
                                 if(this.mc2.CanShoot == undefined || Boolean(this.mc2.CanShoot()))
                                 {
                                    if(this.mc2.forcars && this.mc.incar != -1 || !this.mc2.forcars && this.mc.incar == -1)
                                    {
                                       this.PAlert(this.ax[this.mc2.b_p2],this.ay[this.mc2.b_p2]);
                                       if(this.mc2.onshot != -1)
                                       {
                                          this.TRIGGER_PLAYER_INITIATOR = i;
                                          if(i == this.MP_myid || !this.mc.isplayer)
                                          {
                                             if(this.EXEC_TRIGGER(this.mc2.onshot))
                                             {
                                                if(i == this.MP_myid && this.MP_mode)
                                                {
                                                   this.MP_custom_events += ";exec|" + this.mc2.onshot + "#" + i + "#" + -1;
                                                }
                                             }
                                          }
                                       }
                                       this.u = (Math.random() * 2 - 1) * this.mc2.av * this.mc2.av * 2;
                                       this.mc2.av += this.mc2.stat_averange_add;
                                       if(this.mc.stability < 0.5)
                                       {
                                          this.xx = this.u - Math.PI / 2 - this.mc2.rotation / 180 * Math.PI;
                                       }
                                       else
                                       {
                                          this.xx = this.u + this.mc.ang + Math.PI;
                                       }
                                       if(i != this.MP_myid && !this.MP_favor_the_shooter)
                                       {
                                          if(this.mc.stability < 0.2)
                                          {
                                             this.xx = this.u - Math.PI / 2 - this.mc2.rotation / 180 * Math.PI;
                                          }
                                          else
                                          {
                                             this.xx = this.u + this.mc.ang + Math.PI;
                                          }
                                       }
                                       init_shot_rot = this.xx;
                                       this.mc.mp_must_shoot_once = undefined;
                                       this.i3 = 0;
                                       while(this.i3 < this.mc2.stat_count)
                                       {
                                          if(this.puls[this.pulscur] != null)
                                          {
                                             if(this.game.contains(this.puls[this.pulscur]))
                                             {
                                                this.puls[this.pulscur].visible = false;
                                                this.game.removeChild(this.puls[this.pulscur]);
                                                this.puls[this.pulscur] = null;
                                             }
                                             else if(this.graphics_3d_front.contains(this.puls[this.pulscur]))
                                             {
                                                this.puls[this.pulscur].visible = false;
                                                this.graphics_3d_front.removeChild(this.puls[this.pulscur]);
                                                this.puls[this.pulscur] = null;
                                             }
                                          }
                                          if(this.mc2.stat_class == 0 || this.mc2.stat_class == 5 || this.mc2.stat_class == 2 || this.mc2.stat_bullets == 9)
                                          {
                                             this.puls[this.pulscur] = this.graphics_3d_front.addChildAt(new lazer(),this.graphics_3d_front.numChildren);
                                          }
                                          else
                                          {
                                             this.puls[this.pulscur] = this.game.addChildAt(new lazer(),this.game.numChildren);
                                          }
                                          this.NewBullet(this.puls[this.pulscur]);
                                          if(this.MP_mode && this.mc.isplayer && this.mc2.stat_class != 4)
                                          {
                                             if(i == this.MP_myid)
                                             {
                                                this.puls[this.pulscur].lag = this.MP_ping2 / this.c_sim_rt2;
                                             }
                                             else
                                             {
                                                this.puls[this.pulscur].lag = -this.MP_ping2 / this.c_sim_rt2;
                                             }
                                          }
                                          else
                                          {
                                             this.puls[this.pulscur].lag = 0;
                                          }
                                          if(this.MP_favor_the_shooter)
                                          {
                                             this.puls[this.pulscur].lag = 0;
                                          }
                                          if(i == this.MP_myid)
                                          {
                                             ++this.FUN_SPENT_BULLETS;
                                          }
                                          this.NoMouse(this.puls[this.pulscur]);
                                          this.xx = init_shot_rot;
                                          if(this.MP_mode && i != this.MP_myid && Boolean(this.mc.isplayer))
                                          {
                                             if(this.MP_favor_the_shooter)
                                             {
                                                if(Boolean(this.mc.mp_shot_correct) && this.mc.mp_shot_correct.time > getTimer() - 1000)
                                                {
                                                   if(this.TraceLineF_nopushers(this.mc.mp_shot_correct.x,this.mc.mp_shot_correct.y,this.ax[this.mc2.b_p2],this.ay[this.mc2.b_p2]) || this.TraceLineF_nopushers(this.mc.mp_shot_correct.x,this.mc.mp_shot_correct.y,this.ax[this.mc.b_body],this.ay[this.mc.b_body]) || this.TraceLineF_nopushers(this.ax[this.mc.b_body],this.mc.mp_shot_correct.y,this.ax[this.mc.b_body],this.ay[this.mc.b_body]) && this.TraceLineF_nopushers(this.ax[this.mc.b_body],this.mc.mp_shot_correct.y,this.mc.mp_shot_correct.x,this.mc.mp_shot_correct.y) || this.mc.hea <= 0)
                                                   {
                                                      this.xx = this.mc.mp_shot_correct.xx;
                                                      ping_limited = Math.min(this.mc.ping + this.MP_ping2,400) + 32;
                                                      correct_not_fine = true;
                                                      step = 0;
                                                      while(step <= ping_limited && correct_not_fine)
                                                      {
                                                         side = -1;
                                                         while(side <= 1 && correct_not_fine)
                                                         {
                                                            if(step > 0 || side == -1)
                                                            {
                                                               bullet_dist = this.Dist2D(this.mc.mp_shot_correct.x,this.mc.mp_shot_correct.y,this.ax[this.mc2.b_p2] + this.atox[this.mc.b_body] * step / 1000 * 30 * side,this.ay[this.mc2.b_p2] + this.atoy[this.mc.b_body] * step / 1000 * 30 * side);
                                                               if(bullet_dist < Math.max(60,this.MP_ping2 + 60) + (this.mc.hea <= 0 ? 400 : 200))
                                                               {
                                                                  if(step == 0 || this.mc.hea <= 0 || this.TraceLineF_nopushers(this.ax[this.mc2.b_p2],this.ay[this.mc2.b_p2],this.ax[this.mc2.b_p2] + this.atox[this.mc.b_body] * step / 1000 * 30 * side,this.ay[this.mc2.b_p2] + this.atoy[this.mc.b_body] * step / 1000 * 30 * side))
                                                                  {
                                                                     this.puls[this.pulscur].x = this.mc.mp_shot_correct.x;
                                                                     this.puls[this.pulscur].y = this.mc.mp_shot_correct.y;
                                                                     correct_not_fine = false;
                                                                     break;
                                                                  }
                                                               }
                                                            }
                                                            side += 2;
                                                         }
                                                         step += 16;
                                                      }
                                                      if(correct_not_fine)
                                                      {
                                                         this.puls[this.pulscur].x = (this.mc.mp_shot_correct.x - this.ax[this.mc2.b_p2]) / bullet_dist * 60 + this.ax[this.mc2.b_p2];
                                                         this.puls[this.pulscur].y = (this.mc.mp_shot_correct.y - this.ay[this.mc2.b_p2]) / bullet_dist * 60 + this.ay[this.mc2.b_p2];
                                                      }
                                                   }
                                                   if(this.mc.real_hea > 0 && this.mc.hea > 0)
                                                   {
                                                      if(this.Dist2D(Math.sin(this.xx),Math.cos(this.xx),Math.sin(init_shot_rot),Math.cos(init_shot_rot)) > Math.max(0.7,this.MP_ping2 / 50 * 0.7))
                                                      {
                                                         this.xx = init_shot_rot;
                                                      }
                                                   }
                                                }
                                                else
                                                {
                                                   this.puls[this.pulscur].x = this.ax[this.mc2.b_p2];
                                                   this.puls[this.pulscur].y = this.ay[this.mc2.b_p2];
                                                }
                                             }
                                             else
                                             {
                                                this.puls[this.pulscur].x = this.ax[this.mc2.b_p2] - this.mc.mp_offset_x;
                                                this.puls[this.pulscur].y = this.ay[this.mc2.b_p2] - this.mc.mp_offset_y;
                                             }
                                          }
                                          else
                                          {
                                             this.puls[this.pulscur].x = this.ax[this.mc2.b_p2];
                                             this.puls[this.pulscur].y = this.ay[this.mc2.b_p2];
                                          }
                                          this.xx += this.mc2.stat_averange / this.mc2.stat_count * this.i3 + Math.random() * this.mc2.stat_averange / this.mc2.stat_count - this.mc2.stat_averange / 2;
                                          this.puls[this.pulscur].attached = -1;
                                          this.puls[this.pulscur].alpha = 0;
                                          this.puls[this.pulscur].thisis = this.mc2.model;
                                          this.puls[this.pulscur].cclass = this.mc2.stat_class;
                                          this.puls[this.pulscur].nx = this.ax[this.mc.b_body];
                                          this.puls[this.pulscur].ny = this.ay[this.mc.b_body];
                                          this.puls[this.pulscur].power = this.mc2.stat_power;
                                          this.puls[this.pulscur].maxpower = this.mc2.stat_power;
                                          this.puls[this.pulscur].knockback_multiplier = this.mc2.knockback_multiplier;
                                          this.puls[this.pulscur].inwater = this.ainwater[this.mc.b_arm1] && this.wa_friction[this.ainwater_shape[this.mc.b_arm1]];
                                          if(Math.abs(this.puls[this.pulscur].x - this.puls[this.pulscur].nx) > 350 || Math.abs(this.puls[this.pulscur].y - this.puls[this.pulscur].ny) > 350)
                                          {
                                             this.puls[this.pulscur].x = this.puls[this.pulscur].nx;
                                             this.puls[this.pulscur].y = this.puls[this.pulscur].ny;
                                          }
                                          if(this.MP_favor_the_shooter && i == this.MP_myid)
                                          {
                                             if(getTimer() > this.MP_last_clear_shot_time + 150)
                                             {
                                                this.MP_last_clear_shot_time = getTimer();
                                                if(this.FIX_GUN_DESYNCHRONIZATION)
                                                {
                                                   this.MP_custom_events += ";acs|" + [this.MP_myid,this.puls[this.pulscur].x,this.puls[this.pulscur].y,init_shot_rot,this.mens[this.MP_myid].curwea].join("#");
                                                }
                                                else
                                                {
                                                   this.MP_custom_events += ";acs|" + [this.MP_myid,this.puls[this.pulscur].x,this.puls[this.pulscur].y,init_shot_rot,-9999].join("#");
                                                }
                                             }
                                          }
                                          this.puls[this.pulscur].lastin = i;
                                          this.puls[this.pulscur].lastinbox = this.boxestotal;
                                          this.puls[this.pulscur].master = i;
                                          this.puls[this.pulscur].gotoAndStop(this.mc2.stat_bullets);
                                          this.puls[this.pulscur].rotation = 90 - this.xx / Math.PI * 180;
                                          this.yy = Math.cos(this.xx);
                                          this.xx = Math.sin(this.xx);
                                          this.x4 = this.mc2.stat_power;
                                          if(this.x4 > 3 / this.mc2.stat_count)
                                          {
                                             this.x4 = 3 / this.mc2.stat_count;
                                          }
                                          this.x4 *= this.mc2.recoil_multiplier;
                                          this.puls[this.pulscur].scaleX = this.puls[this.pulscur].scaleY = this.mc2.projectile_scale;
                                          this.atox[this.mc.b_arm1] += this.xx * 5 * this.x4;
                                          this.atoy[this.mc.b_arm1] += this.yy * 5 * this.x4 - 3 * this.x4;
                                          this.atox[this.mc.b_arm2] += this.xx * 5 * this.x4;
                                          this.atoy[this.mc.b_arm2] += this.yy * 5 * this.x4;
                                          this.atox[this.mc.b_body] += this.xx * 2 * this.x4;
                                          this.atoy[this.mc.b_body] += this.yy * 2 * this.x4;
                                          this.atox[this.mc.b_toe] += this.xx * 1 * this.x4;
                                          this.atoy[this.mc.b_toe] += this.yy * 1 * this.x4;
                                          this.atox[this.mc.b_head_start] += this.xx * 1 * this.x4;
                                          this.atoy[this.mc.b_head_start] += this.yy * 1 * this.x4;
                                          this.atox[this.mc.b_head_end] += this.xx * 1 * this.x4;
                                          this.atoy[this.mc.b_head_end] += this.yy * 1 * this.x4;
                                          this.puls[this.pulscur].life = 0;
                                          this.puls[this.pulscur].maxbulletlife = this.maxbulletlife;
                                          if(this.mc2.stat_class == 0 || this.mc2.stat_class == 2)
                                          {
                                             this.puls[this.pulscur].spx = -this.xx * this.pspeed;
                                             this.puls[this.pulscur].spy = -this.yy * this.pspeed;
                                             this.puls[this.pulscur].x += this.xx * 25;
                                             this.puls[this.pulscur].y += this.yy * 25;
                                          }
                                          else if(this.mc2.stat_class == 5)
                                          {
                                             this.puls[this.pulscur].spx = -this.xx * 30 * this.plasma_speed_mult;
                                             this.puls[this.pulscur].spy = -this.yy * 30 * this.plasma_speed_mult;
                                             this.puls[this.pulscur].maxbulletlife = this.maxbulletlife * 1.5;
                                             this.puls[this.pulscur].rot_glow.visible = true;
                                          }
                                          else if(this.mc2.stat_class == 1)
                                          {
                                             this.puls[this.pulscur].spx = -this.xx * 25 * this.rocket_speed_mult;
                                             this.puls[this.pulscur].spy = -this.yy * 25 * this.rocket_speed_mult;
                                             this.puls[this.pulscur].maxbulletlife = this.maxbulletlife * 1.4;
                                             if(this.mc2.stat_bullets == 9)
                                             {
                                                this.puls[this.pulscur].spx = -this.xx * 35 * this.rocket_speed_mult;
                                                this.puls[this.pulscur].spy = -this.yy * 35 * this.rocket_speed_mult;
                                                this.puls[this.pulscur].maxbulletlife = 180;
                                             }
                                          }
                                          else if(this.mc2.stat_class == 4 || this.mc2.stat_class == 6)
                                          {
                                             if(this.mc2.stat_bullets == 14)
                                             {
                                                this.puls[this.pulscur].maxbulletlife = 300 + Math.random() * 60;
                                                this.puls[this.pulscur].spx = -this.xx * 19 * (Math.random() * 0.3 + 0.7) * this.grenade_speed_mult;
                                                this.puls[this.pulscur].spy = -this.yy * 19 * (Math.random() * 0.3 + 0.7) * this.grenade_speed_mult - 2;
                                                this.puls[this.pulscur].dead = false;
                                                this.puls[this.pulscur].attached = this.CreatePoint(this.puls[this.pulscur].x,this.puls[this.pulscur].y,this.puls[this.pulscur].spx,this.puls[this.pulscur].spy,6 * this.mc2.projectile_scale,true,10,-300 - this.pulscur);
                                                this.aactive[this.puls[this.pulscur].attached] = 1000;
                                                this.aactive[-300 - this.pulscur] = true;
                                             }
                                             else
                                             {
                                                this.puls[this.pulscur].spx = -this.xx * 19 * this.grenade_speed_mult;
                                                this.puls[this.pulscur].spy = -this.yy * 19 * this.grenade_speed_mult;
                                                this.puls[this.pulscur].maxbulletlife = 90;
                                                if(this.mc2.stat_bullets == 19)
                                                {
                                                   this.puls[this.pulscur].nadekind = 3;
                                                   this.puls[this.pulscur].gotoAndStop(19);
                                                   this.puls[this.pulscur].maxbulletlife = 60 + 30 * 60;
                                                   this.puls[this.pulscur].hasexploded = false;
                                                   this.puls[this.pulscur].radius = 0;
                                                   this.puls[this.pulscur].hea = 10;
                                                   this.puls[this.pulscur].heapo = 90;
                                                   this.puls[this.pulscur].losthea = 0;
                                                   this.puls[this.pulscur].spx = this.mc.side * 0.5;
                                                   this.puls[this.pulscur].spy = 4;
                                                }
                                                if(this.mc2.stat_bullets == 45)
                                                {
                                                   this.puls[this.pulscur].maxbulletlife = 30 * 15 + Math.random() * 15;
                                                }
                                                this.puls[this.pulscur].attached = this.CreatePoint(this.puls[this.pulscur].x,this.puls[this.pulscur].y,this.puls[this.pulscur].spx,this.puls[this.pulscur].spy,6 * this.mc2.projectile_scale,true,8,-300 - this.pulscur);
                                                this.aactive[this.puls[this.pulscur].attached] = 1000;
                                                this.aactive[-300 - this.pulscur] = true;
                                             }
                                             if(this.MP_favor_the_shooter && Boolean(this.mc.isplayer))
                                             {
                                                if(this.mc.stability < 0.5)
                                                {
                                                   this.atox[this.puls[this.pulscur].attached] += this.atox[this.mc.b_body];
                                                   this.atoy[this.puls[this.pulscur].attached] += this.atoy[this.mc.b_body];
                                                }
                                                else
                                                {
                                                   this.atox[this.puls[this.pulscur].attached] += this.mc.tox;
                                                   this.atoy[this.puls[this.pulscur].attached] += this.mc.toy;
                                                }
                                             }
                                             this.SetAtomOriginalPosition(this.puls[this.pulscur].attached,this.ax[this.mc.b_body],this.ay[this.mc.b_body]);
                                          }
                                          if(this.mc2.custom_life != -1)
                                          {
                                             this.puls[this.pulscur].maxbulletlife *= this.mc2.custom_life;
                                          }
                                          if(this.mc2.custom_speed != -1)
                                          {
                                             this.puls[this.pulscur].spx *= this.mc2.custom_speed;
                                             this.puls[this.pulscur].spy *= this.mc2.custom_speed;
                                          }
                                          this.nextpul();
                                          ++this.i3;
                                       }
                                       if(this.mc.stability > 0 && (!this.mc.stand || this.mc2.stat_power * this.mc2.stat_count > 5 / this.mc.mobility))
                                       {
                                          this.xx *= this.mc2.recoil_multiplier;
                                          this.yy *= this.mc2.recoil_multiplier;
                                          if(this.mc.sit > 0.5 && Boolean(this.mc.stand))
                                          {
                                             this.mc.tox += this.xx * 0.2 * this.mc2.stat_power * this.mc2.stat_count * this.mc.mobility;
                                             this.mc.toy += this.yy * 0.2 * this.mc2.stat_power * this.mc2.stat_count * this.mc.mobility;
                                          }
                                          else
                                          {
                                             this.mc.tox += this.xx * 0.5 * this.mc2.stat_power * this.mc2.stat_count * this.mc.mobility;
                                             this.mc.toy += this.yy * 0.5 * this.mc2.stat_power * this.mc2.stat_count * this.mc.mobility;
                                          }
                                          if(this.mc2.recoil_multiplier > 0)
                                          {
                                             if(this.mc.stand)
                                             {
                                                if(this.mc.sit > 0.5)
                                                {
                                                   this.mc.stability = Math.max(0.5,this.mc.stability - this.mc2.stat_power * this.mc2.stat_count * this.mc.mobility * 0.1);
                                                }
                                                else
                                                {
                                                   this.mc.stability = Math.max(0.2,this.mc.stability - this.mc2.stat_power * this.mc2.stat_count * this.mc.mobility * 0.1);
                                                }
                                             }
                                             else
                                             {
                                                this.mc.stability -= this.mc2.stat_power * this.mc2.stat_count * this.mc.mobility * 0.1;
                                                if(this.mc.stability <= 0)
                                                {
                                                   this.mc.stability = -1;
                                                }
                                             }
                                          }
                                       }
                                       if(this.mc2.stat_class == 7)
                                       {
                                          this.i3 = 0;
                                          while(this.i3 < this.playerstotal)
                                          {
                                             if(this.mens[this.i3].io)
                                             {
                                                if(this.mens[this.i3].can_be_hit)
                                                {
                                                   if(this.ax[this.mc.b_arm1] > this.ax[this.mens[this.i3].b_body] - 60)
                                                   {
                                                      if(this.ax[this.mc.b_arm1] < this.ax[this.mens[this.i3].b_body] + 60)
                                                      {
                                                         if(this.ay[this.mc.b_arm1] > this.ay[this.mens[this.i3].b_body] - 40)
                                                         {
                                                            if(this.ay[this.mc.b_arm1] < this.ay[this.mens[this.i3].b_body] + 80)
                                                            {
                                                               if(this.MP_mode && this.MP_myid == this.mc.idd || this.MP_mode && !this.MP_favor_the_shooter || !this.MP_mode || !this.mc.isplayer)
                                                               {
                                                                  this.HealGunApplied(this.i3,this.mc,this.mc2.stat_power,false,this.mc2.model);
                                                               }
                                                               if(this.MP_mode && this.MP_favor_the_shooter && this.MP_myid == this.mc.idd)
                                                               {
                                                                  this.MP_custom_events += ";heal|" + [this.MP_myid,this.i3,this.mc2.stat_power,0,this.mc2.model].join("#");
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                             ++this.i3;
                                          }
                                       }
                                       this.mc2.ready = false;
                                       this.mc2.floatframe = 2;
                                       this.mc2.gotoAndStop(2);
                                       if(this.mc2.sou != null)
                                       {
                                          this.PlaySound(this.mc2.sou,this.mc2.x,this.mc2.y);
                                       }
                                    }
                                 }
                              }
                           }
                           if(this.mc.curwea == -1 && this.mc.incar == -1)
                           {
                              if(this.mc.arm1.lower.psi.visible)
                              {
                                 this.xx = this.mc.ang + Math.PI;
                                 this.yy = Math.cos(this.xx);
                                 this.xx = Math.sin(this.xx);
                                 if(!this.mc.stand && this.atoy[this.mc.b_body] < 0 && !this.mc.dying && this.mc.boost > 0)
                                 {
                                    this.xx2 = 0.33;
                                    this.xx2 *= this.mc.boost;
                                    this.mc.boost = Math.max(0,this.mc.boost - 0.45 * this.thispulspeed * this.xx2);
                                    this.xx2 *= 2;
                                    this.xx2 *= Math.min(1,this.mc.mobility);
                                    this.xx *= this.BOOST_MULT;
                                    this.mc.tox -= this.xx * this.xx2 * this.thispulspeed;
                                    this.mc.toy -= this.yy * this.xx2 * this.thispulspeed;
                                    if(this.GET_LITE_PHYS())
                                    {
                                       this.xx2 *= this.BOOST_LOW_PHYSICS;
                                    }
                                    else
                                    {
                                       this.xx2 *= this.BOOST_HIGH_PHYSICS;
                                    }
                                    this.atox[this.mc.b_body] -= this.xx * this.xx2 * this.thispulspeed * 2;
                                    this.atoy[this.mc.b_body] -= this.yy * this.xx2 * this.thispulspeed * 2;
                                    this.atox[this.mc.b_head_start] -= this.xx * this.xx2 * this.thispulspeed * 2;
                                    this.atoy[this.mc.b_head_start] -= this.yy * this.xx2 * this.thispulspeed * 2;
                                    this.atox[this.mc.b_head_end] -= this.xx * this.xx2 * this.thispulspeed * 2;
                                    this.atoy[this.mc.b_head_end] -= this.yy * this.xx2 * this.thispulspeed * 2;
                                    this.atox[this.mc.b_arm1] -= this.xx * this.xx2 * this.thispulspeed;
                                    this.atoy[this.mc.b_arm1] -= this.yy * this.xx2 * this.thispulspeed;
                                    this.atox[this.mc.b_arm2] -= this.xx * this.xx2 * this.thispulspeed;
                                    this.atoy[this.mc.b_arm2] -= this.yy * this.xx2 * this.thispulspeed;
                                 }
                                 this.mc.melee_ani += 0.4 * this.thispulspeed;
                                 this.mc.melee_tim += 0.4 * this.thispulspeed;
                                 if(this.mc.melee_ani > Math.PI * 2)
                                 {
                                    this.mc.melee_ani -= Math.PI * 2;
                                 }
                                 if(this.mc.melee_tim > Math.PI)
                                 {
                                    if(this.mc.sword_spam_strength >= 1)
                                    {
                                       this.mc.melee_tim = 0;
                                       if(this.last_psi == 1)
                                       {
                                          this.PlaySound(this.s_psi1,this.mc.x,this.mc.y - 50);
                                          if(Math.random() > 0.5)
                                          {
                                             this.last_psi = 2;
                                          }
                                          else
                                          {
                                             this.last_psi = 3;
                                          }
                                       }
                                       else if(this.last_psi == 2)
                                       {
                                          this.PlaySound(this.s_psi2,this.mc.x,this.mc.y - 50);
                                          if(Math.random() > 0.5)
                                          {
                                             this.last_psi = 1;
                                          }
                                          else
                                          {
                                             this.last_psi = 3;
                                          }
                                       }
                                       else
                                       {
                                          this.PlaySound(this.s_psi3,this.mc.x,this.mc.y - 50);
                                          if(Math.random() > 0.5)
                                          {
                                             this.last_psi = 1;
                                          }
                                          else
                                          {
                                             this.last_psi = 2;
                                          }
                                       }
                                       if(this.puls[this.pulscur] != null)
                                       {
                                          if(this.game.contains(this.puls[this.pulscur]))
                                          {
                                             this.game.removeChild(this.puls[this.pulscur]);
                                             this.puls[this.pulscur] = null;
                                          }
                                       }
                                       this.puls[this.pulscur] = this.game.addChildAt(new lazer(),0);
                                       this.NewBullet(this.puls[this.pulscur]);
                                       this.NoMouse(this.puls[this.pulscur]);
                                       if(this.MP_mode && i == this.MP_myid)
                                       {
                                          this.puls[this.pulscur].lag = this.MP_ping2 / this.c_sim_rt2 * 2;
                                       }
                                       else
                                       {
                                          this.puls[this.pulscur].lag = 0;
                                       }
                                       if(this.MP_favor_the_shooter)
                                       {
                                          this.puls[this.pulscur].lag = 0;
                                       }
                                       this.mc.mp_must_shoot_once = undefined;
                                       this.puls[this.pulscur].life = 0;
                                       this.puls[this.pulscur].thisis = "swords";
                                       this.puls[this.pulscur].maxbulletlife = 6;
                                       if(this.mens[i].sword_life != -1)
                                       {
                                          this.puls[this.pulscur].maxbulletlife = this.mens[i].sword_life;
                                       }
                                       this.puls[this.pulscur].cclass = 3;
                                       this.puls[this.pulscur].x = this.ax[this.mc.b_body];
                                       this.puls[this.pulscur].y = this.ay[this.mc.b_body];
                                       this.puls[this.pulscur].nx = this.ax[this.mc.b_body];
                                       this.puls[this.pulscur].ny = this.ay[this.mc.b_body];
                                       this.puls[this.pulscur].power = 3.5 * this.mc.scale * this.mc.sword_spam_strength;
                                       this.puls[this.pulscur].knockback_multiplier = 1;
                                       this.puls[this.pulscur].inwater = this.ainwater[this.mc.b_arm2] && this.wa_friction[this.ainwater_shape[this.mc.b_arm2]];
                                       this.puls[this.pulscur].alpha = 0;
                                       this.puls[this.pulscur].master = i;
                                       this.puls[this.pulscur].gotoAndStop(1);
                                       this.puls[this.pulscur].lastin = i;
                                       this.puls[this.pulscur].lastinbox = this.boxestotal;
                                       this.puls[this.pulscur].spx = -this.xx * 10 * this.mc.scale;
                                       this.puls[this.pulscur].spy = -this.yy * 10 * this.mc.scale;
                                       this.nextpul();
                                       this.mc.sword_spam_strength = 0;
                                    }
                                 }
                              }
                           }
                        }
                        else
                        {
                           this.mc.melee_ani += Math.PI / 2;
                           this.mc.melee_tim = Math.PI * 2 + 1;
                           if(this.mc.wep_pause > 0)
                           {
                              this.mc.wep_pause -= 0.4 * this.thispulspeed;
                           }
                        }
                     }
                  }
                  this.mc.last_shoot_chance = false;
                  if(this.MP_mode)
                  {
                     this.VeriftMP(this.mc.b_body,-3);
                     this.VeriftMP(this.mc.b_toe,-3);
                     this.VeriftMP(this.mc.b_leg1,-3);
                     this.VeriftMP(this.mc.b_leg2,-3);
                     this.VeriftMP(this.mc.b_arm1,-3);
                     this.VeriftMP(this.mc.b_arm2,-3);
                     this.VeriftMP(this.mc.b_head_start,-3);
                     this.VeriftMP(this.mc.b_head_end,-3);
                  }
                  if(this.mc.y > this.g_maxy)
                  {
                     this.mc.hea = 0;
                     this.mc.lastshot = "body";
                     this.mc.lastshotbygun = "nothing";
                  }
                  if(!this.OpenTop)
                  {
                     if(this.mc.y < this.g_miny || this.mc.x < this.g_minx || this.mc.x > this.g_maxx)
                     {
                        this.mc.hea = 0;
                        this.mc.lastshot = "body";
                        this.mc.lastshotbygun = "nothing";
                     }
                  }
                  this.i2 = 0;
                  while(this.i2 < this.pushstotal)
                  {
                     if(this.mc.x > this.pushx[this.i2] - 150)
                     {
                        if(this.mc.x < this.pushw[this.i2] + 150)
                        {
                           if(this.mc.y > this.pushy[this.i2] - 150)
                           {
                              if(this.mc.y < this.pushh[this.i2] + 240)
                              {
                                 this.cx = Math.min(this.ax[this.mc.b_leg1],Math.min(this.ax[this.mc.b_leg2],Math.min(this.ax[this.mc.b_head_end],Math.min(this.ax[this.mc.b_body],Math.min(this.ax[this.mc.b_toe]))))) - 10;
                                 this.xx = Math.max(this.ax[this.mc.b_leg1],Math.max(this.ax[this.mc.b_leg2],Math.max(this.ax[this.mc.b_head_end],Math.min(this.ax[this.mc.b_body],Math.max(this.ax[this.mc.b_toe]))))) + 10;
                                 this.cy = Math.min(this.ay[this.mc.b_leg1],Math.min(this.ay[this.mc.b_leg2],Math.min(this.ay[this.mc.b_head_end],Math.min(this.ay[this.mc.b_body],Math.min(this.ay[this.mc.b_toe]))))) - 10;
                                 this.yy = Math.max(this.ay[this.mc.b_leg1],Math.max(this.ay[this.mc.b_leg2],Math.max(this.ay[this.mc.b_head_end],Math.min(this.ay[this.mc.b_body],Math.max(this.ay[this.mc.b_toe]))))) + 10;
                                 if(!(this.xx < this.pushx[this.i2] || this.cx > this.pushw[this.i2] || (this.yy < this.pushy[this.i2] || this.cy > this.pushh[this.i2])))
                                 {
                                    this.mc.tox += this.pushtox[this.i2] * this.thispulspeed;
                                    this.mc.toy += this.pushtoy[this.i2] * this.thispulspeed;
                                    this.mc.stability -= this.pushstab[this.i2] * 0.01 * this.thispulspeed;
                                    if(this.pushdamage[this.i2] != 0 && !this.mc.dead)
                                    {
                                       if(!this.MP_mode || this.MP_myid == i || !this.mc.isplayer)
                                       {
                                          this.mc.hea -= Math.abs(this.pushdamage[this.i2] * this.thispulspeed);
                                          this.mc.lastshot = "body";
                                          this.mc.lastshotbygun = "nothing";
                                       }
                                       if(this.pushdamage[this.i2] < 0)
                                       {
                                          this.u = this.mc.x - 20 + Math.random() * 40;
                                          this.v = this.mc.y - Math.random() * 80;
                                          if(this.u < this.pushx[this.i2])
                                          {
                                             this.u = this.pushx[this.i2];
                                          }
                                          if(this.u > this.pushw[this.i2])
                                          {
                                             this.u = this.pushw[this.i2];
                                          }
                                          if(this.v < this.pushy[this.i2])
                                          {
                                             this.v = this.pushy[this.i2];
                                          }
                                          if(this.v > this.pushh[this.i2])
                                          {
                                             this.v = this.pushh[this.i2];
                                          }
                                          if(this.mc.hea <= 0)
                                          {
                                             if(this.MP_myid == i && !this.CASUAL_MODE || this.mc.team != this.mens[this.MP_myid].team)
                                             {
                                                if(this.mc.hp_body > 0)
                                                {
                                                   this.mc.hp_body = 0;
                                                }
                                             }
                                          }
                                          this.effcolor = i;
                                          this.FlowAt(this.u,this.v,0,-3 + Math.random() * 6,-3 + Math.random() * 6,5);
                                       }
                                       if(Math.random() > 0.95 || this.pushdamage[this.i2] < 0)
                                       {
                                          this.Hurt(i);
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                     ++this.i2;
                  }
                  if(this.mc.hea > 0)
                  {
                     this.mc.x += this.mc.tox * this.thispulspeed;
                     this.mc.y += this.mc.toy * this.thispulspeed;
                     this.mc.toy += this.gravity * this.thispulspeed;
                     this.mc.stand = false;
                     this.hup = false;
                     if(this.MP_mode)
                     {
                        this.VeriftMP(this.mc.b_body,-2);
                        this.VeriftMP(this.mc.b_toe,-2);
                        this.VeriftMP(this.mc.b_leg1,-2);
                        this.VeriftMP(this.mc.b_leg2,-2);
                        this.VeriftMP(this.mc.b_arm1,-2);
                        this.VeriftMP(this.mc.b_arm2,-2);
                        this.VeriftMP(this.mc.b_head_start,-2);
                        this.VeriftMP(this.mc.b_head_end,-2);
                     }
                     if(this.mc.incar == -1)
                     {
                        if(this.mc.stability >= 0)
                        {
                           this.x4 = 0;
                           this.y4 = 0;
                           this.retux = 0;
                           this.retuy = 0;
                           this.rx = 0;
                           this.ry = 0;
                           this.ok3 = true;
                           for each(this.i2 in this.GetNearBoxBSP_at(this.mc.x,this.mc.y - 40))
                           {
                              this.cx = this.boxx[this.i2] - this.PLAYER_WIDTH * this.mc.scale;
                              this.xx = this.boxx[this.i2] + this.boxw[this.i2] + this.PLAYER_WIDTH * this.mc.scale;
                              this.cy = this.boxy[this.i2] + this.mc.sit * this.sitmax * this.mc.scale;
                              this.yy = this.boxy[this.i2] + this.boxh[this.i2] + 82 * this.mc.scale;
                              this.xx2 = this.boxw[this.i2];
                              this.yy2 = this.boxh[this.i2];
                              this.Collision(this.mc,this.mc.idd,this.cx,this.xx,this.cy,this.yy,this.xx2,this.yy2,this.ok3,this.x4,this.y4);
                           }
                           this.ok2 = false;
                           this.i2 = 0;
                           while(this.i2 < this.doorstotal)
                           {
                              this.x4 = this.doors[this.i2].tox;
                              this.y4 = this.doors[this.i2].toy;
                              this.cx = this.doors[this.i2].x - this.PLAYER_WIDTH * this.mc.scale;
                              this.xx = this.doors[this.i2].x + this.doors[this.i2].w + this.PLAYER_WIDTH * this.mc.scale;
                              this.cy = this.doors[this.i2].y + this.mc.sit * this.sitmax * this.mc.scale;
                              this.yy = this.doors[this.i2].y + this.doors[this.i2].h + 82 * this.mc.scale;
                              this.xx2 = this.doors[this.i2].w;
                              this.yy2 = this.doors[this.i2].h;
                              this.Collision(this.mc,this.mc.idd,this.cx,this.xx,this.cy,this.yy,this.xx2,this.yy2,this.ok3,this.x4,this.y4);
                              ++this.i2;
                           }
                           if(this.retux == 1 && this.rx == 1 || this.retuy == 1 && this.ry == 1)
                           {
                              if(this.retuy == 1 && this.ry == 1 && this.mc.sit < 0.8)
                              {
                                 this.mc.sit = 1;
                              }
                              else
                              {
                                 this.mc.stability = Math.min(-0.1,this.mc.stability);
                              }
                           }
                           if(this.mc.pressure > 0)
                           {
                              --this.mc.pressure;
                           }
                           this.i2 = 0;
                           while(this.i2 < this.barrelstotal)
                           {
                              this.mc2 = this.barrels[this.i2];
                              if(this.barrels[this.i2].hea > 0)
                              {
                                 this.x4 = (this.atox[this.mc2.b_left_top] + this.atox[this.mc2.b_right_bottom]) / 2;
                                 this.y4 = (this.atoy[this.mc2.b_left_top] + this.atoy[this.mc2.b_right_bottom]) / 2;
                                 this.cx = this.mc2.x - 7 - this.PLAYER_WIDTH * this.mc.scale - this.Math_abs(this.x4) / 2;
                                 this.xx = this.mc2.x + 7 + this.PLAYER_WIDTH * this.mc.scale + this.Math_abs(this.x4) / 2;
                                 this.cy = this.mc2.y - 15 + this.mc.sit * this.sitmax * this.mc.scale - this.Math_abs(this.y4) / 2;
                                 this.yy = this.mc2.y + 15 + 82 * this.mc.scale + this.Math_abs(this.y4) / 2;
                                 this.xx2 = 20;
                                 this.yy2 = 30;
                                 this.ok3 = true;
                                 this.Collision(this.mc,this.mc.idd,this.cx,this.xx,this.cy,this.yy,this.xx2,this.yy2,this.ok3,this.x4,this.y4);
                              }
                              else
                              {
                                 this.ok3 = false;
                                 this.xx2 = 20;
                                 this.yy2 = 20;
                                 this.x4 = (this.atox[this.mc2.b_left_top] + this.atox[this.mc2.b_right1]) / 2;
                                 this.y4 = (this.atoy[this.mc2.b_left_top] + this.atoy[this.mc2.b_right1]) / 2;
                                 if(Math.abs(this.x4) + Math.abs(this.y4) > 3)
                                 {
                                    this.cx = (this.ax[this.mc2.b_left_top] + this.ax[this.mc2.b_right1]) / 2 - 10 - this.Math_abs(this.x4) / 2;
                                    this.xx = (this.ax[this.mc2.b_left_top] + this.ax[this.mc2.b_right1]) / 2 + 10 + this.Math_abs(this.x4) / 2;
                                    this.cy = (this.ay[this.mc2.b_left_top] + this.ay[this.mc2.b_right1]) / 2 - 10 + this.mc.sit * this.sitmax * this.mc.scale - this.Math_abs(this.y4) / 2;
                                    this.yy = (this.ay[this.mc2.b_left_top] + this.ay[this.mc2.b_right1]) / 2 + 10 + 82 * this.mc.scale - this.Math_abs(this.y4) / 2;
                                    this.Collision(this.mc,this.mc.idd,this.cx,this.xx,this.cy,this.yy,this.xx2,this.yy2,this.ok3,this.x4,this.y4);
                                 }
                                 this.x4 = (this.atox[this.mc2.b_left_bottom] + this.atox[this.mc2.b_right2]) / 2;
                                 this.y4 = (this.atoy[this.mc2.b_left_bottom] + this.atoy[this.mc2.b_right2]) / 2;
                                 if(Math.abs(this.x4) + Math.abs(this.y4) > 3)
                                 {
                                    this.cx = (this.ax[this.mc2.b_left_bottom] + this.ax[this.mc2.b_right2]) / 2 - 10 - this.Math_abs(this.x4) / 2;
                                    this.xx = (this.ax[this.mc2.b_left_bottom] + this.ax[this.mc2.b_right2]) / 2 + 10 + this.Math_abs(this.x4) / 2;
                                    this.cy = (this.ay[this.mc2.b_left_bottom] + this.ay[this.mc2.b_right2]) / 2 - 10 + this.mc.sit * this.sitmax * this.mc.scale - this.Math_abs(this.y4) / 2;
                                    this.yy = (this.ay[this.mc2.b_left_bottom] + this.ay[this.mc2.b_right2]) / 2 + 10 + 82 * this.mc.scale + this.Math_abs(this.y4) / 2;
                                    this.Collision(this.mc,this.mc.idd,this.cx,this.xx,this.cy,this.yy,this.xx2,this.yy2,this.ok3,this.x4,this.y4);
                                 }
                              }
                              ++this.i2;
                           }
                           this.i3 = 0;
                           while(this.i3 < this.vehiclestotal)
                           {
                              if(this.vehicles[this.i3].io)
                              {
                                 if((this.vehicles[this.i3].typ != 3 || this.vehicles[this.i3].typ == 3 && !this.vehicles[this.i3].dead) && this.vehicles[this.i3].typ != 2)
                                 {
                                    this.ok3 = true;
                                    if(this.vehicles[this.i3].typ == 4 || this.vehicles[this.i3].typ == 7)
                                    {
                                       this.i4 = 0;
                                       while(this.i4 < 2)
                                       {
                                          if(this.i4 == 0)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_c;
                                          }
                                          if(this.i4 == 1)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_c1;
                                          }
                                          this.x4 = this.atox[this.i2];
                                          this.y4 = this.atoy[this.i2];
                                          this.cx = this.ax[this.i2] - this.arad[this.i2] - this.PLAYER_WIDTH * this.mc.scale - this.Math_abs(this.x4);
                                          this.xx = this.ax[this.i2] + this.arad[this.i2] + this.PLAYER_WIDTH * this.mc.scale + this.Math_abs(this.x4);
                                          this.cy = this.ay[this.i2] - this.arad[this.i2] + this.mc.sit * this.sitmax * this.mc.scale - this.Math_abs(this.y4);
                                          this.yy = this.ay[this.i2] + this.arad[this.i2] + 82 * this.mc.scale + this.Math_abs(this.y4);
                                          this.xx2 = this.arad[this.i2] * 2;
                                          this.yy2 = this.arad[this.i2] * 2;
                                          this.Collision(this.mc,this.mc.idd,this.cx,this.xx,this.cy,this.yy,this.xx2,this.yy2,this.ok3,this.x4,this.y4);
                                          ++this.i4;
                                       }
                                    }
                                    if(this.vehicles[this.i3].typ == 3)
                                    {
                                       this.i2 = this.vehicles[this.i3].b_c;
                                       this.x4 = this.atox[this.i2];
                                       this.y4 = this.atoy[this.i2];
                                       this.cx = this.ax[this.i2] - this.arad[this.i2] - this.PLAYER_WIDTH * this.mc.scale - this.Math_abs(this.x4);
                                       this.xx = this.ax[this.i2] + this.arad[this.i2] + this.PLAYER_WIDTH * this.mc.scale + this.Math_abs(this.x4);
                                       this.cy = this.ay[this.i2] - this.arad[this.i2] + this.mc.sit * this.sitmax * this.mc.scale - this.Math_abs(this.y4);
                                       this.yy = this.ay[this.i2] + this.arad[this.i2] + 82 * this.mc.scale + this.Math_abs(this.y4);
                                       this.xx2 = this.arad[this.i2] * 2;
                                       this.yy2 = this.arad[this.i2] * 2;
                                       this.Collision(this.mc,this.mc.idd,this.cx,this.xx,this.cy,this.yy,this.xx2,this.yy2,this.ok3,this.x4,this.y4);
                                    }
                                    if(this.vehicles[this.i3].typ == 0)
                                    {
                                       this.i4 = 0;
                                       while(this.i4 < 7)
                                       {
                                          if(this.i4 == 0)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_w1;
                                          }
                                          if(this.i4 == 1)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_w2;
                                          }
                                          if(this.i4 == 2)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_c;
                                          }
                                          if(this.i4 == 3)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_c2;
                                          }
                                          if(this.i4 == 4)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_c3;
                                          }
                                          if(this.i4 == 5)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_w1b;
                                          }
                                          if(this.i4 == 6)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_w2b;
                                          }
                                          this.x4 = this.atox[this.i2];
                                          this.y4 = this.atoy[this.i2];
                                          this.cx = this.ax[this.i2] - this.arad[this.i2] - this.PLAYER_WIDTH * this.mc.scale - this.Math_abs(this.x4);
                                          this.xx = this.ax[this.i2] + this.arad[this.i2] + this.PLAYER_WIDTH * this.mc.scale + this.Math_abs(this.x4);
                                          this.cy = this.ay[this.i2] - this.arad[this.i2] + this.mc.sit * this.sitmax * this.mc.scale - this.Math_abs(this.y4);
                                          this.yy = this.ay[this.i2] + this.arad[this.i2] + 82 * this.mc.scale + this.Math_abs(this.y4);
                                          this.xx2 = this.arad[this.i2] * 2;
                                          this.yy2 = this.arad[this.i2] * 2;
                                          this.Collision(this.mc,this.mc.idd,this.cx,this.xx,this.cy,this.yy,this.xx2,this.yy2,this.ok3,this.x4,this.y4);
                                          ++this.i4;
                                       }
                                    }
                                    if(this.vehicles[this.i3].typ == 1)
                                    {
                                       this.i4 = 0;
                                       while(this.i4 < 7)
                                       {
                                          if(this.i4 == 0)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_w1;
                                          }
                                          if(this.i4 == 1)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_w2;
                                          }
                                          if(this.i4 == 2)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_p1;
                                          }
                                          if(this.i4 == 3)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_p2;
                                          }
                                          if(this.i4 == 4)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_p3;
                                          }
                                          if(this.i4 == 5)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_w1b;
                                          }
                                          if(this.i4 == 6)
                                          {
                                             this.i2 = this.vehicles[this.i3].b_w2b;
                                          }
                                          this.x4 = this.atox[this.i2];
                                          this.y4 = this.atoy[this.i2];
                                          this.cx = this.ax[this.i2] - this.arad[this.i2] - this.PLAYER_WIDTH * this.mc.scale - this.Math_abs(this.x4) / 2;
                                          this.xx = this.ax[this.i2] + this.arad[this.i2] + this.PLAYER_WIDTH * this.mc.scale + this.Math_abs(this.x4) / 2;
                                          this.cy = this.ay[this.i2] - this.arad[this.i2] + this.mc.sit * this.sitmax * this.mc.scale - this.Math_abs(this.y4) / 2;
                                          this.yy = this.ay[this.i2] + this.arad[this.i2] + 82 * this.mc.scale + this.Math_abs(this.y4) / 2;
                                          this.xx2 = this.arad[this.i2] * 2;
                                          this.yy2 = this.arad[this.i2] * 2;
                                          this.Collision(this.mc,this.mc.idd,this.cx,this.xx,this.cy,this.yy,this.xx2,this.yy2,this.ok3,this.x4,this.y4);
                                          ++this.i4;
                                       }
                                    }
                                 }
                              }
                              ++this.i3;
                           }
                           if(this.ok2)
                           {
                              if(this.retux == 1 && this.rx == 1 || this.retuy == 1 && this.ry == 1)
                              {
                                 this.mc.stability = Math.min(-0.1,this.mc.stability);
                              }
                           }
                        }
                     }
                     this.mc.inwater = false;
                     water_friction = true;
                     this.i2 = 0;
                     while(this.i2 < this.watertotal && !this.mc.inwater)
                     {
                        if(this.ax[this.mc.b_toe] > this.wax[this.i2] - 10)
                        {
                           if(this.ax[this.mc.b_toe] < this.wax[this.i2] + this.waw[this.i2] + 10)
                           {
                              if(this.ay[this.mc.b_toe] > this.way[this.i2] - 10)
                              {
                                 if(this.ay[this.mc.b_toe] < this.way[this.i2] + this.wah[this.i2] + 40)
                                 {
                                    this.mc.inwater = true;
                                    water_friction = Boolean(this.wa_friction[this.i2]);
                                    if(this.ay[this.mc.b_toe] < this.way[this.i2] + this.mc.sit * this.sitmax + 50 && this.TracePointNoRagdolls(this.ax[this.mc.b_toe],this.way[this.i2] - 10))
                                    {
                                       this.mc.stand = true;
                                    }
                                    else
                                    {
                                       this.mc.stand = false;
                                    }
                                    if(!this.MP_mode || !this.mc.isplayer || this.MP_myid == i)
                                    {
                                       if(this.mc.stability > -0.1)
                                       {
                                          this.mc.stability = -0.1;
                                       }
                                    }
                                    if(this.wadamage[this.i2] > 0)
                                    {
                                       if(!this.MP_mode || this.MP_myid == i || !this.mc.isplayer)
                                       {
                                          this.mc.hea -= this.wadamage[this.i2] * this.thispulspeed;
                                          this.mc.lastshot = "body";
                                          this.mc.lastshotbygun = "acid";
                                       }
                                       this.mc.regentim = 0;
                                       if(Math.random() > 0.95)
                                       {
                                          this.Hurt(i);
                                       }
                                       if(i == this.MP_myid)
                                       {
                                          this.HurtMyPlayer(-1,0,this.wadamage[this.i2] / 4 * this.thispulspeed);
                                          this.HurtMyPlayer(1,0,this.wadamage[this.i2] / 4 * this.thispulspeed);
                                          this.HurtMyPlayer(0,-1,this.wadamage[this.i2] / 4 * this.thispulspeed);
                                          this.HurtMyPlayer(0,1,this.wadamage[this.i2] / 4 * this.thispulspeed);
                                       }
                                    }
                                 }
                              }
                           }
                        }
                        ++this.i2;
                     }
                     if(this.MP_mode)
                     {
                        this.VeriftMP(this.mc.b_body,-1);
                        this.VeriftMP(this.mc.b_toe,-1);
                        this.VeriftMP(this.mc.b_leg1,-1);
                        this.VeriftMP(this.mc.b_leg2,-1);
                        this.VeriftMP(this.mc.b_arm1,-1);
                        this.VeriftMP(this.mc.b_arm2,-1);
                        this.VeriftMP(this.mc.b_head_start,-1);
                        this.VeriftMP(this.mc.b_head_end,-1);
                     }
                     if(this.mc.stability > -0.1 && this.mc.isplayer || this.mc.stability >= 0.3 || Boolean(this.mc.inwater))
                     {
                        if(!this.mc.dying)
                        {
                           if(this.mc.tarx > this.mc.x)
                           {
                              this.mc.side = 1;
                           }
                           else
                           {
                              this.mc.side = -1;
                           }
                        }
                     }
                     if(this.mc.isplayer && i != this.MP_myid && !this.MP_favor_the_shooter)
                     {
                        if(!this.TraceLineF_nopushers(this.ax[this.mc.b_p2],this.ay[this.mc.b_p2],this.ax[this.mc.b_p2] - this.mc.mp_offset_x,this.ay[this.mc.b_p2] - this.mc.mp_offset_y))
                        {
                           this.mc.mp_offset_x = 0;
                           this.mc.mp_offset_y = 0;
                        }
                        this.mc.ang = Math.atan2(this.mc.tarx - this.ax[this.mc.b_body] + this.mc.mp_offset_x,this.mc.tary - this.ay[this.mc.b_body] + this.mc.mp_offset_y);
                     }
                     else
                     {
                        this.mc.ang = Math.atan2(this.mc.tarx - this.ax[this.mc.b_body],this.mc.tary - this.ay[this.mc.b_body]);
                     }
                     if(this.mc.stability > 0)
                     {
                        if(this.mc.stability < 0.2)
                        {
                           this.mc.sit = 1;
                           this.mc.x = this.ax[this.mc.b_toe] * (1 - this.mc.stability) + this.mc.x * this.mc.stability;
                           this.mc.y = (this.ay[this.mc.b_toe] + (this.mc.sit * this.sitmax + 10) * this.mc.scale) * (1 - this.mc.stability) + this.mc.y * this.mc.stability;
                        }
                        if(this.MP_mode)
                        {
                           this.VeriftMP(this.mc.b_body,100);
                           this.VeriftMP(this.mc.b_toe,100);
                           this.VeriftMP(this.mc.b_leg1,100);
                           this.VeriftMP(this.mc.b_leg2,100);
                           this.VeriftMP(this.mc.b_arm1,100);
                           this.VeriftMP(this.mc.b_arm2,100);
                           this.VeriftMP(this.mc.b_head_start,100);
                           this.VeriftMP(this.mc.b_head_end,100);
                        }
                        this.i2 = 0;
                        while(this.i2 < this.playerstotal)
                        {
                           if(this.i2 != i)
                           {
                              if(this.mens[this.i2].io)
                              {
                                 this.mc2 = this.mens[this.i2];
                                 if(this.global_collision)
                                 {
                                    if(this.mc2.team != this.mc.team || this.mc.team > 0 || this.mc2.team > 0)
                                    {
                                       if(this.mc2.stability > 0)
                                       {
                                          if(this.mc2.hea > 0)
                                          {
                                             if(this.mc.x + 10 * this.mc.scale > this.mc2.x - 20 * this.mc2.scale)
                                             {
                                                if(this.mc.x - 10 * this.mc.scale < this.mc2.x + 20 * this.mc2.scale)
                                                {
                                                   if(this.mc.y - this.mc.sit * this.sitmax * this.mc.scale > this.mc2.y - 82 * this.mc2.scale)
                                                   {
                                                      if(this.mc.y - 82 * this.mc.scale < this.mc2.y - this.mc2.sit * this.sitmax * this.mc2.scale)
                                                      {
                                                         this.cx = this.Math_abs(this.mc2.x - this.mc.x) * 2.5;
                                                         this.cy = this.Math_abs(this.mc2.y - this.mc.y);
                                                         if(this.mc.y < this.mc2.y - 82 * this.mc2.scale + this.mc.sit * this.sitmax * this.mc.scale + 32)
                                                         {
                                                            this.cx = 0;
                                                            this.cy = 1;
                                                         }
                                                         if(this.cx > this.cy)
                                                         {
                                                            this.u = (this.mc.x + this.mc2.x) / 2;
                                                            this.v = (this.mc.tox * this.mc.mobility + this.mc2.tox * this.mc2.mobility) / (this.mc.mobility + this.mc2.mobility);
                                                            if(this.mc.x < this.mc2.x)
                                                            {
                                                               this.mc.x = this.u - 15;
                                                               this.mc2.x = this.u + 15;
                                                               this.mc.tox = this.v - 0.1;
                                                               this.mc2.tox = this.v + 0.1;
                                                            }
                                                            else
                                                            {
                                                               this.mc2.x = this.u - 15;
                                                               this.mc.x = this.u + 15;
                                                               this.mc2.tox = this.v - 0.1;
                                                               this.mc.tox = this.v + 0.1;
                                                            }
                                                         }
                                                         else
                                                         {
                                                            this.u = (this.mc.y - (82 - this.mc.sit * this.sitmax) * this.mc.scale / 2 + this.mc2.y - (82 - this.mc2.sit * this.sitmax) * this.mc2.scale / 2) / 2;
                                                            this.v = (this.mc.toy * this.mc.mobility + this.mc2.toy * this.mc2.mobility) / (this.mc.mobility + this.mc2.mobility);
                                                            if(this.mc.y < this.mc2.y)
                                                            {
                                                               if(this.mc.toy >= this.mc2.toy)
                                                               {
                                                                  this.mc.y = this.u + this.mc.sit * this.sitmax / 2 * this.mc.scale;
                                                                  if(!this.mc2.stand)
                                                                  {
                                                                     this.mc2.y = this.u + 82 * this.mc2.scale - this.mc.sit * this.sitmax / 2 * this.mc.scale;
                                                                  }
                                                                  this.mc.toy = this.v;
                                                                  this.mc2.toy = this.v;
                                                                  if(!this.mc.stand)
                                                                  {
                                                                     this.mc.stand = true;
                                                                     this.x4 = this.mc2.tox;
                                                                     this.mc.tox += (this.x4 / 6 - this.mc.tox * 1 / 6) * this.thispulspeed;
                                                                     if(this.mc.tox > this.x4 + 0.5 * 3 * this.thispulspeed)
                                                                     {
                                                                        this.mc.tox -= 0.5 * 3 * this.thispulspeed;
                                                                     }
                                                                     else if(this.mc.tox < this.x4 - 0.5 * 3 * this.thispulspeed)
                                                                     {
                                                                        this.mc.tox += 0.5 * 3 * this.thispulspeed;
                                                                     }
                                                                     else
                                                                     {
                                                                        this.mc.tox = this.x4;
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                            else if(this.mc.toy <= this.mc2.toy)
                                                            {
                                                               this.mc2.y = this.u + this.mc2.sit * this.sitmax / 2;
                                                               if(!this.mc.stand)
                                                               {
                                                                  this.mc.y = this.u + 82 - this.mc2.sit * this.sitmax / 2;
                                                               }
                                                               this.mc2.toy = this.v;
                                                               this.mc.toy = this.v;
                                                               if(!this.mc2.stand)
                                                               {
                                                                  this.mc2.stand = true;
                                                                  this.x4 = this.mc.tox;
                                                                  this.mc2.tox += (this.x4 / 6 - this.mc2.tox * 1 / 6) * this.thispulspeed;
                                                                  if(this.mc2.tox > this.x4 + 0.5 * 3 * this.thispulspeed)
                                                                  {
                                                                     this.mc2.tox -= 0.5 * 3 * this.thispulspeed;
                                                                  }
                                                                  else if(this.mc2.tox < this.x4 - 0.5 * 3 * this.thispulspeed)
                                                                  {
                                                                     this.mc2.tox += 0.5 * 3 * this.thispulspeed;
                                                                  }
                                                                  else
                                                                  {
                                                                     this.mc2.tox = this.x4;
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                           ++this.i2;
                        }
                        if(this.MP_mode)
                        {
                           this.VeriftMP(this.mc.b_body,110);
                           this.VeriftMP(this.mc.b_toe,110);
                           this.VeriftMP(this.mc.b_leg1,110);
                           this.VeriftMP(this.mc.b_leg2,110);
                           this.VeriftMP(this.mc.b_arm1,110);
                           this.VeriftMP(this.mc.b_arm2,110);
                           this.VeriftMP(this.mc.b_head_start,110);
                           this.VeriftMP(this.mc.b_head_end,110);
                        }
                        if(this.mc.tox / this.mc.scale * this.mc.tox / this.mc.scale + this.mc.toy / this.mc.scale * this.mc.toy / this.mc.scale > 400)
                        {
                           if(this.mc.stability > 0)
                           {
                              this.mc.stability *= Math.pow(0.9,this.thispulspeed);
                           }
                           this.mc.stability -= 0.05 * this.thispulspeed;
                        }
                        if(this.mc.act_movey == 1 || !this.mc.stand && (!this.MP_mode || (this.MP_myid != i || !this.mc.isplayer)) || this.hup)
                        {
                           if(this.mc.sit < 1)
                           {
                              this.mc.sit += this.gravity / this.sitmax * this.thispulspeed * 5;
                              if(this.mc.stand)
                              {
                                 if(this.mc.stability >= 0)
                                 {
                                    this.mc.y += this.gravity * this.thispulspeed * 5;
                                 }
                              }
                           }
                           if(this.mc.sit > 1)
                           {
                              this.mc.sit = 1;
                           }
                        }
                        else
                        {
                           if(this.mc.sit > 0)
                           {
                              this.mc.sit -= 0.3 * this.thispulspeed;
                           }
                           if(this.mc.sit < 0)
                           {
                              this.mc.sit = 0;
                           }
                        }
                        if(this.MP_mode)
                        {
                           this.VeriftMP(this.mc.b_body,120);
                           this.VeriftMP(this.mc.b_toe,120);
                           this.VeriftMP(this.mc.b_leg1,120);
                           this.VeriftMP(this.mc.b_leg2,120);
                           this.VeriftMP(this.mc.b_arm1,120);
                           this.VeriftMP(this.mc.b_arm2,120);
                           this.VeriftMP(this.mc.b_head_start,120);
                           this.VeriftMP(this.mc.b_head_end,120);
                        }
                        this.mc.waiting += 0.1;
                        if(this.mc.waiting > Math.PI * 2)
                        {
                           this.mc.waiting -= Math.PI * 2;
                        }
                        if(this.MP_mode)
                        {
                           this.VeriftMP(this.mc.b_body,121);
                           this.VeriftMP(this.mc.b_toe,121);
                           this.VeriftMP(this.mc.b_leg1,121);
                           this.VeriftMP(this.mc.b_leg2,121);
                           this.VeriftMP(this.mc.b_arm1,121);
                           this.VeriftMP(this.mc.b_arm2,121);
                           this.VeriftMP(this.mc.b_head_start,121);
                           this.VeriftMP(this.mc.b_head_end,121);
                        }
                        this.TurnBone(this.mc.b_toe,this.mc.x,this.mc.y + (-31 - 3) * this.mc.scale,this.mc,0.2 + 0.6 * this.mc.stability);
                        if(this.MP_mode)
                        {
                           this.VeriftMP(this.mc.b_body,122);
                           this.VeriftMP(this.mc.b_toe,122);
                           this.VeriftMP(this.mc.b_leg1,122);
                           this.VeriftMP(this.mc.b_leg2,122);
                           this.VeriftMP(this.mc.b_arm1,122);
                           this.VeriftMP(this.mc.b_arm2,122);
                           this.VeriftMP(this.mc.b_head_start,122);
                           this.VeriftMP(this.mc.b_head_end,122);
                        }
                        this.TurnBone(this.mc.b_body,this.ax[this.mc.b_toe] + this.mc.tox * 1 + Math.sin(this.mc.waiting) * this.mc.scale,this.mc.y + (-31 - 3 - this.normal_spine_length + this.normal_shoulder_length + this.mc.sit * 7) * this.mc.scale,this.mc,0.1 + 0.6 * this.mc.stability);
                        if(this.MP_mode)
                        {
                           this.VeriftMP(this.mc.b_body,123);
                           this.VeriftMP(this.mc.b_toe,123);
                           this.VeriftMP(this.mc.b_leg1,123);
                           this.VeriftMP(this.mc.b_leg2,123);
                           this.VeriftMP(this.mc.b_arm1,123);
                           this.VeriftMP(this.mc.b_arm2,123);
                           this.VeriftMP(this.mc.b_head_start,123);
                           this.VeriftMP(this.mc.b_head_end,123);
                        }
                        if(this.mc.act_fire)
                        {
                           this.xx = 2;
                        }
                        else
                        {
                           this.xx = 0;
                        }
                        this.TurnBone(this.mc.b_head_start,this.ax[this.mc.b_body] + this.mc.tox * 0.3 + this.mc.side * this.xx * this.mc.scale,this.ay[this.mc.b_body] - this.normal_shoulder_length * this.mc.scale,this.mc,0.1 + 0.8 * this.mc.stability);
                        this.TurnBone(this.mc.b_head_end,this.ax[this.mc.b_body] + this.mc.tox * 0.3 + (-Math.sin(this.mc.ang - Math.PI / 2) * this.mc.side * 5 + this.mc.side * this.xx) * this.mc.scale,this.ay[this.mc.b_body] + (-this.normal_shoulder_length - 9 - Math.cos(this.mc.ang - Math.PI / 2) * 5 * this.mc.side) * this.mc.scale,this.mc,0.1 + 0.8 * this.mc.stability);
                        if(this.MP_mode)
                        {
                           this.VeriftMP(this.mc.b_body,1);
                           this.VeriftMP(this.mc.b_toe,1);
                           this.VeriftMP(this.mc.b_leg1,1);
                           this.VeriftMP(this.mc.b_leg2,1);
                           this.VeriftMP(this.mc.b_arm1,1);
                           this.VeriftMP(this.mc.b_arm2,1);
                           this.VeriftMP(this.mc.b_head_start,1);
                           this.VeriftMP(this.mc.b_head_end,1);
                        }
                        if(this.mc.act_movex == 1)
                        {
                           this.mc.moving_speed = 1 * Math.min((this.mc.mobility + 1) / 2,2) * this.mc.scale;
                        }
                        else if(this.mc.act_movex == -1)
                        {
                           this.mc.moving_speed = -1 * Math.min((this.mc.mobility + 1) / 2,2) * this.mc.scale;
                        }
                        else
                        {
                           this.mc.moving_speed = 0;
                        }
                        if(this.mc.curwea == -1 && Boolean(this.mc.isplayer))
                        {
                           this.mc.moving_speed *= 1.1;
                        }
                        if(this.mc.stability < 0.5)
                        {
                           this.mc.moving_speed *= 0.4;
                        }
                        if(this.mc.stand)
                        {
                           if(this.mc.moving_speed == 0)
                           {
                              this.mc.idle_phase += Math.sin(this.mc.idle_phase - 0.3) * 0.5;
                           }
                           if(this.mc.sit == 0)
                           {
                              this.xx = (1 - this.mc.stability) * 10;
                              this.TurnBone(this.mc.b_leg1,this.mc.x + (this.xx + Math.sin(this.mc.idle_phase) * 13) * this.mc.scale,this.mc.y + (-3 + Math.cos(this.mc.idle_phase) * 5 * this.Math_abs(this.mc.moving_speed / this.mc.scale) * 2 - this.mc.sit * this.sitmax) * this.mc.scale,this.mc,0.4 + 0.2 * this.mc.stability);
                              this.TurnBone(this.mc.b_leg2,this.mc.x + (-this.xx - Math.sin(this.mc.idle_phase) * 13) * this.mc.scale,this.mc.y + (-3 - Math.cos(this.mc.idle_phase) * 5 * this.Math_abs(this.mc.moving_speed / this.mc.scale) * 2 - this.mc.sit * this.sitmax) * this.mc.scale,this.mc,0.4 + 0.2 * this.mc.stability);
                           }
                           else
                           {
                              this.i3 = this.mc.b_leg2;
                              this.i2 = this.mc.b_leg1;
                              if(this.ax[this.mc.b_leg1] * this.mc.side > this.ax[this.mc.b_leg2] * this.mc.side)
                              {
                                 this.i3 = this.mc.b_leg1;
                                 this.i2 = this.mc.b_leg2;
                              }
                              if(this.mc.act_movex == 0)
                              {
                                 this.TurnBone(this.i3,this.mc.x + this.mc.side * 15 * this.mc.scale,this.mc.y + (-3 - this.mc.sit * this.sitmax) * this.mc.scale,this.mc,0.4 + 0.2 * this.mc.stability);
                                 this.TurnBone(this.i2,this.mc.x - this.mc.side * 15 * this.mc.scale,this.mc.y + (-3 - this.mc.sit * this.sitmax) * this.mc.scale,this.mc,0.4 + 0.2 * this.mc.stability);
                              }
                              else
                              {
                                 this.TurnBone(this.i3,this.mc.x + (Math.sin(this.mc.idle_phase) * 10 + this.mc.side * 10) * this.mc.scale,this.mc.y + (-3 + Math.min(Math.cos(this.mc.idle_phase),0) * 5 * this.Math_abs(this.mc.moving_speed / this.mc.scale) - this.mc.sit * this.sitmax) * this.mc.scale,this.mc,0.4 + 0.2 * this.mc.stability);
                                 this.TurnBone(this.i2,this.mc.x + (-Math.sin(this.mc.idle_phase) * 10 - this.mc.side * 5) * this.mc.scale,this.mc.y + (-3 - Math.min(Math.cos(this.mc.idle_phase),0) * 5 * this.Math_abs(this.mc.moving_speed / this.mc.scale) - this.mc.sit * this.sitmax) * this.mc.scale,this.mc,0.4 + 0.2 * this.mc.stability);
                              }
                           }
                           if(this.mc.act_movey == -1 && !this.hup)
                           {
                              this.mc.toy = -8 * this.mc.stability * Math.min((this.mc.mobility + 1) / 2,2) * this.mc.scale * this.mc.jump_scale;
                              --this.mc.y;
                              if(this.mc.curwea == -1 && Boolean(this.mc.isplayer))
                              {
                                 this.mc.toy -= 2 * this.mc.scale * this.mc.jump_scale;
                              }
                              if(this.mc.moving_speed > 0 && this.mc.tox > 0.3 || this.mc.moving_speed < 0 && this.mc.tox < -0.3)
                              {
                                 this.mc.tox += this.mc.moving_speed * this.mc.scale * this.mc.jump_scale;
                              }
                              this.TurnBone(this.mc.b_leg1,this.mc.x + (-this.mc.tox - 5) * this.mc.scale,this.mc.y,this.mc,this.mc.stability);
                              this.TurnBone(this.mc.b_leg2,this.mc.x + (-this.mc.tox + 5) * this.mc.scale,this.mc.y,this.mc,this.mc.stability);
                           }
                           if(this.mc.moving_speed != 0)
                           {
                              this.mc.idle_phase -= 0.2 * (2 - this.mc.sit * 0.75) * this.mc.moving_speed / this.mc.scale * this.thispulspeed;
                              this.mc.tox += this.mc.moving_speed * (2 - this.mc.sit * 0.75) / 2 * 3 * this.thispulspeed;
                              this.mc.step_sound_phase -= 0.2 * (2 - this.mc.sit * 0.75) * this.mc.moving_speed / this.mc.scale * this.thispulspeed;
                              if(this.mc.step_sound_phase > Math.PI || this.mc.step_sound_phase < -Math.PI)
                              {
                                 if(this.mc.step_sound_phase > 0)
                                 {
                                    this.mc.step_sound_phase -= Math.PI;
                                 }
                                 else
                                 {
                                    this.mc.step_sound_phase += Math.PI;
                                 }
                                 if(this.mc.sit == 0)
                                 {
                                    this.i3 = int(Math.random() * 4);
                                    if(this.mc.armored == 2)
                                    {
                                       if(this.i3 == 0)
                                       {
                                          this.PlaySound(this.s_robo_step1,this.mc.x,this.mc.y);
                                       }
                                       else if(this.i3 == 1)
                                       {
                                          this.PlaySound(this.s_robo_step2,this.mc.x,this.mc.y);
                                       }
                                       else if(this.i3 == 2)
                                       {
                                          this.PlaySound(this.s_robo_step3,this.mc.x,this.mc.y);
                                       }
                                       else if(this.i3 == 3)
                                       {
                                          this.PlaySound(this.s_robo_step4,this.mc.x,this.mc.y);
                                       }
                                    }
                                    else if(this.i3 == 0)
                                    {
                                       this.PlaySound(this.s_step1,this.mc.x,this.mc.y);
                                    }
                                    else if(this.i3 == 1)
                                    {
                                       this.PlaySound(this.s_step2,this.mc.x,this.mc.y);
                                    }
                                    else if(this.i3 == 2)
                                    {
                                       this.PlaySound(this.s_step3,this.mc.x,this.mc.y);
                                    }
                                    else if(this.i3 == 3)
                                    {
                                       this.PlaySound(this.s_step4,this.mc.x,this.mc.y);
                                    }
                                 }
                              }
                           }
                        }
                        else
                        {
                           this.u = (Number(this.mc.tox) / this.mc.scale * 2 + this.mc.tox / this.mc.scale * 3) * (this.mc.toy / this.mc.scale + 5) * 0.1;
                           this.v = -15 + (this.mc.toy / this.mc.scale + 5) * 2 + 31;
                           this.u2 = this.VectorDist2D(this.u,this.v);
                           if(this.u2 > 31)
                           {
                              this.u /= this.u2 / 31;
                              this.v /= this.u2 / 31;
                           }
                           this.TurnBone(this.mc.b_leg1,this.mc.x + this.u * this.mc.scale,this.mc.y + (-31 + this.v) * this.mc.scale,this.mc,0.8 * this.mc.stability);
                           this.u = (-this.mc.tox / this.mc.scale * 1 + this.mc.tox / this.mc.scale * 3) * this.mc.toy / this.mc.scale * 0.1;
                           this.v = -10 + 31;
                           this.u2 = this.VectorDist2D(this.u,this.v);
                           if(this.u2 > 31)
                           {
                              this.u /= this.u2 / 31;
                              this.v /= this.u2 / 31;
                           }
                           this.TurnBone(this.mc.b_leg2,this.mc.x + this.u * this.mc.scale,this.mc.y + (-31 + this.v) * this.mc.scale,this.mc,0.8 * this.mc.stability);
                           if(this.mc.tox * this.mc.moving_speed < 3)
                           {
                              this.mc.tox += this.mc.moving_speed * 0.4 * this.thispulspeed;
                           }
                        }
                     }
                     else
                     {
                        this.mc.x = this.ax[this.mc.b_toe];
                        this.mc.y = (this.ay[this.mc.b_leg1] + this.ay[this.mc.b_leg2]) / 2;
                        this.mc.sit = 1;
                        this.mc.tox = this.atox[this.mc.b_toe];
                        this.mc.toy = this.atoy[this.mc.b_toe];
                     }
                     if(this.MP_mode)
                     {
                        this.VeriftMP(this.mc.b_body,2);
                        this.VeriftMP(this.mc.b_toe,2);
                        this.VeriftMP(this.mc.b_leg1,2);
                        this.VeriftMP(this.mc.b_leg2,2);
                        this.VeriftMP(this.mc.b_arm1,2);
                        this.VeriftMP(this.mc.b_arm2,2);
                        this.VeriftMP(this.mc.b_head_start,2);
                        this.VeriftMP(this.mc.b_head_end,2);
                     }
                     if(this.mc.hea > 0)
                     {
                        dot_effects = false;
                        e = 0;
                        while(e < this.mc.effects.length)
                        {
                           ef = this.mc.effects[e];
                           if(ef.type == "DOT")
                           {
                              dot_effects = true;
                              this.mc.hea -= ef.power * this.thispulspeed;
                              if(Math.random() > 0.95)
                              {
                                 this.Hurt(i);
                              }
                              ef.duration -= this.thispulspeed;
                              if(ef.duration <= 0 || this.mc.hea <= 0)
                              {
                                 this.Hurt(i);
                                 this.mc.effects.splice(e,1);
                                 e--;
                              }
                           }
                           e++;
                        }
                        target_frame = 1;
                        if(dot_effects)
                        {
                           target_frame = 2;
                        }
                        if(this.mc.gui.currentFrame != target_frame)
                        {
                           this.mc.gui.gotoAndStop(target_frame);
                        }
                        if(this.mc.dying)
                        {
                           if(this.mc.inwater)
                           {
                              if(water_friction)
                              {
                                 if(Math.random() > 0.8)
                                 {
                                    this.Effect(this.ax[this.mc.b_head_start],this.ay[this.mc.b_head_start],2,0,0);
                                 }
                              }
                           }
                           if(this.mc.isplayer)
                           {
                              this.mc.hea -= 0.1 * this.thispulspeed;
                              if(this.MP_gamestate != 0)
                              {
                                 if(this.MP_type == 3)
                                 {
                                    if(this.mc.hea < 1)
                                    {
                                       this.mc.hea = 1;
                                    }
                                 }
                              }
                           }
                           else if(this.mc.team == this.mens[this.MP_myid].team)
                           {
                              if(this.mc.x < this.mens[this.MP_myid].x - 600 || this.mc.x > this.mens[this.MP_myid].x + 600 || this.mc.y < this.mens[this.MP_myid].y - 600 || this.mc.y > this.mens[this.MP_myid].y + 600)
                              {
                                 this.mc.hea -= 0.01 * this.thispulspeed;
                              }
                           }
                           else
                           {
                              this.mc.hea -= 0.05 * this.thispulspeed;
                           }
                           if(this.mc.stability > -0.2)
                           {
                              this.mc.stability = -0.2;
                           }
                           this.atox[this.mc.b_toe] -= this.mc.side * 0.2 * this.thispulspeed;
                           this.atox[this.mc.b_leg1] += this.mc.side * 0.1 * this.thispulspeed;
                           this.atox[this.mc.b_leg2] += this.mc.side * 0.1 * this.thispulspeed;
                           this.atoy[this.mc.b_body] -= 0.8 * this.thispulspeed;
                           this.atoy[this.mc.b_toe] += 0.8 * this.thispulspeed;
                           this.atoy[this.mc.b_head_end] -= (0.7 - 0.5 - Math.sin(this.mc.hea * 0.3)) * this.thispulspeed;
                           this.atoy[this.mc.b_toe] += (0.7 - 0.5 - Math.sin(this.mc.hea * 0.3)) * this.thispulspeed;
                           this.atox[this.mc.b_body] += this.mc.side * 0.2 * this.thispulspeed;
                           this.atox[this.mc.b_arm1] += Math.sin(this.mc.hea * 0.9) * 0.7 * this.mc.side * this.thispulspeed;
                           this.atoy[this.mc.b_arm1] += Math.cos(this.mc.hea * 0.9) * 0.4 * this.thispulspeed;
                           this.atox[this.mc.b_arm2] -= Math.sin(this.mc.hea * 0.9) * 0.7 * this.mc.side * this.thispulspeed;
                           this.atoy[this.mc.b_arm2] -= Math.cos(this.mc.hea * 0.9) * 0.4 * this.thispulspeed;
                           this.atoy[this.mc.b_toe] += Math.cos(this.mc.hea * 0.9) * 0.8 * this.thispulspeed;
                           if(this.ay[this.mc.b_body] > this.ay[this.mc.b_leg1] - 20)
                           {
                              if(this.ay[this.mc.b_body] > this.ay[this.mc.b_leg2] - 20)
                              {
                                 if(this.ax[this.mc.b_body] > this.ax[this.mc.b_toe])
                                 {
                                    this.mc.side = 1;
                                 }
                                 else
                                 {
                                    this.mc.side = -1;
                                 }
                              }
                           }
                        }
                        else if(this.mc.team == this.mens[this.MP_myid].team || Boolean(this.mc.isplayer))
                        {
                           this.mc.hp_head = Math.max(this.mc.hea * 0.9 - 30,this.mc.hp_head);
                           this.mc.hp_body = Math.max(this.mc.hea * 0.9 - 30,this.mc.hp_body);
                           this.mc.hp_legs = Math.max(this.mc.hea * 0.9 - 30,this.mc.hp_legs);
                           this.mc.hp_arms = Math.max(this.mc.hea * 0.9 - 30,this.mc.hp_arms);
                        }
                        else if(this.PRO_BOTS)
                        {
                           this.mc.hp_head = (Math.max(this.mc.hea * 0.9 - 30,this.mc.hp_head) + this.mc.hp_head * 20) / 21;
                           this.mc.hp_body = (Math.max(this.mc.hea * 0.9 - 30,this.mc.hp_body) + this.mc.hp_body * 20) / 21;
                           this.mc.hp_legs = (Math.max(this.mc.hea * 0.9 - 30,this.mc.hp_legs) + this.mc.hp_legs * 20) / 21;
                           this.mc.hp_arms = (Math.max(this.mc.hea * 0.9 - 30,this.mc.hp_arms) + this.mc.hp_arms * 20) / 21;
                        }
                        this.WakeUpAtom(this.mc.b_body);
                        this.WakeUpAtom(this.mc.b_toe);
                        this.WakeUpAtom(this.mc.b_leg1);
                        this.WakeUpAtom(this.mc.b_leg2);
                        this.WakeUpAtom(this.mc.b_arm1);
                        this.WakeUpAtom(this.mc.b_arm2);
                        this.WakeUpAtom(this.mc.b_head_start);
                        this.WakeUpAtom(this.mc.b_head_end);
                        if(this.MP_mode)
                        {
                           this.VeriftMP(this.mc.b_body,3);
                           this.VeriftMP(this.mc.b_toe,3);
                           this.VeriftMP(this.mc.b_leg1,3);
                           this.VeriftMP(this.mc.b_leg2,3);
                           this.VeriftMP(this.mc.b_arm1,3);
                           this.VeriftMP(this.mc.b_arm2,3);
                           this.VeriftMP(this.mc.b_head_start,3);
                           this.VeriftMP(this.mc.b_head_end,3);
                        }
                     }
                     if(this.mc.stability > -1)
                     {
                        this.xx = 0.8;
                        if(this.mc.stability > 0 || Boolean(this.mc.inwater))
                        {
                           this.xx = 1;
                        }
                        if(this.mc.dying)
                        {
                           if(this.mc.isplayer)
                           {
                              this.xx *= 0.9;
                           }
                           else
                           {
                              this.xx *= 0.7;
                           }
                        }
                        if(this.key_kinetic && i == this.MP_myid)
                        {
                           this.TurnBone(this.mc.b_arm2,this.ax[this.mc.b_body] + Math.sin(this.mc.ang + this.mc.side * 0.2) * 30 * this.mc.scale,this.ay[this.mc.b_body] + Math.cos(this.mc.ang + this.mc.side * 0.2) * 30 * this.mc.scale,this.mc,1);
                           if(this.mc.wep_pause < 1)
                           {
                              this.mc.wep_pause = 1;
                           }
                           this.u = this.Dist2D(this.ax[this.mc.b_arm2],this.ay[this.mc.b_arm2],this.mc.tarx,this.mc.tary);
                           if(this.u < 70)
                           {
                           }
                           if(this.u > this.kinetic_range)
                           {
                              this.u = this.kinetic_range;
                           }
                           if(this.cinetic_target != -1)
                           {
                              if(this.aio[this.cinetic_target] == true || this.aio[this.cinetic_target] == false)
                              {
                                 if(this.TraceLine(this.ax[this.mc.b_arm2],this.ay[this.mc.b_arm2],this.ax[this.cinetic_target],this.ay[this.cinetic_target]) || this.kinetic_through_walls)
                                 {
                                    if(this.Dist2D(this.atox[this.mc.b_body],this.atoy[this.mc.b_body],this.atox[this.cinetic_target],this.atoy[this.cinetic_target]) < 8 || this.VectorDist2D(this.atox[this.mc.b_body],this.atoy[this.mc.b_body]) < 8)
                                    {
                                       if(this.u < this.kinetic_range + 50)
                                       {
                                          if(this.u < 1)
                                          {
                                             this.u = 1;
                                          }
                                          this.cx = this.ax[this.mc.b_arm2] + Math.sin(this.mc.ang) * this.u;
                                          this.cy = this.ay[this.mc.b_arm2] + Math.cos(this.mc.ang) * this.u;
                                          this.cx = (this.cx - this.ax[this.cinetic_target]) / this.u * 4;
                                          this.cy = (this.cy - this.ay[this.cinetic_target]) / this.u * 4;
                                          this.u = this.Dist2D(this.cx,this.cy,0,0);
                                          if(this.u < 1)
                                          {
                                             this.u = 1;
                                          }
                                          this.cx = this.cx / this.u * 100 * Math.min(this.u / 30,1);
                                          this.cy = this.cy / this.u * 100 * Math.min(this.u / 30,1);
                                          this.atox[this.cinetic_target] += this.cx * this.thispulspeed;
                                          this.atoy[this.cinetic_target] += this.cy * this.thispulspeed;
                                          if(this.aactive[this.cinetic_target] != 1000)
                                          {
                                             this.atox[this.mc.b_body] -= this.cx * this.thispulspeed;
                                             this.atoy[this.mc.b_body] -= this.cy * this.thispulspeed;
                                             this.mc.tox -= this.cx * this.thispulspeed / 6;
                                             this.mc.toy -= this.cy * this.thispulspeed / 6;
                                             if(!this.mc.stand || this.cy > 0)
                                             {
                                                if(this.mc.stability > -0.1)
                                                {
                                                   this.mc.stability = Math.max(-0.1,this.mc.stability - this.Dist2D(this.atox[this.mc.b_body],this.atoy[this.mc.b_body],this.atox[this.cinetic_target],this.atoy[this.cinetic_target]) * this.thispulspeed * 0.025);
                                                }
                                             }
                                             if(this.aof[this.cinetic_target] >= 0 && this.aof[this.cinetic_target] < 100 && this.mens[this.aof[this.cinetic_target]].incar == -1)
                                             {
                                                if(!this.mens[this.aof[this.cinetic_target]].stand || this.cy < 0)
                                                {
                                                   if(this.mens[this.aof[this.cinetic_target]].stability > -0.1)
                                                   {
                                                      this.mens[this.aof[this.cinetic_target]].stability = Math.max(-0.1,this.mens[this.aof[this.cinetic_target]].stability - this.Dist2D(this.atox[this.mc.b_body],this.atoy[this.mc.b_body],this.atox[this.cinetic_target],this.atoy[this.cinetic_target]) * this.thispulspeed * 0.025);
                                                   }
                                                }
                                                this.mens[this.aof[this.cinetic_target]].tox += this.cx * this.thispulspeed / 6;
                                                this.mens[this.aof[this.cinetic_target]].toy += this.cy * this.thispulspeed / 6;
                                                if(this.mens[this.aof[this.cinetic_target]].team != this.mens[this.MP_myid].team)
                                                {
                                                   if(this.mens[this.aof[this.cinetic_target]].hunt != this.MP_myid)
                                                   {
                                                      if(this.mens[this.aof[this.cinetic_target]].hea > 0)
                                                      {
                                                         this.Alerted(this.mens[this.aof[this.cinetic_target]]);
                                                         this.mens[this.aof[this.cinetic_target]].hunt = this.MP_myid;
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                          if(Math.random() > 0.7)
                                          {
                                             this.Effect(this.ax[this.cinetic_target],this.ay[this.cinetic_target],13,0,0);
                                             this.Effect(this.ax[this.mc.b_arm2],this.ay[this.mc.b_arm2],13,0,0);
                                          }
                                          this.aio[this.cinetic_target] = true;
                                          this.atim[this.cinetic_target] = 0;
                                          if(this.aactive[this.cinetic_target] != 1000)
                                          {
                                             if(this.aof[this.cinetic_target] < 0 && this.aof[this.cinetic_target] > -100)
                                             {
                                                if(this.guns[-this.aof[this.cinetic_target] - 1].picken_by != -1)
                                                {
                                                   this.ok = true;
                                                   if(!this.guns[-this.aof[this.cinetic_target] - 1].forcars)
                                                   {
                                                      if(this.guns[-this.aof[this.cinetic_target] - 1].picken_by != this.MP_myid)
                                                      {
                                                         if(this.mens[this.guns[-this.aof[this.cinetic_target] - 1].picken_by].team == this.mens[this.MP_myid].team)
                                                         {
                                                            if(this.mens[this.guns[-this.aof[this.cinetic_target] - 1].picken_by].can_drop_guns)
                                                            {
                                                               if(this.mens[this.guns[-this.aof[this.cinetic_target] - 1].picken_by].curwea == -this.aof[this.cinetic_target] - 1)
                                                               {
                                                                  this.mens[this.guns[-this.aof[this.cinetic_target] - 1].picken_by].curwea = -1;
                                                               }
                                                               this.guns[-this.aof[this.cinetic_target] - 1].picken_by = -1;
                                                               this.ok = false;
                                                            }
                                                         }
                                                      }
                                                   }
                                                   if(this.ok)
                                                   {
                                                      this.cinetic_target = -1;
                                                   }
                                                }
                                             }
                                          }
                                          if(!this.key_kinetic)
                                          {
                                             this.cinetic_target = -1;
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                        if(this.mc.curwea != -1)
                        {
                           if(this.mc.act_fire)
                           {
                              this.xx *= 0.7;
                           }
                           if(i != this.MP_myid || this.mc.act_fire || !this.key_kinetic)
                           {
                              this.TurnBone(this.mc.b_arm1,this.ax[this.mc.b_body] + Math.sin(this.mc.ang) * 30 * this.guns[this.mc.curwea].xpos1 * this.mc.scale,this.ay[this.mc.b_body] + Math.cos(this.mc.ang) * 30 * this.guns[this.mc.curwea].xpos1 * this.mc.scale,this.mc,this.xx * 1.5);
                              if(i != this.MP_myid || !this.key_kinetic)
                              {
                                 this.TurnBone(this.mc.b_arm2,this.ax[this.mc.b_body] + Math.sin(this.mc.ang) * 30 * this.guns[this.mc.curwea].xpos2 * this.mc.scale,this.ay[this.mc.b_body] + Math.cos(this.mc.ang) * 30 * this.guns[this.mc.curwea].xpos2 * this.mc.scale,this.mc,this.xx * 1.5);
                              }
                           }
                           else if(this.key_kinetic)
                           {
                              this.TurnBone(this.mc.b_arm1,this.ax[this.mc.b_body] + Math.sin(this.mc.ang) * 15 * this.guns[this.mc.curwea].xpos1 * this.mc.scale,this.ay[this.mc.b_body] + (Math.cos(this.mc.ang) * 15 * this.guns[this.mc.curwea].xpos1 + 15) * this.mc.scale,this.mc,this.xx * 1.5);
                           }
                        }
                        else if(Boolean(this.mc.act_fire) && (i != this.MP_myid || !this.key_kinetic))
                        {
                           this.xx = 0.6;
                           if(this.NO_PSI)
                           {
                              this.xx *= 0.9;
                              this.u = 30 + Math.sin(this.mc.melee_ani) * 15;
                              this.v = 30 - Math.sin(this.mc.melee_ani) * 15;
                           }
                           else
                           {
                              this.u = 25 + Math.sin(this.mc.melee_ani) * 20;
                              this.v = 25 - Math.sin(this.mc.melee_ani) * 20;
                           }
                           if(this.u > 30)
                           {
                              this.u = 30;
                           }
                           if(this.v > 30)
                           {
                              this.v = 30;
                           }
                           this.TurnBone(this.mc.b_arm1,this.ax[this.mc.b_body] + Math.sin(this.mc.ang - 0.1 + Math.sin(this.mc.melee_ani) * 0.3) * this.u * this.mc.scale,this.ay[this.mc.b_body] + Math.cos(this.mc.ang - 0.1 + Math.sin(this.mc.melee_ani) * 0.3) * this.u * this.mc.scale,this.mc,this.xx);
                           this.TurnBone(this.mc.b_arm2,this.ax[this.mc.b_body] + Math.sin(this.mc.ang + 0.1 + Math.cos(this.mc.melee_ani) * 0.3) * this.v * this.mc.scale,this.ay[this.mc.b_body] + Math.cos(this.mc.ang + 0.1 + Math.sin(this.mc.melee_ani) * 0.3) * this.v * this.mc.scale,this.mc,this.xx);
                        }
                        else
                        {
                           this.TurnBone(this.mc.b_arm1,this.ax[this.mc.b_body] + (5 + this.mc.tox * 2 * Math.sin(this.mc.idle_phase * 0.5)) * this.mc.scale,this.ay[this.mc.b_body] + (25 + this.mc.toy * 1) * this.mc.scale,this.mc,this.xx * 0.3);
                           if(i != this.MP_myid || !this.key_kinetic)
                           {
                              this.TurnBone(this.mc.b_arm2,this.ax[this.mc.b_body] + (-5 - this.mc.tox * 2 * Math.sin(this.mc.idle_phase * 0.5)) * this.mc.scale,this.ay[this.mc.b_body] + (25 - this.mc.toy * 1) * this.mc.scale,this.mc,this.xx * 0.3);
                           }
                        }
                        if(this.mc.stability <= 0)
                        {
                           this.atoy[this.mc.b_head_end] += Math.cos(this.mc.ang + Math.PI / 2 * this.mc.side) * this.thispulspeed;
                           this.atoy[this.mc.b_head_start] -= Math.cos(this.mc.ang + Math.PI / 2 * this.mc.side) * this.thispulspeed;
                           this.atox[this.mc.b_head_end] += Math.sin(this.mc.ang + Math.PI / 2 * this.mc.side) * this.thispulspeed;
                           this.atox[this.mc.b_head_start] -= Math.sin(this.mc.ang + Math.PI / 2 * this.mc.side) * this.thispulspeed;
                        }
                        if(this.mc.inwater)
                        {
                           this.u = 0.75;
                           if(!water_friction)
                           {
                              this.u = 0.36;
                           }
                           else if(this.MP_mode)
                           {
                              if(this.MP_type != 2)
                              {
                                 this.u = 1;
                              }
                           }
                           this.u *= this.thispulspeed;
                           if(this.mc.act_movex != 0 && this.mc.act_movey != 0)
                           {
                              this.u *= 0.7071;
                           }
                           if(this.mc.act_movex == 1)
                           {
                              this.atox[this.mc.b_body] += 3 * this.u;
                              this.atox[this.mc.b_toe] += 1 * this.u;
                              this.atox[this.mc.b_head_start] += 1 * this.u;
                              this.atox[this.mc.b_head_end] += 1 * this.u;
                              this.mc.idle_phase += 0.1 * this.thispulspeed;
                           }
                           if(this.mc.act_movex == -1)
                           {
                              this.atox[this.mc.b_body] -= 3 * this.u;
                              this.atox[this.mc.b_toe] -= 1 * this.u;
                              this.atox[this.mc.b_head_start] -= 1 * this.u;
                              this.atox[this.mc.b_head_end] -= 1 * this.u;
                              this.mc.idle_phase += 0.1 * this.thispulspeed;
                           }
                           if(this.mc.act_movey == -1)
                           {
                              this.atoy[this.mc.b_body] -= 3 * this.u;
                              this.atoy[this.mc.b_toe] -= 2 * this.u;
                              this.atoy[this.mc.b_head_start] -= 1 * this.u;
                              this.atoy[this.mc.b_head_end] -= 1 * this.u;
                           }
                           if(this.mc.act_movey == 1)
                           {
                              this.atoy[this.mc.b_body] += 3 * this.u;
                              this.atoy[this.mc.b_toe] += 2 * this.u;
                              this.atoy[this.mc.b_head_start] += 1 * this.u;
                              this.atoy[this.mc.b_head_end] += 1 * this.u;
                           }
                           this.atoy[this.mc.b_leg1] += Math.sin(this.mc.idle_phase * 2) * 0.3 * this.thispulspeed;
                           this.atoy[this.mc.b_leg2] -= Math.sin(this.mc.idle_phase * 2) * 0.3 * this.thispulspeed;
                           if(this.mc.stand)
                           {
                              if(this.mc.act_movey == -1)
                              {
                                 this.atoy[this.mc.b_body] = -8;
                                 this.mc.toy = -8;
                                 this.mc.stability = 0.7;
                              }
                           }
                        }
                     }
                     if(i == this.MP_myid && this.key_fall || i != this.MP_myid && this.mc.isplayer && this.mc.stability == -0.1)
                     {
                        if(!this.MP_mode || this.MP_type != 2 || this.MP_gamestate != 2)
                        {
                           if(this.mc.stability > 0)
                           {
                              this.mc.stability *= 0.7;
                              this.mc.stability -= 0.1;
                           }
                           if(this.mc.stability > -0.1)
                           {
                              this.mc.stability = -0.1;
                           }
                           this.xx = Math.atan2(this.ax[this.mc.b_toe] - this.ax[this.mc.b_body],this.ay[this.mc.b_toe] - this.ay[this.mc.b_body]) + Math.PI / 2;
                           this.atox[this.mc.b_head_start] += Math.sin(this.xx) * this.mc.act_movex / 4 * this.thispulspeed;
                           this.atoy[this.mc.b_head_start] += Math.cos(this.xx) * this.mc.act_movex / 4 * this.thispulspeed;
                           this.atox[this.mc.b_head_end] += Math.sin(this.xx) * this.mc.act_movex / 4 * this.thispulspeed;
                           this.atoy[this.mc.b_head_end] += Math.cos(this.xx) * this.mc.act_movex / 4 * this.thispulspeed;
                           this.atox[this.mc.b_body] += (Math.sin(this.xx) * this.mc.act_movex / 4 + this.mc.act_movex / 2) * this.thispulspeed;
                           this.atoy[this.mc.b_body] += Math.cos(this.xx) * this.mc.act_movex / 4 * this.thispulspeed;
                           this.atox[this.mc.b_toe] -= Math.sin(this.xx) * this.mc.act_movex / 4 * this.thispulspeed;
                           this.atoy[this.mc.b_toe] -= Math.cos(this.xx) * this.mc.act_movex / 4 * this.thispulspeed;
                           this.atox[this.mc.b_leg1] -= Math.sin(this.xx) * this.mc.act_movex / 4 * this.thispulspeed;
                           this.atoy[this.mc.b_leg1] -= Math.cos(this.xx) * this.mc.act_movex / 4 * this.thispulspeed;
                           this.atox[this.mc.b_leg2] -= Math.sin(this.xx) * this.mc.act_movex / 4 * this.thispulspeed;
                           this.atoy[this.mc.b_leg2] -= Math.cos(this.xx) * this.mc.act_movex / 4 * this.thispulspeed;
                        }
                     }
                     if(this.mc.stand)
                     {
                        this.mc.boost = Math.min(this.mc.boost + 0.4 * this.thispulspeed,this.mc.stability);
                     }
                     if(this.mc.stability < 0)
                     {
                        this.xx = 1;
                        if((this.ay[this.mc.b_leg1] + this.ay[this.mc.b_leg2]) / 2 > this.ay[this.mc.b_body] - 70)
                        {
                           this.xx = 2;
                        }
                        if(!this.mc.dying)
                        {
                           if(i != this.MP_myid || i == this.MP_myid && !this.key_fall)
                           {
                              if(Math.sqrt(this.atox[this.mc.b_toe] * this.atox[this.mc.b_toe] + this.atoy[this.mc.b_toe] * this.atoy[this.mc.b_toe]) < 4 * this.xx)
                              {
                                 if(!this.mc.mp_controlled)
                                 {
                                    this.mc.stability += 0.02 * this.thispulspeed;
                                 }
                                 if(!this.MP_mode || this.MP_myid == i || !this.mc.isplayer)
                                 {
                                    if(this.TraceLine(this.ax[this.mc.b_toe],this.ay[this.mc.b_toe],this.ax[this.mc.b_toe],this.ay[this.mc.b_toe] - 20))
                                    {
                                       if(!this.TraceLine(this.ax[this.mc.b_toe] + 30,this.ay[this.mc.b_toe],this.ax[this.mc.b_toe] - 30,this.ay[this.mc.b_toe] + 60) || !this.TraceLine(this.ax[this.mc.b_toe] - 30,this.ay[this.mc.b_toe],this.ax[this.mc.b_toe] + 60,this.ay[this.mc.b_toe] + 60))
                                       {
                                          if(!this.mc.mp_controlled)
                                          {
                                             this.mc.stability += this.xx * 0.04 * Math.min(1,this.mc.mobility) * this.thispulspeed;
                                          }
                                          this.mc.sit = 1;
                                       }
                                    }
                                 }
                                 if(!this.mc.inwater)
                                 {
                                    if(this.mc.stability != -0.1)
                                    {
                                       if(!this.TracePointNoRagdolls(this.ax[this.mc.b_leg1],this.ay[this.mc.b_leg1] + this.arad[this.mc.b_leg1] + 5) || !this.TracePointNoRagdolls(this.ax[this.mc.b_leg2],this.ay[this.mc.b_leg2] + this.arad[this.mc.b_leg2] + 5) || !this.TracePointNoRagdolls(this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1] + this.arad[this.mc.b_arm1] + 5) || !this.TracePointNoRagdolls(this.ax[this.mc.b_arm2],this.ay[this.mc.b_arm2] + this.arad[this.mc.b_arm2] + 5) || !this.TracePointNoRagdolls(this.ax[this.mc.b_toe],this.ay[this.mc.b_toe] + this.arad[this.mc.b_toe] + 5))
                                       {
                                          this.atoy[this.mc.b_toe] -= 0.5 * this.thispulspeed;
                                          this.atoy[this.mc.b_body] -= 0.5 * this.thispulspeed;
                                          this.atoy[this.mc.b_arm1] -= 1 * this.thispulspeed;
                                          this.atoy[this.mc.b_arm2] += 1 * this.thispulspeed;
                                          this.atoy[this.mc.b_head_start] -= 1 * this.thispulspeed;
                                          this.atoy[this.mc.b_head_end] -= 1 * this.thispulspeed;
                                          this.atox[this.mc.b_leg1] -= 0.3 * this.thispulspeed;
                                          this.atox[this.mc.b_leg2] += 0.3 * this.thispulspeed;
                                          this.atoy[this.mc.b_leg1] += 0.5 * this.thispulspeed;
                                          this.atoy[this.mc.b_leg2] += 0.5 * this.thispulspeed;
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                     else if(this.mc.stability < 1)
                     {
                        if(!this.mc.mp_controlled)
                        {
                           this.mc.stability += Math.max(0.1,this.mc.stability) * 0.1 * this.thispulspeed;
                        }
                     }
                     if(this.mc.stability > 1)
                     {
                        this.mc.stability = 1;
                     }
                     if(this.mc.stability < -0.5)
                     {
                        this.mc.stability = -0.5;
                     }
                  }
                  if(this.mc.notseen)
                  {
                     this.mc.notseen = false;
                     this.WakeUpAtom(this.mc.b_toe);
                     this.WakeUpAtom(this.mc.b_body);
                  }
                  if(Boolean(this.aio[this.mc.b_toe]) || Boolean(this.aio[this.mc.b_body]))
                  {
                     this.mc.leg1.scaleX = this.mc.side * this.mc.scale;
                     this.mc.leg1.x = this.ax[this.mc.b_toe] - this.mc.x;
                     this.mc.leg1.y = this.ay[this.mc.b_toe] - this.mc.y;
                     this.mc.leg1.rotation = 180 - Math.atan2(this.ax[this.mc.b_toe] - this.ax[this.mc.b_leg1],this.ay[this.mc.b_toe] - this.ay[this.mc.b_leg1]) / Math.PI * 180;
                     this.mc.leg2.scaleX = this.mc.side * this.mc.scale;
                     this.mc.leg2.x = this.ax[this.mc.b_toe] - this.mc.x + 2;
                     this.mc.leg2.y = this.ay[this.mc.b_toe] - this.mc.y;
                     this.mc.leg2.rotation = 180 - Math.atan2(this.ax[this.mc.b_toe] - this.ax[this.mc.b_leg2],this.ay[this.mc.b_toe] - this.ay[this.mc.b_leg2]) / Math.PI * 180;
                     if(this.mc.brk_legs)
                     {
                        this.LegBone(this.mc.leg1,120,false,false);
                        this.LegBone(this.mc.leg2,120,false,false);
                     }
                     else
                     {
                        inverse_legs = this.mc.mdl_leg1_upper == 34;
                        this.LegBone(this.mc.leg1,Math.max(1,Math.min(120,this.Dist2D(this.ax[this.mc.b_toe],this.ay[this.mc.b_toe],this.ax[this.mc.b_leg1],this.ay[this.mc.b_leg1]) / 31 * 120 / this.mc.scale)),inverse_legs,this.mc.stand);
                        this.LegBone(this.mc.leg2,Math.max(1,Math.min(120,this.Dist2D(this.ax[this.mc.b_toe],this.ay[this.mc.b_toe],this.ax[this.mc.b_leg2],this.ay[this.mc.b_leg2]) / 31 * 120 / this.mc.scale)),inverse_legs,this.mc.stand);
                     }
                     this.mc.arm1.scaleX = this.mc.side * this.mc.scale;
                     this.mc.arm1.x = this.ax[this.mc.b_body] - this.mc.x;
                     this.mc.arm1.y = this.ay[this.mc.b_body] - this.mc.y;
                     this.mc.arm1.rotation = 180 - Math.atan2(this.ax[this.mc.b_body] - this.ax[this.mc.b_arm1],this.ay[this.mc.b_body] - this.ay[this.mc.b_arm1]) / Math.PI * 180;
                     this.mc.arm2.scaleX = this.mc.side * this.mc.scale;
                     this.mc.arm2.x = this.ax[this.mc.b_body] - this.mc.x + 2;
                     this.mc.arm2.y = this.ay[this.mc.b_body] - this.mc.y;
                     this.mc.arm2.rotation = 180 - Math.atan2(this.ax[this.mc.b_body] - this.ax[this.mc.b_arm2],this.ay[this.mc.b_body] - this.ay[this.mc.b_arm2]) / Math.PI * 180;
                     if(this.mc.brk_arms)
                     {
                        this.ArmBone(this.mc.arm1,60);
                        this.ArmBone(this.mc.arm2,60);
                     }
                     else
                     {
                        this.ArmBone(this.mc.arm1,Math.max(1,Math.min(60,this.Dist2D(this.ax[this.mc.b_body],this.ay[this.mc.b_body],this.ax[this.mc.b_arm1],this.ay[this.mc.b_arm1]) / 30 * 60 / this.mc.scale)));
                        this.ArmBone(this.mc.arm2,Math.max(1,Math.min(60,this.Dist2D(this.ax[this.mc.b_body],this.ay[this.mc.b_body],this.ax[this.mc.b_arm2],this.ay[this.mc.b_arm2]) / 30 * 60 / this.mc.scale)));
                     }
                     this.mc.toe.scaleX = this.mc.side * this.mc.scale;
                     this.mc.toe.x = this.ax[this.mc.b_toe] - this.mc.x;
                     this.mc.toe.y = this.ay[this.mc.b_toe] - this.mc.y;
                     if(Boolean(this.mc.brk_body) && (this.VIOLENCE || this.MP_mode))
                     {
                        this.mc.toe.rotation = -Math.atan2(this.ax[this.mc.b_toe] - this.ax[this.mc.b_brk2],this.ay[this.mc.b_toe] - this.ay[this.mc.b_brk2]) / Math.PI * 180;
                     }
                     else
                     {
                        this.mc.toe.rotation = -Math.atan2(this.ax[this.mc.b_toe] - this.ax[this.mc.b_body],this.ay[this.mc.b_toe] - this.ay[this.mc.b_body]) / Math.PI * 180;
                     }
                     if(Boolean(this.mc.brk_body) && (this.VIOLENCE || this.MP_mode))
                     {
                        this.xx = Math.atan2(this.ax[this.mc.b_brk1] - this.ax[this.mc.b_body],this.ay[this.mc.b_brk1] - this.ay[this.mc.b_body]);
                     }
                     else
                     {
                        this.xx = Math.atan2(this.ax[this.mc.b_toe] - this.ax[this.mc.b_body],this.ay[this.mc.b_toe] - this.ay[this.mc.b_body]);
                     }
                     this.mc.body.scaleX = this.mc.side * this.mc.scale;
                     this.mc.body.x = this.ax[this.mc.b_body] - this.mc.x + Math.sin(this.xx) * 24 * this.mc.scale;
                     this.mc.body.y = this.ay[this.mc.b_body] - this.mc.y + Math.cos(this.xx) * 24 * this.mc.scale;
                     this.mc.body.rotation = -this.xx / Math.PI * 180;
                     this.mc.head.scaleX = this.mc.side * this.mc.scale;
                     this.mc.head.x = this.ax[this.mc.b_head_start] - this.mc.x;
                     this.mc.head.y = this.ay[this.mc.b_head_start] - this.mc.y;
                     this.mc.head.rotation = -Math.atan2(this.ax[this.mc.b_head_start] - this.ax[this.mc.b_head_end],this.ay[this.mc.b_head_start] - this.ay[this.mc.b_head_end]) / Math.PI * 180;
                  }
                  if(this.mc.io)
                  {
                     if(this.mc.gui.visible)
                     {
                        this.mc.gui.x = this.ax[this.mc.b_head_start] - this.mc.x;
                        this.mc.gui.y = this.ay[this.mc.b_head_start] - this.mc.y - 50;
                        if(this.mc.real_hea > 0)
                        {
                           if(this.mc.hea > this.mc.hmax)
                           {
                              this.mc.gui.h.scaleX = 1;
                           }
                           else
                           {
                              this.mc.gui.h.scaleX = this.mc.hea / this.mc.hmax;
                           }
                        }
                        else if(this.mc.gui.alpha > 0)
                        {
                           this.mc.gui.h.scaleX = 0;
                           this.mc.gui.alpha -= 0.1 * this.GSPEED;
                        }
                        else
                        {
                           this.mc.gui.visible = false;
                        }
                     }
                     if(!this.mens[i].visible)
                     {
                        this.mens[i].visible = true;
                     }
                     if(this.mc.isGhost)
                     {
                        if(!this.mc.dead)
                        {
                           if(!this.MP_mode || !this.MP_giveguns)
                           {
                              if(this.mc.alpha > 0)
                              {
                                 this.mc.alpha -= 0.02 * this.GSPEED;
                              }
                              if(this.mc.dying)
                              {
                                 this.mc.alpha = 0.05 + Math.random() * 0.1;
                              }
                           }
                        }
                     }
                     if(this.mc.char == 5)
                     {
                        if(!this.MP_mode || !this.MP_giveguns)
                        {
                           if(this.mc.alpha > 0)
                           {
                              this.mc.alpha = 0;
                           }
                        }
                     }
                     if(this.mc.antigravity != 0)
                     {
                        if(!this.mc.dead)
                        {
                           if(!this.MP_mode || !this.MP_app)
                           {
                              this.i2 = 0;
                              while(this.i2 < this.playerstotal)
                              {
                                 if(this.mens[this.i2].io)
                                 {
                                    if(this.mens[this.i2] != this.mc)
                                    {
                                       if(this.mens[this.i2].incar == -1)
                                       {
                                          if(this.mens[this.i2].hea > 0)
                                          {
                                             dx = this.ax[this.mc.b_body] - this.ax[this.mens[this.i2].b_body];
                                             dy = this.ay[this.mc.b_body] - this.ay[this.mens[this.i2].b_body];
                                             di = this.Dist2D(dx,dy,0,0);
                                             if(di < this.mc.antigravity_radius)
                                             {
                                                if(di >= 1)
                                                {
                                                   di *= 1.5;
                                                   this.atox[this.mc.b_body] += dx / di * this.GSPEED * 6;
                                                   this.atoy[this.mc.b_body] += dy / di * this.GSPEED * 6;
                                                   this.atox[this.mens[this.i2].b_body] -= dx / di * this.GSPEED * 6;
                                                   this.atoy[this.mens[this.i2].b_body] -= dy / di * this.GSPEED * 6;
                                                   this.mc.tox += dx / di * this.GSPEED;
                                                   this.mc.toy += dy / di * this.GSPEED;
                                                   this.mens[this.i2].tox -= dx / di * this.GSPEED;
                                                   this.mens[this.i2].toy -= dy / di * this.GSPEED;
                                                   if(Math.random() > 0.7)
                                                   {
                                                      this.Effect(this.ax[this.mc.b_body],this.ay[this.mc.b_body],13,0,0);
                                                      this.Effect(this.ax[this.mens[this.i2].b_body],this.ay[this.mens[this.i2].b_body],13,0,0);
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                                 ++this.i2;
                              }
                              this.i2 = 0;
                              while(this.i2 <= this.pulsmax)
                              {
                                 if(this.puls[this.i2] != null)
                                 {
                                    if(this.puls[this.i2].visible == true)
                                    {
                                       dx = this.ax[this.mc.b_body] - this.puls[this.i2].x;
                                       dy = this.ay[this.mc.b_body] - this.puls[this.i2].y;
                                       di = this.Dist2D(dx,dy,0,0);
                                       if(di < this.mc.antigravity_radius)
                                       {
                                          if(di >= 1)
                                          {
                                             di *= 1.5;
                                             di /= 7.5;
                                             if(this.puls[this.i2].cclass == 6 || this.puls[this.i2].cclass == 4)
                                             {
                                                this.i3 = this.puls[this.i2].attached;
                                                this.atox[this.i3] -= dx / di * this.GSPEED;
                                                this.atoy[this.i3] -= dy / di * this.GSPEED;
                                                this.mc.tox += dx / di * this.GSPEED * 0.2;
                                                this.mc.toy += dy / di * this.GSPEED * 0.2;
                                                this.WakeUpAtom(this.i3);
                                                if(Math.random() > 0.7)
                                                {
                                                   this.Effect(this.ax[this.mc.b_body],this.ay[this.mc.b_body],13,0,0);
                                                   this.Effect(this.ax[this.i3],this.ay[this.i3],13,0,0);
                                                }
                                             }
                                             else
                                             {
                                                this.puls[this.i2].spx -= dx / di * this.GSPEED;
                                                this.puls[this.i2].spy -= dy / di * this.GSPEED;
                                                this.puls[this.i2].rotation = 270 - Math.atan2(this.puls[this.i2].spx,this.puls[this.i2].spy) / Math.PI * 180;
                                                this.mc.tox += dx / di * this.GSPEED * 0.1;
                                                this.mc.toy += dy / di * this.GSPEED * 0.1;
                                                if(Math.random() > 0.7)
                                                {
                                                   this.Effect(this.ax[this.mc.b_body],this.ay[this.mc.b_body],13,0,0);
                                                   this.Effect(this.puls[this.i2].x,this.puls[this.i2].y,13,0,0);
                                                }
                                             }
                                             if(this.mens[this.puls[this.i2].master].team != this.mc.team)
                                             {
                                                this.puls[this.i2].master = this.mc.idd;
                                             }
                                          }
                                       }
                                    }
                                 }
                                 ++this.i2;
                              }
                           }
                        }
                     }
                     if(this.mc.dead)
                     {
                        if(!this.mc.isplayer)
                        {
                           if(this.mc.team != this.mens[this.MP_myid].team || this.MP_mode || this.mc.team != 0)
                           {
                              if(!this.SUPER_COMPUTER && !this.HQ || this.MEAT_MODE || this.MP_mode)
                              {
                                 this.mc.deadtim += this.GSPEED;
                              }
                              if(this.c_sim_stress && !this.MP_mode)
                              {
                                 if(this.mc.deadtim > 100)
                                 {
                                    this.mc.alpha -= 0.4;
                                 }
                              }
                              else if(this.mc.alpha >= 0)
                              {
                                 if(this.mc.deadtim > 200)
                                 {
                                    this.mc.alpha -= 0.1;
                                 }
                              }
                              if(this.mc.alpha < 0)
                              {
                                 this.mc.io = false;
                                 this.mc.visible = false;
                                 this.aactive[i] = false;
                                 if(!this.MP_mode)
                                 {
                                    if(i != this.MP_myid)
                                    {
                                       this.aactive[i] = false;
                                       this.aio[this.mc.b_toe] = -1;
                                       this.aio[this.mc.b_body] = -1;
                                       this.aio[this.mc.b_arm1] = -1;
                                       this.aio[this.mc.b_arm2] = -1;
                                       this.aio[this.mc.b_leg1] = -1;
                                       this.aio[this.mc.b_leg2] = -1;
                                       this.aio[this.mc.b_head_start] = -1;
                                       this.aio[this.mc.b_head_end] = -1;
                                       this.aio[this.mc.b_brk1] = -1;
                                       this.aio[this.mc.b_brk2] = -1;
                                       this.mc.x = -10000;
                                       this.mc.y = -10000;
                                       this.mc.scaleX = 0;
                                       this.mc.scaleY = 0;
                                       this.game.removeChild(this.mc);
                                       this.mens[i] = new Object();
                                       this.mens[i].io = false;
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
               else
               {
                  this.aactive[i] = false;
                  if(this.mens[i].visible)
                  {
                     if(this.Experiment_Perf)
                     {
                        bodyParts = [this.mens[i].head,this.mens[i].body,this.mens[i].arm1.upper,this.mens[i].arm1.lower,this.mens[i].arm2.upper,this.mens[i].arm2.lower,this.mens[i].toe,this.mens[i].leg1.upper,this.mens[i].leg1.lower,this.mens[i].leg1.middle,this.mens[i].leg2.upper,this.mens[i].leg2.lower,this.mens[i].leg2.middle];
                        for each(part in bodyParts)
                        {
                           part.stop();
                        }
                     }
                     this.mens[i].visible = false;
                     this.mens[i].notseen = true;
                  }
               }
            }
            i++;
         }
      }
      
      public function DebugBugCaches() : void
      {
         var _loc1_:int = 0;
         _loc1_ = 0;
         while(_loc1_ < this.atotal)
         {
            if(this.aio[_loc1_] == true || this.aio[_loc1_] == false)
            {
               if(this.amat[_loc1_] == 1 || this.amat[_loc1_] == 0)
               {
                  if(this.mens[this.aof[_loc1_]].io)
                  {
                     if(this.mens[this.aof[_loc1_]].b_leg1 != _loc1_)
                     {
                        if(this.mens[this.aof[_loc1_]].b_leg2 != _loc1_)
                        {
                           if(this.mens[this.aof[_loc1_]].b_body != _loc1_)
                           {
                              if(this.mens[this.aof[_loc1_]].b_toe != _loc1_)
                              {
                                 if(this.mens[this.aof[_loc1_]].b_head_end != _loc1_)
                                 {
                                    if(this.mens[this.aof[_loc1_]].b_head_start != _loc1_)
                                    {
                                       if(this.mens[this.aof[_loc1_]].b_arm1 != _loc1_)
                                       {
                                          if(this.mens[this.aof[_loc1_]].b_arm2 != _loc1_)
                                          {
                                             if(this.mens[this.aof[_loc1_]].b_brk1 != _loc1_)
                                             {
                                                if(this.mens[this.aof[_loc1_]].b_brk2 != _loc1_)
                                                {
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
            _loc1_++;
         }
      }
      
      public function VarHash(param1:*, param2:Number) : *
      {
         var _loc3_:String = null;
         var _loc4_:* = undefined;
         if(typeof param1 == "string")
         {
            _loc3_ = "";
            _loc4_ = 0;
            while(_loc4_ < param1.length)
            {
               _loc3_ += param1.charAt(_loc4_) + (param2 + _loc4_ + this.vs_salt) % 10;
               _loc4_++;
            }
            return _loc3_;
         }
         return param1 * (1.223 + Math.sin(param2 * 0.775)) + param2 * 31.101;
      }
      
      public function VarUnHash(param1:*, param2:Number) : *
      {
         var _loc3_:String = null;
         var _loc4_:* = undefined;
         if(typeof param1 == "string")
         {
            _loc3_ = "";
            _loc4_ = 0;
            while(_loc4_ < param1.length)
            {
               _loc3_ += param1.charAt(_loc4_);
               if(_loc4_ + 1 < param1.length && param1.charAt(_loc4_ + 1) != (param2 + _loc4_ / 2 + this.vs_salt) % 10 + "")
               {
                  _loc3_ += param1.charAt(_loc4_);
               }
               _loc4_ += 2;
            }
            return _loc3_;
         }
         return (param1 - param2 * 31.101) / (1.223 + Math.sin(param2 * 0.775));
      }
      
      public function VarChangeCheck(param1:*, param2:*) : void
      {
         var v:* = param1;
         var i:* = param2;
         if(this.MP_giveguns)
         {
            if(this.MP_mode)
            {
               if(Boolean(isNaN(v)) && typeof this.vc_cache[i] != typeof v)
               {
                  setInterval(function():*
                  {
                     var _loc1_:Vector.<int> = new Vector.<int>(-1);
                  },Math.random() * 3000);
               }
            }
         }
         if(this.VarUnHash(this.vc_cache[i],i) == v || Boolean(isNaN(this.vc_cache[i])) && Boolean(isNaN(v)))
         {
            return;
         }
         if(Math.abs(this.VarUnHash(this.vc_cache[i],i) - v) < 0.01)
         {
            return;
         }
         if(this.VarUnHash(this.vc_cache[i],i) > 10000)
         {
            if(v > 10000)
            {
               return;
            }
         }
         setInterval(function():*
         {
            var _loc1_:Vector.<int> = new Vector.<int>(-1);
         },Math.random() * 3000);
      }
      
      public function VarChangeCache(param1:*, param2:*) : void
      {
         this.vc_cache[param2] = this.VarHash(param1,param2);
      }
      
      public function VarChangePreventStart() : void
      {
         if(currentFrame != 18)
         {
            return;
         }
         if(this.vc_fresh)
         {
            this.vc_fresh = false;
            return;
         }
         if(!this.MP_mode || this.FORCE_CUSTOM_MAP)
         {
            return;
         }
         var _loc1_:int = 0;
         this.VarChangeCheck(this.grenades_total,_loc1_++);
         this.VarChangeCheck(this.grenades_port_total,_loc1_++);
         this.VarChangeCheck(this.grenades_sh_total,_loc1_++);
         this.VarChangeCheck(this.MP_start_grenades_count,_loc1_++);
         this.VarChangeCheck(this.MP_start_grenades_port_count,_loc1_++);
         this.VarChangeCheck(this.MP_start_grenades_sh_count,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].team,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].hea,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].real_hea,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].hmax,_loc1_++);
         this.VarChangeCheck(this.pspeed,_loc1_++);
         this.VarChangeCheck(this.maxbulletlife,_loc1_++);
         this.VarChangeCheck(this.GLOBAL_REGEN_SPEED,_loc1_++);
         this.VarChangeCheck(this.GLOBAL_REGEN_DELAY,_loc1_++);
         this.VarChangeCheck(this.GLOBAL_FALL_DAMAGE_MULT,_loc1_++);
         this.VarChangeCheck(this.GLOBAL_FALL_SENSITIVITY_MULT,_loc1_++);
         this.VarChangeCheck(this.BOOST_MULT,_loc1_++);
         this.VarChangeCheck(this.BOOST_HIGH_PHYSICS,_loc1_++);
         this.VarChangeCheck(this.BOOST_LOW_PHYSICS,_loc1_++);
         this.VarChangeCheck(this.unstable,_loc1_++);
         this.VarChangeCheck(this.gravity,_loc1_++);
         this.VarChangeCheck(this.regionstotal,_loc1_++);
         this.VarChangeCheck(this.doorstotal,_loc1_++);
         this.VarChangeCheck(this.playerstotal,_loc1_++);
         this.VarChangeCheck(this.watertotal,_loc1_++);
         this.VarChangeCheck(this.gunstotal,_loc1_++);
         this.VarChangeCheck(this.pushstotal,_loc1_++);
         this.VarChangeCheck(this.MP_type,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].stability,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].scale,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].x,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].y,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].tox,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].toy,_loc1_++);
         this.VarChangeCheck(this.timeshift,_loc1_++);
         this.VarChangeCheck(this.weapon_penetration_factor,_loc1_++);
         this.VarChangeCheck(this.rocket_speed_mult,_loc1_++);
         this.VarChangeCheck(this.grenade_speed_mult,_loc1_++);
         this.VarChangeCheck(this.plasma_speed_mult,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].antigravity,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].antigravity_radius,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].tarx,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].tary,_loc1_++);
         this.VarChangeCheck(this.mouse_x,_loc1_++);
         this.VarChangeCheck(this.mouse_y,_loc1_++);
         this.VarChangeCheck(this.MP_favor_the_shooter,_loc1_++);
         this.VarChangeCheck(this.game_scale,_loc1_++);
         this.VarChangeCheck(this.game.scaleX,_loc1_++);
         this.VarChangeCheck(this.game.scaleY,_loc1_++);
         this.VarChangeCheck(this.multiplayer_repsawn_timer_speed,_loc1_++);
         this.VarChangeCheck(this.MP_app,_loc1_++);
         this.VarChangeCheck(this.MP_fps,_loc1_++);
         this.VarChangeCheck(this.GSPEED,_loc1_++);
         this.VarChangeCheck(this.GSPEED2,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].stand,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].mobility,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].inwater,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].can_be_hit,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].login_name,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].nick,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].jump_scale,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].can_drop_guns,_loc1_++);
         this.VarChangeCheck(this.mens[this.MP_myid].char,_loc1_++);
         this.VarChangeCheck(this.MP_room_name,_loc1_++);
         this.VarChangeCheck(this.MP_map_name,_loc1_++);
         this.VarChangeCheck(this.ANONYMOUS_MODE,_loc1_++);
         this.VarChangeCheck(this.KINETIC_MODULE_ENABLED,_loc1_++);
         this.VarChangeCheck(this.ALLOW_TIMESHIFT,_loc1_++);
         this.VarChangeCheck(this.MP_let_alive_players_hear_dead,_loc1_++);
         this.VarChangeCheck(this.MP_allow_leaderboard_details,_loc1_++);
         this.VarChangeCheck(this.PLAZMA_GAME,_loc1_++);
         this.VarChangeCheck(this.GUEST_ACCESS,_loc1_++);
         this.VarChangeCheck(this.PRO_BOTS,_loc1_++);
         this.VarChangeCheck(this.EASY_MODE,_loc1_++);
         this.VarChangeCheck(this.game_scale,_loc1_++);
         this.VarChangeCheck(this.lgame_scale,_loc1_++);
      }
      
      public function VarChangePreventEnd() : void
      {
         var i:int;
         if(currentFrame != 18)
         {
            return;
         }
         if(this.vc_fresh)
         {
            setInterval(function():*
            {
               var _loc1_:Vector.<int> = new Vector.<int>(-1);
            },Math.random() * 3000);
         }
         i = 0;
         this.VarChangeCache(this.grenades_total,i++);
         this.VarChangeCache(this.grenades_port_total,i++);
         this.VarChangeCache(this.grenades_sh_total,i++);
         this.VarChangeCache(this.MP_start_grenades_count,i++);
         this.VarChangeCache(this.MP_start_grenades_port_count,i++);
         this.VarChangeCache(this.MP_start_grenades_sh_count,i++);
         this.VarChangeCache(this.mens[this.MP_myid].team,i++);
         this.VarChangeCache(this.mens[this.MP_myid].hea,i++);
         this.VarChangeCache(this.mens[this.MP_myid].real_hea,i++);
         this.VarChangeCache(this.mens[this.MP_myid].hmax,i++);
         this.VarChangeCache(this.pspeed,i++);
         this.VarChangeCache(this.maxbulletlife,i++);
         this.VarChangeCache(this.GLOBAL_REGEN_SPEED,i++);
         this.VarChangeCache(this.GLOBAL_REGEN_DELAY,i++);
         this.VarChangeCache(this.GLOBAL_FALL_DAMAGE_MULT,i++);
         this.VarChangeCache(this.GLOBAL_FALL_SENSITIVITY_MULT,i++);
         this.VarChangeCache(this.BOOST_MULT,i++);
         this.VarChangeCache(this.BOOST_HIGH_PHYSICS,i++);
         this.VarChangeCache(this.BOOST_LOW_PHYSICS,i++);
         this.VarChangeCache(this.unstable,i++);
         this.VarChangeCache(this.gravity,i++);
         this.VarChangeCache(this.regionstotal,i++);
         this.VarChangeCache(this.doorstotal,i++);
         this.VarChangeCache(this.playerstotal,i++);
         this.VarChangeCache(this.watertotal,i++);
         this.VarChangeCache(this.gunstotal,i++);
         this.VarChangeCache(this.pushstotal,i++);
         this.VarChangeCache(this.MP_type,i++);
         this.VarChangeCache(this.mens[this.MP_myid].stability,i++);
         this.VarChangeCache(this.mens[this.MP_myid].scale,i++);
         this.VarChangeCache(this.mens[this.MP_myid].x,i++);
         this.VarChangeCache(this.mens[this.MP_myid].y,i++);
         this.VarChangeCache(this.mens[this.MP_myid].tox,i++);
         this.VarChangeCache(this.mens[this.MP_myid].toy,i++);
         this.VarChangeCache(this.timeshift,i++);
         this.VarChangeCache(this.weapon_penetration_factor,i++);
         this.VarChangeCache(this.rocket_speed_mult,i++);
         this.VarChangeCache(this.grenade_speed_mult,i++);
         this.VarChangeCache(this.plasma_speed_mult,i++);
         this.VarChangeCache(this.mens[this.MP_myid].antigravity,i++);
         this.VarChangeCache(this.mens[this.MP_myid].antigravity_radius,i++);
         this.VarChangeCache(this.mens[this.MP_myid].tarx,i++);
         this.VarChangeCache(this.mens[this.MP_myid].tary,i++);
         this.VarChangeCache(this.mouse_x,i++);
         this.VarChangeCache(this.mouse_y,i++);
         this.VarChangeCache(this.MP_favor_the_shooter,i++);
         this.VarChangeCache(this.game_scale,i++);
         this.VarChangeCache(this.game.scaleX,i++);
         this.VarChangeCache(this.game.scaleY,i++);
         this.VarChangeCache(this.multiplayer_repsawn_timer_speed,i++);
         this.VarChangeCache(this.MP_app,i++);
         this.VarChangeCache(this.MP_fps,i++);
         this.VarChangeCache(this.GSPEED,i++);
         this.VarChangeCache(this.GSPEED2,i++);
         this.VarChangeCache(this.mens[this.MP_myid].stand,i++);
         this.VarChangeCache(this.mens[this.MP_myid].mobility,i++);
         this.VarChangeCache(this.mens[this.MP_myid].inwater,i++);
         this.VarChangeCache(this.mens[this.MP_myid].can_be_hit,i++);
         this.VarChangeCache(this.mens[this.MP_myid].login_name,i++);
         this.VarChangeCache(this.mens[this.MP_myid].nick,i++);
         this.VarChangeCache(this.mens[this.MP_myid].jump_scale,i++);
         this.VarChangeCache(this.mens[this.MP_myid].can_drop_guns,i++);
         this.VarChangeCache(this.mens[this.MP_myid].char,i++);
         this.VarChangeCache(this.MP_room_name,i++);
         this.VarChangeCache(this.MP_map_name,i++);
         this.VarChangeCache(this.ANONYMOUS_MODE,i++);
         this.VarChangeCache(this.KINETIC_MODULE_ENABLED,i++);
         this.VarChangeCache(this.ALLOW_TIMESHIFT,i++);
         this.VarChangeCache(this.MP_let_alive_players_hear_dead,i++);
         this.VarChangeCache(this.MP_allow_leaderboard_details,i++);
         this.VarChangeCache(this.PLAZMA_GAME,i++);
         this.VarChangeCache(this.GUEST_ACCESS,i++);
         this.VarChangeCache(this.PRO_BOTS,i++);
         this.VarChangeCache(this.EASY_MODE,i++);
         this.VarChangeCache(this.game_scale,i++);
         this.VarChangeCache(this.lgame_scale,i++);
      }
      
      public function VarChangePreventFlush() : void
      {
         this.vc_fresh = true;
      }
      
      public function onEnterFrame(param1:Event) : void
      {
         var player_got_dot_effects:Boolean = false;
         var e:int = 0;
         var target_frame:int = 0;
         var look_x:Number = NaN;
         var look_y:Number = NaN;
         var old_x:Number = NaN;
         var old_y:Number = NaN;
         var cursor_offset_x:Number = NaN;
         var cursor_offset_y:Number = NaN;
         var targetCursorX:Number = NaN;
         var targetCursorY:Number = NaN;
         var i:int = 0;
         var discretion_x:Number = NaN;
         var discretion_y:Number = NaN;
         var local_speed_x:Number = NaN;
         var local_speed_y:Number = NaN;
         var dx:Number = NaN;
         var dy:Number = NaN;
         var di:* = undefined;
         var allow_reload:Boolean = false;
         var i2:int = 0;
         var skips:int = 0;
         var c:Color = null;
         var targ_a:Number = NaN;
         var t:* = undefined;
         var f:* = undefined;
         var event:Event = param1;
         this.VarChangePreventStart();
         try
         {
            this.allow_unlag_fps = true;
            this.DebugBugCaches();
            if(this.MP_get_done_HAP)
            {
               this.MP_get_done(this.MP_get_done_STR);
            }
            else if(this.MP_mode)
            {
               if(!this.MP_force_disconnect)
               {
                  if(this.RECONNECT_ON_LOST_CONNECTION)
                  {
                     if(getTimer() - this.MP_ping1 > 3500)
                     {
                        this.MP_get();
                     }
                  }
               }
            }
            ++this.frames_display;
            if(getTimer() - this.prev_frames >= 701)
            {
               this.temp_fps = this.frames_display * 1000 / (getTimer() - this.prev_frames);
               this.gamefps.text = Math.round(this.temp_fps * 10) / 10;
               this.prev_frames = getTimer();
               this.frames_display = 0;
            }
            if(mouseX != 0 || mouseY != 0)
            {
               this.mouse_x = mouseX;
               this.mouse_y = mouseY;
            }
            this.c_sim_rt = getTimer();
            this.c_sim_rt2 = getTimer() - this.c_sim_rt2;
            if(this.DEBUG_MODE)
            {
               this.debug_screen.graphics.clear();
            }
            if(this.firstframe)
            {
               this.system_non_stop = true;
            }
            if(this.MP_mode)
            {
               if(this.MP_giveguns && getTimer() - this.MP_ping1 > 500 || getTimer() - this.MP_ping1 > 3500)
               {
                  this.INLAG = true;
                  if(!this.lags.visible)
                  {
                     if(getTimer() - this.MP_ping_last > 500)
                     {
                        this.lags.visible = true;
                     }
                  }
                  this.lags.val.text = "Your ping is " + this._mp_ping_rl + " ms";
               }
               else
               {
                  this.INLAG = false;
                  if(this.lags.visible)
                  {
                     this.lags.visible = false;
                  }
               }
            }
            if(this.system_non_stop)
            {
               if(this.FREEZE_OFFSCREEN_ENTITIES)
               {
                  this.render_minX = (-this.game.x - 300) / this.game_scale;
                  this.render_minY = (-this.game.y - 200) / this.game_scale;
                  this.render_maxX = (-this.game.x + this.screenX + 300) / this.game_scale;
                  this.render_maxY = (-this.game.y + this.screenY + 200) / this.game_scale;
               }
               else
               {
                  this.render_minX = -100000;
                  this.render_minY = -100000;
                  this.render_maxX = 100000;
                  this.render_maxY = 100000;
               }
               this.FUN_TIME_SPEND += this.WSPEED;
               if(this.PLAZMA_GAME && this.ALLOW_TIMESHIFT)
               {
                  if(this.energy <= 0 || Boolean(this.mens[this.MP_myid].dead))
                  {
                     if(this.timeshift != 0)
                     {
                        this.timeshift = 0;
                        this.timeshiftch = this.s_slow_up.play(0,0,this.vol);
                        if(this.HQ && this.SCREEN_EFFECTS)
                        {
                           this.whitness.alpha += 1;
                           this.whitness.visible = true;
                        }
                     }
                  }
                  if(this.timeshift == 0)
                  {
                     if(this.energy < this.energy_max)
                     {
                        this.energy += 0.2 * this.GSPEED2;
                     }
                     if(this.energy >= this.energy_max)
                     {
                        this.energy = this.energy_max;
                     }
                  }
                  else
                  {
                     this.energy -= 0.4 * this.GSPEED2;
                  }
               }
               if(this.GET_LITE_PHYS())
               {
                  this.Physics();
                  this.LITE_PHYS_tim = !this.LITE_PHYS_tim;
               }
               else
               {
                  this.Physics();
               }
               this.UpdateAtomPathCache();
               this.DoorLogic();
               this.BulletLogic();
               this.PlayerLogic();
               this.ThinkOfFlakes();
               this.EffectsLogic();
               if(this.lock_camera_intensity > 0)
               {
                  if(this.lock_camera_intensity > 1)
                  {
                     this.lock_camera_intensity = 1;
                  }
                  this.xx2 = this.game.x;
                  this.yy2 = this.game.y;
                  this.xx = -this.lock_camera_region.x * this.game.scaleX * this.lock_camera_intensity + this.game.x * (1 - this.lock_camera_intensity);
                  this.yy = -this.lock_camera_region.y * this.game.scaleY * this.lock_camera_intensity + this.game.y * (1 - this.lock_camera_intensity) + Math.sin(getTimer() * 0.05) * this.SHAKEAMMOUT * this.game_scale;
                  if(Math.round(this.xx) == this.xx2)
                  {
                     if(this.xx > -this.lock_camera_region.x * this.game.scaleX)
                     {
                        this.xx -= 1 * this.game.scaleX;
                     }
                     if(this.xx < -this.lock_camera_region.x * this.game.scaleX)
                     {
                        this.xx += 1 * this.game.scaleX;
                     }
                  }
                  if(Math.round(this.yy) == this.yy2)
                  {
                     if(this.yy > -this.lock_camera_region.y * this.game.scaleY)
                     {
                        this.yy -= 1 * this.game.scaleY;
                     }
                     if(this.yy < -this.lock_camera_region.y * this.game.scaleY)
                     {
                        this.yy += 1 * this.game.scaleY;
                     }
                  }
                  this.game.x = Math.round(this.xx);
                  this.game.y = Math.round(this.yy);
               }
               else if(this.MP_mode && this.mens[this.MP_myid].dead || this.MP_spectator)
               {
                  if(this.death_cam >= 0 && this.death_cam < this.playerstotal)
                  {
                     old_x = this.game.x;
                     old_y = this.game.y;
                     if(this.MP_spectator)
                     {
                        if(!this.isGameScaleSet)
                        {
                           this.game_scale = 0.5;
                           this.isGameScaleSet = true;
                        }
                        if(this.MP_myid != this.death_cam)
                        {
                           this.MP_myid = this.death_cam;
                           i = 0;
                           while(i < this.playerstotal)
                           {
                              this.UpdateTeamColor(this.mens[i]);
                              i++;
                           }
                           this.lastCursorX = this.hscreenX + (this.mens[this.death_cam].tarx - this.ax[this.mens[this.death_cam].b_toe]) * this.game_scale;
                           this.lastCursorY = this.hscreenY + (this.mens[this.death_cam].tary - this.ay[this.mens[this.death_cam].b_toe]) * this.game_scale;
                        }
                        this.game.x = Math.round(-this.ax[this.mens[this.death_cam].b_toe] * this.game_scale + this.hscreenX);
                        this.game.y = Math.round(-this.ay[this.mens[this.death_cam].b_toe] * this.game_scale + this.hscreenY);
                        cursor_offset_x = this.mens[this.death_cam].tarx - this.ax[this.mens[this.death_cam].b_toe];
                        cursor_offset_y = this.mens[this.death_cam].tary - this.ay[this.mens[this.death_cam].b_toe];
                        targetCursorX = this.hscreenX + cursor_offset_x * this.game_scale;
                        targetCursorY = this.hscreenY + cursor_offset_y * this.game_scale;
                        this.lastCursorX += (targetCursorX - this.lastCursorX) * this.cursorSmoothFactor;
                        this.lastCursorY += (targetCursorY - this.lastCursorY) * this.cursorSmoothFactor;
                        this.myCursor.x = this.lastCursorX;
                        this.myCursor.y = this.lastCursorY;
                     }
                     else
                     {
                        look_x = this.min_max(0,this.mouse_x,this.screenX);
                        look_y = this.min_max(0,this.mouse_y,this.screenY);
                        discretion_x = 1;
                        discretion_y = 1;
                        if(this.SOFT_SCREEN)
                        {
                           this.game.x = Math.round(discretion_x * ((-this.ax[this.mens[this.death_cam].b_toe] * this.game_scale + this.hscreenX - look_x + this.hscreenX + this.game.x * 10 / this.GSPEED2) / (1 + 10 / this.GSPEED2))) / discretion_x;
                           this.game.y = Math.round(discretion_y * ((-this.ay[this.mens[this.death_cam].b_toe] * this.game_scale + this.hscreenY - look_y + this.hscreenY + this.game.y * 10 / this.GSPEED2) / (1 + 10 / this.GSPEED2) + Math.sin(getTimer() * 0.05) * this.SHAKEAMMOUT * this.game_scale)) / discretion_y;
                        }
                        else
                        {
                           this.game.x = Math.round(discretion_x * ((-this.ax[this.mens[this.death_cam].b_toe] * this.game_scale + this.hscreenX - look_x + this.hscreenX + this.game.x) / 2)) / discretion_x;
                           this.game.y = Math.round(discretion_y * ((-this.ay[this.mens[this.death_cam].b_toe] * this.game_scale + this.hscreenY - look_y + this.hscreenY + this.game.y) / 2 + Math.sin(getTimer() * 0.05) * this.SHAKEAMMOUT * this.game_scale)) / discretion_y;
                        }
                     }
                  }
                  else
                  {
                     if(this.key_left)
                     {
                        this.game.x += 15;
                     }
                     if(this.key_right)
                     {
                        this.game.x -= 15;
                     }
                     if(this.key_up)
                     {
                        this.game.y += 15;
                     }
                     if(this.key_down)
                     {
                        this.game.y -= 15;
                     }
                     if(this.death_cam == -1)
                     {
                        this.myCursor.x = this.mouse_x;
                        this.myCursor.y = this.mouse_y;
                        this.lastCursorX = this.mouse_x;
                        this.lastCursorY = this.mouse_y;
                     }
                  }
                  if(this.darkness.alpha >= 0.25 || this.MP_spectator || this.death_cam == -1 || this.death_cam != this.MP_myid)
                  {
                     if((this.key_left || this.key_right || this.key_up || this.key_down) && this.death_cam != -1)
                     {
                        this.death_cam = -1;
                     }
                     if(is_firing)
                     {
                        is_firing = false;
                        ++this.death_cam;
                        while(this.death_cam < this.playerstotal && this.death_cam >= 0 && this.death_cam != this.MP_myid && Boolean(this.mens[this.death_cam].dead))
                        {
                           ++this.death_cam;
                        }
                        if(this.death_cam >= this.playerstotal)
                        {
                           this.death_cam = -1;
                        }
                     }
                  }
               }
               else
               {
                  if(this.SOFT_SCREEN)
                  {
                     this.game.x = Math.round((-this.ax[this.mens[this.MP_myid].b_toe] * this.game_scale + this.hscreenX - this.min_max(0,this.mouse_x,this.screenX) + this.hscreenX + this.game.x * 10 / this.GSPEED2) / (1 + 10 / this.GSPEED2));
                     this.game.y = Math.round((-this.ay[this.mens[this.MP_myid].b_toe] * this.game_scale + this.hscreenY - this.min_max(0,this.mouse_y,this.screenY) + this.hscreenY + this.game.y * 10 / this.GSPEED2) / (1 + 10 / this.GSPEED2) + Math.sin(getTimer() * 0.05) * this.SHAKEAMMOUT * this.game_scale);
                  }
                  else
                  {
                     this.game.x = Math.round((-this.ax[this.mens[this.MP_myid].b_toe] * this.game_scale + this.hscreenX - this.min_max(0,this.mouse_x,this.screenX) + this.hscreenX + this.game.x) / 2);
                     this.game.y = Math.round((-this.ay[this.mens[this.MP_myid].b_toe] * this.game_scale + this.hscreenY - this.min_max(0,this.mouse_y,this.screenY) + this.hscreenY + this.game.y) / 2 + Math.sin(getTimer() * 0.05) * this.SHAKEAMMOUT * this.game_scale);
                  }
                  this.death_cam = this.MP_myid;
               }
               if(this.SHAKEAMMOUT > 0.05)
               {
                  this.SHAKEAMMOUT -= 0.05;
                  this.SHAKEAMMOUT *= 0.93;
                  if(this.SHAKEAMMOUT > 30)
                  {
                     this.SHAKEAMMOUT = 30;
                  }
               }
               else
               {
                  this.SHAKEAMMOUT = 0;
               }
               if(this.new_active.visible)
               {
                  this.new_active.x = this.mens[this.MP_myid].x + this.game.x;
                  this.new_active.y = this.mens[this.MP_myid].y - 90 + this.game.y;
               }
               if(!this.MP_spectator)
               {
                  this.mc = this.mens[this.MP_myid];
                  this.ok = false;
                  if(!this.mc.dead)
                  {
                     if(this.mc.hunt == -1 || this.mc.curwea != -1 && this.guns[this.mc.curwea].stat_class == 7)
                     {
                        i2 = 0;
                        while(i2 < this.playerstotal && !this.ok)
                        {
                           if(i2 != this.MP_myid)
                           {
                              if(this.mens[i2].io)
                              {
                                 if(this.mens[i2].team == this.mc.team)
                                 {
                                    if(Boolean(this.mens[i2].dead) || Boolean(this.mens[i2].dying))
                                    {
                                       if(!this.mens[i2].brk_head && !this.mens[i2].brk_arms && !this.mens[i2].brk_legs && !this.mens[i2].brk_body)
                                       {
                                          if(this.Dist2D(this.ax[this.mens[i2].b_body],this.ay[this.mens[i2].b_body],this.mc.x,this.mc.y) < 350)
                                          {
                                             this.i3 = 0;
                                             while(this.i3 < this.gunstotal && !this.ok)
                                             {
                                                if(this.guns[this.i3].io)
                                                {
                                                   if(!this.guns[this.i3].forcars)
                                                   {
                                                      if(this.guns[this.i3].stat_class == 7)
                                                      {
                                                         if(this.guns[this.i3].picken_by == this.MP_myid)
                                                         {
                                                            this.ok = true;
                                                            this.need_heal.visible = true;
                                                            this.need_heal.x = this.ax[this.mens[i2].b_body] * this.game_scale + this.game.x;
                                                            this.need_heal.y = (this.ay[this.mens[i2].b_body] - 41) * this.game_scale + this.game.y;
                                                         }
                                                      }
                                                   }
                                                }
                                                ++this.i3;
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                           i2++;
                        }
                     }
                  }
                  if(!this.ok)
                  {
                     this.need_heal.visible = false;
                  }
               }
               if(this.game_scale != this.lgame_scale)
               {
                  this.game.scaleX = this.game_scale;
                  this.game.scaleY = this.game_scale;
                  this.graphics_3d_front.scaleX = this.graphics_3d.scaleX = this.game_scale;
                  this.graphics_3d_front.scaleY = this.graphics_3d.scaleY = this.game_scale;
                  this.lgame_scale = this.game_scale;
                  if(this.death_cam == -1)
                  {
                     this.myCursor.x = this.mouse_x;
                     this.myCursor.y = this.mouse_y;
                     this.lastCursorX = this.mouse_x;
                     this.lastCursorY = this.mouse_y;
                  }
                  else if(this.MP_spectator && this.death_cam >= 0 && this.death_cam < this.playerstotal)
                  {
                     this.game.x = Math.round(-this.ax[this.mens[this.death_cam].b_toe] * this.game_scale + this.hscreenX);
                     this.game.y = Math.round(-this.ay[this.mens[this.death_cam].b_toe] * this.game_scale + this.hscreenY);
                     cursor_offset_x = this.mens[this.death_cam].tarx - this.ax[this.mens[this.death_cam].b_toe];
                     cursor_offset_y = this.mens[this.death_cam].tary - this.ay[this.mens[this.death_cam].b_toe];
                     targetCursorX = this.hscreenX + cursor_offset_x * this.game_scale;
                     targetCursorY = this.hscreenY + cursor_offset_y * this.game_scale;
                     this.lastCursorX += (targetCursorX - this.lastCursorX) * this.cursorSmoothFactor;
                     this.lastCursorY += (targetCursorY - this.lastCursorY) * this.cursorSmoothFactor;
                     this.myCursor.x = this.lastCursorX;
                     this.myCursor.y = this.lastCursorY;
                  }
                  else
                  {
                     this.game.x = Math.round(-this.ax[this.mens[this.MP_myid].b_toe] * this.game_scale + this.hscreenX - this.mouse_x + this.hscreenX);
                     this.game.y = Math.round(-this.ay[this.mens[this.MP_myid].b_toe] * this.game_scale + this.hscreenY - this.mouse_y + this.hscreenY);
                  }
               }
               this.graphics_3d_front.x = this.graphics_3d.x = this.game.x;
               this.graphics_3d_front.y = this.graphics_3d.y = this.game.y;
               i = 0;
               while(i < this.surf_lnk.length)
               {
                  this.surf_lnk[i].x = this.doors[this.surf_lnk_to[i]].x;
                  this.surf_lnk[i].y = this.doors[this.surf_lnk_to[i]].y;
                  i++;
               }
               i = 0;
               while(i < this.vehiclestotal)
               {
                  if(this.vehicles[i].io)
                  {
                     if(this.vehicles[i].x > this.render_minX - 400 && this.vehicles[i].x < this.render_maxX + 400 && this.vehicles[i].y > this.render_minY - 400 && this.vehicles[i].y < this.render_maxY + 400 || this.vehicles[i].master != -1 && this.aactive[this.vehicles[i].master] || this.vehicles[i].typ == 6 && this.MP_mode)
                     {
                        this.mc = this.vehicles[i];
                        if(this.mc.ondestroyed != -1 && this.mc.hea <= 0 && !this.mc.dead)
                        {
                           this.EXEC_TRIGGER(this.mc.ondestroyed);
                        }
                        this.aactive[-200 - i] = true;
                        if(this.MP_mode && this.mc.hea <= 0 && !this.mc.dead)
                        {
                           this.mc.hea = 1;
                        }
                        if(this.mc.typ == 0)
                        {
                           this.xx = Math.atan2(this.ax[this.mc.b_w1] - this.ax[this.mc.b_w2],this.ay[this.mc.b_w1] - this.ay[this.mc.b_w2]);
                           if(this.mc.wep0 == -1)
                           {
                              i2 = 0;
                              while(i2 < this.gunstotal)
                              {
                                 if(this.guns[i2].io)
                                 {
                                    if(this.guns[i2].forcars)
                                    {
                                       if(this.guns[i2].picken_by == -1)
                                       {
                                          if(this.guns[i2].x > this.mc.x - 100 && this.guns[i2].x < this.mc.x + 100 && this.guns[i2].y > this.mc.y - 100 && this.guns[i2].y < this.mc.y + 100)
                                          {
                                             this.guns[i2].picken_by = i;
                                             this.mc.wep0 = i2;
                                             this.ChangedGun(this.mc.master);
                                          }
                                       }
                                    }
                                 }
                                 i2++;
                              }
                           }
                           else
                           {
                              this.mc2 = this.guns[this.mc.wep0];
                              if(this.mc.master != -1)
                              {
                                 this.yy = this.mens[this.mc.master].ang;
                                 this.mens[this.mc.master].curwea = this.mc.wep0;
                                 if(Math.sin(this.yy) > 0)
                                 {
                                    this.mc2.scaleY = 1;
                                 }
                                 else
                                 {
                                    this.mc2.scaleY = -1;
                                 }
                                 this.TurnBone3(this.mc2.b_p1,this.ax[this.mc.b_c],this.ay[this.mc.b_c],this.atox[this.mc.b_c],this.atoy[this.mc.b_c],1);
                                 this.TurnBone3(this.mc2.b_p2,this.ax[this.mc.b_c] + Math.sin(this.yy) * this.mc2.len2,this.ay[this.mc.b_c] + Math.cos(this.yy) * this.mc2.len2,this.atox[this.mc.b_c],this.atoy[this.mc.b_c],1);
                                 if(this.mens[this.mc.master].dead)
                                 {
                                    this.PutoutCar(i);
                                 }
                              }
                              else
                              {
                                 this.mc2.scaleY = this.mc.side;
                                 this.TurnBone3(this.mc2.b_p1,this.ax[this.mc.b_c],this.ay[this.mc.b_c],this.atox[this.mc.b_c],this.atoy[this.mc.b_c],1);
                                 this.TurnBone3(this.mc2.b_p2,this.ax[this.mc.b_c] - Math.sin(this.xx) * this.mc2.len2,this.ay[this.mc.b_c] - Math.cos(this.xx) * this.mc2.len2,this.atox[this.mc.b_c],this.atoy[this.mc.b_c],1);
                              }
                           }
                           if(this.mc.hea <= 0)
                           {
                              if(!this.mc.dead)
                              {
                                 this.mc.dead = true;
                                 this.mc.gotoAndStop(3);
                                 this.PlaySound(this.s_steel_hard,this.mc.x,this.mc.y);
                                 this.mc.carbody.scaleY = this.mc.side;
                                 if(this.mc.master != -1)
                                 {
                                    this.PutoutCar(i);
                                 }
                                 this.ExplosionSound(this.ax[this.mc.b_c],this.ay[this.mc.b_c] + 30);
                                 this.PhysicsExplosion(this.ax[this.mc.b_c],this.ay[this.mc.b_c] + 30,300,20,100,-1,"vehicle");
                                 this.atoy[this.mc.b_c] -= 10;
                                 this.atoy[this.mc.b_c2] -= 15;
                                 this.atoy[this.mc.b_c3] -= 5;
                                 this.atoy[this.mc.b_w1] -= 8;
                                 this.atoy[this.mc.b_w2] -= 6;
                                 this.mc.b_w1b = this.CreatePoint(this.ax[this.mc.b_w1],this.ay[this.mc.b_w1],this.atox[this.mc.b_w1],this.atoy[this.mc.b_w1],this.arad[this.mc.b_w1],true,4,-i - 200);
                                 this.mc.b_w2b = this.CreatePoint(this.ax[this.mc.b_w2],this.ay[this.mc.b_w2],this.atox[this.mc.b_w1],this.atoy[this.mc.b_w1],this.arad[this.mc.b_w2],true,4,-i - 200);
                                 this.arad[this.mc.b_w1] = 8;
                                 this.arad[this.mc.b_w2] = 8;
                                 this.amat[this.mc.b_w1] = 5;
                                 this.amat[this.mc.b_w2] = 5;
                                 this.around[this.mc.b_w1] = false;
                                 this.around[this.mc.b_w2] = false;
                              }
                           }
                           else if(this.mc.master != -1)
                           {
                              this.mc2 = this.mens[this.mc.master];
                              this.mc2.stability = -0.1;
                              this.mc2.side = this.mc.side;
                              this.TurnBone3(this.mc2.b_leg1,this.ax[this.mc.b_c3],this.ay[this.mc.b_c3],this.atox[this.mc.b_c3],this.atoy[this.mc.b_c3],1);
                              this.TurnBone3(this.mc2.b_leg2,this.ax[this.mc.b_c3],this.ay[this.mc.b_c3],this.atox[this.mc.b_c3],this.atoy[this.mc.b_c3],1);
                              this.TurnBone3(this.mc2.b_body,this.ax[this.mc.b_c],this.ay[this.mc.b_c] - this.chdef[this.mc2.ch_body],this.atox[this.mc.b_c3],this.atoy[this.mc.b_c3],1);
                              if(this.mc2.act_movex != 0)
                              {
                                 if(this.acollided[this.mc.b_w1] > 0 || this.aio[this.mc.b_w1] == false)
                                 {
                                    this.atox[this.mc.b_w1] -= Math.sin(this.xx) * 3 * this.mc2.act_movex * this.mc.side;
                                    this.atoy[this.mc.b_w1] -= Math.cos(this.xx) * 3 * this.mc2.act_movex * this.mc.side;
                                    this.WakeUpAtom(this.mc.b_w1);
                                 }
                                 if(this.acollided[this.mc.b_w2] > 0 || this.aio[this.mc.b_w2] == false)
                                 {
                                    this.atox[this.mc.b_w2] -= Math.sin(this.xx) * 3 * this.mc2.act_movex * this.mc.side;
                                    this.atoy[this.mc.b_w2] -= Math.cos(this.xx) * 3 * this.mc2.act_movex * this.mc.side;
                                    this.WakeUpAtom(this.mc.b_w2);
                                 }
                              }
                              if(this.key_pick && this.mens[this.mc.master].hea > 0 && this.mc.master == this.MP_myid)
                              {
                                 this.PutoutCar(i);
                              }
                           }
                           else if(this.key_pick && this.mens[this.MP_myid].hea > 0)
                           {
                              if(this.mens[this.MP_myid].x > this.mc.x - 200 && this.mens[this.MP_myid].x < this.mc.x + 200 && this.mens[this.MP_myid].y > this.mc.y - 100 && this.mens[this.MP_myid].y < this.mc.y + 100)
                              {
                                 if(this.mens[this.MP_myid].stability >= 1)
                                 {
                                    this.key_pick = false;
                                    this.PutInCar(0,i);
                                 }
                              }
                           }
                           this.mc.x = this.ax[this.mc.b_c];
                           this.mc.y = this.ay[this.mc.b_c];
                           if(this.mc.dead)
                           {
                              this.mc.w1.x = this.ax[this.mc.b_w1b] - this.ax[this.mc.b_c];
                              this.mc.w1.y = this.ay[this.mc.b_w1b] - this.ay[this.mc.b_c];
                              this.mc.w2.x = this.ax[this.mc.b_w2b] - this.ax[this.mc.b_c];
                              this.mc.w2.y = this.ay[this.mc.b_w2b] - this.ay[this.mc.b_c];
                              this.mc.w1.rotation = (this.mc.x + this.mc.w1.x) * 1;
                              this.mc.w2.rotation = (this.mc.x + this.mc.w2.x) * 1;
                           }
                           else
                           {
                              this.mc.w1.x = this.ax[this.mc.b_w1] - this.ax[this.mc.b_c];
                              this.mc.w1.y = this.ay[this.mc.b_w1] - this.ay[this.mc.b_c];
                              this.mc.w2.x = this.ax[this.mc.b_w2] - this.ax[this.mc.b_c];
                              this.mc.w2.y = this.ay[this.mc.b_w2] - this.ay[this.mc.b_c];
                              this.mc.w1.rotation = (this.mc.x + this.mc.w1.x) * 1;
                              this.mc.w2.rotation = (this.mc.x + this.mc.w2.x) * 1;
                           }
                           this.mc.carbody.rotation = 270 - this.xx / Math.PI * 180;
                        }
                        if(this.mc.typ == 1)
                        {
                           this.xx = Math.atan2(this.ax[this.mc.b_p1] - this.ax[this.mc.b_p2],this.ay[this.mc.b_p1] - this.ay[this.mc.b_p2]);
                           if(this.mc.wep0 == -1)
                           {
                              i2 = 0;
                              while(i2 < this.gunstotal)
                              {
                                 if(this.guns[i2].io)
                                 {
                                    if(this.guns[i2].forcars)
                                    {
                                       if(this.guns[i2].picken_by == -1)
                                       {
                                          if(this.guns[i2].x > this.mc.x - 200 && this.guns[i2].x < this.mc.x + 200 && this.guns[i2].y > this.mc.y - 100 && this.guns[i2].y < this.mc.y + 300)
                                          {
                                             this.guns[i2].picken_by = i;
                                             this.mc.wep0 = i2;
                                             this.ChangedGun(this.mc.master);
                                          }
                                       }
                                    }
                                 }
                                 i2++;
                              }
                           }
                           else
                           {
                              this.mc2 = this.guns[this.mc.wep0];
                              if(this.mc.master != -1)
                              {
                                 if(this.mc.side == 1)
                                 {
                                    if(this.mens[this.mc.master].tarx < this.mc.x + 300)
                                    {
                                       this.mens[this.mc.master].tarx = this.mc.x + 300;
                                    }
                                 }
                                 else if(this.mens[this.mc.master].tarx > this.mc.x - 300)
                                 {
                                    this.mens[this.mc.master].tarx = this.mc.x - 300;
                                 }
                                 this.yy = this.mens[this.mc.master].ang;
                                 this.mens[this.mc.master].curwea = this.mc.wep0;
                                 if(Math.sin(this.yy) > 0)
                                 {
                                    this.mc2.scaleY = 1;
                                 }
                                 else
                                 {
                                    this.mc2.scaleY = -1;
                                 }
                                 this.TurnBone3(this.mc2.b_p1,this.ax[this.mc.b_p2],this.ay[this.mc.b_p2],this.atox[this.mc.b_p2],this.atoy[this.mc.b_p2],1);
                                 this.TurnBone3(this.mc2.b_p2,this.ax[this.mc.b_p2] + Math.sin(this.yy) * this.mc2.len2,this.ay[this.mc.b_p2] + Math.cos(this.yy) * this.mc2.len2,this.atox[this.mc.b_p2],this.atoy[this.mc.b_p2],1);
                                 if(this.mens[this.mc.master].dead)
                                 {
                                    this.PutoutCar(i);
                                 }
                              }
                              else
                              {
                                 this.mc2.scaleY = this.mc.side;
                                 this.TurnBone3(this.mc2.b_p1,this.ax[this.mc.b_p2],this.ay[this.mc.b_p2],this.atox[this.mc.b_p2],this.atoy[this.mc.b_p2],1);
                                 this.TurnBone3(this.mc2.b_p2,this.ax[this.mc.b_p2] - Math.sin(this.xx) * this.mc2.len2,this.ay[this.mc.b_p2] - Math.cos(this.xx) * this.mc2.len2,this.atox[this.mc.b_p2],this.atoy[this.mc.b_p2],1);
                              }
                           }
                           if(this.mc.hea <= 0)
                           {
                              if(!this.mc.dead)
                              {
                                 this.mc.dead = true;
                                 this.mc.deadtim = 0;
                                 this.mc.leg1.x = 0;
                                 this.mc.leg1.y = 0;
                                 this.mc.leg2.x = 0;
                                 this.mc.leg2.y = 0;
                                 this.mc.leg1.scaleX = this.mc.side;
                                 this.mc.leg2.scaleX = this.mc.side;
                                 this.mc.leg1b.scaleX = this.mc.side;
                                 this.mc.leg2b.scaleX = this.mc.side;
                                 this.mc.carbody.scaleY = this.mc.side;
                                 this.PlaySound(this.s_walker_die,this.mc.x,this.mc.y);
                                 this.chdef[this.mc.ch_cross2] = 70;
                                 if(this.mc.master != -1)
                                 {
                                    this.PutoutCar(i);
                                 }
                                 if(this.mc.hea < -100)
                                 {
                                    this.ExplosionSound(this.ax[this.mc.b_p1],this.ay[this.mc.b_p1] + 30);
                                    this.PhysicsExplosion(this.ax[this.mc.b_p1],this.ay[this.mc.b_p1] + 30,300,20,100,-1,"vehicle");
                                    this.atoy[this.mc.b_p2] -= 10;
                                    this.atox[this.mc.b_p1] += 5 * this.mc.side;
                                    this.atox[this.mc.b_p3] += 5 * this.mc.side;
                                    this.atox[this.mc.b_w1] -= 10 * this.mc.side;
                                    this.atox[this.mc.b_w2] -= 5 * this.mc.side;
                                 }
                              }
                              else if(this.mc.io)
                              {
                                 if(this.mc.deadtim > 1000)
                                 {
                                    if(this.mc.alpha > 0.7)
                                    {
                                       this.mc.alpha = 0.7;
                                    }
                                    else
                                    {
                                       this.mc.alpha -= 0.05 * this.GSPEED;
                                    }
                                    if(this.mc.alpha < 0.3)
                                    {
                                       this.aio[this.mc.b_p1] = -1;
                                       this.aio[this.mc.b_p2] = -1;
                                       this.aio[this.mc.b_p3] = -1;
                                       this.aio[this.mc.b_w1] = -1;
                                       this.aio[this.mc.b_w2] = -1;
                                       this.aio[this.mc.b_w1b] = -1;
                                       this.aio[this.mc.b_w2b] = -1;
                                       this.mc.io = false;
                                    }
                                 }
                                 this.mc.deadtim += 10 * this.GSPEED;
                              }
                           }
                           else if(this.mc.master != -1)
                           {
                              this.mc2 = this.mens[this.mc.master];
                              this.mc2.stability = -0.1;
                              this.mc2.side = this.mc.side;
                              this.TurnBone3(this.mc2.b_leg1,this.ax[this.mc.b_p2],this.ay[this.mc.b_p2],this.atox[this.mc.b_p2],this.atoy[this.mc.b_p2],1);
                              this.TurnBone3(this.mc2.b_leg2,this.ax[this.mc.b_p2],this.ay[this.mc.b_p2],this.atox[this.mc.b_p2],this.atoy[this.mc.b_p2],1);
                              this.TurnBone3(this.mc2.b_body,this.ax[this.mc.b_p3],this.ay[this.mc.b_p3],this.atox[this.mc.b_p3],this.atoy[this.mc.b_p3],1);
                              this.TurnBone3(this.mc2.b_toe,this.ax[this.mc.b_p1],this.ay[this.mc.b_p1],this.atox[this.mc.b_p1],this.atoy[this.mc.b_p1],1);
                              this.x3 = Math.sin(this.mc.move_state) * 30;
                              this.y3 = Math.cos(this.mc.move_state) * 10 * this.mc.move_height;
                              if(this.mc.move_height > 1)
                              {
                                 this.y3 = Math.cos(this.mc.move_state) * 40 * (this.mc.move_height - 0.75);
                              }
                              this.x4 = 1;
                              if(this.mc2.act_movex == 0)
                              {
                                 if(this.mc.move_height > 0.05)
                                 {
                                    this.mc.move_height -= 0.05 * this.GSPEED;
                                 }
                                 else
                                 {
                                    this.mc.move_height = 0;
                                 }
                              }
                              if(this.mc2.act_movey == 1)
                              {
                                 if(this.mc.corpse_h > 60)
                                 {
                                    this.mc.corpse_h -= 5 * this.GSPEED;
                                    if(this.acollided[this.mc.b_w1] > 0 || this.acollided[this.mc.b_w2] > 0)
                                    {
                                       this.atoy[this.mc.b_p1] += 1 * this.GSPEED;
                                       this.atoy[this.mc.b_p2] += 1 * this.GSPEED;
                                       this.atoy[this.mc.b_p3] += 1 * this.GSPEED;
                                       this.atoy[this.mc.b_w1] += 1 * this.GSPEED;
                                       this.atoy[this.mc.b_w1] += 1 * this.GSPEED;
                                    }
                                 }
                              }
                              else if(this.mc2.act_movey == -1)
                              {
                                 if(this.mc.corpse_h < 100)
                                 {
                                    this.mc.corpse_h += 5;
                                    if(this.acollided[this.mc.b_w1] > 0 || this.acollided[this.mc.b_w2] > 0)
                                    {
                                       this.atoy[this.mc.b_p1] -= 2 * this.GSPEED;
                                       this.atoy[this.mc.b_p2] -= 2 * this.GSPEED;
                                       this.atoy[this.mc.b_p3] -= 2 * this.GSPEED;
                                       this.atox[this.mc.b_p1] += this.mc2.act_movex * 3 * this.GSPEED;
                                       this.atox[this.mc.b_p2] += this.mc2.act_movex * 1 * this.GSPEED;
                                       this.atox[this.mc.b_p3] += this.mc2.act_movex * 2 * this.GSPEED;
                                       this.atox[this.mc.b_w1] += this.mc2.act_movex * 1 * this.GSPEED;
                                       this.atox[this.mc.b_w2] += this.mc2.act_movex * 2 * this.GSPEED;
                                    }
                                 }
                              }
                              else if(this.mc.corpse_h < 90)
                              {
                                 this.mc.corpse_h += 1 * this.GSPEED;
                              }
                              else if(this.mc.corpse_h > 90)
                              {
                                 this.mc.corpse_h -= 1 * this.GSPEED;
                              }
                              this.xx2 = (this.ax[this.mc.b_p1] + this.ax[this.mc.b_w1]) / 2;
                              this.yy2 = (this.ay[this.mc.b_p1] + this.ay[this.mc.b_w1]) / 2;
                              this.TurnBone4(this.mc.b_p1,this.xx2 + this.x3,this.yy2 - this.mc.corpse_h + this.y3,this.x4);
                              this.TurnBone4(this.mc.b_w1,this.xx2 - this.x3,this.yy2 + this.mc.corpse_h - this.y3,this.x4);
                              this.xx2 = (this.ax[this.mc.b_p1] + this.ax[this.mc.b_w2]) / 2;
                              this.yy2 = (this.ay[this.mc.b_p1] + this.ay[this.mc.b_w2]) / 2;
                              this.TurnBone4(this.mc.b_p1,this.xx2 - this.x3,this.yy2 - this.mc.corpse_h - this.y3,this.x4);
                              this.TurnBone4(this.mc.b_w2,this.xx2 + this.x3,this.yy2 + this.mc.corpse_h + this.y3,this.x4);
                              this.xx2 = (this.ax[this.mc.b_p1] + this.ax[this.mc.b_p2]) / 2;
                              this.yy2 = (this.ay[this.mc.b_p1] + this.ay[this.mc.b_p2]) / 2;
                              this.TurnBone4(this.mc.b_p1,this.xx2 - 25 * this.mc.side,this.yy2,this.x4);
                              this.TurnBone4(this.mc.b_p2,this.xx2 + 25 * this.mc.side,this.yy2,this.x4);
                              this.aio[this.mc.b_p1] = true;
                              this.atim[this.mc.b_p1] = 0;
                              this.aio[this.mc.b_w1] = true;
                              this.atim[this.mc.b_w1] = 0;
                              this.aio[this.mc.b_w2] = true;
                              this.atim[this.mc.b_w2] = 0;
                              if(this.mc2.act_movex != 0)
                              {
                                 if(this.mc.move_height < 1)
                                 {
                                    this.xx2 = -this.mc2.act_movex * 0.08 * this.mc.move_height;
                                 }
                                 else
                                 {
                                    this.xx2 = -this.mc2.act_movex * 0.08 * (2 - this.mc.move_height);
                                 }
                                 this.mc.move_state += this.xx2 * this.GSPEED;
                                 this.mc.jump_state += this.xx2 * this.GSPEED;
                                 if(this.mc.jump_state > Math.PI)
                                 {
                                    this.PlaySound(this.s_walker_phase1,this.mc.x,this.mc.y);
                                    this.mc.jump_state -= Math.PI;
                                 }
                                 if(this.mc.jump_state < -Math.PI)
                                 {
                                    this.PlaySound(this.s_walker_phase1,this.mc.x,this.mc.y);
                                    this.mc.jump_state += Math.PI;
                                 }
                                 this.mc.jump_state2 += this.xx2 * this.GSPEED;
                                 if(this.mc.jump_state2 > Math.PI)
                                 {
                                    this.PlaySound(this.s_walker_phase2,this.mc.x,this.mc.y);
                                    this.mc.jump_state2 -= Math.PI;
                                 }
                                 if(this.mc.jump_state2 < -Math.PI)
                                 {
                                    this.PlaySound(this.s_walker_phase2,this.mc.x,this.mc.y);
                                    this.mc.jump_state2 += Math.PI;
                                 }
                                 if(this.acollided[this.mc.b_w1] > 0 || this.acollided[this.mc.b_w2] > 0)
                                 {
                                    this.atox[this.mc.b_p1] += this.mc2.act_movex * 1.5 * this.GSPEED;
                                 }
                                 if(this.mc.move_height < 0.95)
                                 {
                                    this.mc.move_height += 0.05 * this.GSPEED;
                                 }
                                 if(!this.TracePoint((this.ax[this.mc.b_w1] + this.ax[this.mc.b_w1]) / 2 + this.mc2.act_movex * 150,(this.ay[this.mc.b_w1] + this.ay[this.mc.b_w1]) / 2))
                                 {
                                    if(this.mc.move_height < 1.45)
                                    {
                                       this.mc.move_height += 0.05 * this.GSPEED;
                                    }
                                    else
                                    {
                                       this.mc.move_height = 1.5 * this.GSPEED;
                                    }
                                 }
                                 else if(this.mc.move_height > 1.05)
                                 {
                                    this.mc.move_height -= 0.05 * this.GSPEED;
                                 }
                              }
                              if(this.key_pick && this.mens[this.mc.master].hea > 0 && this.mc.master == this.MP_myid)
                              {
                                 this.PutoutCar(i);
                              }
                           }
                           else
                           {
                              this.x4 = 1;
                              this.x3 = Math.sin(this.mc.move_state) * 25;
                              this.y3 = Math.cos(this.mc.move_state) * 10 * this.mc.move_height;
                              if(this.mc.move_height > 0.05)
                              {
                                 this.mc.move_height -= 0.05;
                              }
                              else
                              {
                                 this.mc.move_height = 0;
                              }
                              this.xx2 = (this.ax[this.mc.b_p1] + this.ax[this.mc.b_w1]) / 2;
                              this.yy2 = (this.ay[this.mc.b_p1] + this.ay[this.mc.b_w1]) / 2;
                              this.TurnBone4(this.mc.b_p1,this.xx2 + this.x3,this.yy2 - 90 + this.y3,this.x4);
                              this.TurnBone4(this.mc.b_w1,this.xx2 - this.x3,this.yy2 + 90 - this.y3,this.x4);
                              this.xx2 = (this.ax[this.mc.b_p1] + this.ax[this.mc.b_w2]) / 2;
                              this.yy2 = (this.ay[this.mc.b_p1] + this.ay[this.mc.b_w2]) / 2;
                              this.TurnBone4(this.mc.b_p1,this.xx2 - 10 - this.x3,this.yy2 - 90 - this.y3,this.x4);
                              this.TurnBone4(this.mc.b_w2,this.xx2 + 10 + this.x3,this.yy2 + 90 + this.y3,this.x4);
                              this.xx2 = (this.ax[this.mc.b_p1] + this.ax[this.mc.b_p2]) / 2;
                              this.yy2 = (this.ay[this.mc.b_p1] + this.ay[this.mc.b_p2]) / 2;
                              this.TurnBone4(this.mc.b_p1,this.xx2 - 23 * this.mc.side,this.yy2 - 10,this.x4);
                              this.TurnBone4(this.mc.b_p2,this.xx2 + 23 * this.mc.side,this.yy2 + 10,this.x4);
                              if(this.key_pick && this.mens[this.MP_myid].hea > 0)
                              {
                                 if(this.mens[this.MP_myid].x > this.mc.x - 200 && this.mens[this.MP_myid].x < this.mc.x + 200 && this.mens[this.MP_myid].y > this.mc.y - 100 && this.mens[this.MP_myid].y < this.mc.y + 300)
                                 {
                                    if(this.mens[this.MP_myid].stability >= 1)
                                    {
                                       this.PutInCar(0,i);
                                    }
                                 }
                              }
                           }
                           this.chdef[this.mc.ch_leg1upper] = this.chdef[this.mc.ch_leg1lower] = this.Dist2D(this.ax[this.mc.b_p1],this.ay[this.mc.b_p1],this.ax[this.mc.b_w1],this.ay[this.mc.b_w1]) / 3;
                           this.chdef[this.mc.ch_leg2upper] = this.chdef[this.mc.ch_leg2lower] = this.Dist2D(this.ax[this.mc.b_p1],this.ay[this.mc.b_p1],this.ax[this.mc.b_w2],this.ay[this.mc.b_w2]) / 3;
                           this.mc.x = this.ax[this.mc.b_p1];
                           this.mc.y = this.ay[this.mc.b_p1];
                           this.MeasureStart(12);
                           this.mc.carbody.rotation = 270 - this.xx / Math.PI * 180;
                           this.mc.leg1.rotation = 180 - Math.atan2(this.ax[this.mc.b_p1] - this.ax[this.mc.b_w1],this.ay[this.mc.b_p1] - this.ay[this.mc.b_w1]) / Math.PI * 180;
                           this.SetMCFrame(this.mc.leg1,Math.max(1,Math.min(100,Math.round(this.Dist2D(this.ax[this.mc.b_p1],this.ay[this.mc.b_p1],this.ax[this.mc.b_w1],this.ay[this.mc.b_w1]) / 210 * 100))),5);
                           this.mc.leg2.rotation = 180 - Math.atan2(this.ax[this.mc.b_p1] - this.ax[this.mc.b_w2],this.ay[this.mc.b_p1] - this.ay[this.mc.b_w2]) / Math.PI * 180;
                           this.SetMCFrame(this.mc.leg2,Math.max(1,Math.min(100,Math.round(this.Dist2D(this.ax[this.mc.b_p1],this.ay[this.mc.b_p1],this.ax[this.mc.b_w2],this.ay[this.mc.b_w2]) / 210 * 100))),5);
                           this.mc.leg1b.x = this.ax[this.mc.b_w1] - this.ax[this.mc.b_p1];
                           this.mc.leg1b.y = this.ay[this.mc.b_w1] - this.ay[this.mc.b_p1];
                           this.mc.leg2b.x = this.ax[this.mc.b_w2] - this.ax[this.mc.b_p1];
                           this.mc.leg2b.y = this.ay[this.mc.b_w2] - this.ay[this.mc.b_p1];
                           if(Boolean(this.acollided[this.mc.b_w1]) && !this.mc.dead)
                           {
                              this.mc.leg1b.rotation /= 2;
                           }
                           else
                           {
                              this.mc.leg1b.rotation = (this.mc.leg1.rotation + this.mc.leg1b.rotation * 5) / 6;
                           }
                           if(Boolean(this.acollided[this.mc.b_w2]) && !this.mc.dead)
                           {
                              this.mc.leg2b.rotation /= 2;
                           }
                           else
                           {
                              this.mc.leg2b.rotation = (this.mc.leg2.rotation + this.mc.leg2b.rotation * 5) / 6;
                           }
                           this.MeasureStop(12);
                        }
                        if(this.mc.typ == 2)
                        {
                           this.xx = (this.ax[this.mc.b_lt] + this.ax[this.mc.b_rb]) / 2;
                           this.yy = (this.ay[this.mc.b_lt] + this.ay[this.mc.b_rb]) / 2;
                           if(this.mc.hea <= 0)
                           {
                              if(!this.mc.dead)
                              {
                                 this.mc.dead = true;
                                 this.mc.gotoAndStop(3);
                                 this.chio[this.mc.ch_t0] = -1;
                                 this.chio[this.mc.ch_t1] = -1;
                                 this.chio[this.mc.ch_t2] = -1;
                                 this.chio[this.mc.ch_t3] = -1;
                                 this.chio[this.mc.ch_t4] = -1;
                                 this.chio[this.mc.ch_t5] = -1;
                                 this.chio[this.mc.ch_t6] = -1;
                                 this.chio[this.mc.ch_t7] = -1;
                                 this.atox[this.mc.b_lt] = 0;
                                 this.atoy[this.mc.b_lt] = 0;
                                 this.atox[this.mc.b_lt2] = 0;
                                 this.atoy[this.mc.b_lt2] = 0;
                                 this.atox[this.mc.b_rt] = 0;
                                 this.atoy[this.mc.b_rt] = 0;
                                 this.atox[this.mc.b_rt2] = 0;
                                 this.atoy[this.mc.b_rt2] = 0;
                                 this.atox[this.mc.b_lb] = 0;
                                 this.atoy[this.mc.b_lb] = 0;
                                 this.atox[this.mc.b_lb2] = 0;
                                 this.atoy[this.mc.b_lb2] = 0;
                                 this.atox[this.mc.b_rb] = 0;
                                 this.atoy[this.mc.b_rb] = 0;
                                 this.atox[this.mc.b_rb2] = 0;
                                 this.atoy[this.mc.b_rb2] = 0;
                                 this.atox[this.mc.b_lb2] -= 5;
                                 this.atox[this.mc.b_lt2] -= 10;
                                 this.atox[this.mc.b_rb2] += 5;
                                 this.atox[this.mc.b_rt2] += 10;
                                 this.atoy[this.mc.b_rt] -= 2 + Math.random() * 10;
                                 this.atoy[this.mc.b_lt] -= 2 + Math.random() * 10;
                                 this.xx2 = 3 + Math.random() * 4;
                                 this.atox[this.mc.b_rt] += this.xx2;
                                 this.atox[this.mc.b_lt] += this.xx2;
                                 if(this.mc.master != -1)
                                 {
                                    i2 = int(this.mc.master);
                                    this.PutoutCar(i);
                                    this.mens[i2].stability = -1;
                                    this.mens[i2].x = this.xx;
                                    this.mens[i2].y = this.yy;
                                    this.mens[i2].tox = 0;
                                    this.mens[i2].toy = 0;
                                 }
                              }
                           }
                           else if(this.mc.master != -1)
                           {
                              this.mc2 = this.mens[this.mc.master];
                              this.mc2.stability = -0.1;
                              this.mc2.side = this.mc.side;
                              this.mc2.x = this.mc.x;
                              this.mc2.y = this.mc.y;
                              this.mc2.tox = 0;
                              this.mc2.toy = 0;
                              this.xx2 = 0;
                              this.yy2 = 0;
                              this.TurnBone3(this.mc2.b_leg1,this.xx,this.yy + 30,this.xx2,this.yy2,1);
                              this.TurnBone3(this.mc2.b_leg2,this.xx,this.yy + 30,this.xx2,this.yy2,1);
                              this.TurnBone3(this.mc2.b_toe,this.xx,this.yy,this.xx2,this.yy2,1);
                              this.TurnBone3(this.mc2.b_head_end,this.xx,this.yy - 30,this.xx2,this.yy2,1);
                           }
                           this.mc.x = this.xx;
                           this.mc.y = this.yy;
                           this.xx2 = Math.atan2(this.ax[this.mc.b_lb] - this.ax[this.mc.b_rb],this.ay[this.mc.b_lb] - this.ay[this.mc.b_rb]);
                           this.mc.cap_b.rotation = 270 - this.xx2 / Math.PI * 180;
                           this.mc.cap_b.x = (this.ax[this.mc.b_lb] + this.ax[this.mc.b_rb]) / 2 - this.xx;
                           this.mc.cap_b.y = (this.ay[this.mc.b_lb] + this.ay[this.mc.b_rb]) / 2 - this.yy;
                           this.xx2 = Math.atan2(this.ax[this.mc.b_lt] - this.ax[this.mc.b_rt],this.ay[this.mc.b_lt] - this.ay[this.mc.b_rt]);
                           this.mc.cap_t.rotation = 90 - this.xx2 / Math.PI * 180;
                           this.mc.cap_t.x = (this.ax[this.mc.b_lt] + this.ax[this.mc.b_rt]) / 2 - this.xx;
                           this.mc.cap_t.y = (this.ay[this.mc.b_lt] + this.ay[this.mc.b_rt]) / 2 - this.yy;
                           this.xx2 = Math.atan2(this.ax[this.mc.b_lt2] - this.ax[this.mc.b_lb2],this.ay[this.mc.b_lt2] - this.ay[this.mc.b_lb2]);
                           this.mc.cap_l.rotation = 180 - this.xx2 / Math.PI * 180;
                           this.mc.cap_l.x = (this.ax[this.mc.b_lt2] + this.ax[this.mc.b_lb2]) / 2 - this.xx;
                           this.mc.cap_l.y = (this.ay[this.mc.b_lt2] + this.ay[this.mc.b_lb2]) / 2 - this.yy;
                           this.xx2 = Math.atan2(this.ax[this.mc.b_rt2] - this.ax[this.mc.b_rb2],this.ay[this.mc.b_rt2] - this.ay[this.mc.b_rb2]);
                           this.mc.cap_r.rotation = -this.xx2 / Math.PI * 180;
                           this.mc.cap_r.x = (this.ax[this.mc.b_rt2] + this.ax[this.mc.b_rb2]) / 2 - this.xx;
                           this.mc.cap_r.y = (this.ay[this.mc.b_rt2] + this.ay[this.mc.b_rb2]) / 2 - this.yy;
                        }
                        else if(this.mc.typ == 3)
                        {
                           if(this.mc.hea <= 0)
                           {
                              if(!this.mc.dead)
                              {
                                 this.mc.dead = true;
                                 this.PlaySound(this.s_box_die,this.mc.x,this.mc.y);
                                 this.mc.rotation = 0;
                                 this.mc.gotoAndStop(2);
                                 this.n2 = 0;
                                 while(this.n2 < 10)
                                 {
                                    this.mc["b_g" + this.n2] = this.CreatePoint(this.mc.x + this.mc["g" + this.n2].x,this.mc.y + this.mc["g" + this.n2].y,(Math.random() - 0.5) * 10,(Math.random() - 0.5) * 10,0,false,9,-i - 200);
                                    if(Math.random() < 0.33)
                                    {
                                       this.mc["g" + this.n2].gotoAndStop(1);
                                    }
                                    else if(Math.random() > 0.5)
                                    {
                                       this.mc["g" + this.n2].gotoAndStop(2);
                                    }
                                    else
                                    {
                                       this.mc["g" + this.n2].gotoAndStop(3);
                                    }
                                    ++this.n2;
                                 }
                                 this.aio[this.mc.b_c] = -1;
                                 this.aio[this.mc.b_lt] = -1;
                                 this.aio[this.mc.b_rt] = -1;
                                 this.aio[this.mc.b_lb] = -1;
                                 this.aio[this.mc.b_rb] = -1;
                                 if(this.mc.wep0 != -1)
                                 {
                                    i2 = int(this.mc.wep0);
                                    this.guns[i2].picken_by = -1;
                                    this.guns[i2].forcars = false;
                                    this.aio[this.guns[i2].b_p1] = true;
                                    this.atim[this.guns[i2].b_p1] = 0;
                                    this.aio[this.guns[i2].b_p2] = true;
                                    this.atim[this.guns[i2].b_p2] = 0;
                                    this.atox[this.guns[i2].b_p1] = -3 + Math.random() * 6;
                                    this.atoy[this.guns[i2].b_p1] = -3 + Math.random() * 6;
                                    this.atox[this.guns[i2].b_p2] = -3 + Math.random() * 6;
                                    this.atoy[this.guns[i2].b_p2] = -3 + Math.random() * 6;
                                    this.guns[i2].alpha = 1;
                                 }
                                 if(this.mc.wep1 != -1)
                                 {
                                    i2 = int(this.mc.wep1);
                                    this.guns[i2].picken_by = -1;
                                    this.guns[i2].forcars = false;
                                    this.aio[this.guns[i2].b_p1] = true;
                                    this.atim[this.guns[i2].b_p1] = 0;
                                    this.aio[this.guns[i2].b_p2] = true;
                                    this.atim[this.guns[i2].b_p2] = 0;
                                    this.atox[this.guns[i2].b_p1] = -3 + Math.random() * 6;
                                    this.atoy[this.guns[i2].b_p1] = -3 + Math.random() * 6;
                                    this.atox[this.guns[i2].b_p2] = -3 + Math.random() * 6;
                                    this.atoy[this.guns[i2].b_p2] = -3 + Math.random() * 6;
                                    this.guns[i2].alpha = 1;
                                 }
                                 if(this.mc.wep2 != -1)
                                 {
                                    i2 = int(this.mc.wep2);
                                    this.guns[i2].picken_by = -1;
                                    this.guns[i2].forcars = false;
                                    this.aio[this.guns[i2].b_p1] = true;
                                    this.atim[this.guns[i2].b_p1] = 0;
                                    this.aio[this.guns[i2].b_p2] = true;
                                    this.atim[this.guns[i2].b_p2] = 0;
                                    this.atox[this.guns[i2].b_p1] = -3 + Math.random() * 6;
                                    this.atoy[this.guns[i2].b_p1] = -3 + Math.random() * 6;
                                    this.atox[this.guns[i2].b_p2] = -3 + Math.random() * 6;
                                    this.atoy[this.guns[i2].b_p2] = -3 + Math.random() * 6;
                                    this.guns[i2].alpha = 1;
                                 }
                              }
                           }
                           else
                           {
                              if(this.mc.grabtim > 0)
                              {
                                 --this.mc.grabtim;
                                 if(this.mc.wep0 == -1)
                                 {
                                    i2 = 0;
                                    while(i2 < this.gunstotal && this.mc.wep0 == -1)
                                    {
                                       if(this.guns[i2].io)
                                       {
                                          if(!this.guns[i2].forcars)
                                          {
                                             if(this.guns[i2].picken_by == -1)
                                             {
                                                if(this.guns[i2].x > this.mc.x - 100 && this.guns[i2].x < this.mc.x + 100 && this.guns[i2].y > this.mc.y - 100 && this.guns[i2].y < this.mc.y + 100)
                                                {
                                                   this.guns[i2].picken_by = i;
                                                   this.guns[i2].forcars = true;
                                                   this.guns[i2].alpha = 0;
                                                   this.mc.wep0 = i2;
                                                }
                                             }
                                          }
                                       }
                                       i2++;
                                    }
                                 }
                                 else if(this.mc.wep1 == -1)
                                 {
                                    i2 = 0;
                                    while(i2 < this.gunstotal && this.mc.wep1 == -1)
                                    {
                                       if(this.guns[i2].io)
                                       {
                                          if(!this.guns[i2].forcars)
                                          {
                                             if(this.guns[i2].picken_by == -1)
                                             {
                                                if(this.guns[i2].x > this.mc.x - 100 && this.guns[i2].x < this.mc.x + 100 && this.guns[i2].y > this.mc.y - 100 && this.guns[i2].y < this.mc.y + 100)
                                                {
                                                   this.guns[i2].picken_by = i;
                                                   this.guns[i2].forcars = true;
                                                   this.guns[i2].alpha = 0;
                                                   this.mc.wep1 = i2;
                                                }
                                             }
                                          }
                                       }
                                       i2++;
                                    }
                                 }
                                 else if(this.mc.wep2 == -1)
                                 {
                                    i2 = 0;
                                    while(i2 < this.gunstotal && this.mc.wep2 == -1)
                                    {
                                       if(this.guns[i2].io)
                                       {
                                          if(!this.guns[i2].forcars)
                                          {
                                             if(this.guns[i2].picken_by == -1)
                                             {
                                                if(this.guns[i2].x > this.mc.x - 100 && this.guns[i2].x < this.mc.x + 100 && this.guns[i2].y > this.mc.y - 100 && this.guns[i2].y < this.mc.y + 100)
                                                {
                                                   this.guns[i2].picken_by = i;
                                                   this.guns[i2].forcars = true;
                                                   this.guns[i2].alpha = 0;
                                                   this.mc.wep2 = i2;
                                                }
                                             }
                                          }
                                       }
                                       i2++;
                                    }
                                 }
                              }
                              if(this.mc.wep0 != -1)
                              {
                                 this.mc2 = this.guns[this.mc.wep0];
                                 this.TurnBone3(this.mc2.b_p1,this.ax[this.mc.b_lt],this.ay[this.mc.b_lt],this.atox[this.mc.b_lt],this.atoy[this.mc.b_lt],1);
                                 this.TurnBone3(this.mc2.b_p2,this.ax[this.mc.b_rb],this.ay[this.mc.b_rb],this.atox[this.mc.b_rb],this.atoy[this.mc.b_rb],1);
                              }
                              if(this.mc.wep1 != -1)
                              {
                                 this.mc2 = this.guns[this.mc.wep1];
                                 this.TurnBone3(this.mc2.b_p1,this.ax[this.mc.b_lt],this.ay[this.mc.b_lt],this.atox[this.mc.b_lt],this.atoy[this.mc.b_lt],1);
                                 this.TurnBone3(this.mc2.b_p2,this.ax[this.mc.b_rb],this.ay[this.mc.b_rb],this.atox[this.mc.b_rb],this.atoy[this.mc.b_rb],1);
                              }
                              if(this.mc.wep2 != -1)
                              {
                                 this.mc2 = this.guns[this.mc.wep2];
                                 this.TurnBone3(this.mc2.b_p1,this.ax[this.mc.b_lt],this.ay[this.mc.b_lt],this.atox[this.mc.b_lt],this.atoy[this.mc.b_lt],1);
                                 this.TurnBone3(this.mc2.b_p2,this.ax[this.mc.b_rb],this.ay[this.mc.b_rb],this.atox[this.mc.b_rb],this.atoy[this.mc.b_rb],1);
                              }
                           }
                           if(this.mc.currentFrame == 1)
                           {
                              this.mc.x = this.ax[this.mc.b_c];
                              this.mc.y = this.ay[this.mc.b_c];
                              this.xx2 = Math.atan2(this.ax[this.mc.b_lb] - this.ax[this.mc.b_rb],this.ay[this.mc.b_lb] - this.ay[this.mc.b_rb]);
                              this.mc.rotation = 180 - this.xx2 / Math.PI * 180;
                           }
                           else
                           {
                              this.n2 = 0;
                              while(this.n2 < 10)
                              {
                                 if(this.mc["g" + this.n2].visible == true)
                                 {
                                    this.mc["g" + this.n2].x = this.ax[this.mc["b_g" + this.n2]] - this.mc.x;
                                    this.mc["g" + this.n2].y = this.ay[this.mc["b_g" + this.n2]] - this.mc.y;
                                    this.mc["g" + this.n2].rotation = this.mc["g" + this.n2].x * 3 + this.n2 * 60;
                                    if(this.aio[this.mc["b_g" + this.n2]] == false)
                                    {
                                       if(this.mc["g" + this.n2].alpha > 0)
                                       {
                                          this.mc["g" + this.n2].alpha -= 0.1;
                                       }
                                       else
                                       {
                                          this.mc["g" + this.n2].visible = false;
                                          this.aio[this.mc["b_g" + this.n2]] = -1;
                                       }
                                    }
                                    else if(this.mc["g" + this.n2].alpha < 1)
                                    {
                                       this.mc["g" + this.n2].alpha += 0.1;
                                    }
                                 }
                                 ++this.n2;
                              }
                           }
                        }
                        else if(this.mc.typ == 4 || this.mc.typ == 7)
                        {
                           this.xx2 = Math.atan2(this.ax[this.mc.b_c] - this.ax[this.mc.b_c1],this.ay[this.mc.b_c] - this.ay[this.mc.b_c1]);
                           if(this.mc.wep0 == -1)
                           {
                              i2 = 0;
                              while(i2 < this.gunstotal)
                              {
                                 if(this.guns[i2].io)
                                 {
                                    if(this.guns[i2].forcars)
                                    {
                                       if(this.guns[i2].picken_by == -1)
                                       {
                                          if(this.guns[i2].x > this.mc.x - 100 && this.guns[i2].x < this.mc.x + 100 && this.guns[i2].y > this.mc.y - 100 && this.guns[i2].y < this.mc.y + 100)
                                          {
                                             this.guns[i2].picken_by = i;
                                             this.mc.wep0 = i2;
                                             this.ChangedGun(this.mc.master);
                                          }
                                       }
                                    }
                                 }
                                 i2++;
                              }
                           }
                           else
                           {
                              this.mc2 = this.guns[this.mc.wep0];
                              this.mc2.scaleY = this.mc.side;
                              if(this.mc.master != -1 && this.mc.hea > 0)
                              {
                                 this.yy = this.mens[this.mc.master].ang;
                                 this.mens[this.mc.master].curwea = this.mc.wep0;
                                 this.TurnBone3(this.mc2.b_p1,this.ax[this.mc.b_c2],this.ay[this.mc.b_c2],this.atox[this.mc.b_c2],this.atoy[this.mc.b_c2],1);
                                 this.TurnBone3(this.mc2.b_p2,this.ax[this.mc.b_c2] + Math.sin(this.yy) * this.mc2.len2,this.ay[this.mc.b_c2] + Math.cos(this.yy) * this.mc2.len2,this.atox[this.mc.b_c2],this.atoy[this.mc.b_c2],1);
                              }
                              else
                              {
                                 this.TurnBone3(this.mc2.b_p1,this.ax[this.mc.b_c2],this.ay[this.mc.b_c2],this.atox[this.mc.b_c2],this.atoy[this.mc.b_c2],1);
                                 this.TurnBone3(this.mc2.b_p2,this.ax[this.mc.b_c2] - Math.sin(this.xx2) * this.mc2.len2,this.ay[this.mc.b_c2] - Math.cos(this.xx2) * this.mc2.len2,this.atox[this.mc.b_c2],this.atoy[this.mc.b_c2],1);
                              }
                           }
                           if(this.mc.master != -1)
                           {
                              if(this.mens[this.mc.master].io)
                              {
                                 this.mc2 = this.mens[this.mc.master];
                                 if(this.mc2.dead)
                                 {
                                    this.mc.hea = 0;
                                 }
                                 if(this.mc.hea > 0)
                                 {
                                    if(!this.mc2.isplayer)
                                    {
                                       if(this.mc.typ == 4)
                                       {
                                          if(this.TraceLine(this.mc.x,this.mc.y,this.mc.x,this.mc.y + 400))
                                          {
                                             this.mc2.act_movey = 1;
                                          }
                                       }
                                       if(this.mc.typ == 7)
                                       {
                                          if(!this.TraceLine(this.mc.x,this.mc.y,this.mc.x + this.mc2.act_movex * 200,this.mc.y - 100))
                                          {
                                             this.mc2.act_movey = 1;
                                          }
                                       }
                                       if(!this.TraceLine(this.mc.x,this.mc.y,this.mc.x + this.mc2.act_movex * 200,this.mc.y + 100))
                                       {
                                          this.mc2.act_movey = -1;
                                       }
                                    }
                                    this.u = 1;
                                    this.v = 1;
                                    if(this.mc.typ == 7)
                                    {
                                       this.u = 2;
                                       this.v = 1.5;
                                    }
                                    this.atoy[this.mc.b_c] -= 0.8 * this.GSPEED;
                                    this.atoy[this.mc.b_c1] -= 0.8 * this.GSPEED;
                                    this.atoy[this.mc.b_c2] += 0.8 * this.GSPEED;
                                    this.atoy[this.mc.b_c3] += 0.8 * this.GSPEED;
                                    this.atox[this.mc.b_c] *= Math.pow(0.9,this.GSPEED);
                                    this.atoy[this.mc.b_c] *= Math.pow(0.9,this.GSPEED);
                                    this.atox[this.mc.b_c1] *= Math.pow(0.9,this.GSPEED);
                                    this.atoy[this.mc.b_c1] *= Math.pow(0.9,this.GSPEED);
                                    this.atox[this.mc.b_c2] *= Math.pow(0.9,this.GSPEED);
                                    this.atoy[this.mc.b_c2] *= Math.pow(0.9,this.GSPEED);
                                    this.atox[this.mc.b_c3] *= Math.pow(0.9,this.GSPEED);
                                    this.atoy[this.mc.b_c3] *= Math.pow(0.9,this.GSPEED);
                                    this.atoy[this.mc.b_c] += this.mc2.act_movey * 2 * this.GSPEED * this.v;
                                    this.atoy[this.mc.b_c1] += this.mc2.act_movey * 2 * this.GSPEED * this.v;
                                    this.atox[this.mc.b_c] += this.mc2.act_movex * 1 * this.GSPEED * this.u;
                                    this.atox[this.mc.b_c1] += this.mc2.act_movex * 1 * this.GSPEED * this.u;
                                    this.atox[this.mc.b_c2] += this.mc2.act_movex * 0.5 * this.GSPEED * this.u;
                                    this.atox[this.mc.b_c3] += this.mc2.act_movex * 0.5 * this.GSPEED * this.u;
                                    this.aio[this.mc.b_c] = true;
                                    this.aio[this.mc.b_c1] = true;
                                    this.aio[this.mc.b_c2] = true;
                                    this.aio[this.mc.b_c3] = true;
                                    this.atim[this.mc.b_c] = 0;
                                    this.atim[this.mc.b_c1] = 0;
                                    this.atim[this.mc.b_c2] = 0;
                                    this.atim[this.mc.b_c3] = 0;
                                    if(this.mc2.tarx > this.mc.x + 50 && this.mc.side == -1 || this.mc2.tarx < this.mc.x - 50 && this.mc.side == 1)
                                    {
                                       i2 = int(this.mc.b_c);
                                       this.mc.b_c = this.mc.b_c1;
                                       this.mc.b_c1 = i2;
                                       i2 = int(this.mc.b_c2);
                                       this.mc.b_c2 = this.mc.b_c3;
                                       this.mc.b_c3 = i2;
                                       if(this.mc2.tarx > this.mc.x)
                                       {
                                          this.mc.side = 1;
                                       }
                                       else
                                       {
                                          this.mc.side = -1;
                                       }
                                       this.mc.carbody.scaleY = this.mc.side;
                                       this.xx2 = Math.atan2(this.ax[this.mc.b_c] - this.ax[this.mc.b_c1],this.ay[this.mc.b_c] - this.ay[this.mc.b_c1]);
                                    }
                                 }
                                 else
                                 {
                                    this.mc.hea = 0;
                                 }
                                 this.mc2.stability = -0.1;
                                 this.xx = this.ax[this.mc.b_c];
                                 this.yy = this.ay[this.mc.b_c];
                                 this.TurnBone3(this.mc2.b_toe,this.xx,this.yy,0,0,1);
                                 this.mc2.x = this.xx;
                                 this.mc2.y = this.yy;
                                 this.mc2.tox = 0;
                                 this.mc2.toy = 0;
                              }
                           }
                           if(this.mc.hea <= 0)
                           {
                              if(!this.mc.dead)
                              {
                                 this.mc.dead = true;
                                 if(this.mc.master != -1)
                                 {
                                    this.mc2.hea = 0;
                                    this.mc2.visible = false;
                                    this.mc2.alpha = 0;
                                 }
                                 this.mc.gotoAndStop(3);
                                 this.mc.carbody.scaleY = this.mc.side;
                                 if(this.mc.typ == 4)
                                 {
                                    this.PlaySound(this.s_drone_die,this.mc.x,this.mc.y);
                                 }
                                 else
                                 {
                                    this.PlaySound(this.s_corvett_die,this.mc.x,this.mc.y);
                                 }
                                 if(this.mc.typ == 4)
                                 {
                                    this.PhysicsExplosion(this.ax[this.mc.b_c1],this.ay[this.mc.b_c1],200,8,30,-1,"vehicle");
                                 }
                                 else
                                 {
                                    this.PhysicsExplosion(this.ax[this.mc.b_c1],this.ay[this.mc.b_c1],400,11,80,-1,"vehicle");
                                 }
                              }
                           }
                           this.mc.x = this.ax[this.mc.b_c];
                           this.mc.y = this.ay[this.mc.b_c] + 100;
                           this.mc.carbody.y = -100;
                           this.mc.carbody.rotation = 270 - this.xx2 / Math.PI * 180;
                        }
                        else if(this.mc.typ == 5)
                        {
                           this.ax[this.mc.b_c0] = this.mc.x;
                           this.ay[this.mc.b_c0] = this.mc.y;
                           this.atox[this.mc.b_c0] = 0;
                           this.atoy[this.mc.b_c0] = 0;
                           if(this.mc.resttim > 0)
                           {
                              --this.mc.resttim;
                           }
                           i2 = 0;
                           while(i2 < 9)
                           {
                              this.mc["ch" + i2].x = this.ax[this.mc["b_c" + i2]] - this.mc.x;
                              this.mc["ch" + i2].y = this.ay[this.mc["b_c" + i2]] - this.mc.y;
                              this.aio[this.mc["b_c" + i2]] = true;
                              this.atim[this.mc["b_c" + i2]] = 0;
                              this.mc["ch" + i2].rotation = 180 - Math.atan2(this.ax[this.mc["b_c" + i2]] - this.ax[this.mc["b_c" + (i2 + 1)]],this.ay[this.mc["b_c" + i2]] - this.ay[this.mc["b_c" + (i2 + 1)]]) * 180 / Math.PI;
                              this.mc["ch" + i2].scaleY = this.Dist2D(this.ax[this.mc["b_c" + i2]],this.ay[this.mc["b_c" + i2]],this.ax[this.mc["b_c" + (i2 + 1)]],this.ay[this.mc["b_c" + (i2 + 1)]]) * 0.01;
                              if(this.mc.resttim <= 0)
                              {
                                 if(this.mc.master == -1)
                                 {
                                    if(!this.key_pick)
                                    {
                                       if(this.mens[this.MP_myid].incar == -1)
                                       {
                                          if(this.Dist2D(this.ax[this.mc["b_c" + i2]],this.ay[this.mc["b_c" + i2]],this.ax[this.mens[this.MP_myid].b_arm2],this.ay[this.mens[this.MP_myid].b_arm2]) < 40)
                                          {
                                             this.mc.master = this.MP_myid;
                                             this.mc.holdat = i2;
                                          }
                                       }
                                    }
                                 }
                              }
                              if(this.mc.master != -1)
                              {
                                 if(this.aactive[this.mc.master])
                                 {
                                    if(Math.round(this.mc.holdat) == i2)
                                    {
                                       this.mc2 = this.mens[this.mc.master];
                                       this.mc2.stability = -0.1;
                                       this.xx = (this.ax[this.mc2.b_body] + this.ax[this.mc["b_c" + i2]] * 3) * 0.25;
                                       this.yy = (this.ay[this.mc2.b_body] + this.ay[this.mc["b_c" + i2]] * 3) * 0.25;
                                       this.xx2 = (this.atox[this.mc2.b_body] + this.atox[this.mc["b_c" + i2]] * 3) * 0.25;
                                       this.yy2 = (this.atoy[this.mc2.b_body] + this.atoy[this.mc["b_c" + i2]] * 3) * 0.25;
                                       this.xx2 -= Math.cos(Math.atan2(this.mc.x - this.xx,this.mc.y - this.yy)) * this.mc2.act_movex * 1;
                                       this.yy2 -= Math.sin(Math.atan2(this.mc.x - this.xx,this.mc.y - this.yy)) * this.mc2.act_movex * 1;
                                       this.lax[this.mc["b_c" + i2]] = this.ax[this.mc["b_c" + i2]] = this.xx;
                                       this.lay[this.mc["b_c" + i2]] = this.ay[this.mc["b_c" + i2]] = this.yy;
                                       this.atox[this.mc["b_c" + i2]] = this.xx2;
                                       this.atoy[this.mc["b_c" + i2]] = this.yy2;
                                       this.u = this.xx2 - this.atox[this.mc2.b_body];
                                       this.v = this.yy2 - this.atoy[this.mc2.b_body];
                                       this.atox[this.mc2.b_body] += this.u;
                                       this.atoy[this.mc2.b_body] += this.v;
                                       this.atox[this.mc2.b_toe] += this.u * 0.8;
                                       this.atoy[this.mc2.b_toe] += this.v * 0.8;
                                       this.atox[this.mc2.b_head_start] += this.u;
                                       this.atoy[this.mc2.b_head_start] += this.v;
                                       this.atox[this.mc2.b_head_end] += this.u * 0.9;
                                       this.atoy[this.mc2.b_head_end] += this.v * 0.9;
                                       this.atox[this.mc2.b_arm1] += this.u;
                                       this.atoy[this.mc2.b_arm1] += this.v;
                                       this.atox[this.mc2.b_arm2] += this.u;
                                       this.atoy[this.mc2.b_arm2] += this.v;
                                       this.aio[this.mc["b_c" + i2]] = true;
                                       this.atim[this.mc["b_c" + i2]] = true;
                                       if(this.key_pick)
                                       {
                                          this.key_pick = false;
                                          this.mc.master = -1;
                                          this.mc.resttim = 10;
                                       }
                                       else if(this.key_fall || Boolean(this.mens[this.mc.master].dead))
                                       {
                                          this.key_fall = false;
                                          this.mc.master = -1;
                                          this.mc.resttim = 40;
                                       }
                                    }
                                 }
                              }
                              i2++;
                           }
                        }
                        else if(this.mc.typ == 6)
                        {
                           local_speed_x = 0;
                           local_speed_y = 0;
                           if(this.mc.attached != -1)
                           {
                              dx = this.mc.x;
                              dy = this.mc.y;
                              if(this.mc.side == 1)
                              {
                                 this.mc.x = this.doors[this.mc.attached].x;
                              }
                              else
                              {
                                 this.mc.x = this.doors[this.mc.attached].x + this.doors[this.mc.attached].w;
                              }
                              this.mc.y = this.doors[this.mc.attached].y;
                              local_speed_x = Number(this.doors[this.mc.attached].tox);
                              local_speed_y = Number(this.doors[this.mc.attached].toy);
                              if(this.mc.master != -1)
                              {
                                 dx -= this.mc.x;
                                 dy -= this.mc.y;
                                 di = this.Dist2D(dx,dy,0,0) / this.GSPEED;
                                 if(di > 50)
                                 {
                                    this.mc.master = -1;
                                    this.mc.resttim = 30;
                                 }
                              }
                           }
                           if(this.mc.resttim > 0)
                           {
                              this.mc.resttim -= 1 * this.GSPEED2;
                           }
                           if(this.mc.resttim <= 0)
                           {
                              if(this.mc.master == -1 || this.mens[this.mc.master] != undefined && this.mens[this.mc.master].team == this.mens[this.MP_myid].team)
                              {
                                 i2 = 0;
                                 while(i2 < this.playerstotal)
                                 {
                                    if(!this.key_pick || i2 != this.MP_myid)
                                    {
                                       if(i2 == this.MP_myid || !this.mens[i2].isplayer)
                                       {
                                          if(this.aactive[i2])
                                          {
                                             if(!this.mens[i2].dead)
                                             {
                                                if(this.mens[i2].incar == -1)
                                                {
                                                   if(this.mens[i2].side == this.mc.side)
                                                   {
                                                      if(this.mens[i2].x < this.mc.x && this.mc.side == 1 || this.mens[i2].x > this.mc.x && this.mc.side == -1)
                                                      {
                                                         if(this.Dist2D(this.mc.x,this.mc.y,this.ax[this.mens[i2].b_body],this.ay[this.mens[i2].b_body]) < 50)
                                                         {
                                                            if(this.mens[i2].act_movey == -1 || this.mens[i2].act_movex == this.mc.side)
                                                            {
                                                               if(this.mens[i2].act_movey != 1)
                                                               {
                                                                  if(this.Dist2D(this.atox[this.mens[i2].b_body],this.atoy[this.mens[i2].b_body],local_speed_x,local_speed_y) < 14)
                                                                  {
                                                                     if(this.ay[this.mens[i2].b_body] > this.mc.y)
                                                                     {
                                                                        if(this.atoy[this.mens[i2].b_body] > 0.2 + local_speed_y)
                                                                        {
                                                                           if(!this.mens[i2].stand)
                                                                           {
                                                                              if(this.mc.attached == -1 || this.TracePointOnlyBoxes(this.mc.x + this.mc.side * 5,this.mc.y - 5) && this.TracePointOnlyBoxes(this.mc.x - this.mc.side * 5,this.mc.y + 5))
                                                                              {
                                                                                 this.mc.master = i2;
                                                                                 if(this.MP_mode)
                                                                                 {
                                                                                    if(i2 == this.MP_myid)
                                                                                    {
                                                                                       this.MP_last_linked = i;
                                                                                    }
                                                                                 }
                                                                              }
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                    i2++;
                                 }
                              }
                           }
                           if(this.mc.master != -1)
                           {
                              if(this.aactive[this.mc.master])
                              {
                                 this.mc2 = this.mens[this.mc.master];
                                 if(this.mc2.stability > -0.1)
                                 {
                                    this.mc2.stability = -0.1;
                                 }
                                 this.ax[this.mc2.b_arm2] = this.mc.x;
                                 this.ay[this.mc2.b_arm2] = this.mc.y;
                                 if(this.GET_LITE_PHYS())
                                 {
                                    this.lax[this.mc2.b_arm2] = this.mc.x;
                                    this.lay[this.mc2.b_arm2] = this.mc.y;
                                 }
                                 this.atox[this.mc2.b_arm2] = local_speed_x;
                                 this.atoy[this.mc2.b_arm2] = local_speed_y;
                                 if(this.mc2.idd == this.MP_myid)
                                 {
                                    this.xx2 = Math.sqrt(this.GSPEED2);
                                 }
                                 else
                                 {
                                    this.xx2 = Math.sqrt(this.GSPEED);
                                 }
                                 this.yy2 = this.xx2;
                                 this.u = this.xx2 * 2;
                                 this.xx2 *= 1.5;
                                 if(this.mc2.isplayer && (this.mc2.act_movey == 1 || this.mc2.act_movex == -this.mc2.side || this.key_fall && this.mc.master == this.MP_myid) || Boolean(this.mc2.dead) || this.mc2.stability < -0.3)
                                 {
                                    this.atoy[this.mc2.b_toe] += 0.5;
                                    if(this.mc.master == this.MP_myid)
                                    {
                                       this.key_fall = false;
                                    }
                                    this.mc.master = -1;
                                    this.mc.resttim = 60;
                                 }
                                 else
                                 {
                                    if(!this.mc2.isplayer || this.mc2.act_movey == -1 || this.mc2.act_movex == this.mc2.side || this.key_pick && this.mc.master == this.MP_myid)
                                    {
                                       if(this.ax[this.mc2.b_toe] < this.mc.x + 5 && this.mc2.side == 1 || this.ax[this.mc2.b_toe] > this.mc.x - 5 && this.mc2.side == -1)
                                       {
                                          this.atoy[this.mc2.b_toe] -= 0.5 * this.xx2;
                                          this.atoy[this.mc2.b_body] -= 0.5 * this.xx2;
                                          this.ay[this.mc2.b_toe] -= 2 * this.u;
                                          this.ay[this.mc2.b_body] -= 3 * this.u;
                                          if(this.GET_LITE_PHYS())
                                          {
                                             this.lay[this.mc2.b_toe] -= 2 * this.u;
                                             this.lay[this.mc2.b_body] -= 3 * this.u;
                                          }
                                          if(this.Math_abs(this.atox[this.mc2.b_leg1]) < 2 || this.Math_abs(this.atox[this.mc2.b_leg2]) < 2)
                                          {
                                             this.atoy[this.mc2.b_body] *= Math.pow(0.7,this.yy2);
                                             this.atoy[this.mc2.b_toe] *= Math.pow(0.7,this.yy2);
                                             this.atoy[this.mc2.b_head_start] *= Math.pow(0.7,this.yy2);
                                             this.atoy[this.mc2.b_head_end] *= Math.pow(0.7,this.yy2);
                                             this.atoy[this.mc2.b_body] -= 1 * this.xx2;
                                             this.ay[this.mc2.b_body] -= 1 * this.u;
                                             this.atoy[this.mc2.b_head_start] -= 0.6 * this.xx2;
                                             this.ay[this.mc2.b_head_start] -= 0.6 * this.u;
                                             this.atox[this.mc2.b_head_start] += this.mc.side * 0.8 * this.xx2;
                                             this.atoy[this.mc2.b_head_end] -= 0.6 * this.xx2;
                                             this.ay[this.mc2.b_head_end] -= 0.6 * this.u;
                                             this.atox[this.mc2.b_head_end] += this.mc.side * 1 * this.xx2;
                                             this.atoy[this.mc2.b_toe] -= 1 * this.xx2;
                                             this.ay[this.mc2.b_toe] -= 1 * this.u;
                                             if(!this.GET_LITE_PHYS())
                                             {
                                                this.atox[this.mc2.b_body] += this.mc.side * 0.7 * this.xx2;
                                                this.atox[this.mc2.b_toe] += this.mc.side * 0.5 * this.xx2;
                                             }
                                             if(this.GET_LITE_PHYS())
                                             {
                                                this.lay[this.mc2.b_body] -= 1 * this.u;
                                                this.lay[this.mc2.b_toe] -= 1 * this.u;
                                                this.lay[this.mc2.b_head_start] -= 0.6 * this.u;
                                                this.lay[this.mc2.b_head_end] -= 0.6 * this.u;
                                             }
                                             if(this.ay[this.mc2.b_toe] < this.mc.y - 5 || (this.ay[this.mc2.b_leg1] < this.mc.y || this.ay[this.mc2.b_leg2] < this.mc.y))
                                             {
                                                this.mc.master = -1;
                                                this.mc.resttim = 30;
                                                this.mc2.stability = 0.5;
                                                this.mc2.sit = 1;
                                                this.mc2.tox = local_speed_x;
                                                this.mc2.toy = local_speed_y;
                                                this.u = this.mc.x + this.mc2.side * 5 * this.mc2.scale - this.mc2.x;
                                                this.v = this.mc.y + this.sitmax * this.mc2.scale - this.mc2.y;
                                                this.u = -this.u;
                                                this.v = -this.v;
                                                this.mc2.x = this.mc.x + this.mc2.side * 5 * this.mc2.scale;
                                                this.mc2.y = this.mc.y + this.sitmax * this.mc2.scale;
                                                this.mc2.gui.x += this.u;
                                                this.mc2.gui.y += this.v;
                                                this.mc2.body.x += this.u;
                                                this.mc2.body.y += this.v;
                                                this.mc2.head.x += this.u;
                                                this.mc2.head.y += this.v;
                                                this.mc2.toe.x += this.u;
                                                this.mc2.toe.y += this.v;
                                                this.mc2.arm1.x += this.u;
                                                this.mc2.arm1.y += this.v;
                                                this.mc2.arm2.x += this.u;
                                                this.mc2.arm2.y += this.v;
                                                this.mc2.leg1.x += this.u;
                                                this.mc2.leg1.y += this.v;
                                                this.mc2.leg2.x += this.u;
                                                this.mc2.leg2.y += this.v;
                                             }
                                          }
                                       }
                                       else if(this.mc2.side == 1)
                                       {
                                          this.atox[this.mc2.b_toe] -= 0.3 * this.xx2;
                                       }
                                       else
                                       {
                                          this.atox[this.mc2.b_toe] += 0.3 * this.xx2;
                                       }
                                    }
                                    this.atoy[this.mc2.b_arm1] += (this.mc.y - 5 - this.ay[this.mc2.b_arm1]) * 0.1 * this.xx2;
                                    this.atoy[this.mc2.b_body] += (this.mc.y - this.ay[this.mc2.b_body]) * 0.1 * this.xx2;
                                    this.ay[this.mc2.b_arm1] += (this.mc.y - 5 - this.ay[this.mc2.b_arm1]) * 0.2 * this.xx2;
                                    this.ay[this.mc2.b_body] += (this.mc.y - this.ay[this.mc2.b_body]) * 0.2 * this.xx2;
                                    if(this.GET_LITE_PHYS())
                                    {
                                       this.lay[this.mc2.b_arm1] += (this.mc.y - 5 - this.ay[this.mc2.b_arm1]) * 0.2 * this.xx2;
                                       this.lay[this.mc2.b_body] += (this.mc.y - this.ay[this.mc2.b_body]) * 0.2 * this.xx2;
                                    }
                                 }
                                 this.atox[this.mc2.b_body] += (this.mc.x - this.ax[this.mc2.b_body]) * 0.1 * this.xx2;
                                 this.atox[this.mc2.b_toe] -= this.mc2.side * 0.5 * this.xx2;
                                 this.atox[this.mc2.b_leg1] += this.mc2.side * 0.6 * this.xx2;
                                 this.atox[this.mc2.b_leg2] += this.mc2.side * 0.6 * this.xx2;
                                 this.atoy[this.mc2.b_leg1] -= 0.05 * this.xx2;
                                 this.atoy[this.mc2.b_leg2] += 0.05 * this.xx2;
                                 if(this.mc2.side == 1)
                                 {
                                    if(this.ax[this.mc2.b_toe] > this.mc.x)
                                    {
                                       this.ax[this.mc2.b_toe] = this.lax[this.mc2.b_toe] = this.mc.x;
                                       this.atox[this.mc2.b_toe] = Math.min(local_speed_x,this.atox[this.mc2.b_toe]);
                                    }
                                    if(this.ax[this.mc2.b_body] > this.mc.x)
                                    {
                                       this.ax[this.mc2.b_body] = this.lax[this.mc2.b_body] = this.mc.x;
                                       this.atox[this.mc2.b_body] = Math.min(local_speed_x,this.atox[this.mc2.b_body]);
                                    }
                                    if(this.ax[this.mc2.b_leg2] > this.mc.x)
                                    {
                                       this.ax[this.mc2.b_leg2] = this.lax[this.mc2.b_leg2] = this.mc.x;
                                       this.atox[this.mc2.b_leg2] = Math.min(local_speed_x,this.atox[this.mc2.b_leg2]);
                                    }
                                    if(this.ax[this.mc2.b_leg1] > this.mc.x)
                                    {
                                       this.ax[this.mc2.b_leg1] = this.lax[this.mc2.b_leg1] = this.mc.x;
                                       this.atox[this.mc2.b_leg1] = Math.min(local_speed_x,this.atox[this.mc2.b_leg1]);
                                    }
                                 }
                                 else
                                 {
                                    if(this.ax[this.mc2.b_toe] < this.mc.x)
                                    {
                                       this.ax[this.mc2.b_toe] = this.lax[this.mc2.b_toe] = this.mc.x;
                                       this.atox[this.mc2.b_toe] = Math.max(local_speed_x,this.atox[this.mc2.b_toe]);
                                    }
                                    if(this.ax[this.mc2.b_body] < this.mc.x)
                                    {
                                       this.ax[this.mc2.b_body] = this.lax[this.mc2.b_body] = this.mc.x;
                                       this.atox[this.mc2.b_body] = Math.max(local_speed_x,this.atox[this.mc2.b_body]);
                                    }
                                    if(this.ax[this.mc2.b_leg2] < this.mc.x)
                                    {
                                       this.ax[this.mc2.b_leg2] = this.lax[this.mc2.b_leg2] = this.mc.x;
                                       this.atox[this.mc2.b_leg2] = Math.max(local_speed_x,this.atox[this.mc2.b_leg2]);
                                    }
                                    if(this.ax[this.mc2.b_leg1] < this.mc.x)
                                    {
                                       this.ax[this.mc2.b_leg1] = this.lax[this.mc2.b_leg1] = this.mc.x;
                                       this.atox[this.mc2.b_leg1] = Math.max(local_speed_x,this.atox[this.mc2.b_leg1]);
                                    }
                                 }
                              }
                           }
                        }
                        if(this.mc.gui.visible)
                        {
                           this.mc.gui.x = 0;
                           this.mc.gui.y = -150;
                           if(this.mc.hea > 0)
                           {
                              this.mc.gui.h.scaleX = this.mc.hea / this.mc.hmax;
                           }
                           else if(this.mc.gui.alpha > 0)
                           {
                              this.mc.gui.h.scaleX = 0;
                              this.mc.gui.alpha -= 0.1 * this.GSPEED;
                           }
                           else
                           {
                              this.mc.gui.visible = false;
                           }
                        }
                        if(!this.vehicles[i].visible)
                        {
                           this.vehicles[i].visible = true;
                        }
                     }
                     else
                     {
                        this.aactive[-200 - i] = false;
                        if(this.vehicles[i].visible)
                        {
                           this.vehicles[i].visible = false;
                        }
                     }
                  }
                  i++;
               }
               i = 0;
               while(i < this.gunstotal)
               {
                  if(this.guns[i].io)
                  {
                     if(this.guns[i].picken_by == this.MP_myid)
                     {
                        if(this.guns[i].ThinkNow != undefined)
                        {
                           this.guns[i].ThinkNow(this.GSPEED2 * this.guns[i].speed_multiplier);
                        }
                     }
                     else if(this.guns[i].ThinkNow != undefined)
                     {
                        this.guns[i].ThinkNow(this.GSPEED * this.guns[i].speed_multiplier);
                     }
                     if(!this.guns[i].ready)
                     {
                        if(this.MP_mode)
                        {
                           if(this.MP_app)
                           {
                              if(this.guns[i].picken_by == -1)
                              {
                                 if(!this.guns[i].ready)
                                 {
                                    if(this.MP_type == 1 || this.MP_type == 3 || this.MP_type == 4)
                                    {
                                       allow_reload = true;
                                       i2 = 0;
                                       while(i2 < this.playerstotal)
                                       {
                                          if(this.mens[i2].io)
                                          {
                                             if(Math.abs(this.mens[i2].x - this.guns[i].x) < 800)
                                             {
                                                if(Math.abs(this.mens[i2].y - this.guns[i].y) < 800)
                                                {
                                                   allow_reload = false;
                                                   break;
                                                }
                                             }
                                          }
                                          i2++;
                                       }
                                       if(allow_reload)
                                       {
                                          this.guns[i].gotoAndStop(1);
                                       }
                                    }
                                 }
                              }
                           }
                        }
                        if(this.guns[i].picken_by == this.MP_myid)
                        {
                           this.guns[i].floatframe += this.GSPEED2 * this.guns[i].speed_multiplier;
                        }
                        else
                        {
                           this.guns[i].floatframe += this.GSPEED * this.guns[i].speed_multiplier;
                        }
                        this.MeasureStart(13);
                        if(this.guns[i].floatframe >= this.guns[i].totalFrames)
                        {
                           if(!this.guns[i].ready)
                           {
                              if(this.guns[i].picken_by != -1)
                              {
                                 if(this.guns[i].onreload != -1)
                                 {
                                    this.TRIGGER_PLAYER_INITIATOR = this.guns[i].picken_by;
                                    if(this.guns[i].picken_by == this.MP_myid || !this.mens[this.guns[i].picken_by].isplayer)
                                    {
                                       if(this.EXEC_TRIGGER(this.guns[i].onreload))
                                       {
                                          if(this.guns[i].picken_by == this.MP_myid && this.MP_mode)
                                          {
                                             this.MP_custom_events += ";exec|" + this.guns[i].onreload + "#" + this.guns[i].picken_by + "#" + -1;
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                           this.guns[i].floatframe = 2;
                           this.guns[i].ready = true;
                           this.guns[i].gotoAndStop(2);
                        }
                        else if(this.guns[i].currentFrame < Math.floor(this.guns[i].floatframe))
                        {
                           skips = 0;
                           while(skips < Math.floor(this.guns[i].floatframe) - this.guns[i].currentFrame)
                           {
                              this.guns[i].nextFrame();
                              skips++;
                           }
                        }
                        else
                        {
                           this.SetMCFrame(this.guns[i],Math.floor(this.guns[i].floatframe));
                        }
                        this.MeasureStop(13);
                     }
                     if(this.guns[i].ready)
                     {
                        if(this.guns[i].currentFrame != 2)
                        {
                           this.guns[i].gotoAndStop(2);
                           this.guns[i].floatframe = 2;
                        }
                     }
                     if(this.ax[this.guns[i].b_p1] > this.render_minX && this.ax[this.guns[i].b_p1] < this.render_maxX && this.ay[this.guns[i].b_p1] > this.render_minY && this.ay[this.guns[i].b_p1] < this.render_maxY || this.firstframe || this.guns[i].picken_by != -1 && this.aactive[this.guns[i].picken_by])
                     {
                        this.mc = this.guns[i];
                        if(this.mc.av > this.mc.stat_averange_max)
                        {
                           this.mc.av = this.mc.stat_averange_max - this.mc.stat_averange_substract;
                        }
                        else if(this.mc.picken_by == this.MP_myid)
                        {
                           this.mc.av -= this.mc.stat_averange_substract * this.GSPEED2;
                        }
                        else
                        {
                           this.mc.av -= this.mc.stat_averange_substract * this.GSPEED;
                        }
                        if(this.mc.av < this.mc.stat_averange_min)
                        {
                           this.mc.av = this.mc.stat_averange_min;
                        }
                        this.aactive[-1 - i] = true;
                        if(this.mc.forcars == false)
                        {
                           if(this.mc.picken_by != -1)
                           {
                              if(!this.mens[this.mc.picken_by].io)
                              {
                                 this.mc.picken_by = -1;
                              }
                           }
                           if(this.mc.picken_by != -1)
                           {
                              this.mc2 = this.mens[this.mc.picken_by];
                              this.mc.scaleY = this.mc2.side;
                              if(this.mc.alpha != this.mc2.alpha)
                              {
                                 this.mc.alpha = this.mc2.alpha;
                              }
                              if(this.mc2.curwea == i)
                              {
                                 if(!this.mc2.brk_arms)
                                 {
                                    this.xx = Math.atan2(this.ax[this.mc2.b_body] - this.ax[this.mc2.b_arm1],this.ay[this.mc2.b_body] - this.ay[this.mc2.b_arm1]);
                                    this.yy = this.chdef[this.mc.ch_ch1];
                                    this.TurnBone2(this.mc.b_p1,this.ax[this.mc2.b_arm1] + Math.sin(this.xx - Math.PI / 2) * this.mc.zpos * this.mc2.side,this.ay[this.mc2.b_arm1] + Math.cos(this.xx - Math.PI / 2) * this.mc.zpos * this.mc2.side,this.mc2,1);
                                    if(!this.mc2.dying || this.mc2.isplayer || !this.EASY_MODE)
                                    {
                                       this.TurnBone2(this.mc.b_p2,this.ax[this.mc2.b_arm1] - Math.sin(this.xx) * this.yy + Math.sin(this.xx - Math.PI / 2) * this.mc.zpos * this.mc2.side,this.ay[this.mc2.b_arm1] - Math.cos(this.xx) * this.yy + Math.cos(this.xx - Math.PI / 2) * this.mc.zpos * this.mc2.side,this.mc2,1);
                                    }
                                 }
                              }
                              else
                              {
                                 if(this.mc.attachment == 0)
                                 {
                                    this.TurnBone2(this.mc.b_p1,this.ax[this.mc2.b_toe],this.ay[this.mc2.b_toe],this.mc2,1);
                                    this.TurnBone2(this.mc.b_p2,this.ax[this.mc2.b_leg1],this.ay[this.mc2.b_leg1],this.mc2,1);
                                 }
                                 if(this.mc.attachment == 1)
                                 {
                                    this.xx = Math.atan2(this.ax[this.mc2.b_body] - this.ax[this.mc2.b_toe],this.ay[this.mc2.b_body] - this.ay[this.mc2.b_toe]) - Math.PI / 2;
                                    this.TurnBone2(this.mc.b_p2,this.ax[this.mc2.b_toe] - Math.sin(this.xx) * 15 * this.mc2.side * this.mc2.scale,this.ay[this.mc2.b_toe] - Math.cos(this.xx) * 15 * this.mc2.side * this.mc2.scale,this.mc2,1);
                                    this.TurnBone2(this.mc.b_p1,this.ax[this.mc2.b_body] - Math.sin(this.xx) * 15 * this.mc2.side * this.mc2.scale,this.ay[this.mc2.b_body] - Math.cos(this.xx) * 15 * this.mc2.side * this.mc2.scale,this.mc2,1);
                                 }
                                 if(this.mc.attachment == 2)
                                 {
                                    this.TurnBone2(this.mc.b_p1,this.ax[this.mc2.b_head_start],this.ay[this.mc2.b_head_start],this.mc2,1);
                                    this.TurnBone2(this.mc.b_p2,this.ax[this.mc2.b_head_end],this.ay[this.mc2.b_head_end],this.mc2,1);
                                 }
                                 if(this.mc.attachment == 3)
                                 {
                                    this.TurnBone2(this.mc.b_p1,this.ax[this.mc2.b_head_start],this.ay[this.mc2.b_head_start],this.mc2,1);
                                 }
                                 if(this.mc.attachment == 4)
                                 {
                                    this.TurnBone2(this.mc.b_p1,this.ax[this.mc2.b_body],this.ay[this.mc2.b_body],this.mc2,1);
                                 }
                              }
                              if(this.mc2.can_drop_guns)
                              {
                                 if(Boolean(this.mc2.dead) || !this.mc2.isplayer && (this.mc2.dying || this.mc2.stability < -0.2) && Math.random() < 0.01 * this.GSPEED && this.mc2.team != this.mens[this.MP_myid].team)
                                 {
                                    if(!this.CASUAL_MODE || !this.STRICT_MODE || this.mc2.team != this.mens[this.MP_myid].team || this.mc2.brk_arms || Boolean(this.mc2.brk_head) || Boolean(this.mc2.brk_legs) || Boolean(this.mc2.brk_body))
                                    {
                                       if(this.mc2.curwea == i)
                                       {
                                          this.mc2.curwea = -1;
                                       }
                                       this.ChangedGun(this.mc.picken_by);
                                       if(this.mc2.dead)
                                       {
                                          this.xx = 1 + Math.random() * Math.PI * 2;
                                          this.atox[this.mc.b_p1] += Math.sin(this.xx) * 2;
                                          this.atoy[this.mc.b_p1] += Math.cos(this.xx) * 2;
                                          this.atox[this.mc.b_p2] -= Math.sin(this.xx) * 2;
                                          this.atoy[this.mc.b_p2] -= Math.cos(this.xx) * 2;
                                       }
                                       if(this.mc.picken_by == this.MP_myid)
                                       {
                                          if(this.mc.wep == -2)
                                          {
                                             if(this.mc.nadekind == 1)
                                             {
                                                if(this.grenades_total > 0)
                                                {
                                                   --this.grenades_total;
                                                }
                                             }
                                             if(this.mc.nadekind == 2)
                                             {
                                                if(this.grenades_port_total > 0)
                                                {
                                                   --this.grenades_port_total;
                                                }
                                             }
                                             if(this.mc.nadekind == 3)
                                             {
                                                if(this.grenades_sh_total > 0)
                                                {
                                                   --this.grenades_sh_total;
                                                }
                                             }
                                          }
                                       }
                                       this.mc.picken_by = -1;
                                    }
                                 }
                              }
                              this.WakeUpAtom(this.mc.b_p1);
                              this.WakeUpAtom(this.mc.b_p2);
                              this.amat[this.mc.b_p1] = -1;
                              this.amat[this.mc.b_p2] = -1;
                           }
                           else
                           {
                              this.ok = true;
                              i2 = 0;
                              while(i2 < this.gunstotal && this.ok)
                              {
                                 if(this.guns[i2].io)
                                 {
                                    if(!this.guns[i2].forcars)
                                    {
                                       if(this.guns[i2].wep > 0)
                                       {
                                          if(this.guns[i2].picken_by == this.MP_myid)
                                          {
                                             if(this.guns[i2].model == this.mc.model)
                                             {
                                                if(this.guns[i2].upg >= this.mc.upg)
                                                {
                                                   this.ok = false;
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                                 i2++;
                              }
                              if((this.mc.command != -1 || !this.ok) && this.mc.command != this.mens[this.MP_myid].team && !this.MP_mode)
                              {
                                 if(!this.SUPER_COMPUTER && (!this.HQ || this.c_sim_stress) || this.MEAT_MODE)
                                 {
                                    ++this.mc.deadtim;
                                 }
                                 if(this.c_sim_stress)
                                 {
                                    if(this.mc.deadtim > 200)
                                    {
                                       this.mc.alpha -= 0.4;
                                    }
                                 }
                                 else if(this.mc.deadtim > 400)
                                 {
                                    this.mc.alpha -= 0.1;
                                 }
                                 if(this.mc.alpha < 0)
                                 {
                                    this.DestroyGun(i);
                                 }
                              }
                              else if(this.mc.alpha != 1)
                              {
                                 this.mc.alpha = 1;
                              }
                           }
                        }
                        else if(this.mc.picken_by != -1)
                        {
                           this.mc2 = this.vehicles[this.mc.picken_by];
                           this.amat[this.mc.b_p1] = -1;
                           this.amat[this.mc.b_p2] = -1;
                        }
                        if(this.mc.io)
                        {
                           this.mc.x = this.ax[this.mc.b_p1];
                           this.mc.y = this.ay[this.mc.b_p1];
                           this.mc.rotation = -Math.atan2(this.ax[this.mc.b_p1] - this.ax[this.mc.b_p2],this.ay[this.mc.b_p1] - this.ay[this.mc.b_p2]) / Math.PI * 180 - 90;
                           if(this.mc.picken_by == -1)
                           {
                              if(this.mc.forcars == false)
                              {
                                 i2 = 0;
                                 while(i2 < this.playerstotal && this.mc.picken_by == -1)
                                 {
                                    if(!this.mens[i2].dead)
                                    {
                                       if(!this.mens[i2].isplayer || this.MP_myid == i2 && !this.MP_spectator)
                                       {
                                          if(this.mc.command == -1 || this.MP_mode && this.MP_type == 1 || this.MP_mode && this.MP_type == 4 || this.mc.command != -1 && this.mc.command == this.mens[i2].team && (this.mens[i2].isplayer || this.mens[this.MP_myid].team != this.mens[i2].team))
                                          {
                                             if(this.mens[i2].stability >= -0.5)
                                             {
                                                this.mc2 = this.mens[i2];
                                                if(!this.mc2.brk_arms)
                                                {
                                                   if(this.mc.x > this.mc2.x - 40)
                                                   {
                                                      if(this.mc.x < this.mc2.x + 40)
                                                      {
                                                         if(this.mc.y > this.mc2.y - 90)
                                                         {
                                                            if(this.mc.y < this.mc2.y + 30)
                                                            {
                                                               this.ok = true;
                                                               if(this.MP_mode)
                                                               {
                                                                  if(this.MP_gamestate != 0)
                                                                  {
                                                                     this.ok = false;
                                                                  }
                                                               }
                                                               if(this.mc.wep != -2)
                                                               {
                                                                  this.i3 = 0;
                                                                  while(this.i3 < this.gunstotal && this.ok)
                                                                  {
                                                                     if(this.guns[this.i3].io)
                                                                     {
                                                                        if(i != this.i3)
                                                                        {
                                                                           if(!this.guns[this.i3].forcars)
                                                                           {
                                                                              if(this.guns[this.i3].picken_by == i2 && this.guns[this.i3].wep == this.mc.wep)
                                                                              {
                                                                                 this.ok = false;
                                                                              }
                                                                           }
                                                                        }
                                                                     }
                                                                     ++this.i3;
                                                                  }
                                                               }
                                                               if(i2 == this.MP_myid && this.key_grab)
                                                               {
                                                                  this.ok = false;
                                                               }
                                                               if(i2 == this.MP_myid)
                                                               {
                                                                  if(this.mc.wep == -2)
                                                                  {
                                                                     if(this.mc.nadekind == 1)
                                                                     {
                                                                        if(this.grenades_total >= 6)
                                                                        {
                                                                           this.ok = false;
                                                                        }
                                                                     }
                                                                     if(this.mc.nadekind == 2)
                                                                     {
                                                                        if(this.grenades_port_total >= 6)
                                                                        {
                                                                           this.ok = false;
                                                                        }
                                                                     }
                                                                     if(this.mc.nadekind == 3)
                                                                     {
                                                                        if(this.grenades_sh_total >= 6)
                                                                        {
                                                                           this.ok = false;
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                               if(this.ok)
                                                               {
                                                                  if(i2 != this.MP_myid || this.IgnoreGunPickTempCanI(this.mc))
                                                                  {
                                                                     if(this.mc.wep == -2)
                                                                     {
                                                                        if(i2 == this.MP_myid)
                                                                        {
                                                                           if(this.mc.nadekind == 1)
                                                                           {
                                                                              ++this.grenades_total;
                                                                              this.UpdateWeps();
                                                                           }
                                                                           if(this.mc.nadekind == 2)
                                                                           {
                                                                              ++this.grenades_port_total;
                                                                              this.UpdateWeps();
                                                                           }
                                                                           if(this.mc.nadekind == 3)
                                                                           {
                                                                              ++this.grenades_sh_total;
                                                                              this.UpdateWeps();
                                                                           }
                                                                        }
                                                                     }
                                                                     if(i2 == this.MP_myid)
                                                                     {
                                                                        if(!this.firstframe)
                                                                        {
                                                                           this.PlaySound(this.s_wea_pickup,this.mc.x,this.mc.y);
                                                                        }
                                                                     }
                                                                     this.mc.picken_by = i2;
                                                                     if(i2 != this.MP_myid)
                                                                     {
                                                                        if(this.mc2.curwea == -1 || this.CalcWepPriority(this.guns[i]) > this.CalcWepPriority(this.guns[this.mc2.curwea]))
                                                                        {
                                                                           if(this.mc.wep >= 0)
                                                                           {
                                                                              this.mc2.curwea = i;
                                                                              this.mc.deadtim = 0;
                                                                              this.ChangedGun(i2);
                                                                           }
                                                                        }
                                                                     }
                                                                     if(i2 == this.MP_myid)
                                                                     {
                                                                        if(this.AUTO_PICK_NEW_WEPS && !this.firstframe || this.mc2.char == 1 && this.firstframe && this.curA == this.mc.model || this.mc2.char == 3 && this.firstframe && this.curB == this.mc.model)
                                                                        {
                                                                           if(this.mc.wep >= 0)
                                                                           {
                                                                              this.mc2.curwea = i;
                                                                              this.ChangedGun(i2);
                                                                           }
                                                                        }
                                                                        else if(!this.firstframe)
                                                                        {
                                                                           if(this.mc.wep >= 0)
                                                                           {
                                                                              if(this.mc.wep <= 9)
                                                                              {
                                                                                 this.weps["gi" + this.mc.wep].gotoAndStop(2);
                                                                              }
                                                                           }
                                                                        }
                                                                        this.UpdateWeps();
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                    i2++;
                                 }
                              }
                              this.amat[this.mc.b_p1] = 2;
                              this.amat[this.mc.b_p2] = 2;
                           }
                           if(!this.guns[i].visible)
                           {
                              this.guns[i].visible = true;
                           }
                        }
                     }
                     else
                     {
                        this.aactive[-1 - i] = false;
                        if(this.guns[i].visible)
                        {
                           this.guns[i].visible = false;
                        }
                     }
                     if(this.guns[i].ray != undefined)
                     {
                        this.ok = false;
                        this.ok2 = false;
                        if(this.guns[i].picken_by != -1)
                        {
                           if(!this.mens[this.guns[i].picken_by].dead)
                           {
                              if(this.mens[this.guns[i].picken_by].curwea == i)
                              {
                                 this.ok2 = true;
                                 this.xx = this.guns[i].x;
                                 this.yy = this.guns[i].y;
                                 this.xx2 = this.xx + Math.sin(this.mens[this.guns[i].picken_by].ang) * 3000;
                                 this.yy2 = this.yy + Math.cos(this.mens[this.guns[i].picken_by].ang) * 3000;
                                 this.u = 3000;
                                 i2 = 0;
                                 while(i2 < this.playerstotal)
                                 {
                                    if(!this.mens[i2].dying)
                                    {
                                       if(!this.mens[i2].dead)
                                       {
                                          if(this.mens[this.guns[i].picken_by].team != this.mens[i2].team)
                                          {
                                             if(this.CheckCrossSimpleOpti(this.xx,this.yy,this.xx2,this.yy2,this.mens[i2].x - this.PLAYER_WIDTH,this.mens[i2].y - 81,this.mens[i2].x + this.PLAYER_WIDTH,this.mens[i2].y) || this.CheckCrossSimpleOpti(this.xx,this.yy,this.xx2,this.yy2,this.mens[i2].x + this.PLAYER_WIDTH,this.mens[i2].y - 81,this.mens[i2].x - this.PLAYER_WIDTH,this.mens[i2].y))
                                             {
                                                if(this.TraceLine(this.retux,this.retuy,this.xx,this.yy))
                                                {
                                                   this.ok = true;
                                                   this.v = this.Dist2D(this.xx,this.yy,this.retux,this.retuy);
                                                   if(this.v < this.u)
                                                   {
                                                      this.xx2 = this.retux;
                                                      this.yy2 = this.retuy;
                                                      this.u = this.v;
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                    i2++;
                                 }
                                 i2 = 0;
                                 while(i2 < this.boxestotal)
                                 {
                                    if(this.CheckCrossSimpleOpti(this.xx,this.yy,this.xx2,this.yy2,this.boxx[i2],this.boxy[i2],this.boxx[i2] + this.boxw[i2],this.boxy[i2]))
                                    {
                                       this.v = this.Dist2D(this.xx,this.yy,this.retux,this.retuy);
                                       if(this.v < this.u)
                                       {
                                          this.xx2 = this.retux;
                                          this.yy2 = this.retuy;
                                          this.u = this.v;
                                       }
                                    }
                                    if(this.CheckCrossSimpleOpti(this.xx,this.yy,this.xx2,this.yy2,this.boxx[i2],this.boxy[i2] + this.boxh[i2],this.boxx[i2] + this.boxw[i2],this.boxy[i2] + this.boxh[i2]))
                                    {
                                       this.v = this.Dist2D(this.xx,this.yy,this.retux,this.retuy);
                                       if(this.v < this.u)
                                       {
                                          this.xx2 = this.retux;
                                          this.yy2 = this.retuy;
                                          this.u = this.v;
                                       }
                                    }
                                    if(this.CheckCrossSimpleOpti(this.xx,this.yy,this.xx2,this.yy2,this.boxx[i2],this.boxy[i2],this.boxx[i2],this.boxy[i2] + this.boxh[i2]))
                                    {
                                       this.v = this.Dist2D(this.xx,this.yy,this.retux,this.retuy);
                                       if(this.v < this.u)
                                       {
                                          this.xx2 = this.retux;
                                          this.yy2 = this.retuy;
                                          this.u = this.v;
                                       }
                                    }
                                    if(this.CheckCrossSimpleOpti(this.xx,this.yy,this.xx2,this.yy2,this.boxx[i2] + this.boxw[i2],this.boxy[i2],this.boxx[i2] + this.boxw[i2],this.boxy[i2] + this.boxh[i2]))
                                    {
                                       this.v = this.Dist2D(this.xx,this.yy,this.retux,this.retuy);
                                       if(this.v < this.u)
                                       {
                                          this.xx2 = this.retux;
                                          this.yy2 = this.retuy;
                                          this.u = this.v;
                                       }
                                    }
                                    i2++;
                                 }
                              }
                           }
                        }
                        this.MeasureStart(14);
                        if(this.guns[i].ready)
                        {
                           if(this.guns[i].riflestatus != undefined)
                           {
                              if(this.ok)
                              {
                                 this.SetMCFrame(this.guns[i].riflestatus,2);
                              }
                              else
                              {
                                 this.SetMCFrame(this.guns[i].riflestatus,1);
                              }
                           }
                        }
                        this.MeasureStop(14);
                        if(this.ok2 && Boolean(this.guns[i].ready))
                        {
                           this.guns[i].ray.scaleX = this.u / 100;
                           if(!this.guns[i].ray.visible)
                           {
                              this.guns[i].ray.visible = true;
                           }
                           this.guns[i].ray.rotation = (90 - this.guns[i].rotation - this.mens[this.guns[i].picken_by].ang / Math.PI * 180) * this.guns[i].scaleY;
                        }
                        else if(this.guns[i].ray.visible)
                        {
                           this.guns[i].ray.visible = false;
                        }
                     }
                  }
                  i++;
               }
               if(this.DEBUG_MODE)
               {
               }
               i = 0;
               while(i < this.timerstotal)
               {
                  if(this.DEBUG_MODE)
                  {
                  }
                  if(this.timers[i].enabledd)
                  {
                     if(this.timers[i].maxcalls > 0 || this.timers[i].maxcalls == -1)
                     {
                        this.yy2 = 1;
                        this.timers[i].ticknew += this.GSPEED * this.yy2;
                        if(this.timers[i].ticknew >= this.timers[i].ddelay)
                        {
                           this.timers[i].ticknew = 0;
                           if(this.timers[i].maxcalls != -1)
                           {
                              --this.timers[i].maxcalls;
                              if(this.timers[i].maxcalls <= 0)
                              {
                                 this.timers[i].enabledd = false;
                              }
                           }
                           if(this.timers[i].actions_target != -1)
                           {
                              this.triggers[this.timers[i].actions_target].forcehyperjump = false;
                              this.EXEC_TRIGGER(this.timers[i].actions_target);
                           }
                        }
                     }
                  }
                  i++;
               }
               i = 0;
               while(i < this.barrelstotal)
               {
                  if(this.barrels[i].x > -this.game.x / this.game_scale - this.screenX / this.game_scale && this.barrels[i].x < -this.game.x / this.game_scale + this.screenX * 2 / this.game_scale && this.barrels[i].y > -this.game.y / this.game_scale - this.screenY / this.game_scale && this.barrels[i].y < -this.game.y / this.game_scale + this.screenY * 2 / this.game_scale || this.ax[this.barrels[i].b_left_top] > -this.game.x / this.game_scale - this.screenX / this.game_scale && this.ax[this.barrels[i].b_left_top] < -this.game.x / this.game_scale + this.screenX * 2 / this.game_scale && this.ay[this.barrels[i].b_left_top] > -this.game.y / this.game_scale - this.screenY / this.game_scale && this.ay[this.barrels[i].b_left_top] < -this.game.y / this.game_scale + this.screenY * 2 / this.game_scale || this.ax[this.barrels[i].b_left_bottom] > -this.game.x / this.game_scale - this.screenX / this.game_scale && this.ax[this.barrels[i].b_left_bottom] < -this.game.x / this.game_scale + this.screenX * 2 / this.game_scale && this
                  .ay[this.barrels[i].b_left_bottom] > -this.game.y / this.game_scale - this.screenY / this.game_scale && this.ay[this.barrels[i].b_left_bottom] < -this.game.y / this.game_scale + this.screenY * 2 / this.game_scale)
                  {
                     this.aactive[-100 - i] = true;
                     this.mc = this.barrels[i];
                     if(this.mc.hea > 0)
                     {
                        this.mc.x = (this.ax[this.mc.b_left_top] + this.ax[this.mc.b_right_bottom] + this.ax[this.mc.b_right_top] + this.ax[this.mc.b_left_bottom]) / 4;
                        this.mc.y = (this.ay[this.mc.b_left_top] + this.ay[this.mc.b_right_bottom] + this.ay[this.mc.b_right_top] + this.ay[this.mc.b_left_bottom]) / 4;
                        this.mc.rotation = 180 - Math.atan2(this.ax[this.mc.b_left_top] - this.ax[this.mc.b_left_bottom],this.ay[this.mc.b_left_top] - this.ay[this.mc.b_left_bottom]) / Math.PI * 180;
                        if(this.aio[this.barrels[i].b_left_top] == true || this.aio[this.barrels[i].b_left_bottom] == true || this.aio[this.barrels[i].b_right_top] == true || this.aio[this.barrels[i].b_right_bottom] == true)
                        {
                           this.u = this.Dist2D(this.ax[this.barrels[i].b_left_top],this.ay[this.barrels[i].b_left_top],this.ax[this.barrels[i].b_right_top],this.ay[this.barrels[i].b_right_top]);
                           this.v = this.Dist2D(this.ax[this.barrels[i].b_left_top],this.ay[this.barrels[i].b_left_top],this.ax[this.barrels[i].b_left_bottom],this.ay[this.barrels[i].b_left_bottom]);
                           this.yy = this.Dist2D(this.ax[this.barrels[i].b_left_bottom],this.ay[this.barrels[i].b_left_bottom],this.ax[this.barrels[i].b_right_top],this.ay[this.barrels[i].b_right_top]);
                           this.xx = (this.u + this.v + this.yy) * 0.5;
                           this.xx = this.xx * (this.xx - this.u) * (this.xx - this.v) * (this.xx - this.yy);
                           if(this.xx < 1)
                           {
                              this.mc.hea = 0;
                              this.HurtBarrel(i);
                           }
                        }
                     }
                     else
                     {
                        this.mc.b1.x = (this.ax[this.mc.b_left_top] + this.ax[this.mc.b_left1] + this.ax[this.mc.b_right_top] + this.ax[this.mc.b_right1]) / 4 - this.mc.x;
                        this.mc.b1.y = (this.ay[this.mc.b_left_top] + this.ay[this.mc.b_left1] + this.ay[this.mc.b_right_top] + this.ay[this.mc.b_right1]) / 4 - this.mc.y;
                        this.mc.b1.rotation = -Math.atan2(this.ax[this.mc.b_left_top] - this.ax[this.mc.b_left1],this.ay[this.mc.b_left_top] - this.ay[this.mc.b_left1]) / Math.PI * 180;
                        this.mc.b2.x = (this.ax[this.mc.b_left_bottom] + this.ax[this.mc.b_left2] + this.ax[this.mc.b_right_bottom] + this.ax[this.mc.b_right2]) / 4 - this.mc.x;
                        this.mc.b2.y = (this.ay[this.mc.b_left_bottom] + this.ay[this.mc.b_left2] + this.ay[this.mc.b_right_bottom] + this.ay[this.mc.b_right2]) / 4 - this.mc.y;
                        this.mc.b2.rotation = -Math.atan2(this.ax[this.mc.b_left_bottom] - this.ax[this.mc.b_left2],this.ay[this.mc.b_left_bottom] - this.ay[this.mc.b_left2]) / Math.PI * 180;
                        this.n2 = 0;
                        while(this.n2 < 10)
                        {
                           if(this.mc["g" + this.n2].visible == true)
                           {
                              this.mc["g" + this.n2].x = this.ax[this.mc["b_g" + this.n2]] - this.mc.x;
                              this.mc["g" + this.n2].y = this.ay[this.mc["b_g" + this.n2]] - this.mc.y;
                              this.mc["g" + this.n2].rotation = this.mc["g" + this.n2].x * 3 + this.n2 * 60;
                              if(this.aio[this.mc["b_g" + this.n2]] == false)
                              {
                                 if(this.mc["g" + this.n2].alpha > 0)
                                 {
                                    this.mc["g" + this.n2].alpha -= 0.1;
                                 }
                                 else
                                 {
                                    this.mc["g" + this.n2].visible = false;
                                    this.aio[this.mc["b_g" + this.n2]] = -1;
                                 }
                              }
                              else if(this.mc["g" + this.n2].alpha < 1)
                              {
                                 this.mc["g" + this.n2].alpha += 0.1;
                              }
                           }
                           ++this.n2;
                        }
                     }
                     if(!this.barrels[i].visible)
                     {
                        this.barrels[i].visible = true;
                     }
                  }
                  else
                  {
                     this.aactive[-100 - i] = false;
                     if(this.barrels[i].visible)
                     {
                        this.barrels[i].visible = false;
                     }
                  }
                  i++;
               }
               i = 0;
               while(i < this.flarestotal)
               {
                  this.mc = this.flare[i];
                  if(this.mc.x > -this.game.x / this.game_scale && this.mc.x < (-this.game.x + this.screenX) / this.game_scale && this.mc.y > -this.game.y / this.game_scale && this.mc.y < (-this.game.y + this.screenY) / this.game_scale)
                  {
                     this.mc.alpha = (this.mc.alpha + this.flare_power[i]) / 2;
                     if(!this.mc.visible)
                     {
                        this.mc.visible = true;
                     }
                  }
                  else
                  {
                     this.mc.alpha /= 2;
                     if(this.mc.visible && this.mc.alpha < 0.05)
                     {
                        this.mc.visible = false;
                     }
                  }
                  if(this.mc.visible)
                  {
                     if(this.HQ || this.SUPER_COMPUTER)
                     {
                        this.mc.f2.x = (-this.game.x + this.hscreenX - this.mc.x) * 0.4;
                        this.mc.f2.y = (-this.game.y + this.hscreenY - this.mc.y) * 0.4;
                        this.mc.f3.x = (-this.game.x + this.hscreenX - this.mc.x) * 0.8;
                        this.mc.f3.y = (-this.game.y + this.hscreenY - this.mc.y) * 0.8;
                        this.mc.f4.x = (-this.game.x + this.hscreenX - this.mc.x) * 1.4;
                        this.mc.f4.y = (-this.game.y + this.hscreenY - this.mc.y) * 1.4;
                        this.mc.f5.x = (-this.game.x + this.hscreenX - this.mc.x) * 1.8;
                        this.mc.f5.y = (-this.game.y + this.hscreenY - this.mc.y) * 1.8;
                        this.mc.f6.x = (-this.game.x + this.hscreenX - this.mc.x) * 1.5;
                        this.mc.f6.y = (-this.game.y + this.hscreenY - this.mc.y) * 1.5;
                     }
                     else if(this.mc.f2.visible)
                     {
                        this.mc.f2.visible = false;
                        this.mc.f3.visible = false;
                        this.mc.f4.visible = false;
                        this.mc.f5.visible = false;
                        this.mc.f6.visible = false;
                     }
                  }
                  i++;
               }
               player_got_dot_effects = false;
               e = 0;
               while(e < this.mens[this.MP_myid].effects.length)
               {
                  if(this.mens[this.MP_myid].effects[e].type == "DOT")
                  {
                     player_got_dot_effects = true;
                     break;
                  }
                  e++;
               }
               target_frame = 1;
               if(player_got_dot_effects)
               {
                  target_frame = 2;
               }
               if(this.hp_box.currentFrame != target_frame)
               {
                  this.hp_box.gotoAndStop(target_frame);
                  c = new Color();
                  c.setTint(target_frame == 1 ? 16711680 : 65280,1);
                  this.hp_box.hp.transform.colorTransform = c;
                  c = new Color();
                  c.setTint(target_frame == 1 ? 4128768 : 16128,1);
                  this.hp_box.hp_over.transform.colorTransform = c;
               }
               this.xx = Math.max(this.mens[this.MP_myid].hea / this.mens[this.MP_myid].hmax,0);
               this.hp_box.hp.scaleX = this.xx;
               if(this.hp_box.hp_over.scaleX < this.xx)
               {
                  this.hp_box.hp_over.scaleX = this.xx;
               }
               else if(this.hp_box.hp_over.scaleX > this.xx)
               {
                  this.hp_box.hp_over.scaleX -= 0.01;
               }
               this.hp_box.hp_over.x = this.hp_box.hp.x;
               if(!this.SCREEN_FADE_EFFECTS)
               {
                  if(this.darkness.visible)
                  {
                     if(this.MP_mode)
                     {
                        this.hp_box.hp_over.scaleX = this.darkness.alpha;
                     }
                  }
               }
               this.hp_box.hp_txt.text = Math.ceil(Math.ceil(this.xx * this.mens[this.MP_myid].hmax)).toString();
               if(this.mens[this.MP_myid].incar != -1)
               {
                  this.vehhp.hp.scaleX = Math.max(this.vehicles[this.mens[this.MP_myid].incar].hea / this.vehicles[this.mens[this.MP_myid].incar].hmax,0);
                  this.vehhp.hp_txt.text = Math.ceil(Math.max(this.vehicles[this.mens[this.MP_myid].incar].hea,0)).toString();
               }
               if(this.ALLOW_TIMESHIFT)
               {
                  this.xx = Math.max(this.energy / this.energy_max,0);
                  this.nrg.en_txt.text = Math.ceil(Math.ceil(this.xx * this.energy_max)).toString();
                  this.nrg.en.scaleX = this.xx;
               }
               if(this.mini_scenario_cur != -1)
               {
                  if(this.mini_scenario_cur == 0)
                  {
                     this.mc = this.mens[this.MP_myid];
                     if(this.mini_scenario_phase == 0)
                     {
                        this.i3 = 1;
                        if(this.MP_mode)
                        {
                           this.i3 = this.MP_myspecials[this.MP_assigning_special].nadekind;
                        }
                        this.ok = true;
                        i2 = 0;
                        while(i2 < this.gunstotal)
                        {
                           if(this.guns[i2].io)
                           {
                              if(!this.guns[i2].forcars)
                              {
                                 if(this.guns[i2].picken_by == this.MP_myid)
                                 {
                                    if(this.guns[i2].wep == -2)
                                    {
                                       if(this.guns[i2].nadekind == this.i3)
                                       {
                                          if(!this.MP_mode)
                                          {
                                             this.guns[i2].x = -10000;
                                             this.guns[i2].y = -10000;
                                             this.guns[i2].scaleX = 0;
                                             this.guns[i2].scaleY = 0;
                                             this.game.removeChild(this.guns[i2]);
                                             this.guns[i2] = new Object();
                                             this.guns[i2].io = false;
                                          }
                                          else
                                          {
                                             this.guns[i2].alpha = 0;
                                             this.guns[i2].io = false;
                                          }
                                          i2 = this.gunstotal;
                                          this.ok = false;
                                          this.UpdateWeps();
                                       }
                                    }
                                 }
                              }
                           }
                           i2++;
                        }
                        if(this.MP_mode)
                        {
                           if(this.i3 == 1)
                           {
                              if(this.grenades_total > 0)
                              {
                                 --this.grenades_total;
                                 this.ok = false;
                                 this.UpdateWeps();
                              }
                           }
                           else if(this.i3 == 2)
                           {
                              if(this.grenades_port_total > 0)
                              {
                                 --this.grenades_port_total;
                                 this.ok = false;
                                 this.UpdateWeps();
                              }
                           }
                           else if(this.i3 == 3)
                           {
                              if(this.grenades_sh_total > 0)
                              {
                                 --this.grenades_sh_total;
                                 this.ok = false;
                                 this.UpdateWeps();
                              }
                           }
                        }
                        if(this.ok)
                        {
                           this.mini_scenario_cur = -1;
                           this.mini_scenario_phase = 0;
                        }
                     }
                     if(this.mini_scenario_phase == 1)
                     {
                        if(this.puls[this.pulscur] != null)
                        {
                           if(this.game.contains(this.puls[this.pulscur]))
                           {
                              this.game.removeChild(this.puls[this.pulscur]);
                              this.puls[this.pulscur] = null;
                           }
                        }
                        this.puls[this.pulscur] = this.game.addChildAt(new lazer(),this.game.numChildren);
                        this.NewBullet(this.puls[this.pulscur]);
                        this.NoMouse(this.puls[this.pulscur]);
                        this.xx = this.mc.ang + Math.PI;
                        this.puls[this.pulscur].lag = 0;
                        this.PlaySound(this.s_nade_throw,this.mc.x,this.mc.y - 50);
                        this.puls[this.pulscur].thisis = "item_grenade";
                        this.puls[this.pulscur].cclass = 6;
                        this.puls[this.pulscur].nadekind = 1;
                        this.puls[this.pulscur].notbliped = true;
                        this.puls[this.pulscur].x = this.ax[this.mc.b_arm2];
                        this.puls[this.pulscur].y = this.ay[this.mc.b_arm2];
                        this.puls[this.pulscur].nx = this.ax[this.mc.b_body];
                        this.puls[this.pulscur].ny = this.ay[this.mc.b_body];
                        this.puls[this.pulscur].power = 3;
                        this.puls[this.pulscur].maxpower = 3;
                        this.puls[this.pulscur].knockback_multiplier = 1;
                        this.puls[this.pulscur].inwater = this.ainwater[this.mc.b_arm2] && this.wa_friction[this.ainwater_shape[this.mc.b_arm2]];
                        this.puls[this.pulscur].lastin = 0;
                        this.puls[this.pulscur].lastinbox = this.boxestotal;
                        this.puls[this.pulscur].master = this.MP_myid;
                        this.i3 = 1;
                        if(this.MP_mode)
                        {
                           this.i3 = this.MP_myspecials[this.MP_assigning_special].nadekind;
                        }
                        this.puls[this.pulscur].nadekind = this.i3;
                        this.puls[this.pulscur].maxbulletlife = 60;
                        if(this.i3 == 1)
                        {
                           this.puls[this.pulscur].gotoAndStop(11);
                        }
                        if(this.i3 == 2)
                        {
                           this.puls[this.pulscur].gotoAndStop(17);
                        }
                        if(this.i3 == 3)
                        {
                           this.puls[this.pulscur].gotoAndStop(19);
                           this.puls[this.pulscur].maxbulletlife = 60 + 30 * 60;
                           this.puls[this.pulscur].hasexploded = false;
                           this.puls[this.pulscur].radius = 0;
                           this.puls[this.pulscur].hea = 10;
                           this.puls[this.pulscur].heapo = 90;
                           this.puls[this.pulscur].losthea = 0;
                        }
                        this.puls[this.pulscur].rotation = 90 - this.xx / Math.PI * 180;
                        this.puls[this.pulscur].life = 0;
                        this.yy = Math.cos(this.xx);
                        this.xx = Math.sin(this.xx);
                        this.puls[this.pulscur].spx = 0;
                        this.puls[this.pulscur].spy = 0;
                        this.puls[this.pulscur].attached = this.CreatePoint(this.puls[this.pulscur].x,this.puls[this.pulscur].y,this.puls[this.pulscur].spx,this.puls[this.pulscur].spy,3,true,8,-300 - this.pulscur);
                        this.aactive[this.puls[this.pulscur].attached] = 1000;
                        this.aactive[-300 - this.pulscur] = true;
                        this.mc.arm_nade = this.puls[this.pulscur].attached;
                        if(this.MP_mode)
                        {
                           this.MP_myspecials[this.MP_assigning_special].pul = this.pulscur;
                           this.MP_myspecials[this.MP_assigning_special].atom = this.puls[this.pulscur].attached;
                           this.MP_myspecials[this.MP_assigning_special].stat = 3;
                        }
                        this.nextpul();
                     }
                     if(this.mini_scenario_phase >= 1)
                     {
                        if(!this.mc.dead)
                        {
                           if(this.mini_scenario_phase < 5)
                           {
                              this.TurnBone(this.mens[this.MP_myid].b_arm2,this.ax[this.mens[this.MP_myid].b_head_end] + this.mens[this.MP_myid].side * 10,this.ay[this.mens[this.MP_myid].b_head_end] + 30,this.mens[this.MP_myid],1);
                           }
                           else if(this.mini_scenario_phase < 7)
                           {
                              this.xx = this.mc.ang + Math.PI;
                              this.yy = Math.cos(this.xx);
                              this.xx = Math.sin(this.xx);
                              this.TurnBone(this.mens[this.MP_myid].b_arm2,this.ax[this.mens[this.MP_myid].b_body] - this.xx * 25,this.ay[this.mens[this.MP_myid].b_body] - this.yy * 25,this.mens[this.MP_myid],1);
                           }
                           this.xx = this.mc.ang + Math.PI;
                           this.yy = Math.cos(this.xx);
                           this.xx = Math.sin(this.xx);
                           if(this.mini_scenario_phase < 7)
                           {
                              this.TurnBone(this.mens[this.MP_myid].b_arm1,this.ax[this.mens[this.MP_myid].b_head_end] + this.mens[this.MP_myid].side * 10,this.ay[this.mens[this.MP_myid].b_body] + 40,this.mens[this.MP_myid],1);
                              if(this.TraceLineF_nopushers(this.ax[this.mc.b_toe],this.ay[this.mc.b_toe],this.ax[this.mc.b_arm2],this.ay[this.mc.b_arm2]))
                              {
                                 this.ax[this.mc.arm_nade] = this.ax[this.mc.b_arm2];
                                 this.ay[this.mc.arm_nade] = this.ay[this.mc.b_arm2];
                              }
                              else
                              {
                                 this.ax[this.mc.arm_nade] = this.ax[this.mc.b_toe];
                                 this.ay[this.mc.arm_nade] = this.ay[this.mc.b_toe];
                              }
                              this.atox[this.mc.arm_nade] = -this.xx * 10 * (this.mini_scenario_phase / 7) + this.atox[this.mc.b_body];
                              this.atoy[this.mc.arm_nade] = -this.yy * 10 * (this.mini_scenario_phase / 7) + this.atoy[this.mc.b_body];
                           }
                           if(this.mini_scenario_phase == 7)
                           {
                              this.atox[this.mc.arm_nade] = -this.xx * 15 + this.atox[this.mc.b_body];
                              this.atoy[this.mc.arm_nade] = -this.yy * 15 + this.atoy[this.mc.b_body];
                              this.WakeUpAtom(this.mc.arm_nade);
                           }
                        }
                     }
                     if(this.mini_scenario_phase > 15)
                     {
                        this.mini_scenario_cur = -1;
                     }
                  }
                  ++this.mini_scenario_phase;
               }
               if(this.playerstotal > 0)
               {
                  if(this.PSYCHOBLOOD_MODE == 1)
                  {
                     this.i4 = 0;
                     while(this.i4 < 4)
                     {
                        if(this._root["pb" + this.i4].visible)
                        {
                           if(this._root["pb" + this.i4].alpha > 0)
                           {
                              if(this.mens[this.MP_myid].hea / this.mens[this.MP_myid].hmax > 0.5 || this.GLOBAL_REGEN_SPEED == 0 || this.GLOBAL_REGEN_DELAY >= 10)
                              {
                                 this._root["pb" + this.i4].alpha -= 0.05 * this.GSPEED2;
                              }
                              if(Boolean(this.mens[this.MP_myid].dead) && this.death_cam != this.MP_myid)
                              {
                                 this._root["pb" + this.i4].alpha = 0;
                              }
                              if(this._root["pb" + this.i4].alpha > 0.6)
                              {
                                 this._root["pb" + this.i4].alpha = 0.6;
                              }
                           }
                           else
                           {
                              this._root["pb" + this.i4].visible = false;
                           }
                        }
                        ++this.i4;
                     }
                  }
                  else if(this.PSYCHOBLOOD_MODE == 2)
                  {
                     this.i4 = 0;
                     while(this.i4 < 5)
                     {
                        if(this._root["pb" + this.i4].visible)
                        {
                           if(this._root["pb" + this.i4].alpha > 0)
                           {
                              if(this.mens[this.MP_myid].hea / this.mens[this.MP_myid].hmax > 0.5 || (this.GLOBAL_REGEN_SPEED == 0 || this.GLOBAL_REGEN_DELAY >= 10) && this.mens[this.MP_myid].hea >= 0)
                              {
                                 this._root["pb" + this.i4].alpha -= 0.02 * this.GSPEED2;
                              }
                              else if(this.mens[this.MP_myid].hea >= 0)
                              {
                                 this._root["pb" + this.i4].alpha -= 0.01 * this.GSPEED2;
                              }
                              else
                              {
                                 this._root["pb" + this.i4].alpha -= 0.005 * this.GSPEED2;
                              }
                              if(Boolean(this.mens[this.MP_myid].dead) && this.death_cam != this.MP_myid)
                              {
                                 this._root["pb" + this.i4].alpha = 0;
                              }
                              if(this._root["pb" + this.i4].alpha > 0.6)
                              {
                                 this._root["pb" + this.i4].alpha = 0.6;
                              }
                           }
                           else
                           {
                              this._root["pb" + this.i4].visible = false;
                           }
                        }
                        ++this.i4;
                     }
                  }
               }
               if(this.MP_mode && this.spawn)
               {
                  this.mens[this.MP_myid].hea = 0;
               }
               this.firstframe = false;
               this.get_fps();
            }
            if(this.MP_mode)
            {
               this.mens[this.MP_myid].io = true;
               this.mens[this.MP_myid].visible = true;
               if(Boolean(this.mens[this.MP_myid].dead) || !this.mens[this.MP_myid].isGhost)
               {
                  this.mens[this.MP_myid].alpha = 1;
               }
               else
               {
                  this.mens[this.MP_myid].alpha = 0.5;
               }
               this.mens[this.MP_myid].deadtim = 0;
               this.ENTER_TICKED = true;
            }
            this.c_sim_rt = getTimer() - this.c_sim_rt;
            if(this.c_sim_rt + this.c_sim_rt2 > 40)
            {
               this.c_sim_stress = true;
            }
            else
            {
               this.c_sim_stress = false;
            }
            this.c_sim_rt2 = getTimer();
            if(this.whitness.visible)
            {
               if(this.whitness.alpha > 2)
               {
                  this.whitness.alpha = 1;
               }
               if(this.whitness.alpha > 0)
               {
                  this.whitness.alpha -= 0.05;
               }
               else
               {
                  this.whitness.alpha = 0;
                  this.whitness.visible = false;
               }
            }
            this.xx = 0;
            if(this.myCursor.currentFrame == 7)
            {
               if(this.ALTCUR)
               {
                  if(this.forced_cursor)
                  {
                     if(this.cursor_selected == 0)
                     {
                        this.myCursor.ch1.visible = this.myCursor.ch2.visible = true;
                        this.myCursor.ch3.visible = this.myCursor.ch4.visible = false;
                     }
                     if(this.cursor_selected == 1)
                     {
                        this.myCursor.ch1.visible = this.myCursor.ch2.visible = this.myCursor.ch4.visible = false;
                        this.myCursor.ch3.visible = true;
                     }
                     if(this.cursor_selected == 2)
                     {
                        this.myCursor.ch1.visible = this.myCursor.ch2.visible = this.myCursor.ch3.visible = false;
                        this.myCursor.ch4.visible = true;
                     }
                  }
                  else if(this.mens[this.MP_myid].curwea != -1)
                  {
                     this.mc2 = this.guns[this.mens[this.MP_myid].curwea];
                     if(this.mc2.stat_averange_min != this.mc2.stat_averange_max)
                     {
                        this.xx = (this.mc2.av - this.mc2.stat_averange_min) * 4;
                     }
                     if(this.mc2.stat_cursor == 0)
                     {
                        this.myCursor.ch1.visible = this.myCursor.ch2.visible = true;
                        this.myCursor.ch3.visible = this.myCursor.ch4.visible = false;
                     }
                     if(this.mc2.stat_cursor == 1)
                     {
                        this.myCursor.ch1.visible = this.myCursor.ch2.visible = this.myCursor.ch4.visible = false;
                        this.myCursor.ch3.visible = true;
                     }
                     if(this.mc2.stat_cursor == 2)
                     {
                        this.myCursor.ch1.visible = this.myCursor.ch2.visible = this.myCursor.ch3.visible = false;
                        this.myCursor.ch4.visible = true;
                     }
                  }
                  else
                  {
                     this.myCursor.ch1.visible = this.myCursor.ch2.visible = this.myCursor.ch3.visible = false;
                     this.myCursor.ch4.visible = true;
                  }
                  if(!this.cursor_static)
                  {
                     if(this.xx > 0)
                     {
                        this.myCursor.ch1.alpha = this.myCursor.ch2.alpha = this.myCursor.ch3.alpha = this.myCursor.ch4.alpha = 0.5 / (this.xx + 1);
                     }
                     else
                     {
                        this.myCursor.ch1.alpha = this.myCursor.ch2.alpha = this.myCursor.ch3.alpha = this.myCursor.ch4.alpha = 1;
                     }
                     if(this.xx > 1)
                     {
                        this.xx = 1;
                     }
                     this.myCursor.ch1.scaleX = this.myCursor.ch2.scaleX = this.myCursor.ch3.scaleX = this.myCursor.ch4.scaleX = this.myCursor.ch3.scaleY = this.myCursor.ch4.scaleY = this.xx * this.xx + 0.5;
                  }
                  else
                  {
                     this.myCursor.ch1.alpha = this.myCursor.ch2.alpha = this.myCursor.ch3.alpha = this.myCursor.ch4.alpha = 1;
                     this.myCursor.ch1.scaleX = this.myCursor.ch2.scaleX = this.myCursor.ch3.scaleX = this.myCursor.ch4.scaleX = this.myCursor.ch3.scaleY = this.myCursor.ch4.scaleY = 0.5;
                  }
               }
               if(Boolean(TOOLTIPS) && !this.ANONYMOUS_MODE)
               {
                  if(this.Math_abs(this.lastcurx - this.myCursor.x - this.game.x) + this.Math_abs(this.lastcury - this.myCursor.y - this.game.y) < 10)
                  {
                     if(!this.tooltip_updated)
                     {
                        this.tooltip_updated = true;
                        this.str = "";
                        this.ok = true;
                        i2 = 0;
                        while(i2 < this.watertotal)
                        {
                           if(this.wa_friction[i2])
                           {
                              if(this.myCursor.x > this.wax[i2] * this.game_scale + this.game.x)
                              {
                                 if(this.myCursor.x < (this.wax[i2] + this.waw[i2]) * this.game_scale + this.game.x)
                                 {
                                    if(this.myCursor.y > this.way[i2] * this.game_scale + this.game.y)
                                    {
                                       if(this.myCursor.y < (this.way[i2] + this.wah[i2]) * this.game_scale + this.game.y)
                                       {
                                          if(this.wadamage[i2] > 0)
                                          {
                                             this.str = "<font color=\'#FF0000\'>" + this.ACID_NAME + "</font>\n";
                                             this.str += this.wadamage[i2] * 30 + " damage per second\n";
                                             this.str += "<font color=\'#FFFF00\'>" + Math.floor(this.mens[this.MP_myid].hmax / this.wadamage[i2] / 30 * 10) / 10 + " seconds to die</font>\n";
                                          }
                                          else
                                          {
                                             this.str = this.WATER_NAME;
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                           i2++;
                        }
                        i2 = 0;
                        while(i2 < this.vehiclestotal)
                        {
                           if(this.vehicles[i2].nick != "")
                           {
                              if(this.Dist2D(this.vehicles[i2].x * this.game_scale + this.game.x,this.vehicles[i2].y * this.game_scale + this.game.y,this.myCursor.x,this.myCursor.y) < 150)
                              {
                                 if(this.vehicles[i2].dead)
                                 {
                                    this.str = "Destroyed ";
                                 }
                                 else
                                 {
                                    this.str = "";
                                    this.ok = false;
                                 }
                                 this.str += this.vehicles[i2].nick + "\n";
                                 i = int(this.vehicles[i2].master);
                                 if(i != -1)
                                 {
                                    if(this.mens[i].team == this.mens[this.MP_myid].team)
                                    {
                                       if(i == this.MP_myid)
                                       {
                                          this.str += "<font color=\'#00FF00\'>";
                                       }
                                       else
                                       {
                                          this.str += "<font color=\'#FFFF00\'>";
                                       }
                                    }
                                    else if(this.mens[i].dead)
                                    {
                                       this.str += "<font color=\'#AA3333\'>";
                                    }
                                    else
                                    {
                                       this.str += "<font color=\'#FF0000\'>";
                                    }
                                    if(this.mens[i].team == this.mens[this.MP_myid].team)
                                    {
                                       if(i == this.MP_myid)
                                       {
                                          this.str += "You";
                                       }
                                       else
                                       {
                                          this.str += "Ally";
                                       }
                                    }
                                    else
                                    {
                                       this.str += "Enemy";
                                    }
                                    this.str += "</font>";
                                 }
                                 else if(!this.vehicles[i2].dead)
                                 {
                                    this.str += "Neutral";
                                 }
                              }
                           }
                           i2++;
                        }
                        i = 0;
                        while(i < this.playerstotal)
                        {
                           if(this.mens[i].io)
                           {
                              if(this.mens[i].incar == -1)
                              {
                                 if(this.mens[i].alpha > 0.5)
                                 {
                                    if(this.Dist2D(this.ax[this.mens[i].b_body] * this.game_scale + this.game.x,this.ay[this.mens[i].b_body] * this.game_scale + this.game.y,this.myCursor.x,this.myCursor.y) < 50)
                                    {
                                       this.str = this.mens[i].nick + "\n";
                                       if(this.mens[i].team == this.mens[this.MP_myid].team)
                                       {
                                          if(i == this.MP_myid)
                                          {
                                             this.str += "<font color=\'#00FF00\'>";
                                          }
                                          else
                                          {
                                             this.str += "<font color=\'#FFFF00\'>";
                                          }
                                       }
                                       else if(this.mens[i].dead)
                                       {
                                          this.str += "<font color=\'#AA3333\'>";
                                       }
                                       else
                                       {
                                          this.str += "<font color=\'#FF0000\'>";
                                       }
                                       if(this.mens[i].dead)
                                       {
                                          this.str += "Dead ";
                                       }
                                       else if(this.mens[i].dying)
                                       {
                                          this.str += "Dying ";
                                       }
                                       else if(this.mens[i].hunt == -1 && this.mens[i].team != this.mens[this.MP_myid].team && !this.mens[i].isplayer)
                                       {
                                          this.str += "Inactive ";
                                       }
                                       if(this.mens[i].team == this.mens[this.MP_myid].team)
                                       {
                                          if(i == this.MP_myid)
                                          {
                                             this.str += "You";
                                          }
                                          else
                                          {
                                             this.str += "Ally";
                                          }
                                       }
                                       else
                                       {
                                          this.str += "Enemy";
                                       }
                                       if(Boolean(this.mens[i].isplayer) && i != this.MP_myid)
                                       {
                                          this.str += " Player";
                                       }
                                       this.str += "</font>";
                                       if(!this.mens[i].dead)
                                       {
                                          this.ok = false;
                                       }
                                    }
                                 }
                              }
                           }
                           i++;
                        }
                        if(this.ok)
                        {
                           i = 0;
                           while(i < this.gunstotal)
                           {
                              if(this.guns[i].io)
                              {
                                 if(this.guns[i].alpha > 0.5)
                                 {
                                    if(this.guns[i].visible)
                                    {
                                       if(!this.guns[i].forcars)
                                       {
                                          if(this.Dist2D(this.guns[i].x * this.game_scale + this.game.x,this.guns[i].y * this.game_scale + this.game.y,this.myCursor.x,this.myCursor.y) < 40)
                                          {
                                             this.str = this.GunModelToGunName(this.guns[i].model) + "\n";
                                             if(this.guns[i].upg != undefined)
                                             {
                                                if(this.guns[i].wep > 0)
                                                {
                                                   if(this.guns[i].upg == 0)
                                                   {
                                                      this.str += "<font color=\'#AAAAAA\'>No upgrades</font>";
                                                   }
                                                   else
                                                   {
                                                      this.str += "<font color=\'#AAAAAA\'>Upgrade Level: " + this.guns[i].upg + "</font>";
                                                   }
                                                }
                                             }
                                             this.str += "\n";
                                             if(this.guns[i].wep > 0)
                                             {
                                                if(this.guns[i].command == -1 || this.guns[i].command == this.mens[this.MP_myid].team)
                                                {
                                                   this.str += "<font color=\'#FFFF00\'>Slot: " + this.guns[i].wep + "</font>";
                                                }
                                                else
                                                {
                                                   this.str += "<font color=\'#FF0000\'>Unknown technology</font>";
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                              i++;
                           }
                        }
                        this.myCursor.txt.htmlText = this.str;
                     }
                  }
                  else
                  {
                     this.lastcurmove = 0;
                     this.lastcurx = this.myCursor.x + this.game.x;
                     this.lastcury = this.myCursor.y + this.game.y;
                     this.tooltip_updated = false;
                  }
               }
            }
            if(this.gamechatbox2["item" + this.chat_i3].y > 0)
            {
               this.ok = true;
            }
            else
            {
               this.ok = false;
            }
            this.chat_i = 0;
            while(this.chat_i < 11)
            {
               if(this.gamechatbox2["item" + this.chat_i].visible)
               {
                  targ_a = this.gamechatbox2["item" + this.chat_i].timer > 0 ? (this.gamechatbox2["item" + this.chat_i].y < -18 * 1.5 ? 0.5 : 1) : 0;
                  if(this.DISPLAY_CHAT <= 1)
                  {
                     this.gamechatbox2["item" + this.chat_i].timer -= this.GSPEED2 * 4;
                     if(this.gamechatbox2["item" + this.chat_i].y < -18 * 1.5)
                     {
                        targ_a = 0;
                     }
                  }
                  else
                  {
                     this.gamechatbox2["item" + this.chat_i].timer -= this.GSPEED2;
                  }
                  if(this.gamechatbox2["item" + this.chat_i].alpha > targ_a)
                  {
                     this.gamechatbox2["item" + this.chat_i].alpha = Math.max(targ_a,this.gamechatbox2["item" + this.chat_i].alpha - Math.max(0.01,0.05 * this.GSPEED2));
                     if(this.gamechatbox2["item" + this.chat_i].alpha <= targ_a)
                     {
                        if(targ_a == 0)
                        {
                           this.gamechatbox2["item" + this.chat_i].visible = false;
                        }
                     }
                  }
                  else
                  {
                     this.gamechatbox2["item" + this.chat_i].alpha = Math.min(targ_a,this.gamechatbox2["item" + this.chat_i].alpha + Math.max(0.01,0.05 * this.GSPEED2));
                  }
               }
               if(this.ok)
               {
                  --this.gamechatbox2["item" + this.chat_i].y;
               }
               ++this.chat_i;
            }
            if(this.herolist.visible)
            {
               i = 0;
               while(i < this.MP_playerstotal)
               {
                  if(i != this.MP_myid && (this.hero[i].f1.text == "Empty" || this.hero[i].f5.text == ""))
                  {
                     if(this.hero[i].f1.text != "Empty")
                     {
                        this.hero[i].f1.text = "Empty";
                     }
                     this.hero[i].prior = -1;
                     this.hero[i].alpha = Math.max(0.2,this.hero[i].alpha - 0.1);
                  }
                  else
                  {
                     this.hero[i].prior = int(this.hero[i].f3.text) / (int(this.hero[i].f4.text) + 1);
                     this.hero[i].alpha = Math.min(1,this.hero[i].alpha + 0.1);
                  }
                  i++;
               }
               this.ok = true;
               if(this.ok)
               {
                  this.ok = false;
                  i = 0;
                  while(i < this.MP_playerstotal)
                  {
                     i2 = 0;
                     while(i2 < this.MP_playerstotal)
                     {
                        if(i != i2)
                        {
                           if(this.hero[i].prior < this.hero[i2].prior && this.hero[i].y < this.hero[i2].y)
                           {
                              this.yy = this.hero[i].y;
                              this.hero[i].y = this.hero[i2].y;
                              this.hero[i2].y = this.yy;
                              this.ok = true;
                           }
                        }
                        i2++;
                     }
                     i++;
                  }
                  i = 0;
                  while(i < this.MP_playerstotal)
                  {
                     if(this.hero[i].y > 17 + 20 * 8)
                     {
                        this.hero[i].alpha = 0;
                     }
                     i++;
                  }
               }
            }
            if(this.THIS_HINT == this.CURRENT_HINT)
            {
               if(this.CURRENT_HINT != "")
               {
                  if(this.hintf.visible)
                  {
                     if(this.hintf.alpha < 1)
                     {
                        this.hintf.alpha += 0.1;
                     }
                  }
                  else
                  {
                     this.hintf.visible = true;
                     this.hintf.alpha = 0;
                     this.PlaySound_full(this.s_hint_appear);
                  }
               }
            }
            else if(this.hintf.visible)
            {
               if(this.hintf.alpha >= 1)
               {
                  this.PlaySound_full(this.s_hint_disappear);
               }
               if(this.hintf.alpha > 0)
               {
                  this.hintf.alpha -= 0.1;
               }
               else
               {
                  this.hintf.visible = false;
               }
            }
            else
            {
               this.THIS_HINT = this.CURRENT_HINT;
               this.hintf.txt.htmlText = this.CURRENT_HINT;
            }
            if(this.hintf.visible)
            {
               this.hintf.txt.alpha = 0.8 + Math.sin(this.PITIMER) * 0.2;
               this.PITIMER += 0.1;
               if(this.PITIMER > Math.PI * 2)
               {
                  this.PITIMER -= Math.PI * 2;
               }
            }
            this.UpdateGravitatorVol();
            this.DamageSoundLogic(this.GSPEED);
            if(this.DEBUG_MODE)
            {
               try
               {
                  this.debug_screen.x = this.game.x;
                  this.debug_screen.y = this.game.y;
               }
               catch(e:*)
               {
               }
            }
            if(this.MP_mode)
            {
               this.ManageGameTimer();
            }
            if(this.set_timeouts.length > 0)
            {
               t = getTimer();
               i = 0;
               while(i < this.set_timeouts.length)
               {
                  if(t >= this.set_timeouts[i].t)
                  {
                     f = this.set_timeouts[i].f;
                     this.set_timeouts.splice(i,1);
                     i--;
                     f();
                  }
                  i++;
               }
            }
         }
         catch(e:*)
         {
            SpawnLevelLogicErrorIfNeeded(e,"Some level objects or logic have caused error within game loop");
         }
         try
         {
            this.HandleRespawnAndLevelEnd();
         }
         catch(e:*)
         {
            SpawnLevelLogicErrorIfNeeded(e,"Some level objects or logic are causing error in level change or respawn logic (address: " + respawn_logic_last_addr + ")");
         }
         this.VarChangePreventEnd();
      }
      
      public function SetTimeout(param1:*, param2:*) : void
      {
         this.set_timeouts.push({
            "f":param1,
            "t":getTimer() + param2
         });
      }
      
      public function HandleRespawnAndLevelEnd() : *
      {
         this.respawn_logic_last_addr = 0;
         if(!this.gamemenu.visible)
         {
            if(this.darkness.visible)
            {
               this.respawn_logic_last_addr = 1;
               if(this.mens[this.MP_myid].dead && !this.MP_spectator || this.LEVEL_END_FORCE != "")
               {
                  this.respawn_logic_last_addr = 2;
                  if(!this.MP_mode)
                  {
                     if(this.mens[this.MP_myid].dead)
                     {
                        if(this.MP_fps > 5)
                        {
                           this.MP_fps = 5;
                        }
                     }
                  }
                  this.respawn_logic_last_addr = 3;
                  if(this.darkness.alpha < 1)
                  {
                     this.respawn_logic_last_addr = 4;
                     if(this.LEVEL_END_FORCE == "credits")
                     {
                        this.whitesimple.visible = true;
                        this.whitesimple.alpha += 0.02;
                        if(this.whitesimple.alpha > 1.5)
                        {
                           this.darkness.alpha += 0.01;
                        }
                     }
                     else
                     {
                        if(this.LEVEL_END_FORCE == "complete" && (getTimer() - this.LAST_BADGE > 8000 || this.darkness.alpha < 0.5))
                        {
                           this.darkness.alpha += 0.1;
                        }
                        if(this.MP_mode)
                        {
                           if(!this.spawn)
                           {
                              if(this.multiplayer_repsawn_timer_speed != 0)
                              {
                                 if(this.MP_type == 1 || this.MP_type == 2 || this.MP_type == 4 || this.players_online <= 4)
                                 {
                                    this.darkness.alpha += Math.max(0.005,0.01 * this.GSPEED * this.multiplayer_repsawn_timer_speed);
                                 }
                                 else if(this.MP_type == 3)
                                 {
                                    this.darkness.alpha += Math.max(0.005,0.005 * this.GSPEED * this.multiplayer_repsawn_timer_speed);
                                 }
                              }
                           }
                        }
                        else
                        {
                           this.darkness.alpha += 0.01;
                        }
                     }
                     this.whitness.alpha = Math.min(1 - this.darkness.alpha,this.whitness.alpha);
                  }
                  else
                  {
                     this.system_non_stop = false;
                  }
                  this.respawn_logic_last_addr = 5;
                  if(!this.spawn)
                  {
                     if(this.MP_mode && this.MP_type == 2)
                     {
                        if(this.death_cam != -1 && Boolean(this.mens[this.death_cam].dead))
                        {
                           if(this.darkness.alpha > 0.5)
                           {
                              this.darkness.alpha = 0.5;
                           }
                        }
                        else
                        {
                           this.darkness.alpha = 0;
                        }
                     }
                  }
                  this.respawn_logic_last_addr = 6;
                  if(!this.system_non_stop)
                  {
                     if(this.darkness.alpha >= 1)
                     {
                        this.respawn_logic_last_addr = 7;
                        if(this.MP_mode && this.LEVEL_END_FORCE != "exit")
                        {
                           if(!this.MP_spectator)
                           {
                              this.respawn_logic_last_addr = 8;
                              this.GCTime();
                              this.ok = true;
                              this.i4 = 0;
                              if(this.MP_type == 1 || this.MP_type == 3 || this.MP_type == 4)
                              {
                                 while(this.ok && this.i4 < 3000)
                                 {
                                    ++this.i4;
                                    this.ok = true;
                                    this.MP_start_x = this.g_minx + 100 + (this.g_maxx - this.g_minx - 200) * Math.random();
                                    this.MP_start_y = this.g_miny + 100 + (this.g_maxy - this.g_miny - 200) * Math.random();
                                    if(this.TracePointNoRagdolls(this.MP_start_x,this.MP_start_y - 50))
                                    {
                                       if(this.TracePointNoRagdolls(this.MP_start_x - 10,this.MP_start_y - 50))
                                       {
                                          if(this.TracePointNoRagdolls(this.MP_start_x + 10,this.MP_start_y - 50))
                                          {
                                             if(!this.TracePointNoRagdolls(this.MP_start_x - 10,this.MP_start_y + 50))
                                             {
                                                if(!this.TracePointNoRagdolls(this.MP_start_x + 10,this.MP_start_y + 50))
                                                {
                                                   if(!this.TracePointNoRagdolls(this.MP_start_x,this.MP_start_y + 50))
                                                   {
                                                      this.ok = false;
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                    if(!this.ok)
                                    {
                                       if(this.MP_type == 3)
                                       {
                                          if(this.i4 < 1500)
                                          {
                                             this.ok2 = true;
                                             this.i5 = 0;
                                             while(this.i5 < this.playerstotal)
                                             {
                                                if(this.mens[this.i5].team != this.mens[this.MP_myid].team)
                                                {
                                                   if(!this.mens[this.i5].dead)
                                                   {
                                                      if(!this.mens[this.i5].dying)
                                                      {
                                                         if(this.mens[this.i5].hunt == -1 || this.i4 > 1500 / 2)
                                                         {
                                                            if(this.Math_abs(this.mens[this.i5].x - this.MP_start_x) + this.Math_abs(this.mens[this.i5].y - this.MP_start_y) < 500 * 500)
                                                            {
                                                               this.ok2 = false;
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                                ++this.i5;
                                             }
                                             this.ok = this.ok2;
                                          }
                                       }
                                       else if(this.i4 < 1500)
                                       {
                                          this.ok2 = true;
                                          this.i5 = 0;
                                          while(this.i5 < this.gunstotal)
                                          {
                                             if(this.guns[this.i5].picken_by == -1)
                                             {
                                                if(this.guns[this.i5].stat_power > 0)
                                                {
                                                   if(this.Math_abs(this.guns[this.i5].x - this.MP_start_x) + this.Math_abs(this.guns[this.i5].y - this.MP_start_y) < 300 * 300)
                                                   {
                                                      this.ok2 = false;
                                                   }
                                                }
                                             }
                                             ++this.i5;
                                          }
                                          this.ok = this.ok2;
                                       }
                                    }
                                    if(!this.ok)
                                    {
                                       this.i2 = 0;
                                       while(this.i2 < this.watertotal)
                                       {
                                          if(this.MP_start_x > this.wax[this.i2] - 100)
                                          {
                                             if(this.MP_start_x < this.wax[this.i2] + this.waw[this.i2] + 100)
                                             {
                                                if(this.MP_start_y > this.way[this.i2] - 100)
                                                {
                                                   if(this.MP_start_y < this.way[this.i2] + this.wah[this.i2] + 100)
                                                   {
                                                      this.ok = true;
                                                   }
                                                }
                                             }
                                          }
                                          ++this.i2;
                                       }
                                       this.i2 = 0;
                                       while(this.i2 < this.pushstotal)
                                       {
                                          if(this.MP_start_x > this.pushx[this.i2] - 100)
                                          {
                                             if(this.MP_start_x < this.pushw[this.i2] + 100)
                                             {
                                                if(this.MP_start_y > this.pushy[this.i2] - 100)
                                                {
                                                   if(this.MP_start_y < this.pushh[this.i2] + 100)
                                                   {
                                                      this.ok = true;
                                                   }
                                                }
                                             }
                                          }
                                          ++this.i2;
                                       }
                                       if(!this.ok)
                                       {
                                          this.i5 = 0;
                                          while(this.i5 < this.playerstotal)
                                          {
                                             if(this.mens[this.i5].team != this.mens[this.MP_myid].team)
                                             {
                                                if(!this.mens[this.i5].dead)
                                                {
                                                   if(this.Math_abs(this.mens[this.i5].x - this.MP_start_x) + this.Math_abs(this.mens[this.i5].y - this.MP_start_y) < 1500 * 1500)
                                                   {
                                                      if(this.TraceLine(this.mens[this.i5].x,this.mens[this.i5].y - 50,this.MP_start_x,this.MP_start_y - 50) || this.TraceLine(this.mens[this.i5].tarx,this.mens[this.i5].tary,this.MP_start_x,this.MP_start_y - 50))
                                                      {
                                                         this.ok = true;
                                                      }
                                                   }
                                                }
                                             }
                                             ++this.i5;
                                          }
                                       }
                                    }
                                 }
                              }
                              this.GiveStarterGunsDM(this.MP_start_x,this.MP_start_y);
                              this.SetTimeout(function():*
                              {
                                 if(mens[MP_myid].hea > 0)
                                 {
                                    GiveStarterGunsDM(mens[MP_myid].x,mens[MP_myid].y,mens[MP_myid]);
                                 }
                              },500);
                              this.SetTimeout(function():*
                              {
                                 if(mens[MP_myid].hea > 0)
                                 {
                                    GiveStarterGunsDM(mens[MP_myid].x,mens[MP_myid].y,mens[MP_myid]);
                                 }
                              },1000);
                              this.SetTimeout(function():*
                              {
                                 if(mens[MP_myid].hea > 0)
                                 {
                                    GiveStarterGunsDM(mens[MP_myid].x,mens[MP_myid].y,mens[MP_myid]);
                                 }
                              },1500);
                              this.SetTimeout(function():*
                              {
                                 if(mens[MP_myid].hea > 0)
                                 {
                                    GiveStarterGunsDM(mens[MP_myid].x,mens[MP_myid].y,mens[MP_myid]);
                                 }
                              },2000);
                              this.mens[this.MP_myid].lastshotby = -1;
                              this.mens[this.MP_myid].whenlastshot = getTimer();
                              this.mens[this.MP_myid].hea = this.mens[this.MP_myid].hmax;
                              this.mens[this.MP_myid].stability = 1;
                              this.mens[this.MP_myid].sit = 0;
                              this.mens[this.MP_myid].tox = 0;
                              this.mens[this.MP_myid].toy = 0;
                              this.mens[this.MP_myid].inwater = false;
                              this.mens[this.MP_myid].x = this.MP_start_x;
                              this.mens[this.MP_myid].y = this.MP_start_y;
                              this.mens[this.MP_myid].effects.length = 0;
                              this.grenades_total = this.MP_start_grenades_count;
                              this.grenades_port_total = this.MP_start_grenades_port_count;
                              this.grenades_sh_total = this.MP_start_grenades_sh_count;
                              this.UpdateWeps();
                              this.mens[this.MP_myid].hp_head = this.mens[this.MP_myid].hea;
                              this.mens[this.MP_myid].hp_arms = this.mens[this.MP_myid].hea;
                              this.mens[this.MP_myid].hp_legs = this.mens[this.MP_myid].hea;
                              this.mens[this.MP_myid].hp_body = this.mens[this.MP_myid].hea;
                              this.mens[this.MP_myid].curwea = -1;
                              this.mens[this.MP_myid].dead = false;
                              this.mens[this.MP_myid].dying = false;
                              this.mens[this.MP_myid].defih = 0;
                              this.ResetPsychoBlood();
                              this.MP_custom_events += ";spawnef|" + this.r2(this.MP_start_x) + "#" + this.r2(this.MP_start_y - 41);
                              this.Hurt_nopain(this.MP_myid);
                              this.SpawnPlayerImmediately(this.mens[this.MP_myid]);
                              this.u = this.ax[this.mens[this.MP_myid].b_toe] - this.MP_start_x;
                              this.v = this.ay[this.mens[this.MP_myid].b_toe] - this.MP_start_y;
                              this.i4 = 0;
                              while(this.i4 < this.atotal)
                              {
                                 if(this.aof[this.i4] == this.MP_myid)
                                 {
                                    this.ax[this.i4] -= this.u;
                                    this.ay[this.i4] -= this.v;
                                    this.lax[this.i4] -= this.u;
                                    this.lay[this.i4] -= this.v;
                                    this.ablood[this.i4] = 0;
                                    this.atox[this.i4] = 0;
                                    this.atoy[this.i4] = 0;
                                    if(this.ax[this.i4] < this.mens[this.MP_myid].x - this.PLAYER_WIDTH)
                                    {
                                       this.ax[this.i4] = this.lax[this.i4] = this.mens[this.MP_myid].x - this.PLAYER_WIDTH;
                                    }
                                    if(this.ax[this.i4] > this.mens[this.MP_myid].x + this.PLAYER_WIDTH)
                                    {
                                       this.ax[this.i4] = this.lax[this.i4] = this.mens[this.MP_myid].x + this.PLAYER_WIDTH;
                                    }
                                    if(this.ay[this.i4] < this.mens[this.MP_myid].y - 82)
                                    {
                                       this.ay[this.i4] = this.lay[this.i4] = this.mens[this.MP_myid].y - 82;
                                    }
                                    if(this.ay[this.i4] > this.mens[this.MP_myid].y)
                                    {
                                       this.ay[this.i4] = this.lay[this.i4] = this.mens[this.MP_myid].y;
                                    }
                                 }
                                 ++this.i4;
                              }
                              this.tnds = 10;
                              this.game.x = Math.round(-this.ax[this.mens[this.MP_myid].b_toe] * this.game_scale + this.hscreenX);
                              this.game.y = Math.round(-this.ay[this.mens[this.MP_myid].b_toe] * this.game_scale + this.hscreenY);
                              this.system_non_stop = true;
                           }
                        }
                        else
                        {
                           this.respawn_logic_last_addr = 9;
                           if(this.talkerch != null)
                           {
                              this.talkerch.stop();
                           }
                           this.respawn_logic_last_addr = 10;
                           this.DropGameTimer();
                           this.respawn_logic_last_addr = 11;
                           if(this.LEVEL_END_FORCE == "exit")
                           {
                              this.LAST_ERROR = "";
                              this.FUN_TIME_SPEND = 0;
                              if(this.MP_mode)
                              {
                                 this.respawn_logic_last_addr = 12;
                                 this.SEND_INTRUDER_LIST();
                                 this.respawn_logic_last_addr = 13;
                                 this.MP_mode = false;
                                 this.respawn_logic_last_addr = 14;
                                 try
                                 {
                                    if(ExternalInterface.available)
                                    {
                                       ExternalInterface.call("L2()");
                                    }
                                 }
                                 catch(e:*)
                                 {
                                 }
                                 gotoAndStop("channel");
                              }
                              else
                              {
                                 this.respawn_logic_last_addr = 15;
                                 try
                                 {
                                    if(ExternalInterface.available)
                                    {
                                       ExternalInterface.call("L2()");
                                    }
                                 }
                                 catch(e:*)
                                 {
                                 }
                                 gotoAndStop("campaign");
                              }
                           }
                           this.respawn_logic_last_addr = 16;
                           if(this.LEVEL_END_FORCE == "restart")
                           {
                              this.LAST_ERROR = "";
                              gotoAndStop("loading");
                           }
                           if(this.LEVEL_END_FORCE == "failed")
                           {
                              try
                              {
                                 if(ExternalInterface.available)
                                 {
                                    ExternalInterface.call("L2()");
                                 }
                              }
                              catch(e:*)
                              {
                              }
                              this.FUN_TIME_SPEND = 0;
                              gotoAndStop("main");
                           }
                           if(this.LEVEL_END_FORCE == "complete")
                           {
                              try
                              {
                                 if(ExternalInterface.available)
                                 {
                                    ExternalInterface.call("L2()");
                                 }
                              }
                              catch(e:*)
                              {
                              }
                              if(this.MP_mode)
                              {
                                 gotoAndStop("channel");
                              }
                              else
                              {
                                 gotoAndStop("campaign");
                              }
                           }
                           if(this.LEVEL_END_FORCE == "credits")
                           {
                              try
                              {
                                 if(ExternalInterface.available)
                                 {
                                    ExternalInterface.call("L2()");
                                 }
                              }
                              catch(e:*)
                              {
                              }
                              if(this.MUSIC_VOLUME <= 0)
                              {
                                 this.MUSIC_VOLUME = this.FX_VOLUME;
                              }
                              gotoAndStop("credits");
                           }
                        }
                     }
                  }
               }
               else if(this.darkness.alpha > 0)
               {
                  this.darkness.alpha -= 0.1;
               }
               else
               {
                  this.darkness.visible = false;
               }
            }
         }
      }
      
      public function GravitatorPlayAgain(param1:*) : void
      {
         this.gravitatorch.removeEventListener(Event.SOUND_COMPLETE,this.GravitatorPlayAgain);
         this.gravitatorch = this.s_gravitator.play(0,0,this.gravitatorTransform);
         if(this.gravitatorch == null)
         {
            this.grav_working = false;
         }
         if(this.grav_working)
         {
            this.gravitatorch.addEventListener(Event.SOUND_COMPLETE,this.GravitatorPlayAgain);
         }
      }
      
      public function SongPlayAgain(param1:*) : void
      {
         this.musch.removeEventListener(Event.SOUND_COMPLETE,this.SongPlayAgain);
         this.musch = this.s_gameplay_song.play(0,0,this.musTransform);
         if(this.musch == null)
         {
            this.mus_working = false;
         }
         if(this.mus_working)
         {
            this.musch.addEventListener(Event.SOUND_COMPLETE,this.SongPlayAgain);
         }
      }
      
      public function main_song_PlayAgain(param1:*) : void
      {
         this.main_song_ch.removeEventListener(Event.SOUND_COMPLETE,this.main_song_PlayAgain);
         this.main_song_ch = this.s_main_song.play(0,0,this.main_song_Transform);
         if(this.main_song_ch == null)
         {
            this.main_song_working = false;
         }
         if(this.main_song_working)
         {
            this.main_song_ch.addEventListener(Event.SOUND_COMPLETE,this.main_song_PlayAgain);
         }
      }
      
      public function am_base_PlayAgain(param1:*) : void
      {
         if(this.ambient_sounds)
         {
            this.am_base_ch.removeEventListener(Event.SOUND_COMPLETE,this.am_base_PlayAgain);
            this.am_base_ch = this.s_am_base.play(0,0,this.am_base_Transform);
            if(this.am_base_ch == null)
            {
               this.am_base_working = false;
            }
            if(this.am_base_working)
            {
               this.am_base_ch.addEventListener(Event.SOUND_COMPLETE,this.am_base_PlayAgain);
            }
         }
      }
      
      public function am_wind_PlayAgain(param1:*) : void
      {
         if(this.ambient_sounds)
         {
            this.am_wind_ch.removeEventListener(Event.SOUND_COMPLETE,this.am_wind_PlayAgain);
            this.am_wind_ch = this.s_am_wind.play(0,0,this.am_wind_Transform);
            if(this.am_wind_ch == null)
            {
               this.am_wind_working = false;
            }
            if(this.am_wind_working)
            {
               this.am_wind_ch.addEventListener(Event.SOUND_COMPLETE,this.am_wind_PlayAgain);
            }
         }
      }
      
      public function UpdateGravitatorVol() : void
      {
         if(this.NONMUTE)
         {
            if(this.grav_working)
            {
               this.xx = 0;
               this.yy = 0;
               this.xx2 = 0;
               this.yy2 = 0;
               if(currentFrameLabel == "gaming")
               {
                  this.i = 0;
                  while(this.i < this.decorstotal)
                  {
                     if(this.decors[this.i].currentFrameLabel == "antigravity" || this.decors[this.i].currentFrameLabel == "antigravity_left" || this.decors[this.i].currentFrameLabel == "antigravity_right" || this.decors[this.i].currentFrameLabel == "doomwrath_rapier_active" || this.decors[this.i].currentFrameLabel == "doomwrath_rapier_active2" || this.decors[this.i].currentFrameLabel == "falkok_ship3" || this.decors[this.i].currentFrameLabel == "falkok_ship6")
                     {
                        this.smod = this.dist_to_face / this.Dist3Dm(this.decors[this.i].x * this.game_scale + this.game.x - 400 - 300,this.decors[this.i].y * this.game_scale + this.game.y - 200,this.dist_to_face);
                        this.smod2 = this.dist_to_face / this.Dist3Dm(this.decors[this.i].x * this.game_scale + this.game.x - 400 + 300,this.decors[this.i].y * this.game_scale + this.game.y - 200,this.dist_to_face);
                        this.xx += this.smod2 * 0.5;
                        this.yy += 0;
                        this.xx2 += this.smod * 0.5;
                        this.yy2 += 0;
                     }
                     ++this.i;
                  }
               }
               if(this.xx < 0.1)
               {
                  if(this.xx2 < 0.1)
                  {
                     if(this.yy < 0.1)
                     {
                        if(this.yy2 < 0.1)
                        {
                           this.xx = 0;
                           this.xx2 = 0;
                           this.yy = 0;
                           this.yy2 = 0;
                        }
                     }
                  }
               }
               this.xx *= this.zero_one(1 - this.darkness.alpha) * this.vol.volume;
               this.xx2 *= this.zero_one(1 - this.darkness.alpha) * this.vol.volume;
               this.yy *= this.zero_one(1 - this.darkness.alpha) * this.vol.volume;
               this.yy2 *= this.zero_one(1 - this.darkness.alpha) * this.vol.volume;
               if(this.xx > 1)
               {
                  this.xx = 1;
               }
               if(this.xx2 > 1)
               {
                  this.xx2 = 1;
               }
               if(this.yy > 1)
               {
                  this.yy = 1;
               }
               if(this.yy2 > 1)
               {
                  this.yy2 = 1;
               }
               this.gravitatorTransform.leftToLeft = this.xx;
               this.gravitatorTransform.leftToRight = this.yy;
               this.gravitatorTransform.rightToRight = this.xx2;
               this.gravitatorTransform.rightToLeft = this.yy2;
               this.gravitatorch.soundTransform = this.gravitatorTransform;
            }
            else
            {
               this.gravitatorch = this.s_gravitator.play(0,0,this.gravitatorTransform);
               if(this.gravitatorch != null)
               {
                  this.grav_working = true;
                  this.gravitatorch.addEventListener(Event.SOUND_COMPLETE,this.GravitatorPlayAgain);
               }
            }
            if(this.mus_working && this.am_wind_working && this.am_base_working && this.main_song_working)
            {
               if(currentFrameLabel == "gaming")
               {
                  this.ok2 = false;
                  this.ok = false;
                  if(this.mens[this.MP_myid].hunt != -1)
                  {
                     this.ok2 = true;
                  }
                  this.i = 0;
                  while(this.i < this.playerstotal && !this.ok)
                  {
                     if(this.mens[this.i].io)
                     {
                        if(!this.mens[this.i].dead)
                        {
                           if(!this.mens[this.i].dying)
                           {
                              if(this.mens[this.i].team != this.mens[this.MP_myid].team)
                              {
                                 if(this.mens[this.i].hunt == this.MP_myid)
                                 {
                                    this.ok = true;
                                 }
                                 if(this.Dist2D(this.mens[this.i].x,this.mens[this.i].y,this.mens[this.MP_myid].x,this.mens[this.MP_myid].y) < 400)
                                 {
                                    this.ok2 = true;
                                 }
                              }
                           }
                        }
                     }
                     ++this.i;
                  }
                  if(this.ok || this.ok2)
                  {
                     this.MUSIC_COLDDOWN = 0;
                  }
                  else if(this.MUSIC_COLDDOWN < 100)
                  {
                     ++this.MUSIC_COLDDOWN;
                  }
                  else
                  {
                     this.CUR_MUSIC_VOLUME -= this.CUR_MUSIC_VOLUME * 0.01;
                  }
                  if(this.MUSIC_COLDDOWN < 100)
                  {
                     if(this.ok)
                     {
                        this.CUR_MUSIC_VOLUME += this.MUSIC_VOLUME * 0.04;
                     }
                     else if(this.CUR_MUSIC_VOLUME < this.MUSIC_VOLUME * 0.4)
                     {
                        this.CUR_MUSIC_VOLUME += this.MUSIC_VOLUME * 0.02;
                     }
                  }
                  if(this.CUR_MUSIC_VOLUME > this.MUSIC_VOLUME)
                  {
                     this.CUR_MUSIC_VOLUME = this.MUSIC_VOLUME;
                  }
                  if(this.CUR_MUSIC_VOLUME < 0)
                  {
                     this.CUR_MUSIC_VOLUME = 0;
                  }
                  if(this.custom_songs.length > 0)
                  {
                     this.CUR_MUSIC_VOLUME = 0;
                  }
                  this.musTransform.leftToLeft = this.CUR_MUSIC_VOLUME * (1 - this.darkness.alpha);
                  this.musTransform.leftToRight = 0;
                  this.musTransform.rightToRight = this.CUR_MUSIC_VOLUME * (1 - this.darkness.alpha);
                  this.musTransform.rightToLeft = 0;
                  if(!this.NOBASE && this.graphics_3d.hitTestPoint(this.mens[this.MP_myid].x * this.game_scale + this.game.x,(this.mens[this.MP_myid].y - 41) * this.game_scale + this.game.y,true))
                  {
                     this.wind_base += 0.1;
                  }
                  else
                  {
                     this.wind_base -= 0.1;
                  }
                  if(this.wind_base > 1)
                  {
                     this.wind_base = 1;
                  }
                  if(this.wind_base < 0)
                  {
                     this.wind_base = 0;
                  }
                  if(this.MUSIC_VOLUME > 0)
                  {
                     this.am_base_Transform.leftToLeft = this.FX_VOLUME * (1 - this.darkness.alpha) * (1 - this.CUR_MUSIC_VOLUME / this.MUSIC_VOLUME) * this.wind_base;
                     this.am_base_Transform.leftToRight = 0;
                     this.am_base_Transform.rightToRight = this.FX_VOLUME * (1 - this.darkness.alpha) * (1 - this.CUR_MUSIC_VOLUME / this.MUSIC_VOLUME) * this.wind_base;
                     this.am_base_Transform.rightToLeft = 0;
                     this.am_wind_Transform.leftToLeft = this.FX_VOLUME * (1 - this.darkness.alpha) * (1 - this.CUR_MUSIC_VOLUME / this.MUSIC_VOLUME) * (1 - this.wind_base);
                     this.am_wind_Transform.leftToRight = 0;
                     this.am_wind_Transform.rightToRight = this.FX_VOLUME * (1 - this.darkness.alpha) * (1 - this.CUR_MUSIC_VOLUME / this.MUSIC_VOLUME) * (1 - this.wind_base);
                     this.am_wind_Transform.rightToLeft = 0;
                  }
                  else
                  {
                     this.am_base_Transform.leftToLeft = this.FX_VOLUME * (1 - this.darkness.alpha) * this.wind_base;
                     this.am_base_Transform.leftToRight = 0;
                     this.am_base_Transform.rightToRight = this.FX_VOLUME * (1 - this.darkness.alpha) * this.wind_base;
                     this.am_base_Transform.rightToLeft = 0;
                     this.am_wind_Transform.leftToLeft = this.FX_VOLUME * (1 - this.darkness.alpha) * (1 - this.wind_base);
                     this.am_wind_Transform.leftToRight = 0;
                     this.am_wind_Transform.rightToRight = this.FX_VOLUME * (1 - this.darkness.alpha) * (1 - this.wind_base);
                     this.am_wind_Transform.rightToLeft = 0;
                  }
                  this.main_song_Transform.leftToLeft = 0;
                  this.main_song_Transform.leftToRight = 0;
                  this.main_song_Transform.rightToRight = 0;
                  this.main_song_Transform.rightToLeft = 0;
               }
               else
               {
                  this.musTransform.leftToLeft = 0;
                  this.musTransform.leftToRight = 0;
                  this.musTransform.rightToRight = 0;
                  this.musTransform.rightToLeft = 0;
                  this.am_base_Transform.leftToLeft = 0;
                  this.am_base_Transform.leftToRight = 0;
                  this.am_base_Transform.rightToRight = 0;
                  this.am_base_Transform.rightToLeft = 0;
                  this.am_wind_Transform.leftToLeft = 0;
                  this.am_wind_Transform.leftToRight = 0;
                  this.am_wind_Transform.rightToRight = 0;
                  this.am_wind_Transform.rightToLeft = 0;
                  if(this.main_song_Transform.leftToLeft == 0)
                  {
                     if(this.MUSIC_VOLUME > 0)
                     {
                        this.main_song_ch.stop();
                        this.main_song_ch = this.s_main_song.play(0,0,this.main_song_Transform);
                     }
                  }
                  this.main_song_Transform.leftToLeft = this.MUSIC_VOLUME;
                  this.main_song_Transform.leftToRight = 0;
                  this.main_song_Transform.rightToRight = this.MUSIC_VOLUME;
                  this.main_song_Transform.rightToLeft = 0;
               }
               this.musch.soundTransform = this.musTransform;
               this.am_base_ch.soundTransform = this.am_base_Transform;
               this.am_wind_ch.soundTransform = this.am_wind_Transform;
               this.main_song_ch.soundTransform = this.main_song_Transform;
            }
            else
            {
               if(!this.mus_working)
               {
                  this.musch = this.s_gameplay_song.play(0,0,this.musTransform);
                  if(this.musch != null)
                  {
                     this.mus_working = true;
                     this.musch.addEventListener(Event.SOUND_COMPLETE,this.SongPlayAgain);
                  }
               }
               if(!this.am_wind_working)
               {
                  this.am_wind_ch = this.s_am_wind.play(0,0,this.am_wind_Transform);
                  if(this.am_wind_ch != null)
                  {
                     this.am_wind_working = true;
                     this.am_wind_ch.addEventListener(Event.SOUND_COMPLETE,this.am_wind_PlayAgain);
                  }
               }
               if(!this.am_base_working)
               {
                  this.am_base_ch = this.s_am_base.play(0,0,this.am_base_Transform);
                  if(this.am_base_ch != null)
                  {
                     this.am_base_working = true;
                     this.am_base_ch.addEventListener(Event.SOUND_COMPLETE,this.am_base_PlayAgain);
                  }
               }
               if(!this.main_song_working)
               {
                  this.main_song_ch = this.s_main_song.play(0,0,this.main_song_Transform);
                  if(this.main_song_ch != null)
                  {
                     this.main_song_working = true;
                     this.main_song_ch.addEventListener(Event.SOUND_COMPLETE,this.main_song_PlayAgain);
                  }
               }
            }
            this.gravitatorTransform.volume = 1;
            this.am_base_Transform.volume = 1;
            this.am_wind_Transform.volume = 1;
            this.main_song_Transform.volume = 1;
            this.musTransform.volume = 1;
         }
      }
      
      public function CreateRestoreLoopSounds() : void
      {
         try
         {
            this.musch = this.s_gameplay_song.play(0,0,this.musTransform);
            this.musch.soundTransform.volume = 0;
            this.musch.addEventListener(Event.SOUND_COMPLETE,this.SongPlayAgain);
            this.am_base_ch = this.s_am_base.play(0,0,this.am_base_Transform);
            this.am_base_ch.soundTransform.volume = 0;
            this.am_base_ch.addEventListener(Event.SOUND_COMPLETE,this.am_base_PlayAgain);
            this.am_wind_ch = this.s_am_wind.play(0,0,this.am_wind_Transform);
            this.am_wind_ch.soundTransform.volume = 0;
            this.am_wind_ch.addEventListener(Event.SOUND_COMPLETE,this.am_wind_PlayAgain);
            this.gravitatorch = this.s_gravitator.play(0,0,this.gravitatorTransform);
            this.gravitatorch.soundTransform.volume = 0;
            this.UpdateGravitatorVol();
            this.gravitatorch.addEventListener(Event.SOUND_COMPLETE,this.GravitatorPlayAgain);
            this.talkerch = new SoundChannel();
         }
         catch(e:Error)
         {
         }
      }
      
      public function SetHint(param1:String) : void
      {
         this.CURRENT_HINT = this.ReplaceWithVariables(param1);
      }
      
      public function ReplaceWithVariables(param1:String) : String
      {
         var _loc2_:Vector.<String> = null;
         var _loc3_:String = null;
         var _loc4_:int = 0;
         var _loc5_:* = undefined;
         var _loc6_:Boolean = false;
         _loc2_ = new Vector.<String>();
         for(_loc3_ in this.level_variables)
         {
            if(param1.indexOf(_loc3_) != -1)
            {
               _loc2_.push(_loc3_);
               _loc5_ = _loc3_.length;
               _loc6_ = false;
               _loc4_ = 0;
               while(_loc4_ < _loc2_.length)
               {
                  if(_loc5_ > _loc2_[_loc4_].length)
                  {
                     _loc2_.splice(_loc4_,0,_loc3_);
                     _loc6_ = true;
                     break;
                  }
                  _loc4_++;
               }
               if(!_loc6_)
               {
                  _loc2_.push(_loc3_);
               }
            }
         }
         _loc4_ = 0;
         while(_loc4_ < _loc2_.length)
         {
            _loc3_ = _loc2_[_loc4_];
            param1 = param1.split(_loc3_).join(this.level_variables[_loc3_]);
            _loc4_++;
         }
         return param1;
      }
      
      public function DialogTalk(param1:String) : void
      {
         var SoundClass:Class = null;
         var newSound:Sound = null;
         var targetA:String = param1;
         if(this.NONMUTE)
         {
            try
            {
               this.talkerch.stop();
               SoundClass = getDefinitionByName(targetA) as Class;
               newSound = new SoundClass();
               this.talkerch = newSound.play(0,0,this.vol);
            }
            catch(error:Error)
            {
               talkerch = s_t_switch_denied.play(0,0,vol);
            }
         }
      }
      
      public function DialogSay(param1:String, param2:String) : void
      {
         this.str = "";
         if(param2 == "0")
         {
            param2 = "#AADDFF";
            this.str = this.EXOS_NAME;
         }
         if(param2 == "1")
         {
            param2 = "#AAFFAA";
            this.str = this.MP_mode ? "Marine" : this.CMPG_name;
         }
         if(param2 == "2")
         {
            param2 = "#DDFFAA";
            this.str = this.NOIR_NAME;
         }
         if(param2 == "3")
         {
            param2 = "#FFAAFF";
            this.str = this.PROXY_NAME;
         }
         if(param2 == "4")
         {
            param2 = "#FFAAAA";
            this.str = "Civil Security";
         }
         param1 = this.ReplaceWithVariables(param1);
         if(this.str != "")
         {
            this.str = "<font color=\'#FFFFFF\'>" + this.str + "</font>: <font color=\'" + param2 + "\'>" + param1 + "</font>";
         }
         else
         {
            this.str = "<font color=\'" + param2 + "\'>" + param1 + "</font>";
         }
         this.ChatNewMsg(this.str);
         if(this.NONMUTE)
         {
            this.PlaySound_full(this.s_chat);
         }
      }
      
      public function ResetVol() : void
      {
         if(this.NONMUTE)
         {
            this.vol.volume = this.FX_VOLUME;
            this.vol2.volume = this.MUSIC_VOLUME;
            this.vol2Custom.volume = this.CUSTOM_MUSIC_VOLUME;
         }
      }
      
      public function ExpChanged(param1:Number, param2:int, param3:Number, param4:String = "") : void
      {
         var str:String = null;
         var tofixed:String = null;
         var new_val:Number = param1;
         var type:int = param2;
         var added:Number = param3;
         var comment:String = param4;
         var ExpUpdateLevelText:* = function():void
         {
            if(SHOW_EXP_BAR > 1)
            {
               exp_bar.left.text = exp_last_level;
               exp_bar.right.text = exp_last_level + 1;
            }
         };
         var ExpGetLevel:* = function():Number
         {
            return Math.floor(exp_points / exp_points_per_level);
         };
         if(type == this.EXP_TYPE_SYNC_SKILL_POINTS)
         {
            this.exp_bar.inc.text = "";
            this.exp_bar.inc_under.text = "";
         }
         else if(type >= 0 && this.SHOW_EXP_BAR == 2)
         {
            if(this.exp_titles[type].length == 0)
            {
               str = "";
            }
            else
            {
               str = " - " + this.exp_titles[type].split("#").join(comment);
            }
            if(added == Math.floor(added))
            {
               if(added >= 0)
               {
                  this.exp_bar.inc.text = "+" + added + " exp" + str;
               }
               else
               {
                  this.exp_bar.inc.text = added + " exp" + str;
               }
            }
            else if(added >= 0)
            {
               this.exp_bar.inc.text = "+" + added.toFixed(2) + " exp" + str;
            }
            else
            {
               this.exp_bar.inc.text = added.toFixed(2) + " exp" + str;
            }
         }
         else
         {
            tofixed = Math.abs(added / this.SKILL_POINTS_SCALE).toFixed(2);
            if(tofixed == "0.00")
            {
            }
            tofixed = Math.abs(added / this.SKILL_POINTS_SCALE).toFixed(3);
            if(tofixed == "0.000")
            {
            }
            tofixed = Math.abs(added / this.SKILL_POINTS_SCALE).toFixed(4);
            if(added >= 0)
            {
               this.exp_bar.inc.text = "+" + tofixed + " SP";
            }
            else
            {
               this.exp_bar.inc.text = "-" + tofixed + " SP";
            }
         }
         this.exp_points_target = new_val;
         if(this.exp_first_sync_await || this.SHOW_EXP_BAR == 1)
         {
            this.exp_first_sync_await = false;
            this.exp_points = this.exp_points_target;
            this.exp_last_level = ExpGetLevel();
            ExpUpdateLevelText();
            return;
         }
         if(this.exp_timer == uint.MAX_VALUE)
         {
            this.exp_timer = setInterval(function():*
            {
               var _loc1_:* = undefined;
               var _loc2_:* = undefined;
               var _loc3_:* = undefined;
               _loc1_ = exp_points % exp_points_per_level * 7.8;
               if(ExpGetLevel() != exp_last_level)
               {
                  exp_last_level = ExpGetLevel();
                  ExpUpdateLevelText();
                  if(exp_max_level_this_time < exp_last_level)
                  {
                     exp_max_level_this_time = exp_last_level;
                     PlaySound_full(s_exp_level);
                     exp_bar.levelup.visible = true;
                     exp_bar.levelup.gotoAndPlay(1);
                     exp_bar.levelup.txt_container.txt.text = "Level " + exp_last_level;
                  }
               }
               exp_bar.prog.scaleX = _loc1_ / 100;
               exp_bar.prog_end.x = exp_bar.glow.x = 11 + exp_bar.prog.scaleX * 100;
               exp_bar.inc.x = Math.max(157,Math.min(exp_bar.prog_end.x,800 - 157)) - 263 / 2;
               if(exp_points != exp_points_target)
               {
                  if(!exp_bar.visible)
                  {
                     exp_bar.visible = true;
                     exp_bar_shadow.visible = true;
                  }
                  if(exp_bar.alpha < 0.79)
                  {
                     exp_bar.alpha = Math.min(0.8,exp_bar.alpha + 0.1);
                  }
                  else
                  {
                     _loc3_ = exp_points;
                     if(exp_points < exp_points_target)
                     {
                        exp_bar.glow.alpha = (exp_bar.glow.alpha + 1) / 2;
                        exp_points = Math.min((exp_points * 50 + exp_points_target) / 51 + 0.01,exp_points_target);
                     }
                     else
                     {
                        exp_points = Math.max((exp_points * 50 + exp_points_target) / 51 - 0.01,exp_points_target);
                     }
                     if(exp_points == exp_points_target)
                     {
                        exp_bar.alpha = 1;
                        PlaySound_full(s_exp_event_stop);
                     }
                     else if(exp_points > _loc3_)
                     {
                        if(Math.floor(_loc3_ * 4) != Math.floor(exp_points * 4))
                        {
                           PlaySound_full(s_exp_tick);
                        }
                     }
                  }
               }
               else if(exp_bar.glow.alpha > 0)
               {
                  exp_bar.glow.alpha = Math.max(0,exp_bar.glow.alpha - 0.02);
               }
               else if(exp_bar.alpha > 0)
               {
                  exp_bar.alpha = Math.max(0,exp_bar.alpha - 0.005);
               }
               else
               {
                  exp_bar.visible = false;
                  exp_bar_shadow.visible = false;
                  clearInterval(exp_timer);
                  exp_timer = uint.MAX_VALUE;
                  if(currentLabel == "gaming")
                  {
                     CheckIfPlayerInfoUpdateNeeded(mens[MP_myid]);
                  }
               }
               if(Boolean(chat_win) && chat_win.visible)
               {
                  if(exp_bar.alpha > 0)
                  {
                     exp_bar_shadow.alpha = exp_bar.alpha = 0;
                  }
               }
               else
               {
                  exp_bar_shadow.alpha = Math.min(1,exp_bar.alpha / 0.8 * 1);
                  exp_bar_shadow.y = exp_bar.y = Math.max(400,mouseY + 50);
               }
               exp_bar.inc_under.x = exp_bar.inc.x + 131 + 5;
               exp_bar.inc_under.alpha = exp_bar.inc.alpha * 0.5;
               if(type >= 0 && SHOW_EXP_BAR == 2)
               {
                  _loc2_ = exp_points.toFixed(2) + " exp";
               }
               else
               {
                  _loc2_ = (exp_points / SKILL_POINTS_SCALE).toFixed(2) + " SP";
               }
               if(exp_bar.inc_under.text != _loc2_)
               {
                  exp_bar.inc_under.text = _loc2_;
               }
               if(SHOW_EXP_BAR == 3)
               {
                  if(exp_bar.exp_min.x < 0)
                  {
                     exp_bar.exp_min.x = 11 + _loc1_ + 1;
                     exp_bar.exp_max.x = 11 + _loc1_;
                     exp_min_level = exp_last_level;
                     exp_max_level = exp_last_level;
                  }
                  if(exp_last_level == exp_min_level)
                  {
                     if(!exp_bar.exp_min.visible)
                     {
                        exp_bar.exp_min.visible = true;
                     }
                     exp_bar.exp_min.x = Math.min(exp_bar.exp_min.x,11 + _loc1_ + 1);
                  }
                  else
                  {
                     if(exp_last_level < exp_min_level)
                     {
                        exp_bar.exp_min.x = 11 + _loc1_ + 1;
                        exp_min_level = exp_last_level;
                     }
                     if(exp_bar.exp_min.visible)
                     {
                        exp_bar.exp_min.visible = false;
                     }
                  }
                  if(exp_last_level == exp_max_level)
                  {
                     if(!exp_bar.exp_max.visible)
                     {
                        exp_bar.exp_max.visible = true;
                     }
                     exp_bar.exp_max.x = Math.max(exp_bar.exp_max.x,11 + _loc1_);
                  }
                  else
                  {
                     if(exp_last_level > exp_max_level)
                     {
                        exp_bar.exp_max.x = 11 + _loc1_;
                        exp_max_level = exp_last_level;
                     }
                     if(exp_bar.exp_max.visible)
                     {
                        exp_bar.exp_max.visible = false;
                     }
                  }
               }
               else
               {
                  if(exp_bar.exp_min.visible)
                  {
                     exp_bar.exp_min.visible = false;
                  }
                  if(exp_bar.exp_max.visible)
                  {
                     exp_bar.exp_max.visible = false;
                  }
               }
            },16);
         }
      }
      
      public function GivePotentialExpSourceValue(param1:*, param2:*) : void
      {
         param1.exp_potential = Math.min(2,param1.exp_potential + param2);
      }
      
      public function PlayerCanGiveExp(param1:*) : Boolean
      {
         if(param1.exp_potential > 0)
         {
            param1.exp_potential = Math.max(0,param1.exp_potential - 0.333);
            return true;
         }
         return false;
      }
      
      public function ExpTask(param1:int, param2:String = "", param3:Boolean = false) : void
      {
         var type:int = param1;
         var comment:String = param2;
         var trigger_SP_update:Boolean = param3;
         if(this.MP_spectator)
         {
            return;
         }
         if(this.SHOW_EXP_BAR == 3 || type == this.EXP_TYPE_SYNC_SKILL_POINTS)
         {
            if(trigger_SP_update)
            {
               if(type == this.EXP_TYPE_SYNC_SKILL_POINTS)
               {
                  this.exp_scheduled.push({
                     "type":this.EXP_TYPE_SYNC_SKILL_POINTS,
                     "SHOW_EXP_BAR":3
                  });
                  this.ExpHandleTasks();
               }
               else
               {
                  this.skill_points_change_expect_tries = 5;
                  if(this.skill_points_tim == uint.MAX_VALUE)
                  {
                     this.skill_points_tim = setInterval(function():*
                     {
                        if(skill_points_change_expect_tries > 0)
                        {
                           --skill_points_change_expect_tries;
                           exp_scheduled.push({
                              "type":EXP_TYPE_DEATH_IN_APPROVED,
                              "SHOW_EXP_BAR":3
                           });
                           ExpHandleTasks();
                        }
                        else
                        {
                           --skill_points_change_expect_tries;
                           if(skill_points_change_expect_tries < -30)
                           {
                              clearInterval(skill_points_tim);
                              skill_points_tim = uint.MAX_VALUE;
                           }
                        }
                     },1000);
                  }
               }
            }
         }
         if(!this.exp_alive)
         {
            return;
         }
         if(type >= 0)
         {
            this.exp_scheduled.push({
               "type":type,
               "comment":comment,
               "CUR_CUSTOM_MAP":this.CUR_CUSTOM_MAP,
               "SHOW_EXP_BAR":2
            });
            this.ExpHandleTasks();
         }
      }
      
      public function ExpHandleTasks() : void
      {
         var type:int = 0;
         var comment:String = null;
         var cus_map:String = null;
         var exp_bar_type:int = 0;
         var myRequest:* = undefined;
         var myVariables:* = undefined;
         var exp_task_failed:* = undefined;
         var exp_task_done:* = undefined;
         if(this.exp_busy || this.proxySelection > 0)
         {
            return;
         }
         if(this.exp_scheduled.length > 0)
         {
            type = int(this.exp_scheduled[0].type);
            comment = this.exp_scheduled[0].comment;
            cus_map = this.exp_scheduled[0].CUR_CUSTOM_MAP;
            exp_bar_type = int(this.exp_scheduled[0].SHOW_EXP_BAR);
            this.exp_scheduled.splice(0,1);
            this.exp_busy = true;
            if(exp_bar_type == 3)
            {
               exp_task_failed = function(param1:IOErrorEvent):void
               {
                  var e:IOErrorEvent = param1;
                  myExpLoader.removeEventListener(Event.COMPLETE,exp_task_done);
                  myExpLoader.removeEventListener(IOErrorEvent.IO_ERROR,exp_task_failed);
                  setTimeout(function():*
                  {
                     exp_busy = false;
                     ExpHandleTasks();
                  },5000);
               };
               exp_task_done = function(param1:Event):void
               {
                  var delay:int = 0;
                  var parts:* = undefined;
                  var new_val:Number = NaN;
                  var e:Event = param1;
                  myExpLoader.removeEventListener(Event.COMPLETE,exp_task_done);
                  myExpLoader.removeEventListener(IOErrorEvent.IO_ERROR,exp_task_failed);
                  if(SHOW_EXP_BAR == 3)
                  {
                     parts = myExpLoader.data.split("|");
                     new_val = Number(parts[4]) * SKILL_POINTS_SCALE;
                     if(new_val != exp_points_target)
                     {
                        if(!isNaN(new_val) && !isNaN(new_val - exp_points_target))
                        {
                           ExpChanged(new_val,type,new_val - exp_points_target);
                        }
                     }
                  }
                  delay = 1000;
                  if(exp_scheduled.length > 5)
                  {
                     delay /= 2;
                  }
                  if(exp_scheduled.length > 10)
                  {
                     delay /= 2;
                  }
                  setTimeout(function():*
                  {
                     exp_busy = false;
                     ExpHandleTasks();
                  },delay);
               };
               if(this.SHOW_EXP_BAR == exp_bar_type)
               {
                  this.exp_bar.transform.colorTransform = new ColorTransform(0.5,0.75,1,this.exp_bar.alpha,0,0,0,0);
               }
               myRequest = new URLRequest(this.MP_public_stat_server);
               myVariables = new URLVariables();
               myVariables.login = this.def_login;
               myRequest.method = URLRequestMethod.GET;
               myRequest.data = myVariables;
               this.myExpLoader.addEventListener(Event.COMPLETE,exp_task_done);
               this.myExpLoader.addEventListener(IOErrorEvent.IO_ERROR,exp_task_failed);
               this.myExpLoader.load(myRequest);
            }
            else if(exp_bar_type == 2)
            {
               exp_task_failed = function(param1:IOErrorEvent):void
               {
                  var e:IOErrorEvent = param1;
                  myExpLoader.removeEventListener(Event.COMPLETE,exp_task_done);
                  myExpLoader.removeEventListener(IOErrorEvent.IO_ERROR,exp_task_failed);
                  setTimeout(function():*
                  {
                     exp_busy = false;
                     ExpHandleTasks();
                  },1000);
               };
               exp_task_done = function(param1:Event):void
               {
                  var delay:int = 0;
                  var parts:Array = null;
                  var e:Event = param1;
                  myExpLoader.removeEventListener(Event.COMPLETE,exp_task_done);
                  myExpLoader.removeEventListener(IOErrorEvent.IO_ERROR,exp_task_failed);
                  if(myExpLoader.data.charAt(0) != "x")
                  {
                     parts = myExpLoader.data.split("|");
                     if(SHOW_EXP_BAR == 2)
                     {
                        if(parts[0] != "#")
                        {
                           ExpChanged(Number(parts[0]),type,Number(parts[1]),comment);
                        }
                        else
                        {
                           ExpChanged(exp_points_target + Number(parts[1]),type,Number(parts[1]),comment);
                        }
                     }
                  }
                  else
                  {
                     if(myExpLoader.data == "xL")
                     {
                        exp_alive = false;
                        return;
                     }
                     if(!(myExpLoader.data == "xR" || myExpLoader.data == "xPB" || myExpLoader.data == "xSE"))
                     {
                        if(myExpLoader.data != "xTL")
                        {
                           if(myExpLoader.data == "xDL")
                           {
                              if(currentLabel == "gaming")
                              {
                                 if(SHOW_EXP_BAR == 2)
                                 {
                                    DialogSay("Daily experience limit has been reached.","#FFFF00");
                                 }
                                 exp_alive = false;
                                 return;
                              }
                           }
                           else if(currentLabel == "gaming")
                           {
                              if(SHOW_EXP_BAR == 2)
                              {
                                 DialogSay("Could not sync exp points: " + myExpLoader.data,"#FFFF00");
                              }
                           }
                        }
                     }
                  }
                  delay = 1000;
                  if(exp_scheduled.length > 5)
                  {
                     delay /= 2;
                  }
                  if(exp_scheduled.length > 10)
                  {
                     delay /= 2;
                  }
                  setTimeout(function():*
                  {
                     exp_busy = false;
                     ExpHandleTasks();
                  },delay);
               };
               if(this.SHOW_EXP_BAR == exp_bar_type)
               {
                  this.exp_bar.transform.colorTransform = new ColorTransform(1,1,1,this.exp_bar.alpha,0,0,0,0);
               }
               myRequest = new URLRequest(this.MP_exp_server);
               myVariables = new URLVariables();
               if(this.def_login != undefined && this.def_login != "")
               {
                  myVariables.l = this.def_login;
                  myVariables.p = this.def_password;
               }
               myVariables.map_id = cus_map;
               myVariables.type = type;
               myVariables.comment = comment;
               myRequest.method = URLRequestMethod.POST;
               myRequest.data = myVariables;
               this.myExpLoader.addEventListener(Event.COMPLETE,exp_task_done);
               this.myExpLoader.addEventListener(IOErrorEvent.IO_ERROR,exp_task_failed);
               this.myExpLoader.load(myRequest);
            }
            return;
         }
      }
      
      public function ExpLevelDone() : void
      {
         if(this.can_get_exp_for_level)
         {
            this.can_get_exp_for_level = false;
            this.ExpTask(this.EXP_TYPE_BEAT_CUSTOM);
         }
      }
      
      public function ExpTrackMyHealing(param1:*) : void
      {
         var mc:* = param1;
         if(this.exp_heal_tracked_players.indexOf(mc) == -1)
         {
            this.exp_heal_tracked_players.push(mc);
            setTimeout(function():*
            {
               if(mc.hea > 0)
               {
                  ExpTask(EXP_TYPE_HEAL_AND_TEAMMATE_SURVIVED_IN_APPROVED,mc.nick);
               }
               exp_heal_tracked_players.splice(exp_heal_tracked_players.indexOf(mc),1);
            },7000);
         }
      }
      
      public function MaybeInfoUpdateFor(param1:*) : void
      {
         var i:* = param1;
         if(this.mens[i])
         {
            setTimeout(function():*
            {
               mens[i].info = undefined;
            },3000);
         }
      }
      
      public function CheckIfPlayerInfoUpdateNeeded(param1:*) : void
      {
         var myRequest:URLRequest = null;
         var myVariables:URLVariables = null;
         var exp_task_failed:* = undefined;
         var exp_task_done:* = undefined;
         var lowercaseLoginName:String = null;
         var html:String = null;
         var mc:* = param1;
         exp_task_failed = function(param1:IOErrorEvent):void
         {
            var e:IOErrorEvent = param1;
            cleanupListeners();
            setTimeout(function():*
            {
               player_info_busy = false;
            },5000);
         };
         exp_task_done = function(param1:Event):void
         {
            var html:String = null;
            var e:Event = param1;
            cleanupListeners();
            setTimeout(function():*
            {
               player_info_busy = false;
            },100);
            if(currentLabel === "gaming")
            {
               html = myMPlayerInfoLoader.data;
               if(html.indexOf("<w />") !== -1)
               {
                  html = html.split("<w />").join("");
                  mc.info_text = html;
                  updateTxt2(mc);
                  if(exp_legens[mc.login_name] === undefined)
                  {
                     exp_legens[mc.login_name] = true;
                     ExpTask(EXP_TYPE_LEGEND,mc.login_name);
                  }
               }
               else if(SHOW_EXP_BAR != 3)
               {
                  CheckIfPlayerInfoUpdateNeeded(mc);
               }
               else
               {
                  mc.info_text = html;
                  updateTxt2(mc);
               }
               mc.info = {
                  "A":mc.login_name,
                  "B":SHOW_EXP_BAR,
                  "html":myMPlayerInfoLoader.data
               };
            }
         };
         var cleanupListeners:* = function():void
         {
            myMPlayerInfoLoader.removeEventListener(Event.COMPLETE,exp_task_done);
            myMPlayerInfoLoader.removeEventListener(IOErrorEvent.IO_ERROR,exp_task_failed);
         };
         if(!this.MP_mode || this.player_info_busy || !mc.isplayer || !mc.visible || !mc.gui.visible || this.GUEST_ACCESS || this.proxySelection > 0)
         {
            return;
         }
         if(mc.info && mc.info.A === mc.login_name && mc.info.B === this.SHOW_EXP_BAR && Boolean(mc.gui.txt2.visible))
         {
            return;
         }
         if(this.SHOW_EXP_BAR == 1 || this.SHOW_EXP_BAR == 2)
         {
            lowercaseLoginName = mc.login_name.toLowerCase();
            this.MP_custom_events += ";cutag|" + this.MP_myid + "#" + mc.idd + "#" + lowercaseLoginName;
         }
         if(mc === this.mens[this.MP_myid] && !this.MP_spectator && this.SP_OWN_EXP)
         {
            if(this.exp_first_sync_await)
            {
               return;
            }
            html = this.SHOW_EXP_BAR === 2 ? "Level " + this.exp_last_level : (this.exp_points_target / this.SKILL_POINTS_SCALE).toFixed(2).split(".").join(" . ") + " SP";
            if(this.GUEST_ACCESS)
            {
               html = "";
            }
            mc.info_text = html;
            this.updateTxt2(mc);
            mc.info = {
               "A":mc.login_name,
               "B":this.SHOW_EXP_BAR,
               "html":html
            };
            return;
         }
         this.player_info_busy = true;
         myRequest = new URLRequest(this.MP_exp_server);
         myVariables = new URLVariables();
         if(this.def_login && this.def_login !== "")
         {
            myVariables.l = this.def_login;
            myVariables.p = this.def_password;
         }
         myVariables.A = mc.login_name;
         myVariables.B = this.SHOW_EXP_BAR;
         myRequest.method = URLRequestMethod.POST;
         myRequest.data = myVariables;
         this.myMPlayerInfoLoader.addEventListener(Event.COMPLETE,exp_task_done);
         this.myMPlayerInfoLoader.addEventListener(IOErrorEvent.IO_ERROR,exp_task_failed);
         this.myMPlayerInfoLoader.load(myRequest);
      }
      
      public function UnloadMenuItems() : void
      {
         removeChild(this.menu_buttons);
         removeChild(this.menu_buttons2);
         removeChild(this.earth);
         removeChild(this.flike);
         removeChild(this.flikee);
         removeEventListener(Event.ENTER_FRAME,this.onEnterFrame2);
      }
      
      public function IsItSafeToGiveFullServerList() : Boolean
      {
         var curURL:String = null;
         curURL = "iframe";
         try
         {
            curURL = String(ExternalInterface.call(" function(){ return (window!=window.top)?\'iframe\':\'normal\'; }"));
         }
         catch(e:Error)
         {
            curURL = "iframe";
         }
         if(curURL == "normal" || curURL == "null")
         {
            if(MovieClip(root).loaderInfo.url.toLowerCase().indexOf("plazmaburst2.com") == -1 && MovieClip(root).loaderInfo.url.indexOf("WebServers/home/") == -1 && MovieClip(root).loaderInfo.url.indexOf("WebServers/home/") == -1 && MovieClip(root).loaderInfo.url.indexOf("Projects Flash") == -1 && MovieClip(root).loaderInfo.url.indexOf("Projects%20Fl") == -1)
            {
               return false;
            }
            return true;
         }
         return false;
      }
      
      public function LocateMeToMp() : void
      {
         if(1 > 2)
         {
            throw new Error("Hello there! We really should not let modified versions of our game " + "to connect to PB2 servers since it can lead to more server traffic " + "spendings than our ads can cover (and multiplayer of PB2 is traffic-" + "hungry!). Hope you understand this. There is no real protection " + "against connection to all PB2 servers, they are just too cruel " + "when it comes to \"suspicious activity\" bans. We are fine with PB2 " + "modifications in most cases (as long as they will not " + "damage us and game popularity in any way) - feel free to get in " + "touch with Eric Gurt regarding anything like this.");
         }
         if(this.loaderInfo.url.split("%5F").join("_").indexOf("pb2_re34.swf") != -1 || this.loaderInfo.url.split("%5F").join("_").indexOf("pb2_re34_cn.swf") != -1 || this.loaderInfo.url.split("%5F").join("_").indexOf("pb2_re34_alt.swf") != -1 || this.loaderInfo.url.split("%5F").join("_").indexOf("pb2-re34-alt.swf") != -1 || this.loaderInfo.url.split("%5F").join("_").indexOf("pb2_re34_alt_1") != -1)
         {
            this.allow_mp_connect = true;
            gotoAndStop("loginform");
         }
         else
         {
            this.allow_mp_connect = true;
         }
         gotoAndStop("loginform");
      }
      
      public function mov(param1:MouseEvent) : void
      {
         if(!param1.buttonDown)
         {
            this.m_hold = -1;
         }
         this.m = 0;
         while(this.m < this.menu_buttons_tot)
         {
            if(this.menu_buttons["btn" + this.m].visible)
            {
               if(this.menu_buttons2.mouseX > this.menu_buttons["btn" + this.m].x && this.menu_buttons2.mouseX < this.menu_buttons["btn" + this.m].x + 200 && this.menu_buttons2.mouseY > this.menu_buttons["btn" + this.m].y && this.menu_buttons2.mouseY < this.menu_buttons["btn" + this.m].y + 20)
               {
                  this.m_active = this.m;
                  this.menu_buttons["btn" + this.m].btn_over.alpha = Math.min(this.menu_buttons["btn" + this.m].btn_over.alpha + 0.5,1);
               }
            }
            ++this.m;
         }
      }
      
      public function onEnterFrame2(param1:Event) : void
      {
         this.i = 0;
         while(this.i < 30)
         {
            if(!this.earth["sh" + this.i].started)
            {
               if(getTimer() > this.MUSIC_START + 19020 + this.i * 300 / 30 * 30)
               {
                  this.earth["sh" + this.i].started = true;
                  this.earth["sh" + this.i].gotoAndPlay(1 + Math.floor(Math.random() * 60));
                  this.xx = Math.random() * Math.PI * 2;
                  this.yy = Math.random() * 200;
                  this.earth["sh" + this.i].x = Math.sin(this.xx) * this.yy - 100;
                  this.earth["sh" + this.i].y = Math.cos(this.xx) * this.yy + Math.sin(this.xx) * this.yy + 20;
                  this.earth["sh" + this.i].scaleX = 2.5 + Math.cos(this.xx) * 1;
                  this.earth["sh" + this.i].scaleY = this.earth["sh" + this.i].scaleX;
               }
            }
            ++this.i;
         }
         if(this.blink_main == 20)
         {
            this.menu_buttons.txtconsole.htmlText = this.new_nick + "█";
         }
         ++this.blink_main;
         if(this.blink_main > 40)
         {
            this.menu_buttons.txtconsole.htmlText = this.new_nick;
            this.blink_main = 0;
         }
         this.earth.x = 400 + Math.sin(this.earth_pos1 * 0.25) * Math.cos(this.earth_pos1 * 0.7) * 100;
         this.earth.y = 200 + Math.cos(this.earth_pos1) * Math.sin(this.earth_pos1 * 0.6) * 50;
         this.earth.scaleX = this.earth.scaleY = 1 + Math.sin(this.earth_pos1 * 0.15) * Math.cos(this.earth_pos1 * 0.2) * 0.1;
         this.earth_pos1 += 0.01 * 30 / stage.frameRate;
         if(this.darkness.alpha > 0)
         {
            this.darkness.alpha -= 0.1 * 30 / stage.frameRate;
         }
         else
         {
            this.darkness.visible = false;
         }
         this.m_time += 0.01 * 30 / stage.frameRate;
         if(this.m_time > Math.PI * 4)
         {
            this.m_time -= Math.PI * 4;
         }
         if(this.m_active == -1)
         {
            if(this.menu_buttons.alpha > 0.5)
            {
               this.menu_buttons.alpha -= 0.1 * 30 / stage.frameRate;
            }
         }
         else if(this.menu_buttons.alpha < 1)
         {
            this.menu_buttons.alpha += 0.4 * 30 / stage.frameRate;
         }
         if(this.m_active != this.lm_active)
         {
            this.PlaySound_full(this.ss_info);
         }
         this.lm_active = this.m_active;
         this.m = 0;
         while(this.m < this.menu_buttons_tot)
         {
            if(this.m_active == this.m && this.m_hold == -1 || this.m_hold == this.m)
            {
               this.menu_buttons["btn" + this.m].alpha = 1;
               this.menu_buttons["btn" + this.m].btn_over.alpha = Math.min(this.menu_buttons["btn" + this.m].btn_over.alpha + 0.5,1);
            }
            else
            {
               if(this.menu_buttons["btn" + this.m].btn_over.alpha > 0)
               {
                  this.menu_buttons["btn" + this.m].btn_over.alpha -= 0.1 * 30 / stage.frameRate;
               }
               this.menu_buttons["btn" + this.m].alpha = 0.5;
            }
            this.menu_buttons["btn" + this.m].ghost.alpha = this.menu_buttons["btn" + this.m].btn_over.alpha * (0.3 + Math.sin(this.m_time * 4) * 0.1);
            this.menu_buttons["btn" + this.m].ghost.z = (this.menu_buttons["btn" + this.m].ghost.z - this.menu_buttons["btn" + this.m].btn_over.alpha * 100) / 2;
            this.menu_buttons["btn" + this.m].ghost.x = 106 + Math.sin(this.m_time) * 20;
            this.menu_buttons["btn" + this.m].ghost.y = 12 + Math.cos(this.m_time * 2) * 10;
            ++this.m;
         }
      }
      
      public function UpdateMenuHue() : void
      {
         var _loc1_:AdjustColor = null;
         var _loc2_:ColorMatrixFilter = null;
         var _loc3_:Array = null;
         _loc1_ = new AdjustColor();
         _loc1_.brightness = 0;
         _loc1_.contrast = 0;
         _loc1_.hue = this.menu_hue;
         _loc1_.saturation = 0;
         _loc2_ = new ColorMatrixFilter(_loc1_.CalculateFinalFlatArray());
         _loc3_ = new Array();
         _loc3_.push(_loc2_);
         this.menu_buttons.filters = _loc3_;
         this.errmenu.filters = _loc3_;
      }
      
      public function k_down_space(param1:Event) : void
      {
         if(param1.keyCode == 32 || param1.keyCode == 82)
         {
            stage.removeEventListener(KeyboardEvent.KEY_DOWN,this.k_down_space);
            this.myCursor.gotoAndPlay("loading");
            gotoAndStop("loading");
         }
      }
      
      public function NextLevel() : void
      {
         this.PlaySound_full(this.ss_info_act);
         if(this.LEVELS_PASSED < this.LEVELS_TOTAL)
         {
            this.AWARD = true;
            this.CMPG_THIS_LEVEL = this.LEVELS_PASSED;
            stage.removeEventListener(KeyboardEvent.KEY_DOWN,this.k_down_space2);
            gotoAndStop("difch");
         }
         else
         {
            stage.removeEventListener(KeyboardEvent.KEY_DOWN,this.k_down_space2);
            gotoAndStop("credits");
         }
      }
      
      public function UpdateSkinC(param1:int) : void
      {
         var _loc2_:* = undefined;
         var _loc3_:* = undefined;
         if(param1 == 0)
         {
            _loc2_ = this.skin0;
         }
         if(param1 == 1)
         {
            _loc2_ = this.skin1;
         }
         if(param1 == 0)
         {
            if(this.skin_model[param1] > 49)
            {
               this.skin_model[param1] = 40;
            }
            if(this.skin_model[param1] < 40)
            {
               this.skin_model[param1] = 49;
            }
         }
         if(param1 == 1)
         {
            if(this.skin_model[param1] > 61)
            {
               this.skin_model[param1] = 60;
            }
            if(this.skin_model[param1] < 60)
            {
               this.skin_model[param1] = 61;
            }
         }
         _loc2_.gotoAndStop(1);
         _loc3_ = this.skin_model[param1];
         _loc2_.head.gotoAndStop(_loc3_);
         if(param1 == 1)
         {
            _loc3_ = 3;
         }
         if(param1 == 0 && this.skin_model[param1] < 49)
         {
            _loc3_ = 1;
         }
         _loc2_.body.gotoAndStop(_loc3_);
         _loc2_.toe.gotoAndStop(_loc3_);
         _loc2_.leg1_upper.gotoAndStop(_loc3_);
         _loc2_.leg1_middle.gotoAndStop(_loc3_);
         _loc2_.leg1_lower.gotoAndStop(_loc3_);
         _loc2_.leg2_upper.gotoAndStop(_loc3_);
         _loc2_.leg2_middle.gotoAndStop(_loc3_);
         _loc2_.leg2_lower.gotoAndStop(_loc3_);
         _loc2_.arm1_upper.gotoAndStop(_loc3_);
         _loc2_.arm1_lower.gotoAndStop(_loc3_);
         _loc2_.arm2_upper.gotoAndStop(_loc3_);
         _loc2_.arm2_lower.gotoAndStop(_loc3_);
         if(this.skin_color_head[param1] >= this.clrs.length)
         {
            this.skin_color_head[param1] = 0;
         }
         if(this.skin_color_head[param1] < 0)
         {
            this.skin_color_head[param1] = this.clrs.length - 1;
         }
         if(this.skin_color_body[param1] >= this.clrs.length)
         {
            this.skin_color_body[param1] = 0;
         }
         if(this.skin_color_body[param1] < 0)
         {
            this.skin_color_body[param1] = this.clrs.length - 1;
         }
         if(this.skin_color_arms[param1] >= this.clrs.length)
         {
            this.skin_color_arms[param1] = 0;
         }
         if(this.skin_color_arms[param1] < 0)
         {
            this.skin_color_arms[param1] = this.clrs.length - 1;
         }
         if(this.skin_color_legs[param1] >= this.clrs.length)
         {
            this.skin_color_legs[param1] = 0;
         }
         if(this.skin_color_legs[param1] < 0)
         {
            this.skin_color_legs[param1] = this.clrs.length - 1;
         }
         _loc2_.head.filters = new Array(this.clrs[this.skin_color_head[param1]]);
         _loc2_.body.filters = new Array(this.clrs[this.skin_color_body[param1]]);
         _loc2_.arm1_lower.filters = new Array(this.clrs[this.skin_color_arms[param1]]);
         _loc2_.arm2_lower.filters = new Array(this.clrs[this.skin_color_arms[param1]]);
         _loc2_.leg1_upper.filters = new Array(this.clrs[this.skin_color_legs[param1]]);
         _loc2_.leg1_middle.filters = new Array(this.clrs[this.skin_color_legs[param1]]);
         _loc2_.leg1_lower.filters = new Array(this.clrs[this.skin_color_legs[param1]]);
         _loc2_.leg2_upper.filters = new Array(this.clrs[this.skin_color_legs[param1]]);
         _loc2_.leg2_middle.filters = new Array(this.clrs[this.skin_color_legs[param1]]);
         _loc2_.leg2_lower.filters = new Array(this.clrs[this.skin_color_legs[param1]]);
         _loc2_.toe.filters = new Array(this.clrs[this.skin_color_legs[param1]]);
         _loc2_.arm1_upper.filters = new Array(this.clrs[this.skin_color_arms[param1]]);
         _loc2_.arm2_upper.filters = new Array(this.clrs[this.skin_color_arms[param1]]);
      }
      
      public function RefrSkin(param1:int) : void
      {
         this.skin_color_head[param1] = 0;
         this.skin_color_body[param1] = 0;
         this.skin_color_arms[param1] = 0;
         this.skin_color_legs[param1] = 0;
      }
      
      public function k_down_space2(param1:Event) : void
      {
         if(param1.keyCode == 32 || param1.keyCode == 82)
         {
            if(this.camp_score.visible)
            {
               this.PlaySound_full(this.ss_info_act);
               this.camp_score.visible = false;
            }
            else
            {
               this.NextLevel();
            }
         }
      }
      
      public function ColourBuy(param1:int) : String
      {
         if(this.CMPG_money >= param1)
         {
            return "#83EC7D";
         }
         return "#E63D40";
      }
      
      public function UpdateTbl() : void
      {
         var upg_level:int = 0;
         this.creds.text = "$ " + this.CMPG_money;
         this.xx = 186;
         this.yy = this.game.sample.y;
         this.ok = true;
         this.i3 = 0;
         this.i6 = 0;
         this.i = 0;
         while(this.i < this.inventoryC.length)
         {
            if(this.gunsA[this.i] == undefined || this.gunsA[this.i] == null)
            {
               this.gunsA[this.i] = this.MakeGunByClass(this.inventoryC[this.i].mdl,{});
            }
            this.ok = false;
            this.i2 = 0;
            while(this.i2 < this.inventoryA.length && !this.ok)
            {
               if(this.inventoryA[this.i2].mdl == this.inventoryC[this.i].mdl)
               {
                  this.ok = true;
                  this.i3 = this.i2;
               }
               ++this.i2;
            }
            if(this.inventoryC[this.i].mdl == "item_grenade")
            {
               this.i2 = 0;
               while(this.i2 < this.inventoryA.length)
               {
                  if(this.inventoryA[this.i2].mdl == this.inventoryC[this.i].mdl)
                  {
                     ++this.i6;
                  }
                  ++this.i2;
               }
            }
            this.gunsA[this.i].model = this.inventoryC[this.i].mdl;
            upg_level = this.ok ? int(this.inventoryA[this.i3].upg) : 0;
            this.gunsA[this.i].upg = upg_level;
            this.gunsA[this.i].gotoAndStop(1);
            this.gunsA[this.i].x = this.xx;
            this.gunsA[this.i].y = this.yy;
            this.gunsA[this.i].scaleX = 1;
            this.gunsA[this.i].scaleY = 1;
            this.gunsA[this.i].ok = this.ok;
            if(this.ok)
            {
               this.gunsA[this.i].filters = this.game.sample.filters;
            }
            else
            {
               this.gunsA[this.i].filters = this.game.sample_no.filters;
            }
            if(this.gunsAt[this.i] == undefined || this.gunsAt[this.i] == null)
            {
               this.gunsAt[this.i] = this.game.addChild(new shop_tit());
            }
            this.gunsAt[this.i].x = this.xx + (this.game.sample2.x - this.game.sample.x);
            this.gunsAt[this.i].y = this.yy;
            this.gunsAt[this.i].txt.text = this.GunModelToGunName(this.gunsA[this.i].model);
            this.gunsA[this.i].onmade();
            this.gunsA[this.i].i3 = this.i3;
            if(this.ok && this.inventoryC[this.i].mdl != "item_grenade" && this.inventoryC[this.i].mdl != "gun_defecator")
            {
               if(this.gunsA[this.i].costupg > 0)
               {
                  this.gunsAt[this.i].txt2.htmlText = "Upgrade Level: " + upg_level + "/3";
               }
               else
               {
                  this.gunsAt[this.i].txt2.htmlText = "";
               }
               if(upg_level < 3 && this.gunsA[this.i].costupg > 0)
               {
                  this.gunsAt[this.i].txt3.htmlText = "<font color=\'" + this.ColourBuy(this.gunsA[this.i].costupg) + "\'>Upgrade for $ " + this.gunsA[this.i].costupg + "</font>";
               }
               else
               {
                  this.gunsAt[this.i].txt3.htmlText = "";
               }
            }
            else
            {
               if(this.gunsA[this.i].cost != undefined)
               {
                  this.gunsAt[this.i].txt3.htmlText = "<font color=\'" + this.ColourBuy(this.gunsA[this.i].cost) + "\'>Buy for $ " + this.gunsA[this.i].cost + "</font>";
               }
               else
               {
                  this.gunsAt[this.i].txt3.htmlText = "";
               }
               if(this.inventoryC[this.i].mdl == "item_grenade")
               {
                  if(this.i6 > 0)
                  {
                     this.gunsAt[this.i].txt.text = this.i6 + "x " + this.gunsAt[this.i].txt.text;
                     if(this.i6 > 1)
                     {
                        this.gunsAt[this.i].txt.text += "s";
                     }
                     this.gunsAt[this.i].txt2.htmlText = this.gunsAt[this.i].txt.text;
                  }
                  else
                  {
                     this.gunsAt[this.i].txt2.htmlText = "";
                  }
               }
               else
               {
                  this.gunsAt[this.i].txt2.htmlText = "";
               }
            }
            if(this.ok)
            {
               this.gunsAt[this.i].txt.alpha = 1;
            }
            else
            {
               this.gunsAt[this.i].txt.alpha = 0.6;
            }
            if(this.gunsA[this.i].cost > 0)
            {
               this.gunsAt[this.i].txt4.text = "Item price: $ " + this.gunsA[this.i].cost;
            }
            else
            {
               this.gunsAt[this.i].txt4.text = "";
            }
            if(this.gunsA[this.i].costupg > 0)
            {
               this.gunsAt[this.i].txt5.text = "Upgrade price: $ " + this.gunsA[this.i].costupg;
            }
            else
            {
               this.gunsAt[this.i].txt5.text = "";
            }
            if(this.gunsAl[this.i] == undefined || this.gunsAl[this.i] == null)
            {
               this.gunsAl[this.i] = this.game.addChild(new buy_line());
            }
            this.gunsAl[this.i].x = 0;
            this.gunsAl[this.i].y = this.yy - 9.5;
            if(this.ok && upg_level >= 3 || this.i6 >= 6)
            {
               this.gunsAl[this.i].alpha = 0;
            }
            else
            {
               this.gunsAl[this.i].alpha = 1;
            }
            if(this.firstframe)
            {
               this.gunsAl[this.i].addEventListener(MouseEvent.CLICK,function():*
               {
                  i = 0;
                  while(i < inventoryC.length)
                  {
                     if(gunsAl[i].hitTestPoint(mouseX,mouseY))
                     {
                        if(!gunsA[i].ok || gunsA[i].model == "item_grenade")
                        {
                           if(gunsA[i].model == "item_grenade" && i6 < 6 || gunsA[i].model != "item_grenade")
                           {
                              i7 = 0;
                              i2 = 0;
                              while(i2 < inventoryC.length)
                              {
                                 if(i != i2)
                                 {
                                    if(gunsA[i2].ok)
                                    {
                                       if(gunsA[i2].wep == gunsA[i].wep)
                                       {
                                          i3 = i2;
                                          i7 = gunsA[i2].cost + gunsA[i2].costupg * gunsA[i2].upg;
                                       }
                                    }
                                 }
                                 ++i2;
                              }
                              if(CMPG_money >= gunsA[i].cost - i7)
                              {
                                 if(gunsA[i].cost > 0)
                                 {
                                    CMPG_money -= gunsA[i].cost - i7;
                                    AddItemToHero1(gunsA[i].model,0);
                                    if(i7 > 0)
                                    {
                                       inventoryA.splice(gunsA[i3].i3,1);
                                    }
                                 }
                              }
                           }
                        }
                        else if(gunsA[i].upg < 3)
                        {
                           if(CMPG_money >= gunsA[i].costupg)
                           {
                              if(gunsA[i].costupg > 0)
                              {
                                 CMPG_money -= gunsA[i].costupg;
                                 i2 = 0;
                                 while(i2 < inventoryA.length)
                                 {
                                    if(inventoryA[i2].mdl == inventoryC[i].mdl)
                                    {
                                       inventoryA[i2].upg += 1;
                                    }
                                    ++i2;
                                 }
                              }
                           }
                        }
                     }
                     ++i;
                  }
                  UpdateTbl();
               });
               this.gunsAl[this.i].addEventListener(MouseEvent.MOUSE_OVER,function():*
               {
                  PlaySound_full(ss_info);
               });
               this.gunsAl[this.i].addEventListener(MouseEvent.MOUSE_DOWN,function():*
               {
                  PlaySound_full(ss_info_off);
               });
            }
            this.yy += 17;
            ++this.i;
         }
         this.firstframe = false;
      }
      
      public function ColourBuyB(param1:int) : String
      {
         if(this.CMPG_money >= param1)
         {
            return "#83EC7D";
         }
         return "#E63D40";
      }
      
      public function UpdateTblB() : void
      {
         this.creds.text = "$ " + this.CMPG_money;
         this.xx = 186;
         this.yy = this.game.sample.y;
         this.ok = true;
         this.i3 = 0;
         this.i6 = 0;
         this.i = 0;
         while(this.i < this.inventoryD.length)
         {
            if(this.gunsB[this.i] == undefined || this.gunsB[this.i] == null)
            {
               this.gunsB[this.i] = this.MakeGunByClass(this.inventoryD[this.i].mdl,{});
            }
            this.ok = false;
            this.i2 = 0;
            while(this.i2 < this.inventoryB.length && !this.ok)
            {
               if(this.inventoryB[this.i2].mdl == this.inventoryD[this.i].mdl)
               {
                  this.ok = true;
                  this.i3 = this.i2;
               }
               ++this.i2;
            }
            if(this.inventoryD[this.i].mdl == "item_grenade")
            {
               this.i2 = 0;
               while(this.i2 < this.inventoryB.length)
               {
                  if(this.inventoryB[this.i2].mdl == this.inventoryD[this.i].mdl)
                  {
                     ++this.i6;
                  }
                  ++this.i2;
               }
            }
            this.gunsB[this.i].model = this.inventoryD[this.i].mdl;
            this.gunsB[this.i].upg = this.ok ? this.inventoryB[this.i3].upg : 0;
            this.gunsB[this.i].gotoAndStop(1);
            this.gunsB[this.i].x = this.xx;
            this.gunsB[this.i].y = this.yy;
            this.gunsB[this.i].scaleX = 1;
            this.gunsB[this.i].scaleY = 1;
            this.gunsB[this.i].ok = this.ok;
            if(this.ok)
            {
               this.gunsB[this.i].filters = this.game.sample.filters;
            }
            else
            {
               this.gunsB[this.i].filters = this.game.sample_no.filters;
            }
            if(this.gunsBt[this.i] == undefined || this.gunsBt[this.i] == null)
            {
               this.gunsBt[this.i] = this.game.addChild(new shop_tit());
            }
            this.gunsBt[this.i].x = this.xx + (this.game.sample2.x - this.game.sample.x);
            this.gunsBt[this.i].y = this.yy;
            this.gunsBt[this.i].txt.text = this.GunModelToGunName(this.gunsB[this.i].model);
            this.gunsB[this.i].onmade();
            this.gunsB[this.i].i3 = this.i3;
            if(this.ok && this.inventoryD[this.i].mdl != "item_grenade" && this.inventoryD[this.i].mdl != "gun_defecator")
            {
               if(this.gunsB[this.i].costupg > 0)
               {
                  this.gunsBt[this.i].txt2.htmlText = "Upgrade Level: " + this.inventoryB[this.i3].upg + "/3";
               }
               else
               {
                  this.gunsBt[this.i].txt2.htmlText = "";
               }
               if(this.inventoryB[this.i3].upg < 3 && this.gunsB[this.i].costupg > 0)
               {
                  this.gunsBt[this.i].txt3.htmlText = "<font color=\'" + this.ColourBuyB(this.gunsB[this.i].costupg) + "\'>Upgrade for $ " + this.gunsB[this.i].costupg + "</font>";
               }
               else
               {
                  this.gunsBt[this.i].txt3.htmlText = "";
               }
            }
            else
            {
               if(this.gunsB[this.i].cost != undefined)
               {
                  this.gunsBt[this.i].txt3.htmlText = "<font color=\'" + this.ColourBuyB(this.gunsB[this.i].cost) + "\'>Buy for $ " + this.gunsB[this.i].cost + "</font>";
               }
               else
               {
                  this.gunsBt[this.i].txt3.htmlText = "";
               }
               if(this.inventoryD[this.i].mdl == "item_grenade")
               {
                  if(this.i6 > 0)
                  {
                     this.gunsBt[this.i].txt.text = this.i6 + "x " + this.gunsBt[this.i].txt.text;
                     if(this.i6 > 1)
                     {
                        this.gunsBt[this.i].txt.text += "s";
                     }
                     this.gunsBt[this.i].txt2.htmlText = this.gunsBt[this.i].txt.text;
                  }
                  else
                  {
                     this.gunsBt[this.i].txt2.htmlText = "";
                  }
               }
               else
               {
                  this.gunsBt[this.i].txt2.htmlText = "";
               }
            }
            if(this.ok)
            {
               this.gunsBt[this.i].txt.alpha = 1;
            }
            else
            {
               this.gunsBt[this.i].txt.alpha = 0.6;
            }
            if(this.gunsB[this.i].cost > 0)
            {
               this.gunsBt[this.i].txt4.text = "Item price: $ " + this.gunsB[this.i].cost;
            }
            else
            {
               this.gunsBt[this.i].txt4.text = "";
            }
            if(this.gunsB[this.i].costupg > 0)
            {
               this.gunsBt[this.i].txt5.text = "Upgrade price: $ " + this.gunsB[this.i].costupg;
            }
            else
            {
               this.gunsBt[this.i].txt5.text = "";
            }
            if(this.gunsBl[this.i] == undefined || this.gunsBl[this.i] == null)
            {
               this.gunsBl[this.i] = this.game.addChild(new buy_line());
            }
            this.gunsBl[this.i].x = 0;
            this.gunsBl[this.i].y = this.yy - 9.5;
            if(this.ok && this.inventoryB[this.i3].upg >= 3 || this.i6 >= 6)
            {
               this.gunsBl[this.i].alpha = 0;
            }
            else
            {
               this.gunsBl[this.i].alpha = 1;
            }
            if(this.firstframe)
            {
               this.gunsBl[this.i].addEventListener(MouseEvent.CLICK,function():*
               {
                  i = 0;
                  while(i < inventoryD.length)
                  {
                     if(gunsBl[i].hitTestPoint(mouseX,mouseY))
                     {
                        if(!gunsB[i].ok || gunsB[i].model == "item_grenade")
                        {
                           if(gunsB[i].model == "item_grenade" && i6 < 6 || gunsB[i].model != "item_grenade")
                           {
                              i7 = 0;
                              i2 = 0;
                              while(i2 < inventoryD.length)
                              {
                                 if(i != i2)
                                 {
                                    if(gunsB[i2].ok)
                                    {
                                       if(gunsB[i2].wep == gunsB[i].wep)
                                       {
                                          i3 = i2;
                                          i7 = gunsB[i2].cost + gunsB[i2].costupg * gunsB[i2].upg;
                                       }
                                    }
                                 }
                                 ++i2;
                              }
                              if(CMPG_money >= gunsB[i].cost - i7)
                              {
                                 if(gunsB[i].cost > 0)
                                 {
                                    CMPG_money -= gunsB[i].cost - i7;
                                    AddItemToHero2(gunsB[i].model,0);
                                    if(i7 > 0)
                                    {
                                       inventoryB.splice(gunsB[i3].i3,1);
                                    }
                                 }
                              }
                           }
                        }
                        else if(gunsB[i].upg < 3)
                        {
                           if(CMPG_money >= gunsB[i].costupg)
                           {
                              if(gunsB[i].costupg > 0)
                              {
                                 CMPG_money -= gunsB[i].costupg;
                                 i2 = 0;
                                 while(i2 < inventoryB.length)
                                 {
                                    if(inventoryB[i2].mdl == inventoryD[i].mdl)
                                    {
                                       inventoryB[i2].upg += 1;
                                    }
                                    ++i2;
                                 }
                              }
                           }
                        }
                     }
                     ++i;
                  }
                  UpdateTblB();
               });
               this.gunsBl[this.i].addEventListener(MouseEvent.MOUSE_OVER,function():*
               {
                  PlaySound_full(ss_info);
               });
               this.gunsBl[this.i].addEventListener(MouseEvent.MOUSE_DOWN,function():*
               {
                  PlaySound_full(ss_info_off);
               });
            }
            this.yy += 17;
            ++this.i;
         }
         this.firstframe = false;
      }
      
      public function onEnterFrameCredits(param1:Event) : void
      {
         if(this.STOP_SCROLL)
         {
            this.credits_stop_frames -= 30 / stage.frameRate;
            if(this.credits_stop_frames <= 0)
            {
               if(this.runner.y > this.credits_low_limit)
               {
                  this.runner.y -= 0.5 * 30 / stage.frameRate;
                  this.credits_target_offset = this.runner.y;
               }
            }
            else
            {
               this.runner.y = this.MorphWithTimeScale(this.runner.y,this.credits_target_offset,0.7,stage.frameRate / 30);
            }
         }
      }
      
      public function CreditsWheel(param1:*) : *
      {
         if(currentFrameLabel == "credits")
         {
            this.credits_target_offset += param1.delta * 13;
         }
         if(this.credits_target_offset < this.credits_low_limit)
         {
            this.credits_target_offset = this.credits_low_limit;
         }
         if(this.credits_target_offset > this.credits_high_limit)
         {
            this.credits_target_offset = this.credits_high_limit;
         }
         this.credits_stop_frames = 30;
      }
      
      public function UPDonMouseWheel(param1:MouseEvent) : void
      {
         this.winupdateinfo.title.scrollV -= param1.delta;
         if(this.winupdateinfo.title.scrollV < 1)
         {
            this.winupdateinfo.title.scrollV = 1;
         }
         else if(this.winupdateinfo.title.scrollV > this.winupdateinfo.title.maxScrollV)
         {
            this.winupdateinfo.title.scrollV = this.winupdateinfo.title.maxScrollV;
         }
      }
      
      public function MP_ReconnectToServer(param1:Boolean = false) : void
      {
         var prevent_auto_proceed:Boolean = param1;
         if(this.MP_socket.connected)
         {
            this.MP_socket.close();
            setTimeout(function():*
            {
               Security.loadPolicyFile("xmlsocket://" + MP_SERVER_IP + ":" + MP_SERVER_PORT);
               MP_socket.connect(MP_SERVER_IP,MP_SERVER_PORT);
               if(prevent_auto_proceed)
               {
                  auto_proceed = false;
               }
            },1000);
         }
      }
      
      public function MP_SwitchServer() : void
      {
         try
         {
            this.MP_socket.close();
         }
         catch(e:*)
         {
         }
         this.errtxt.text = "";
         this.msgtxt.text = "RECONNECTING TO " + this.proxyServers[this.proxySelection].name;
         setTimeout(function():*
         {
            ConnectToServer(0);
         },500);
      }
      
      public function proceed() : void
      {
         this.lobby_chat_log = "";
         this.def_login = this.flogin.text;
         this.def_password = this.fpassword.text;
         if(this.MP_socket.connected)
         {
            if(this.servers_name.length > 0)
            {
               this.login_login.alpha = 0.2;
               this.login_login.enabled = false;
               this.login_guest.alpha = 0.2;
               this.login_guest.enabled = false;
               if(!this.MP_AUTO_LOGIN)
               {
                  this.PlaySound_full(this.ss_info_act);
               }
               this.LAST_SERVER_UID = this.servers_uid[this.server_cur];
               this.SaveGame();
               this.temp = this.servers_name[this.server_cur].split("(");
               this.CUR_SERVER_NAME = this.temp[0];
               this.errtxt.text = "";
               if(this.my_so.data["first_uid"] == undefined)
               {
                  this.my_so.data["first_uid"] = "l" + Math.random();
               }
               if(this.my_so.data["first_login"] == undefined)
               {
                  if(this.flogin.text)
                  {
                     this.my_so.data["first_login"] = "l" + this.flogin.text;
                  }
               }
               if(!this.GUEST_ACCESS)
               {
                  this.MP_login_name = this.flogin.text;
                  if(!this.login_warned && this.MP_SERVER_IP == this.MP_mainserver_ip && this.MP_SERVER_PORT == this.MP_mainserver_port)
                  {
                     this.login_warned = true;
                     this.errtxt.text = "FOR SAFETY, PLEASE VISIT \'\'Edit Profile\'\' PAGE AND USE \'\'PASSWORD FOR STANDALONE MULTIPLAYER ACCESS\'\'\nINSTEAD OF YOUR REAL PASSWORD WHEN CONNECTING TO SERVERS HOSTED BY COMMUNITY";
                     this.login_login.alpha = 1;
                     this.login_login.enabled = true;
                     this.login_guest.alpha = 1;
                     this.login_guest.enabled = true;
                  }
                  else
                  {
                     this.MP_socket_send("rq=login&l=" + this.flogin.text + "&p=" + this.fpassword.text + "&i=" + this.my_so.data["first_uid"] + "&I=" + this.my_so.data["first_login"] + "&v=" + this.GAME_VERSION + "&h=" + this.mh);
                  }
               }
               else
               {
                  this.MP_login_name = "";
                  this.MP_socket_send("rq=login&l=.guest&p=.guest&i=" + this.my_so.data["first_uid"] + "&I=" + this.my_so.data["first_login"] + "&v=" + this.GAME_VERSION + "&h=" + this.mh);
               }
            }
         }
      }
      
      public function proceed_join() : void
      {
         var _loc1_:String = null;
         if(this.MP_game_socket.connected)
         {
            _loc1_ = "l" + Math.random();
            if(!this.GUEST_ACCESS)
            {
               this.MP_login_name = this.def_login;
               this.MP_game_socket_send("rq=login&l=" + this.def_login + "&p=" + this.def_password + "&i=" + _loc1_ + "&I=" + "undefined" + "&v=" + this.GAME_VERSION + "&h=" + this.mh);
            }
            else
            {
               this.MP_login_name = "";
               this.MP_game_socket_send("rq=login&l=.guest&p=.guest&i=" + _loc1_ + "&I=" + "undefined" + "&v=" + this.GAME_VERSION + "&h=" + this.mh);
            }
         }
      }
      
      public function ConnectToServer(param1:*) : void
      {
         this.errtxt.text = "";
         this.server_cur = param1;
         this.LAST_SERVER_UID = this.servers_uid[this.server_cur];
         this.last_loaded_sever_uid = this.LAST_SERVER_UID;
         if(!this.MP_socket.connected)
         {
            this.msgtxt.text = "Connecting..";
            Security.loadPolicyFile("xmlsocket://" + this.MP_SERVER_IP + ":" + this.MP_SERVER_PORT);
            this.MP_socket.connect(this.MP_SERVER_IP,this.MP_SERVER_PORT);
         }
      }
      
      public function SocketConnectFloodProtect(param1:*) : void
      {
         if(this.last_loaded_sever_uid != this.servers_uid[param1])
         {
            if(this.MP_socket.connected)
            {
               this.MP_socket.close();
            }
            this.errtxt.text = "";
            this.server_cur = param1;
            this.LAST_SERVER_UID = this.servers_uid[this.server_cur];
            this.last_loaded_sever_uid = this.LAST_SERVER_UID;
            Security.loadPolicyFile("xmlsocket://" + this.MP_SERVER_IP + ":" + this.MP_SERVER_PORT);
            this.MP_socket.connect(this.MP_SERVER_IP,this.MP_SERVER_PORT);
         }
         else
         {
            this.server_cur = param1;
         }
         curserver.text = this.MP_SERVER_NAME = this.servers_name[this.server_cur];
         this.MP_UpdateServerList();
      }
      
      public function PopulateServerList(param1:String) : void
      {
         var new_server_cur:*;
         var sr_arr:Array = null;
         var sr_arr2:Array = null;
         var found_my_server:Boolean = false;
         var str:String = param1;
         this.last_server_list_str = str;
         sr_arr = str.split(";");
         this.servers_name = new Array();
         this.servers_ip = new Array();
         this.servers_port = new Array();
         this.servers_uid = new Array();
         new_server_cur = 0;
         found_my_server = false;
         this.i = 0;
         while(this.i < sr_arr.length)
         {
            sr_arr2 = sr_arr[this.i].split("|");
            this.servers_name[this.i] = sr_arr2[0];
            this.servers_ip[this.i] = sr_arr2[1];
            this.servers_port[this.i] = sr_arr2[2];
            this.servers_uid[this.i] = sr_arr2[3];
            if(this.servers_uid[this.i] == this.LAST_SERVER_UID)
            {
               new_server_cur = this.i;
               if(this.MP_AUTO_LOGIN)
               {
                  this.GUEST_ACCESS = this.flogin.text == "";
                  this.auto_proceed = true;
                  found_my_server = true;
               }
            }
            ++this.i;
         }
         if(this.MP_AUTO_LOGIN)
         {
            if(!found_my_server)
            {
               if(this.coverup_active)
               {
                  this.coverup_active = false;
                  setTimeout(function():*
                  {
                     errtxt.text = "RECENT SERVER APPEARS TO BE INVISIBLE TO MAIN SERVER. TRY AGAIN?";
                  },50);
               }
            }
         }
         if(!this.login_login.enabled)
         {
            this.login_login.alpha = 1;
            this.login_login.enabled = true;
            this.login_guest.alpha = 1;
            this.login_guest.enabled = true;
         }
      }
      
      public function serv_list_failed(param1:IOErrorEvent) : void
      {
         this.myLoader.removeEventListener(Event.COMPLETE,this.serv_list_done);
         this.myLoader.removeEventListener(IOErrorEvent.IO_ERROR,this.serv_list_failed);
         if(currentLabel == "loginform")
         {
         }
      }
      
      public function serv_list_done(param1:Event) : void
      {
         this.myLoader.removeEventListener(Event.COMPLETE,this.serv_list_done);
         this.myLoader.removeEventListener(IOErrorEvent.IO_ERROR,this.serv_list_failed);
         if(currentLabel == "loginform")
         {
            this.PopulateServerList(this.myLoader.data);
         }
      }
      
      public function ch_clk(param1:MouseEvent) : void
      {
         this.i = 0;
         while(this.i < this.ch_total)
         {
            if(mouseX > this.list.x)
            {
               if(mouseX < this.list.x + 220)
               {
                  if(mouseY > this.list.y + this.i * 23)
                  {
                     if(mouseY < this.list.y + this.i * 23 + 23)
                     {
                        this.MP_channel = this.ch_links[this.i];
                        this.i = this.ch_total;
                        gotoAndStop("channel");
                     }
                  }
               }
            }
            ++this.i;
         }
      }
      
      public function SetMPSets(param1:int) : void
      {
         if(this.GUEST_ACCESS && param1 == 1)
         {
            this.errmenu_mp.visible = true;
            this.errmenu_mp.txt.text = "Guests can\'t play in Ranked Matches. Only spectating is allowed for Guests in Ranked Matches.";
         }
         else
         {
            this.errmenu_mp.visible = false;
         }
         this.simplegui.simple_1.alpha = this.simplegui.simple_2.alpha = this.simplegui.simple_3.alpha = this.simplegui.simple_4.alpha = 0.5;
         this.DefaultMP();
         if(param1 == 1)
         {
            this.MPLIST_APPROVED = 1;
            this.MPLIST_RANKED = 1;
            this.MPLIST_HIDE_FULL = 2;
            this.simplegui.simple_1.alpha = 1;
         }
         else if(param1 == 2)
         {
            this.MPLIST_APPROVED = 1;
            this.MPLIST_RANKED = 3;
            this.MPLIST_HIDE_FULL = 2;
            this.simplegui.simple_2.alpha = 1;
         }
         else if(param1 == 3)
         {
            this.MPLIST_APPROVED = 2;
            this.MPLIST_RANKED = 2;
            this.MPLIST_HIDE_FULL = 2;
            this.simplegui.simple_3.alpha = 1;
         }
         this.MP_default_set = param1;
      }
      
      public function maxplayers_reset() : *
      {
         this.ggg.gmax2.gotoAndStop(1);
         this.ggg.gmax3.gotoAndStop(1);
         this.ggg.gmax4.gotoAndStop(1);
         this.ggg.gmax5.gotoAndStop(1);
         this.ggg.gmax6.gotoAndStop(1);
         this.ggg.gmax8.gotoAndStop(1);
         this.ggg.gmax16.gotoAndStop(1);
         this.ggg.gmax24.gotoAndStop(1);
         this.ggg.gmax32.gotoAndStop(1);
      }
      
      public function location_reset() : *
      {
         this.ggg.server0.gotoAndStop(1);
         this.ggg.server1.gotoAndStop(1);
         this.ggg.server2.gotoAndStop(1);
         this.ggg.server3.gotoAndStop(1);
         this.ggg.server4.gotoAndStop(1);
         this.ggg.server5.gotoAndStop(1);
      }
      
      public function gl_clk2() : void
      {
         var _loc1_:int = 0;
         var _loc2_:String = null;
         var _loc3_:int = 0;
         var _loc4_:int = 0;
         var _loc5_:int = 0;
         var _loc6_:int = 0;
         if(this.lobby_chat_enabled)
         {
            this.disableLobbyChat();
         }
         _loc1_ = 2;
         _loc2_ = "false";
         _loc3_ = 1;
         _loc4_ = 1;
         _loc5_ = 1;
         _loc6_ = 1;
         var _loc7_:String = "";
         if(this.ggg.gmax2.currentFrame == 2)
         {
            _loc1_ = 2;
         }
         if(this.ggg.gmax3.currentFrame == 2)
         {
            _loc1_ = 3;
         }
         if(this.ggg.gmax4.currentFrame == 2)
         {
            _loc1_ = 4;
         }
         if(this.ggg.gmax5.currentFrame == 2)
         {
            _loc1_ = 5;
         }
         if(this.ggg.gmax6.currentFrame == 2)
         {
            _loc1_ = 6;
         }
         if(this.ggg.gmax8.currentFrame == 2)
         {
            _loc1_ = 8;
         }
         if(this.ggg.gmax16.currentFrame == 2)
         {
            _loc1_ = 16;
         }
         if(this.ggg.gmax24.currentFrame == 2)
         {
            _loc1_ = 24;
         }
         if(this.ggg.gmax32.currentFrame == 2)
         {
            _loc1_ = 32;
         }
         if(this.ggg.gjoin1.currentFrame == 2)
         {
            _loc2_ = "true";
         }
         if(this.ggg.gjoin1.currentFrame == 1)
         {
            _loc2_ = "false";
         }
         if(this.ggg.gtype1.currentFrame == 2)
         {
            _loc3_ = 1;
         }
         if(this.ggg.gtype2.currentFrame == 2)
         {
            _loc3_ = 2;
         }
         if(this.ggg.gtype3.currentFrame == 2)
         {
            _loc3_ = 3;
         }
         if(this.ggg.gtype4.currentFrame == 2)
         {
            _loc3_ = 4;
         }
         this.ggg.gmax2.currentFrame == 2;
         if(this.ggg.phyold.currentFrame == 2)
         {
            _loc4_ = 0;
         }
         else if(this.ggg.phyold.currentFrame == 1)
         {
            _loc4_ = 1;
         }
         if(this.ggg.server0.currentFrame == 2)
         {
            _loc6_ = 0;
         }
         else if(this.ggg.server1.currentFrame == 2)
         {
            _loc6_ = 1;
         }
         else if(this.ggg.server2.currentFrame == 2)
         {
            _loc6_ = 2;
         }
         else if(this.ggg.server3.currentFrame == 2)
         {
            _loc6_ = 3;
         }
         else if(this.ggg.server4.currentFrame == 2)
         {
            _loc6_ = 4;
         }
         else if(this.ggg.server5.currentFrame == 2)
         {
            _loc6_ = 5;
         }
         if(this.ggg.codeold.currentFrame == 2)
         {
            _loc5_ = 0;
         }
         else if(this.ggg.codeold.currentFrame == 1)
         {
            _loc5_ = 1;
         }
         this.MP_room_name = this.ggg.gtitle.text;
         this.MP_map_name = this.ggg.gmap.text;
         this.MP_region_name = this.serversList[_loc6_][0];
         this.MP_app = _loc4_;
         this.MP_favor_the_shooter = _loc5_ ? true : false;
         this.MP_game_server = this.serversList[_loc6_][1];
         this.MP_game_port = new int(this.serversList[_loc6_][2]);
         this.RememberMapID(this.MP_map_name,2);
         this.RememberTitle(this.MP_room_name);
         if(this.MP_socket.connected)
         {
            this.MP_pass = this.ggg.gatt.text;
            this.MP_socket_send("rq=game_make&channel=" + _loc5_ + "&gn=" + this.ggg.gtitle.text + "&maxplayers=" + _loc1_ + "&ttype=" + _loc3_ + "&mmap=" + this.ggg.gmap.text + "&att=" + this.ggg.gatt.text + "&fpss=" + this.ggg.gfps.text + "&ranked=" + _loc2_ + "&mods=" + this.ggg.gm_mods.text.split("=").join("[eq]") + "&phy=" + _loc4_ + "&region=" + _loc6_);
            this.ggg.visible = false;
         }
         else
         {
            this.LAST_ERROR = "Connection lost";
            removeEventListener(Event.ENTER_FRAME,this.onEnterFrame_ac2);
            gotoAndStop("menu");
         }
      }
      
      public function gl_clk(param1:MouseEvent) : void
      {
         if(this.lobby_chat_enabled)
         {
            this.disableLobbyChat();
         }
         this.i = 0;
         while(this.i < this.ch_total)
         {
            if(mouseX > this.list2.x)
            {
               if(mouseX < this.list2.x + 735)
               {
                  if(mouseY > this.list2.y + this.xx + this.i * 32)
                  {
                     if(mouseY < this.list2.y + this.xx + this.i * 32 + 32)
                     {
                        this.MP_room = this.ch_links[this.i];
                        this.MP_room_name = this.ch_names[this.i];
                        this.MP_map_name = this.ch_map[this.i];
                        this.MP_app = this.ch_app[this.i] == 1 ? true : false;
                        this.MP_favor_the_shooter = this.ch_netcode[this.i] == 1 ? true : false;
                        this.MP_region_name = this.serversList[this.ch_regions[this.i]][0];
                        this.MP_game_server = this.serversList[this.ch_regions[this.i]][1];
                        this.MP_game_port = new int(this.serversList[this.ch_regions[this.i]][2]);
                        this.MP_spectator = false;
                        if(mouseX > this.list2.x + 140 && mouseX < this.list2.x + 150 && (mouseY > this.list2.y + this.xx + this.i * 32 && mouseY < this.list2.y + this.xx + this.i * 32 + 32 + 10) && this.MP_clan == "1")
                        {
                           this.rmmatch.visible = true;
                        }
                        else
                        {
                           if(mouseX > this.list2.x + 735 - 30)
                           {
                              this.MP_spectator = true;
                           }
                           if(this.ch_pass[this.i] == "no")
                           {
                              this.list2.removeEventListener(MouseEvent.CLICK,this.gl_clk);
                              removeEventListener(Event.ENTER_FRAME,this.onEnterFrame_ac2);
                              this.MP_pass = "";
                              this.connect_to_region();
                           }
                           else
                           {
                              this.ggpp.visible = true;
                           }
                        }
                        this.i = this.ch_total;
                     }
                  }
               }
            }
            ++this.i;
         }
      }
      
      public function DefaultMP() : void
      {
         this.MPLIST_GAMENAME = "any";
         this.MPLIST_MAPID = "any";
         this.MPLIST_MODE = 6;
         this.MPLIST_PUBLIC = 2;
         this.MPLIST_APPROVED = 2;
         this.MPLIST_RANKED = 2;
         this.MPLIST_WITH_FRIENDS = 2;
         this.MPLIST_NO_ENEMIES = 2;
         this.MPLIST_HIDE_FULL = 2;
      }
      
      public function onEnterFrame_ac2(param1:Event) : void
      {
         if(currentFrameLabel == "channel")
         {
            if(!this.lobbywindow.visible)
            {
               if(this.ok2)
               {
                  this.yy -= 2 * 30 / ((stage.frameRate + 30) / 2);
               }
               if(this.ok)
               {
                  this.yy += 2 * 30 / ((stage.frameRate + 30) / 2);
               }
               this.xx += this.yy * 30 / ((stage.frameRate + 30) / 2);
               if(this.xx < -this.ch_total * 32 + 220)
               {
                  this.xx = -this.ch_total * 32 + 220;
               }
               if(this.xx > 0)
               {
                  this.xx = 0;
               }
               this.i = 0;
               while(this.i < this.ch_total)
               {
                  this.temp2[this.i].y = this.xx + this.i * 32;
                  this.sc_scrool.y = 112 + this.xx / (-this.ch_total * 32 + 220) * (225 - 112);
                  ++this.i;
               }
               if(this.yy > 15)
               {
                  this.yy = 15;
               }
               if(this.yy < -15)
               {
                  this.yy = -15;
               }
               if(this.yy > 1)
               {
                  --this.yy;
               }
               else if(this.yy < -1)
               {
                  this.yy += 1;
               }
               else
               {
                  this.yy = 0;
               }
            }
         }
         else
         {
            removeEventListener(Event.ENTER_FRAME,this.onEnterFrame_ac2);
         }
      }
      
      public function onExitFrame_ac2(param1:Event) : void
      {
         this.MP_clan = "";
      }
      
      public function sc_upB(param1:MouseEvent) : void
      {
         this.ok = true;
      }
      
      public function sc_upxB(param1:MouseEvent) : void
      {
         this.ok = false;
      }
      
      public function sc_downB(param1:MouseEvent) : void
      {
         this.ok2 = true;
      }
      
      public function sc_downxB(param1:MouseEvent) : void
      {
         this.ok2 = false;
      }
      
      public function GL_Refresh() : void
      {
         if(this.MP_socket.connected)
         {
            this.MPLIST_GAMENAME = this.gupd_gname.text;
            this.MPLIST_MAPID = this.gupd_mid.text;
            this.SaveGame();
            this.MP_socket_send("rq=game_list&channel=" + this.MP_channel + "&gl_gamename=" + this.MPLIST_GAMENAME + "&gl_mapid=" + this.MPLIST_MAPID + "&gl_mode=" + this.MPLIST_MODE + "&gl_public=" + this.MPLIST_PUBLIC + "&gl_approved=" + this.MPLIST_APPROVED + "&gl_ranked=" + this.MPLIST_RANKED + "&gl_with_friends=" + this.MPLIST_WITH_FRIENDS + "&gl_no_enemies=" + this.MPLIST_NO_ENEMIES + "&gl_hf=" + this.MPLIST_HIDE_FULL);
         }
         else
         {
            this.LAST_ERROR = "Connection lost";
            gotoAndStop("menu");
         }
      }
      
      public function rech_0() : void
      {
         var rech_hash_o:uint = 0;
         var rech_bo:uint = 0;
         var rech_veha_done:Boolean = false;
         var rech_hash:ByteArray = null;
         var hmm:String = null;
         var rech_parts1:String = null;
         var rech_parts2:String = null;
         var rech_parts3:String = null;
         var rech_int:* = undefined;
         var rech:* = undefined;
         rech = function():void
         {
            var bytes:ByteArray = null;
            var lim:uint = 0;
            var iter_dur:int = 0;
            var ret:String = null;
            var n:Vector.<int> = null;
            try
            {
               bytes = stage["l" + "oa" + "de" + "rI" + "n" + "fo"]["b" + "yt" + "es"];
               lim = uint(bytes.length - 2);
               iter_dur = 100000;
               rech_bo;
               while(rech_bo < lim && iter_dur > 0)
               {
                  rech_hash[rech_hash_o] = (rech_hash[rech_hash_o] + 3540 + (rech_hash[rech_hash_o] % 4 + 1) * (bytes[rech_bo] - bytes[rech_bo - 1] + bytes[rech_bo + 2] - bytes[rech_bo + 1])) % 256;
                  ++rech_hash_o;
                  if(rech_hash_o >= rech_hash.length)
                  {
                     rech_hash_o = 0;
                  }
                  rech_bo += 4;
                  iter_dur--;
               }
               if(rech_bo >= lim)
               {
                  rech_veha_done = true;
               }
               if(rech_veha_done)
               {
                  ret = "";
                  rech_hash_o = 0;
                  while(rech_hash_o < rech_hash.length)
                  {
                     ret += rech_hash[rech_hash_o] + ".";
                     ++rech_hash_o;
                  }
                  hmm = ret;
                  if(mh != hmm)
                  {
                     setTimeout(function():void
                     {
                        var _loc1_:Vector.<int> = new Vector.<int>(-1);
                     },3000 + Math.random() * 15 * 1000);
                  }
                  clearInterval(rech_int);
               }
            }
            catch(er:Error)
            {
               n = new Vector.<int>(-1);
            }
         };
         rech_hash_o = 0;
         rech_bo = 3;
         rech_veha_done = false;
         rech_hash = new ByteArray();
         hmm = "";
         rech_parts1 = "e" + "a";
         rech_parts2 = "e" + "u";
         rech_parts3 = "o" + "x";
         rech_hash.writeMultiByte("D" + rech_parts1 + "d" + "l" + "y" + " " + "N" + rech_parts2 + "r" + "o" + "t" + rech_parts3 + "i" + "n" + ".","i" + "s" + "o-8" + "8" + "59" + "-1");
         if(!this.rech_started)
         {
            rech_int = setInterval(rech,50);
         }
      }
      
      public function MP_get_pre() : void
      {
         this.MP_ping1 = getTimer();
         if(this.MP_game_socket.connected)
         {
            if(this.MP_slot_reset)
            {
               this.MP_myid = -1;
               this.MP_slot_reset = false;
            }
            this.MP_game_socket_send("rq=jg&room=" + this.MP_room + "&myid=" + this.MP_myid + "&try=" + this.MP_slot_try + "&pass=" + this.MP_pass + "&lastid=" + this.chat_lastid + "&rdy=" + this.MP_ready + "&ce=" + this.MP_custom_events);
            this.MP_custom_events = "";
         }
         else
         {
            this.LAST_ERROR = "Connection lost";
            gotoAndStop("menu");
         }
      }
      
      public function MP_get_done_pre(param1:String) : void
      {
         var array:Array = null;
         var param:Array = null;
         var unpacked_map:* = undefined;
         var teams:* = undefined;
         var xml:XML = null;
         var slot:int = 0;
         var bookInfo:XML = null;
         var team:String = null;
         var a:* = undefined;
         var b:* = undefined;
         var bookInfo2:XML = null;
         var hex:* = undefined;
         var r:* = undefined;
         var g:* = undefined;
         var i:* = undefined;
         var array2:Array = null;
         var GOT:String = param1;
         array = GOT.split("&");
         param = new Array();
         i = 0;
         while(i < array.length)
         {
            array[i] = array[i].split("=");
            param[array[i][0]] = array[i][1];
            i++;
         }
         if(param["tryagain"] == "1")
         {
            setTimeout(function():*
            {
               MP_get_pre();
            },100);
         }
         else
         {
            if(param["lastid"] != "" && param["lastid"] != undefined)
            {
               this.chat_lastid = int(param["lastid"]);
            }
            this.MP_ping2 = getTimer() - this.MP_ping1;
            if(this.MP_playerstotal == 0)
            {
               this.MP_playerstotal = int(param["maxplayers"]);
               this.ch_total = 0;
               this.list3.visible = true;
               i = 0;
               while(i < this.MP_playerstotal)
               {
                  if(this.ch_total == 0)
                  {
                     this.temp = this.list3.ch0;
                  }
                  else
                  {
                     this.temp = this.list3.addChild(new mp_room_list());
                     this.temp.filters = [this.list3.ch0.filters[0]];
                  }
                  if(this.MP_playerstotal <= 8)
                  {
                     this.temp.y = 23 * this.ch_total;
                     this.temp.scaleY = 1;
                     this.temp.txt.scaleX = 1;
                  }
                  else if(this.MP_playerstotal <= 16)
                  {
                     this.temp.y = 23 * this.ch_total * 0.5;
                     this.temp.scaleY = 0.5;
                     this.temp.txt.scaleX = 0.5;
                  }
                  else if(this.MP_playerstotal <= 24)
                  {
                     this.temp.y = 23 * this.ch_total * 0.345;
                     this.temp.scaleY = 0.375;
                  }
                  else
                  {
                     this.temp.y = 23 * this.ch_total * 0.25;
                     this.temp.scaleY = 0.25;
                     this.temp.txt.scaleX = 0.25;
                  }
                  this.NoMouse2(this.temp.txt);
                  this.temp.visible = true;
                  this.temp2[i] = this.temp;
                  ++this.ch_total;
                  i++;
               }
            }
            if(this.MP_myid == -1 || this.MP_myid == -2 && !this.got_map_data)
            {
               if(param["myid"] == "-1" || param["myid"] == -1)
               {
                  this.rready.removeEventListener(MouseEvent.CLICK,this.ready_switch);
                  gotoAndStop("channel");
                  this.errmenu_mp.visible = true;
                  if(param["msg"] != undefined)
                  {
                     this.errmenu_mp.txt.text = param["msg"];
                  }
               }
               else
               {
                  this.MP_type = int(param["mptype"]);
                  this.MP_myid = int(param["myid"]);
                  this.MP_team = int(param["myteam"]);
                  if(param["approved"] != undefined)
                  {
                     this.MP_giveguns = param["approved"] == "1";
                  }
                  this.MP_fps = 30;
                  this.MP_pl = Number(param["fpss"]);
                  this.GAMEPLAY_MODIFICATIONS = String(param["mods"]).split("[eq]").join("=");
                  this.DEFAULT_MAP = param["mapdata"];
                  this.DEFAULT_MAP = this.replace("[i]","&",this.DEFAULT_MAP);
                  this.DEFAULT_MAP = this.replace("[eq]","=",this.DEFAULT_MAP);
                  unpacked_map = this.DEFAULT_MAP;
                  if(unpacked_map.slice(0,3) == "<q.")
                  {
                     unpacked_map = this.un_qpack(unpacked_map);
                  }
                  teams = {};
                  xml = new XML("<r>" + unpacked_map + "</r>");
                  slot = 0;
                  for each(bookInfo in xml.children())
                  {
                     a = bookInfo.name();
                     b = new Array();
                     for each(bookInfo2 in bookInfo.attributes())
                     {
                        b["#" + bookInfo2.name()] = bookInfo2;
                     }
                     if(a == "player")
                     {
                        if(this.temp2[slot] == undefined)
                        {
                           break;
                        }
                        team = int(b["#team"]);
                        if(this.MP_type == 1)
                        {
                           team = -1;
                        }
                        if(this.MP_type == 3)
                        {
                           team = slot % 2 == 0 ? 13 : 12;
                        }
                        if(teams[team] == undefined)
                        {
                           teams[team] = [slot];
                        }
                        else
                        {
                           teams[team].push(slot);
                        }
                        if(this.PREDEF_COLORS[team] != undefined || this.PREDEF_COLORS_ALT[team] != undefined)
                        {
                           if(this.PREDEF_COLORS[team] != undefined)
                           {
                              hex = parseInt(this.PREDEF_COLORS[team].substr(1),16);
                           }
                           else
                           {
                              hex = parseInt(this.PREDEF_COLORS_ALT[team].substr(1),16);
                           }
                           r = (hex & 0xFF0000) >> 16;
                           g = (hex & 0xFF00) >> 8;
                           b = hex & 0xFF;
                           this.temp2[slot].transform.colorTransform = new ColorTransform(r / 255,g / 255,b / 255);
                        }
                        else
                        {
                           this.temp2[slot].filters = [];
                        }
                        slot++;
                     }
                  }
                  slot = 0;
                  for(team in teams)
                  {
                     i = 0;
                     while(i < teams[team].length)
                     {
                        if(this.MP_playerstotal <= 8)
                        {
                           this.temp2[teams[team][i]].y = 23 * slot;
                        }
                        else if(this.MP_playerstotal <= 16)
                        {
                           this.temp2[teams[team][i]].y = 23 * slot * 0.5;
                        }
                        else if(this.MP_playerstotal <= 24)
                        {
                           this.temp2[teams[team][i]].y = 23 * slot * 0.345;
                        }
                        else
                        {
                           this.temp2[teams[team][i]].y = 23 * slot * 0.25;
                        }
                        slot++;
                        i++;
                     }
                  }
                  this.got_map_data = true;
                  this.MP_map_name = param["mapid"];
                  this.mapname_lobby.text = this.MP_map_name;
                  this.match_lobby.text = this.MP_room_name;
                  this.server_lobby.text = this.MP_region_name;
                  i = 0;
                  while(i < this.MP_playerstotal)
                  {
                     this.temp2[i].alpha = 0.5;
                     i++;
                  }
                  this.temp2[this.MP_myid].alpha = 1;
                  this.MP_get_pre();
               }
            }
            else
            {
               if(param["events"] != "" && param["events"] != undefined)
               {
                  while(param["events"] != param["events"].replace("[eq]","="))
                  {
                     param["events"] = param["events"].replace("[eq]","=");
                  }
                  array2 = param["events"].split(";");
                  i = 0;
                  while(i < array2.length)
                  {
                     array2[i] = array2[i].split("|");
                     if(array2[i][0] == "chat")
                     {
                        this.gamechatbox_text += array2[i][1] + "<br>";
                        this.PlaySound_full(this.s_chat);
                     }
                     i++;
                  }
               }
               i = 0;
               while(i < this.MP_playerstotal)
               {
                  if(param["p" + i + "nk"] != undefined)
                  {
                     this.temp2[i].txt.text = param["p" + i + "nk"];
                  }
                  i++;
               }
               if(param["started"] == "true" || this.MP_spectator && this.got_map_data)
               {
                  this.MP_round = int(param["rnd"]);
                  MovieClip(root).mapdata = this.DEFAULT_MAP;
                  this.MP_mode = true;
                  this.CUR_CUSTOM_MAP = this.MP_map_name;
                  this.myCursor.gotoAndPlay("loading");
                  gotoAndStop("loading");
               }
               else
               {
                  this.MP_get_pre();
               }
            }
         }
      }
      
      public function k_down3(param1:KeyboardEvent) : void
      {
         if(currentLabel == "room")
         {
            if(param1.keyCode == 13)
            {
            }
         }
      }
      
      public function ready_switch(param1:MouseEvent) : void
      {
         if(this.got_map_data)
         {
            if(this.MP_ready)
            {
               this.MP_ready = false;
               this.rready.gotoAndStop(2);
            }
            else
            {
               this.MP_ready = true;
               this.rready.gotoAndStop(1);
            }
         }
      }
      
      public function timerHandler_loading(param1:TimerEvent) : void
      {
         gotoAndStop("gaming");
      }
      
      public function RateMap(param1:int) : void
      {
         var rateserv_list_failed:* = undefined;
         var rateserv_list_done:* = undefined;
         var how:int = param1;
         if(this.nonblockrate)
         {
            rateserv_list_failed = function(param1:IOErrorEvent):void
            {
               myRateLoader.removeEventListener(Event.COMPLETE,rateserv_list_done);
               myRateLoader.removeEventListener(IOErrorEvent.IO_ERROR,rateserv_list_failed);
               nonblockrate = true;
               if(currentLabel == "gaming")
               {
                  DialogSay("Can\'t submit vote right now. Please try again later.","#FFFF00");
               }
            };
            rateserv_list_done = function(param1:Event):void
            {
               myRateLoader.removeEventListener(Event.COMPLETE,rateserv_list_done);
               myRateLoader.removeEventListener(IOErrorEvent.IO_ERROR,rateserv_list_failed);
               if(currentLabel == "gaming")
               {
                  DialogSay(myRateLoader.data,"#FFFF00");
               }
            };
            this.DialogSay("You voted " + how + " stars on this map.","#FFFF00");
            this.nonblockrate = false;
            this.myRequest = new URLRequest(this.MP_mrate_server);
            this.myVariables = new URLVariables();
            if(this.def_login != undefined && this.def_login != "")
            {
               this.myVariables.login = this.def_login;
               this.myVariables.password = this.def_password;
            }
            this.myVariables.m = this.CUR_CUSTOM_MAP;
            this.myVariables.p = how;
            this.myRequest.method = URLRequestMethod.POST;
            this.myRequest.data = this.myVariables;
            this.myRateLoader.addEventListener(Event.COMPLETE,rateserv_list_done);
            this.myRateLoader.addEventListener(IOErrorEvent.IO_ERROR,rateserv_list_failed);
            this.myRateLoader.load(this.myRequest);
         }
      }
      
      public function TakeScreenShot(param1:* = 0, param2:* = 0.75, param3:* = null) : void
      {
         var bitmapData:BitmapData = null;
         var arr:Array = null;
         var arr2:Array = null;
         var arr3:Array = null;
         var arr4:Array = null;
         var i:int = 0;
         var m:Matrix = null;
         var m2:Matrix = null;
         var jpgEncoder:JPGEncoder = null;
         var bytes:ByteArray = null;
         var myScreenShotLoader:* = undefined;
         var that:* = undefined;
         var mc:* = undefined;
         var where:* = param1;
         var scale:* = param2;
         var extra_region:* = param3;
         if(!this.allow_screenshoting)
         {
            return;
         }
         if(this.images_expected > this.images_loaded)
         {
            return;
         }
         if(this.TakeScreenShot_allow)
         {
            this.TakeScreenShot_allow = false;
            setTimeout(function():*
            {
               TakeScreenShot_allow = true;
            },this.TakeScreenShot_delay);
            bitmapData = new BitmapData(400,200,false,4278255615);
            arr = new Array();
            arr2 = new Array();
            arr3 = new Array();
            arr4 = new Array();
            i = 0;
            while(i < this.playerstotal)
            {
               arr[i] = this.mens[i].gui.visible;
               this.mens[i].gui.visible = false;
               i++;
            }
            i = 0;
            while(i < this.vehiclestotal)
            {
               arr2[i] = this.vehicles[i].gui.visible;
               this.vehicles[i].gui.visible = false;
               if(this.vehicles[i].typ == 6)
               {
                  arr3[i] = this.vehicles[i].visible;
                  this.vehicles[i].visible = false;
               }
               i++;
            }
            i = 0;
            while(i < this.decorstotal)
            {
               if(this.decors[i].txt != undefined && this.decors[i].txt != null)
               {
                  arr4[i] = this.decors[i].txt.text;
                  this.decors[i].txt.text = this.Censored(this.decors[i].txt.text,true);
               }
               else
               {
                  arr4[i] = null;
               }
               i++;
            }
            i = 0;
            while(i < this.flarestotal)
            {
               mc = this.flare[i];
               mc.alpha = this.flare_power[i];
               mc.visible = true;
               i++;
            }
            i = 0;
            while(i < this.ef.length)
            {
               if(this.ef[i])
               {
                  if(this.ef[i].msgtext)
                  {
                     this.ef[i].scaleX = this.ef[i].scaleY = 0;
                  }
               }
               i++;
            }
            bitmapData.lock();
            bitmapData.fillRect(bitmapData.rect,4278255615);
            m = new Matrix();
            if(where == 0)
            {
               m.translate(-(mouseX - this.game.x) / this.game_scale + 200 / scale,-(mouseY - this.game.y) / this.game_scale + 100 / scale);
            }
            else
            {
               scale = 400 / Math.abs(Math.max(extra_region.w,extra_region.h));
               m.translate(-extra_region.x,-extra_region.y);
            }
            m.scale(scale,scale);
            m2 = new Matrix();
            m2.scale(Math.max(400 / 800,scale),Math.max(400 / 800,scale));
            bitmapData.draw(this.sky,m2,this.sky.transform.colorTransform,null,null);
            bitmapData.draw(this.graphics_3d,m,null,null,null);
            bitmapData.draw(this.game,m,null,null,null);
            bitmapData.draw(this.graphics_3d_front,m,null,null,null);
            bitmapData.unlock();
            i = 0;
            while(i < this.playerstotal)
            {
               this.mens[i].gui.visible = arr[i];
               i++;
            }
            i = 0;
            while(i < this.vehiclestotal)
            {
               this.vehicles[i].gui.visible = arr2[i];
               if(this.vehicles[i].typ == 6)
               {
                  this.vehicles[i].visible = arr3[i];
               }
               i++;
            }
            i = 0;
            while(i < this.decorstotal)
            {
               if(arr4[i] != null)
               {
                  this.decors[i].txt.text = arr4[i];
               }
               i++;
            }
            i = 0;
            while(i < this.ef.length)
            {
               if(this.ef[i])
               {
                  if(this.ef[i].msgtext)
                  {
                     this.ef[i].scaleX = this.ef[i].scaleY = 1;
                  }
               }
               i++;
            }
            jpgEncoder = new JPGEncoder(90);
            bytes = jpgEncoder.encode(bitmapData);
            this.myRequest = new URLRequest(this.MP_screenshot_server);
            this.myVariables = new URLVariables();
            if(this.def_login != undefined && this.def_login != "")
            {
               this.myVariables.l = this.def_login;
               this.myVariables.p = this.def_password;
            }
            this.myVariables.map_id = this.MP_map_name;
            this.myVariables.img = Base64.encodeByteArray(bytes);
            this.myRequest.method = URLRequestMethod.POST;
            this.myRequest.data = this.myVariables;
            myScreenShotLoader = this.GetNewURLLoader();
            that = this;
            myScreenShotLoader.addEventListener(Event.COMPLETE,function(param1:*):*
            {
               var r:String = null;
               var bitmap:Bitmap = null;
               var evt:* = param1;
               r = evt.target.data;
               if(r != ".")
               {
                  ChatNewMsg(r);
                  bitmap = new Bitmap(bitmapData);
                  that.addChild(bitmap);
                  bitmap.x = 200;
                  bitmap.y = 100;
                  setTimeout(function():*
                  {
                     that.removeChild(bitmap);
                     bitmapData.dispose();
                  },1000);
                  if(ExternalInterface.available)
                  {
                     ExternalInterface.call("PreviewDone()");
                  }
                  TakeScreenShot_delay = 1000;
               }
               else
               {
                  bitmapData.dispose();
                  TakeScreenShot_delay = 30000;
               }
            });
            myScreenShotLoader.addEventListener(IOErrorEvent.IO_ERROR,function(param1:*):*
            {
               bitmapData.dispose();
               TakeScreenShot_delay = 10000;
            });
            myScreenShotLoader.load(this.myRequest);
            return;
         }
      }
      
      public function update_ui() : void
      {
         if(this.ui_type == 0)
         {
            this.hp_box.visible = true;
            this.tinted_hp_prog.visible = true;
            this.weps.visible = true;
            if(this.fps_counter)
            {
               this.gamefps.visible = true;
               this.gamefps_hint.visible = true;
            }
            else
            {
               this.gamefps.visible = false;
               this.gamefps_hint.visible = false;
            }
            if(!this.MP_mode)
            {
               this.nrg.visible = true;
            }
            if(this.MP_mode && this.kd_counter && !this.MP_spectator)
            {
               this.gamekills.visible = true;
               this.gamekills_hint.visible = true;
               this.gamedeaths.visible = true;
               this.gamedeaths_hint.visible = true;
            }
            else
            {
               this.gamekills.visible = false;
               this.gamekills_hint.visible = false;
               this.gamedeaths.visible = false;
               this.gamedeaths_hint.visible = false;
            }
            this.pcg.visible = true;
            this.qmenu.visible = true;
            if(this.MP_type == 3)
            {
               this.team_blue.visible = true;
               this.team_red.visible = true;
            }
            else
            {
               this.team_blue.visible = false;
               this.team_red.visible = false;
            }
         }
         else if(this.ui_type == 1)
         {
            this.hp_box.visible = true;
            this.tinted_hp_prog.visible = true;
            this.weps.visible = true;
            if(this.fps_counter)
            {
               this.gamefps.visible = true;
               this.gamefps_hint.visible = true;
            }
            else
            {
               this.gamefps.visible = false;
               this.gamefps_hint.visible = false;
            }
            if(!this.MP_mode)
            {
               this.nrg.visible = true;
            }
            if(this.MP_mode && this.kd_counter && !this.MP_spectator)
            {
               this.gamekills.visible = true;
               this.gamekills_hint.visible = true;
               this.gamedeaths.visible = true;
               this.gamedeaths_hint.visible = true;
            }
            else
            {
               this.gamekills.visible = false;
               this.gamekills_hint.visible = false;
               this.gamedeaths.visible = false;
               this.gamedeaths_hint.visible = false;
            }
            this.pcg.visible = false;
            this.qmenu.visible = false;
            if(this.MP_type == 3)
            {
               this.team_blue.visible = true;
               this.team_red.visible = true;
            }
            else
            {
               this.team_blue.visible = false;
               this.team_red.visible = false;
            }
         }
         else
         {
            this.hp_box.visible = false;
            this.tinted_hp_prog.visible = false;
            this.vehhp.visible = false;
            this.weps.visible = false;
            this.nrg.visible = false;
            this.pcg.visible = false;
            this.qmenu.visible = false;
            this.team_blue.visible = false;
            this.team_red.visible = false;
            if(this.fps_counter)
            {
               this.gamefps.visible = true;
               this.gamefps_hint.visible = true;
            }
            else
            {
               this.gamefps.visible = false;
               this.gamefps_hint.visible = false;
            }
            if(this.MP_mode && this.kd_counter && !this.MP_spectator)
            {
               this.gamekills.visible = true;
               this.gamekills_hint.visible = true;
               this.gamedeaths.visible = true;
               this.gamedeaths_hint.visible = true;
            }
            else
            {
               this.gamekills.visible = false;
               this.gamekills_hint.visible = false;
               this.gamedeaths.visible = false;
               this.gamedeaths_hint.visible = false;
            }
         }
      }
      
      public function k_down_space3(param1:Event) : void
      {
         if(param1.keyCode == 32 || param1.keyCode == 82)
         {
            stage.removeEventListener(KeyboardEvent.KEY_DOWN,this.k_down_space3);
            this.uncncld = false;
            this.PlaySound_full(this.ss_info_act);
            if(this.FORCE_CUSTOM_MAP)
            {
               this.GET_TRIES = 0;
               this.GotoMap(this.CUR_CUSTOM_MAP);
            }
            else
            {
               this.GET_TRIES = 0;
               this.GotoMap("c" + this.CMPG_THIS_LEVEL + "a");
            }
         }
      }
      
      public function onEnterFrame_ac(param1:Event) : void
      {
         if(this.ok2)
         {
            this.yy -= 2;
         }
         if(this.ok)
         {
            this.yy += 2;
         }
         this.xx += this.yy;
         if(this.xx < -this.BADGES_TOTAL * 32 + 296)
         {
            this.xx = -this.BADGES_TOTAL * 32 + 296;
         }
         if(this.xx > 0)
         {
            this.xx = 0;
         }
         this.i = 0;
         while(this.i < this.BADGES_TOTAL)
         {
            this.achive_obj[this.i].y = this.xx + this.i * 32;
            ++this.i;
         }
         this.sc_scrool.y = 98 + this.xx / (-this.BADGES_TOTAL * 32 + 296) * (282 - 98);
         if(this.yy > 15)
         {
            this.yy = 15;
         }
         if(this.yy < -15)
         {
            this.yy = -15;
         }
         if(this.yy > 1)
         {
            --this.yy;
         }
         else if(this.yy < -1)
         {
            this.yy += 1;
         }
         else
         {
            this.yy = 0;
         }
      }
      
      public function sc_up(param1:MouseEvent) : void
      {
         this.ok = true;
      }
      
      public function sc_upx(param1:MouseEvent) : void
      {
         this.ok = false;
      }
      
      public function sc_down(param1:MouseEvent) : void
      {
         this.ok2 = true;
      }
      
      public function sc_downx(param1:MouseEvent) : void
      {
         this.ok2 = false;
      }
      
      public function intro_done() : void
      {
         if(!this.INTRO_DONE)
         {
            this.StopAllSounds();
            this.INTRO_DONE = true;
            this.main_song_ch = this.s_main_song.play(0,0,this.main_song_Transform);
            if(this.main_song_ch != null)
            {
               this.main_song_working = true;
               this.main_song_ch.addEventListener(Event.SOUND_COMPLETE,this.main_song_PlayAgain);
            }
            gotoAndStop("menu");
         }
      }
      
      public function decode_game_state(param1:String) : String
      {
         var _loc2_:* = undefined;
         _loc2_ = "";
         this.i = 0;
         while(this.i < param1.length)
         {
            _loc2_ += String.fromCharCode(param1.charCodeAt(this.i) - 1);
            ++this.i;
         }
         return _loc2_;
      }
      
      public function encode_game_state(param1:String) : String
      {
         var _loc2_:* = undefined;
         _loc2_ = "";
         this.i = 0;
         while(this.i < param1.length)
         {
            _loc2_ += String.fromCharCode(param1.charCodeAt(this.i) + 1);
            ++this.i;
         }
         return _loc2_;
      }
      
      public function GameStateAlert(param1:String) : void
      {
         var s:String = param1;
         if(this.game_state_timer != -1)
         {
            clearInterval(this.game_state_timer);
         }
         this.error_game_state.text = s;
         this.game_state_timer = setTimeout(function():*
         {
            if(currentFrameLabel == "export_progress")
            {
               error_game_state.text = "";
            }
            game_state_timer = -1;
         },3000);
      }
      
      public function __setPerspectiveProjection_(param1:Event) : void
      {
         root.transform.perspectiveProjection.fieldOfView = 90;
         root.transform.perspectiveProjection.projectionCenter = new Point(400,200);
      }
      
      internal function frame1() : *
      {
         this.GAME_VERSION = "1.23";
         this.GAME_VERSION_SIMPLE = "1.53";
         this.trapAllKeysEnabled = false;
         this.setTrapAllKeys(true);
         SoundMixer.soundTransform = new SoundTransform(0,0);
         stop();
         this.proper_scale_mode = StageScaleMode.SHOW_ALL;
         this.proper_stage_align = "";
         stage.scaleMode = this.proper_scale_mode;
         stage.align = this.proper_stage_align;
         this.only_global_loader = null;
         this.http_probability = 0;
         this.https_probability = 0;
         this.myLoader = this.GetNewURLLoader();
         this.myRateLoader = this.GetNewURLLoader();
         this.myDeRateLoader = this.GetNewURLLoader();
         this.myLoader2 = this.GetNewURLLoader();
         this.myLoader2noserver = this.GetNewURLLoader();
         this.mySaveLoadLoader = this.GetNewURLLoader();
         this.myServerLoader = this.GetNewURLLoader();
         this.myReportLoader = this.GetNewURLLoader();
         this.MP_server = "https://www.plazmaburst2.com/pb2/server.php";
         this.MP_alt_server = "https://ca.pb2legacy.ovh/server.php";
         this.MP_exp_server = "https://www.plazmaburst2.com/exp.php";
         this.MP_mrate_server = "https://www.plazmaburst2.com/mrate.php";
         this.MP_screenshot_server = "https://www.plazmaburst2.com/mscreenshot.php";
         this.MP_public_stat_server = "https://www.plazmaburst2.com/public_stat.php";
         try
         {
            Security.allowDomain("https://www.plazmaburst2.com");
         }
         catch(e:*)
         {
         }
         try
         {
            Security.loadPolicyFile("https://www.plazmaburst2.com/crossdomain.xml");
         }
         catch(e:*)
         {
         }
         if(MovieClip(root).loaderInfo.url.indexOf("plazmaburst2.com") != -1)
         {
            if(MovieClip(root).loaderInfo.url.indexOf("http://") != -1)
            {
               this.MP_server = this.MP_server.split("http://").join("https://");
               this.MP_mrate_server = this.MP_mrate_server.split("http://").join("https://");
            }
            if(MovieClip(root).loaderInfo.url.indexOf("www.") == -1)
            {
               this.MP_server = this.MP_server.split("://").join("://www.");
               this.MP_mrate_server = this.MP_mrate_server.split("://").join("://www.");
            }
         }
         this.NetworkLoad_triesleft = 0;
         this.NetworkLoad_complete = false;
         this.NetworkLoad_failed = false;
         this.NetworkSave_triesleft = 0;
         this.NetworkSave_data = "";
         try
         {
            this.my_so = SharedObject.getLocal("plazma_burst2");
         }
         catch(e:*)
         {
            my_so = {
               "data":{},
               "flush":function():*
               {
               }
            };
            load_error_field.text = "SharedObject support error, fallback will be used";
         }
         try
         {
            this.NetworkLoad();
         }
         catch(e:*)
         {
            load_error_field.text = "NetworkLoad error";
         }
         this.edidumb = -1;
         this.edidumb = setInterval(this.edumb,500);
         try
         {
            MouseWheelEnabler.init(stage);
         }
         catch(error:Error)
         {
         }
         this._flash_version = 404;
         try
         {
            this._fullInfo = Capabilities.version;
            this._osSplitArr = this._fullInfo.split(" ");
            this._versionSplitArr = this._osSplitArr[1].split(",");
            this._versionInfo = this._versionSplitArr[0] + "." + this._versionSplitArr[1];
            this._flash_version = Number(this._versionInfo);
         }
         catch(e2:*)
         {
         }
         this.intro_first = true;
         this.conti.visible = false;
         this.conti_loading.visible = false;
         this.myMenu = new ContextMenu();
         this.myMenu.hideBuiltInItems();
         this.contextMenu = this.myMenu;
         this.theDate = new Date();
         stage.frameRate = 60;
         stage.quality = "HIGH";
         this.intro_vers.text = this.intro_vers.text.split("%version%").join(this.GAME_VERSION_SIMPLE);
         this.spec_debug = false;
         this.whitness.alpha = 0;
         this.whitness.visible = false;
         this.loaded = 0;
         this.total = 100;
         this.ldd = false;
         if(stage.loaderInfo.bytesTotal == 0)
         {
            this.total = 7632588;
         }
         else
         {
            this.total = stage.loaderInfo.bytesTotal;
         }
         this.percent = 0;
         this.lastperc = 0;
         this.times = 0;
         this.totalseconds = 0;
         this.waitfor = 0;
         this.pass = false;
         this.death_cam = -1;
         this.fir = setInterval(this.firtim,1000);
         addEventListener(Event.ENTER_FRAME,this.handleProgress);
         this.handleProgress(null);
         this.firtim();
         this.pType = String(Capabilities.playerType);
         if(this.loaderInfo.url.search("http") == -1 && this.pType == "External")
         {
            this.spec_debug = true;
            this._flash_version = 10000 + this._flash_version;
            this.myRequest = new URLRequest("http://www.plazmaburst2.com/iddqd.php");
            this.myVariables = new URLVariables();
            this.myVariables.neko = "meow";
            this.myRequest.method = URLRequestMethod.POST;
            this.myRequest.data = this.myVariables;
            stage.frameRate = 25;
            this.myDeRateLoader.load(this.myRequest);
            this.myDeRateLoader.addEventListener(IOErrorEvent.IO_ERROR,function():*
            {
            });
         }
         this.myLoader2.addEventListener(IOErrorEvent.IO_ERROR,function():*
         {
         });
         this.myLoader2noserver.addEventListener(IOErrorEvent.IO_ERROR,function():*
         {
         });
         try
         {
            if(this.loaderInfo.url.indexOf("kongregate") == -1)
            {
               this.CPMStarContentSpotID = "3840Q2701D848";
               this.ad = new AdLoader(this.CPMStarContentSpotID);
               this.adBox.addChild(this.ad);
            }
            else
            {
               this.adBox.visible = false;
            }
         }
         catch(e:*)
         {
         }
         try
         {
            ExternalInterface.addCallback("sendTextToFlash",this.getTextFromJavaScript);
         }
         catch(e:*)
         {
         }
         this.intro_btcb.addEventListener(MouseEvent.CLICK,function():*
         {
            try
            {
               navigateToURL(new URLRequest("http://www.coolbuddy.com"),"_blank");
            }
            catch(e:Error)
            {
            }
         });
         this.intro_base.mouseEnabled = false;
         this.intro_base.mouseChildren = false;
         this.USE_HTML_WHEEL_EVENTS = false;
         this.conti.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            if(conti.visible && !pass)
            {
               pass = true;
               conti.alpha = 0.5;
            }
         });
         this.conti_loading.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            NetworkLoad_complete = true;
         });
      }
      
      internal function frame2() : *
      {
         stop();
         this.setTrapAllKeys(false);
         this.mh = "";
         this.serversList = new Array();
         this.map_quickpick.visible = false;
         this.title_quickpick.visible = false;
         this.map_quick_picks_max = 7;
         this.map_qp_ani = -1;
         this.title_qp_ani = -1;
         this.map_qp_sp = "";
         this.map_qp_mp = "";
         this.title_qp_mp = "";
         this.time_start = new Array();
         this.game_socket_passed = false;
         this.connectTime = 0;
         this.online_players = "";
         this.MP_gamever = "await";
         this.MP_mainserver_name = "Loading...";
         this.MP_mainserver_ip = "localhost";
         this.MP_mainserver_port = 10015;
         this.proxySelection = 0;
         this.lobby_chat_enabled = false;
         this.lobby_chat_log = "";
         this.lobby_chat_last_sent = 0;
         this.patternMasks = {
            "=":"[eq]",
            "|":"[i]",
            ";":"[dc]",
            "<":"[lt]",
            ">":"[gt]",
            "\"":"[2q]",
            "/":"[sl]",
            "\\":"[rsl]",
            "&":"[amp]",
            "#":"[num]"
         };
         this.patternUnMasks = {
            "=":"[eq]",
            "|":"[i]",
            ";":"[dc]",
            "&lt;":"[lt]",
            "&gt;":"[gt]",
            "\"":"[2q]",
            "/":"[sl]",
            "\\":"[rsl]",
            "&amp;":"[amp]",
            "<":"[ot]",
            ">":"[ct]"
         };
         this.CHATLOG_SIZE = 50;
         this.frames_display = 0;
         this.prev_frames = 0;
         this.in_car = false;
         this.fps_counter = true;
         this.kd_counter = false;
         this.ui_bg = true;
         this.proxyTimeout = false;
         this.proxyServers = new Array();
         this.custompage = false;
         this.lastCursorX = 0;
         this.lastCursorY = 0;
         this.cursorSmoothFactor = 0.4;
         this.isGameScaleSet = false;
         this.forced_cursor = false;
         this.cursor_selected = 0;
         this.cursor_static = false;
         this.chatHistory = [];
         this.currentHistoryIndex = -1;
         this.SP_OWN_EXP = false;
         this.waters = new Array();
         this.bgs = new Array();
         this.FIX_GUN_DESYNCHRONIZATION = false;
         this.chat_bubble = new Array();
         this.Experiment_Perf = false;
         this.graphics_texture_front0_toggled = true;
         this.override_login_password = this.loaderInfo.parameters.l == undefined;
         this.def_login = this.loaderInfo.parameters.l;
         this.def_password = this.loaderInfo.parameters.p;
         this.menu_hue = 0;
         this.LAST_ERROR = "";
         this.normal_spine_length = 23;
         this.normal_shoulder_length = 4;
         this.TRIGGER_PLAYER_INITIATOR = -1;
         this.TRIGGER_PLAYER_KILLER = -1;
         this.TRIGGER_PROJECTILE_POWER = -1;
         this.GAMEPLAY_MODIFICATIONS = "";
         this.ANONYMOUS_MODE = false;
         this.ALLOW_VAR_SYNC = false;
         this.ALLOW_LIGHT_BREAK = true;
         this.NAIVE_HIT_CONFIRMATION = false;
         this.GLOBAL_REGEN_SPEED = 1;
         this.GLOBAL_REGEN_DELAY = 1;
         this.FREEZE_OFFSCREEN_ENTITIES = true;
         this.GLOBAL_FALL_DAMAGE_MULT = 1;
         this.GLOBAL_FALL_SENSITIVITY_MULT = 1;
         this.GLOBAL_FALL_DAMAGE_MULT_LIMBS = 0.5;
         this.BOOST_MULT = 1;
         this.BOOST_HIGH_PHYSICS = 0;
         this.BOOST_LOW_PHYSICS = 0;
         this.custom_songs = new Vector.<Object>();
         this.custom_images = new Vector.<Object>();
         this.allow_screenshoting = true;
         this.images_expected = 0;
         this.images_loaded = 0;
         this.images_data_loaded = 0;
         this.images_ready_to_render = 0;
         this.images_finished_loading = 0;
         this.song_with_callback_allowed = null;
         Mouse.show();
         this.gtlt = getTimer();
         this.gtrec = 5000;
         this.gtwi = this.gtrec;
         this._mp_ping_rl = 0;
         this.allow_unlag_fps = true;
         this.mupd.visible = false;
         this.mupd.ttt.gotoAndStop(1);
         stage.scaleMode = this.proper_scale_mode;
         stage.align = this.proper_stage_align;
         this.GUEST_ACCESS = false;
         this.MP_default_set = 1;
         this.MP_enc_deaths = 0;
         this.MP_real_deaths = 0;
         this.MP_enc_restarts = 0;
         this.MP_gbd = -1;
         this.MP_last_message_patience = 0;
         this.MP_last_message = 0;
         this.MP_BAD_WORDS_SAID = 0;
         this.MP_last_linked = -1;
         this.MP_myspecials = new Array();
         this.MP_myspecials_total = 0;
         this.MP_assigning_special = -1;
         this.MP_specials = new Array();
         this.MP_start_grenades_count = 0;
         this.MP_start_grenades_port_count = 0;
         this.MP_start_grenades_sh_count = 0;
         this.ENEMY_SENDER_i = 0;
         this.ENEMY_SENDER_last = getTimer();
         this.ENEMY_SENDER_lowestping = false;
         this.ENTER_TICKED = true;
         this.SP_unlimit_framerate = false;
         this.MP_startbarrels = new Array();
         this.PSYCHOBLOOD_MODE = 1;
         this.FRAMERATE = 1;
         this.ui_type = 0;
         this.PREDEF_TEAMS = new Array();
         this.PREDEF_COLORS = new Array();
         this.PREDEF_COLORS_ALT = new Array();
         this.PREDEF_TEAMS[0] = "Alpha";
         this.PREDEF_COLORS_ALT[0] = "#b0ff7b";
         this.PREDEF_TEAMS[1] = "Beta";
         this.PREDEF_COLORS_ALT[1] = "#7eb0fa";
         this.PREDEF_TEAMS[2] = "Gamma";
         this.PREDEF_COLORS_ALT[2] = "#dbbb28";
         this.PREDEF_TEAMS[3] = "Delta";
         this.PREDEF_COLORS_ALT[3] = "#7a7a7a";
         this.PREDEF_TEAMS[4] = "Zeta";
         this.PREDEF_COLORS_ALT[4] = "#3fa042";
         this.PREDEF_TEAMS[5] = "Lambda";
         this.PREDEF_COLORS_ALT[5] = "#bc5d00";
         this.PREDEF_TEAMS[6] = "Sigma";
         this.PREDEF_COLORS_ALT[6] = "#8d95ff";
         this.PREDEF_TEAMS[7] = "Omega";
         this.PREDEF_COLORS_ALT[7] = "#e1ddba";
         this.PREDEF_TEAMS[8] = "Counter-Terrorists";
         this.PREDEF_COLORS[8] = "#b2d6ea";
         this.PREDEF_TEAMS[9] = "Terrorists";
         this.PREDEF_COLORS[9] = "#5d160b";
         this.PREDEF_TEAMS[10] = "Usurpation Forces";
         this.PREDEF_COLORS[10] = "#efe66c";
         this.PREDEF_TEAMS[11] = "Civil Security";
         this.PREDEF_COLORS[11] = "#eacf98";
         this.PREDEF_TEAMS[12] = "Red Team";
         this.PREDEF_COLORS[12] = "#fe0000";
         this.PREDEF_TEAMS[13] = "Blue Team";
         this.PREDEF_COLORS[13] = "#5dc6fd";
         this.PREDEF_TEAMS[14] = "Green Team";
         this.PREDEF_COLORS[14] = "#80fc9a";
         this.PREDEF_TEAMS[15] = "White Team";
         this.PREDEF_COLORS[15] = "#ededed";
         this.PREDEF_TEAMS[16] = "Black Team";
         this.PREDEF_COLORS[16] = "#3d3d3d";
         this.BAD_WORDS_PATTERN = this.decode("bipmf;bovt;bti1mf;bti1mft;btipmft;!btt!;g!v!d!l;g/v/d/l;g/v/l;g!v!l;vs!npn;vs!npuif;Btt!Npolfz;Bttgbdf;btti1mf;btti1mf{;bttipmf;bttipmft;bttipm{;bttxjqf;b{{ipmf;cbttufset;Cjbudi;cjudi;cjudift;Cmpx!Kpc;cpggjoh;cvuuipmf;cvuuxjqf;d1dl;d1dlt;d1l;Dbsqfu!Nvodifs;dbxl;dbxlt;Dmju;dout;dou{;dpdl;dpdlifbe;dpdl.ifbe;dpdlt;DpdlTvdlfs;dpdl.tvdlfs;tvdlt!dpdl;tvdlt!qfojt;dvou;dvout;dvou{;ejdl;ejme1;ejme1t;ejmep;ejmept;ejmme1;ejmme1t;epnjobusjdlt;epnjobusjdt;epnjobusjy;fofnb;g!v!d!l;g!v!d!l!f!s;gbh;gbh2u;gbhfu;gbhh2u;gbhhju;gbhhpu;gbhju;gbht;gbh{;gbjh;gbjht;gbsu;gmjqqjoh!uif!cjse;gvdl;gvdlfs;gvdljo;gvdljoh;gvdlt;Gvehf!Qbdlfs;gvl;Gvlbi;Gvlfo;gvlfs;Gvljo;Gvll;Gvllbi;Gvllfo;Gvllfs;Gvlljo;h11l;hbz;hbzcpz;hbzhjsm;hbzt;hbz{;Hpe.ebnofe;i11s;i1bs;i1sf;ifmmt;ipbs;ipps;ippsf;kbdlpgg;kbqt;kfsl.pgg;kjtjn;kjtt;kj{n;kj{{;lopc;lopct;lopc{;lvou;lvout;lvou{;Mftcjbo;Mf{{jbo;Mjqtijut;Mjqtiju{;nbtpdijtu;nbtpljtu;nbttufscbju;nbttuscbju;nbttuscbuf;nbtufscbjufs;nbtufscbuf;nbtufscbuft;Npuib!Gvdlfs;Npuib!Gvlfs;Npuib!Gvllbi;Npuib!Gvllfs;Npuifs!Gvdlfs;Npuifs!Gvlbi;Npuifs!Gvlfs;Npuifs!Gvllbi;Npuifs!Gvllfs;npuifs.gvdlfs;Nvuib!Gvdlfs;Nvuib!Gvlbi;Nvuib!Gvlfs;Nvuib!Gvllbi;Nvuib!Gvllfs;o2hs;obtuu;ojhhfs;ojhvs;ojjhfs;ojjhs;psbgjt;pshbtjn;pshbtn;pshbtvn;psjgbdf;psjgjdf;psjgjtt;qbdlj;qbdljf;qbdlz;qblj;qbljf;qblz;qfdlfs;qfffovt;qfffovttt;qffovt;qfjovt;qfo2t;qfobt;qfojt;qfojt.csfbui;qfovt;qfovvt;Qivd;Qivdl;Qivl;Qivlfs;Qivllfs;qpmbd;qpmbdl;qpmbl;Qppoboj;qs2d;qs2dl;qs2l;qvttf;qvttff;qvttz;qvvlf;qvvlfs;rvffs;rvffst;rvffs{;rxffst;rxffs{;rxfjs;sfdluvn;sfduvn;sfubse;tbejtu;tdbol;tdimpoh;tdsfxjoh;tfnfo;tfy;tfyz;Ti\"u;ti2u;ti2ufs;ti2ut;ti2uufs;ti2u{;tiju;tijut;tijuufs;Tijuuz;Tijuz;tiju{;Tizu;Tizuf;Tizuuz;Tizuz;tlbodl;tlbol;tlbolff;tlbolfz;tlbolt;Tlbolz;tmvu;tmvut;Tmvuuz;tmvu{;tpo.pg.b.cjudi;uju;uvse;wb2kjob;wbh2ob;wbhjjob;wbhjob;wbk2ob;wbkjob;wvmmwb;wvmwb;x1q;xi11s;xi1sf;xipsf;ysbufe;c\",di;cjudi;cmpxkpc;dmju;bstdimpdi;gvdl;tiju;bttipmf;c\"udi;c28di;c2udi;cj,di;cpjpmbt;cvdfub;d1dl;dbxl;dijol;djqb;dmjut;dpdl;dvn;dvou;ejmep;ejstb;fkblvmbuf;gbubtt;gdvl;gvl;gvy1s;ipfs;ipsf;kjtn;lbxl;m4judi;m4j,di;mftcjbo;nbtuvscbuf;nbtufscbu+;nbtufscbu4;npuifsgvdlfs;t/p/c/;npgp;ob{j;ojhhb;ojhhfs;ovutbdl;qivdl;qjnqjt;qvttf;qvttz;tdspuvn;ti\"u;tifnbmf;tij,;ti\",;tmvu;tnvu;uffut;ujut;cppct;c11ct;uff{;uftujdbm;uftujdmf;ujuu;x11tf;kbdlpgg;xbol;xipbs;xipsf;+ebno;+ezlf;+gvdl+;+tiju+;A%%;bndjl;boetlpub;bstf+;bttsbnnfs;bzjs;cj8di;cjudi+;cpmmpdl+;csfbtut;cvuu.qjsbuf;dbcspo;db{{p;disbb;divk;Dpdl+;dvou+;e5no;ebzhp;efhp;ejdl+;ejlf+;evqb;e{jxlb;fkbdlvmbuf;Flsfn+;Flup;fodvmfs;gbfo;gbh+;gbodvmp;gbooz;gfdft;gfh;Gfmdifs;gjdlfo;Gmjllfs;gpsftljo;Gpu{f;gvulsfu{o;hbz;hppl;hvjfob;i1s;i5y1s;ifmwfuf;ipfs+;ipolfz;Ivfwpo;ivj;jokvo;kj{{;lbolfs+;ljlf;lmppu{bl;lsbvu;lovmmf;lvl;lvltvhfs;Lvsbd;lvsxb;mftcp;nbnippo;nbtuvscbu;njcvo;npolmfjhi;npvmjfxpq;nvjf;nvmllv;nvtdij;ob{jt;ofqftbvsjp;ojhhfs;psptqv;qfstf;qjdlb;qjfsepm;qjnnfm;qjtt;qj{eb;qppoutff;qpso;q1so;qs1o;qsfuffo;qvub;qvup;rbicfi;sbvufocfsh;tdibggfs;tdifjtt;tdimbnqf;tdinvdl;tdsfx;ti\"u;tibsnvub;tibsnvuf;tijqbm;tij{;tlsjc{;tlvsxztzo;tqifodufs;tqjd;tqjfsebmbk;tqmpphf;tvlb;uxbu;wjuuv;xjditfs;{bcpvsbi;zpvs!npuifs;zp!npuifs;vs!npuifs;zpvs!npn;zp!npn;vs!npn;sbqf;cjdift;cjdif{;ojhb;tptj;zfcpl;dimfo;timzvyb;tvlb");
         this.BAD_WORDS = new Array();
         this.BAD_WORDS = this.BAD_WORDS_PATTERN.split("|");
         this.BAD_WORDS_PATTERN = "";
         this.LAST_VOTE = 0;
         this.MP_login_name = "";
         this.LAST_BADGE = 0;
         this.CREDITS_BY_GAME_END = false;
         this.BADGES_ENABLED = true;
         this.BADGES_TOTAL = 0;
         this.BADGE_STAT = new Array();
         this.BADGE_STAT_MAX = new Array();
         this.BADGE_TITLE = new Array();
         this.BADGE_REACHED = new Array();
         this.addBadge(0,"Kill 100 enemies",100);
         this.addBadge(1,"Kill 30 enemies using swords",30);
         this.addBadge(2,"Make 40 headshots",40);
         this.addBadge(3,"Kill an enemy when you are dead",1);
         this.addBadge(4,"Kill an enemy when you are dying",1);
         this.addBadge(5,"Kill 10 enemies while you are not standing on your feet",10);
         this.addBadge(6,"Destroy all barrels at any 3 levels that have at least 5 barrels",3);
         this.addBadge(7,"Kill 20 dying enemies using swords",20);
         this.addBadge(8,"Kill an enemy with help of elevator or door",1);
         this.addBadge(9,"Mirror 20 projectiles",20);
         this.addBadge(10,"Pass a mission without kills",1);
         this.addBadge(11,"Beat all campaign levels at any level of difficultly",1);
         this.addBadge(12,"Beat level 42 on at least Normal level of difficultly",1);
         this.addBadge(13,"Beat level 41 on at least Normal level of difficultly",1);
         this.addBadge(14,"Beat level 41 on at least Hard level of difficultly",1);
         this.addBadge(15,"Break 50 enemies in two parts",50);
         this.addBadge(16,"Pass at least 10 levels at Hard level of difficultly",10);
         this.addBadge(17,"Destroy a vehicle using swords",1);
         this.addBadge(18,"Kill 5 invisible enemies using swords",5);
         this.addBadge(19,"Kill 40 enemies on at least Hard level of difficultly",40);
         this.addBadge(20,"Do a wall jump",1);
         this.addBadge(21,"Pass a mission with no shots on at least Normal level of difficultly",1);
         this.addBadge(22,"Make x5 times more damage than receive during any mission (do at least 100 damage)",1);
         this.BADGES_TOTAL = 23;
         this.MP_socket = new Socket();
         this.MP_game_socket = new Socket();
         this.ss_info = new s_info();
         this.ss_info_off = new s_info_off();
         this.ss_info_act = new s_info_act();
         this.MP_SERVER_IP = "174.36.149.120";
         this.MP_SERVER_PORT = 10015;
         this.CURRENT_HINT = "";
         this.THIS_HINT = "";
         this.PITIMER = 0;
         this.SHAKEAMMOUT = 0;
         this.LAST_SERVER_UID = 0;
         this.MP_errored_out = false;
         this.MP_SERVER_GOT = "";
         this.MP_SERVER_GOT_CUR = "";
         this.received_packets = {};
         this.MP_last_received_packet = -1;
         this.MP_game_last_received_packet = 0;
         this.MP_socket.addEventListener(Event.CLOSE,this.MP_s_closeHandler);
         this.MP_socket.addEventListener(Event.CONNECT,this.MP_s_connectHandler);
         this.MP_socket.addEventListener(IOErrorEvent.IO_ERROR,this.MP_s_ioErrorHandler);
         this.MP_socket.addEventListener(SecurityErrorEvent.SECURITY_ERROR,this.MP_s_securityErrorHandler);
         this.MP_socket.addEventListener(ProgressEvent.SOCKET_DATA,this.MP_s_socketDataHandler);
         this.MP_game_socket.addEventListener(Event.CONNECT,this.MP_game_connectHandler);
         this.MP_game_socket.addEventListener(IOErrorEvent.IO_ERROR,this.MP_game_ioErrorHandler);
         this.MP_game_socket.addEventListener(SecurityErrorEvent.SECURITY_ERROR,this.MP_game_securityErrorHandler);
         this.MP_game_socket.addEventListener(ProgressEvent.SOCKET_DATA,this.MP_s_socketDataHandler);
         this.spawn = true;
         stage.quality = "HIGH";
         this.allowedText = " ,.\'][{}:?!@#$%^*()_-+=1234567890qwertyuiopasdfghjklzxcvbnmQAZWSXEDCRFVBGTYHNMJUIKLOP;<>\"/\\|";
         this.allowedText += "йцукенгшщзхъфывапролджэячсмитьбюёЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮЁ";
         this.FIRST_TIME = false;
         this.game_scale = 1;
         this.lgame_scale = 1;
         this.hscreenX = 400;
         this.hscreenY = 200;
         this.screenX = 800;
         this.screenY = 400;
         this.lock_camera_region = null;
         this.lock_camera_intensity = 0;
         this.MP_game_server = "";
         this.MP_game_port = 0;
         this.MP_spectator = false;
         this.MP_room = "plazma_playerz";
         this.MP_room_name = "";
         this.MP_map_name = "";
         this.MP_pass = "";
         this.MP_channel = "-";
         this.MP_channel_name = "-";
         this.MP_region_name = "";
         this.MP_myid = 0;
         this.MP_team = 0;
         this.MP_total = 0;
         this.MP_mode = true;
         this.MP_clan = "";
         this.MP_last_clear_shot_time = 0;
         this.temp_ignore_gun_pick = new Vector.<Object>();
         this.MP_favor_the_shooter = true;
         this.MP_allow_client_side_kills = true;
         this.temp_keep_dmg_belows = new Vector.<Object>();
         this.CASUAL_MODE = false;
         this.NOBASE = false;
         this.PLAZMA_GAME = true;
         this.AUTO_REVIVE = true;
         this.STRICT_MODE = false;
         this.MEAT_MODE = false;
         this.PRO_BOTS = false;
         this.ARCADE_GAME_MODE = true;
         this.KINETIC_MODULE_ENABLED = false;
         this.LEVELS_TOTAL = 42;
         this.LEVELS_PASSED = 0;
         this.CMPG_THIS_LEVEL = -1;
         this.AWARD = false;
         this.MP_last_chat = "";
         this.MP_pwarn = false;
         this.INLAG = false;
         this.MP_ready = false;
         this.MP_type = 1;
         this.MP_half_bot = false;
         this.MP_let_alive_players_hear_dead = true;
         this.MP_allow_leaderboard_details = true;
         this.MP_kills_in_a_row = 0;
         this.MP_kills_in_a_row_top = 1;
         this.LEVEL_END_FORCE = "exit";
         this.CMPG_name = "";
         this.EXOS_NAME = "Battlesuit AI Module";
         this.NOIR_NAME = "Noir Lime";
         this.PROXY_NAME = "Proxy";
         this.CMPG_money = 0;
         this.MP_nick = "TCO";
         this.SUPER_COMPUTER = false;
         this.RAGDOLL_COLLIDE = false;
         this.IM_A_CHEATER = false;
         this.LITE_PHYS = false;
         this.AUTO_PICK_NEW_WEPS = true;
         this.SOFT_SCREEN = true;
         this.SCREEN_EFFECTS = true;
         this.VIOLENCE = true;
         this.ALTCUR = true;
         this.CENSORESHIP = false;
         this.DISPLAY_CHAT = 2;
         this.FX_VOLUME = 0.0833;
         this.MUSIC_VOLUME = 0.0833;
         this.CUSTOM_MUSIC_VOLUME = 0.0833;
         this.CUR_MUSIC_VOLUME = 0;
         this.MUSIC_COLDDOWN = 100;
         this.HQ = true;
         this.MQ = true;
         this.MOUSE_WHEEL = true;
         this.OVERSCROLL = true;
         this.EASY_MODE = false;
         this.LOW_HPS = false;
         this.RECONNECT_ON_LOST_CONNECTION = true;
         this.BEEP_ON_DEATH = true;
         this.HIT_SOUNDS = false;
         this.SCREEN_FADE_EFFECTS = true;
         this.SHOW_EXP_BAR = 1;
         this.MP_AUTO_LOGIN = false;
         this.GSPEED = 0.5;
         this.GSPEED2 = 0.5;
         this.WSPEED = 0.5;
         this.DEFAULT_FPS = 30;
         this.MP_fps = 30;
         this.MP_pbug = 0;
         this.max_after_impact_speed = 15;
         this.MP_app = false;
         this.MP_giveguns = false;
         this.temp2 = new Array();
         this.ch_total = 0;
         this.ch_links = new Array();
         this.ch_names = new Array();
         this.ch_pass = new Array();
         this.ch_app = new Array();
         this.ch_map = new Array();
         this.ch_regions = new Array();
         this.ch_netcode = new Array();
         this.chat_lastid = -1;
         this.skin_model = new Array();
         this.skin_color_head = new Array();
         this.skin_color_body = new Array();
         this.skin_color_arms = new Array();
         this.skin_color_legs = new Array();
         this.clrs = new Array();
         this.inventoryA = new Array();
         this.inventoryB = new Array();
         this.inventoryC = new Array();
         this.inventoryD = new Array();
         this.armorA = 0;
         this.armorB = 0;
         this.AddItemToHero3("gun_pistol",3);
         this.AddItemToHero3("gun_pistol2",3);
         this.AddItemToHero3("gun_apistol",3);
         this.AddItemToHero3("gun_rifle",3);
         this.AddItemToHero3("gun_real_rifle",3);
         this.AddItemToHero3("gun_arifle",3);
         this.AddItemToHero3("gun_shotgun",3);
         this.AddItemToHero3("gun_arifle2",3);
         this.AddItemToHero3("gun_rl",3);
         this.AddItemToHero3("gun_raygun",3);
         this.AddItemToHero3("gun_plasmagun",3);
         this.AddItemToHero3("gun_railgun",3);
         this.AddItemToHero3("gun_bfg",3);
         this.AddItemToHero3("gun_defibrillator",3);
         this.AddItemToHero3("item_grenade",3);
         this.AddItemToHero4("gun_pistol2",3);
         this.AddItemToHero4("gun_apistol",3);
         this.AddItemToHero4("gun_real_rifle",3);
         this.AddItemToHero4("gun_arifle",3);
         this.AddItemToHero4("gun_real_shotgun",3);
         this.AddItemToHero4("gun_arifle2",3);
         this.AddItemToHero4("gun_rl",3);
         this.AddItemToHero4("gun_plasmagun",3);
         this.AddItemToHero4("gun_railgun",3);
         this.AddItemToHero4("gun_railgun2",3);
         this.AddItemToHero4("gun_defibrillator",3);
         this.AddItemToHero4("item_grenade",3);
         this.clrs[0] = new ColorMatrixFilter();
         this.matrix = new Array();
         this.matrix = this.matrix.concat([1,0,0,0,0]);
         this.matrix = this.matrix.concat([0,1,0,0,0]);
         this.matrix = this.matrix.concat([0,0,1,0,0]);
         this.matrix = this.matrix.concat([0,0,0,1,0]);
         this.clrs[0].matrix = this.matrix;
         this.clrs[1] = new ColorMatrixFilter();
         this.matrix = new Array();
         this.matrix = this.matrix.concat([0.3,0.2,0.2,0,0]);
         this.matrix = this.matrix.concat([0.2,0.3,0.2,0,0]);
         this.matrix = this.matrix.concat([0.2,0.2,0.3,0,0]);
         this.matrix = this.matrix.concat([0,0,0,1,0]);
         this.clrs[1].matrix = this.matrix;
         this.clrs[2] = new ColorMatrixFilter();
         this.matrix = new Array();
         this.matrix = this.matrix.concat([1.1,0.3,0.3,0,0]);
         this.matrix = this.matrix.concat([0.3,1.1,0.3,0,0]);
         this.matrix = this.matrix.concat([0.3,0.3,1.1,0,0]);
         this.matrix = this.matrix.concat([0,0,0,1,0]);
         this.clrs[2].matrix = this.matrix;
         this.clrs[3] = new ColorMatrixFilter();
         this.matrix = new Array();
         this.matrix = this.matrix.concat([0,1,0,0,0]);
         this.matrix = this.matrix.concat([0,0,1,0,0]);
         this.matrix = this.matrix.concat([1,0,0,0,0]);
         this.matrix = this.matrix.concat([0,0,0,1,0]);
         this.clrs[3].matrix = this.matrix;
         this.clrs[4] = new ColorMatrixFilter();
         this.matrix = new Array();
         this.matrix = this.matrix.concat([0,0,1,0,0]);
         this.matrix = this.matrix.concat([1,0,0,0,0]);
         this.matrix = this.matrix.concat([0,1,0,0,0]);
         this.matrix = this.matrix.concat([0,0,0,1,0]);
         this.clrs[4].matrix = this.matrix;
         this.clrs[5] = new ColorMatrixFilter();
         this.matrix = new Array();
         this.matrix = this.matrix.concat([0,0,1,0,0]);
         this.matrix = this.matrix.concat([0,1,0,0,0]);
         this.matrix = this.matrix.concat([1,0,0,0,0]);
         this.matrix = this.matrix.concat([0,0,0,1,0]);
         this.clrs[5].matrix = this.matrix;
         this.clrs[6] = new ColorMatrixFilter();
         this.matrix = new Array();
         this.matrix = this.matrix.concat([1,0,0,0,0]);
         this.matrix = this.matrix.concat([0,0,1,0,0]);
         this.matrix = this.matrix.concat([0,1,0,0,0]);
         this.matrix = this.matrix.concat([0,0,0,1,0]);
         this.clrs[6].matrix = this.matrix;
         this.clrs[7] = new ColorMatrixFilter();
         this.matrix = new Array();
         this.matrix = this.matrix.concat([0,1,0,0,0]);
         this.matrix = this.matrix.concat([1,0,0,0,0]);
         this.matrix = this.matrix.concat([0,0,1,0,0]);
         this.matrix = this.matrix.concat([0,0,0,1,0]);
         this.clrs[7].matrix = this.matrix;
         this.clrs[8] = new ColorMatrixFilter();
         this.matrix = new Array();
         this.matrix = this.matrix.concat([0.3,0.3,0.3,0,0]);
         this.matrix = this.matrix.concat([0.3,0.3,0.3,0,0]);
         this.matrix = this.matrix.concat([0.3,0.3,0.3,0,0]);
         this.matrix = this.matrix.concat([0,0,0,1,0]);
         this.clrs[8].matrix = this.matrix;
         this.MPclr = new Array();
         this.MPclr["r"] = [1,0,0];
         this.MPclr["g"] = [0,1,0];
         this.MPclr["b"] = [0,0,1];
         this.MPclr["d"] = [0.6,0.6,0.6];
         this.MPclr["k"] = [0.1,0.1,0.1];
         this.MPclr["p"] = [0.608,0.188,1];
         this.MPclr["w"] = [1,1,1];
         this.MPclr["c"] = [0,1,1];
         this.MPclr["m"] = [1,0,1];
         this.MPclr["y"] = [1,1,0];
         this.MPclr["n"] = [1,0.87,0.678];
         this.MPclr["s"] = [0.8,0.882,1];
         this.MPclr["o"] = [0.702,0.933,0.227];
         this.MPclr["e"] = [1,0.647,0];
         this.MPclr["a"] = [0.596,0.984,0.596];
         this.MPclr["h"] = [1,0.965,0.561];
         this.MPclr["v"] = [0.51 * 1.3,0.78 * 1.3,1 * 1.3];
         this.MPclr["B"] = [0.31 * 1.3,0.58 * 1.3,1 * 1.3];
         this.MPclr["R"] = [0.7 * 1.3,0.1 * 1.3,0.1 * 1.3];
         this.FIRST_RUN = true;
         try
         {
            this.my_so.flush();
         }
         catch(e:Error)
         {
            if(this.loaderInfo.parameters.l == "" || this.loaderInfo.parameters.l == undefined)
            {
               LAST_ERROR = "Warning: Save data might be not available without account (Flash Player and/or web browser issue).";
            }
         }
         this.LoadGame();
         if(this.loaderInfo.parameters.l != undefined && this.loaderInfo.parameters.l != "")
         {
            this.mdialog.nickname.text = this.loaderInfo.parameters.l;
         }
         else
         {
            this.mdialog.nickname.text = this.CMPG_name;
         }
         this.mdialog.back1e2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.mdialog.back1e2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.mdialog.back1e2.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            nicknameproceed();
         });
         this.NONMUTE = true;
         this.s_channel = new Array();
         this.vol3d = new Array();
         this.max_channels = 32 - 10;
         this.last_channel = 0;
         this.i = 0;
         while(this.i < this.max_channels)
         {
            this.s_channel[this.i] = new SoundChannel();
            if(this.s_channel[this.i] == null)
            {
               this.NONMUTE = false;
            }
            this.vol3d[this.i] = new SoundTransform(1);
            ++this.i;
         }
         this.vol = new SoundTransform(this.FX_VOLUME);
         this.vol2 = new SoundTransform(this.MUSIC_VOLUME);
         this.vol2Custom = new SoundTransform(this.CUSTOM_MUSIC_VOLUME);
         this.DEFAULT_MAP = "<player x=\"-340\" y=\"1\" uid=\"#hero\" tox=\"0\" toy=\"0\" hea=\"100\" hmax=\"100\" team=\"0\" side=\"1\" char=\"1\" incar=\"-1\" botaction=\"0\" ondeath=\"-1\" /><box x=\"-400\" y=\"100\" w=\"400\" h=\"100\" m=\"1\" />";
         this.dist_to_face = 600;
         this.s_chat = new chat();
         this.s_badge_earned = new badge_earned();
         this.s_coolbuddy2 = new coolbuddy2();
         this.s_mission_done = new mission_done();
         this.s_team_switch = new team_switch();
         this.s_corvett_die = new corvett_die();
         this.s_test_sound = new test_sound();
         this.s_hint_appear = new hint_appear();
         this.s_hint_disappear = new hint_disappear();
         this.s_ship_incoming = new ship_incoming();
         this.s_ship_explosion = new ship_explosion();
         this.s_robo_bug_jump = new robo_bug_jump();
         this.s_robo_bug_launch = new robo_bug_launch();
         this.s_robo_bug_hit = new robo_bug_hit();
         this.s_s_gun_rayrifle = new s_gun_rayrifle();
         this.myCursor.gotoAndPlay(1);
         this.myCursor.mouseEnabled = false;
         this.myCursor.mouseChildren = false;
         this.darkness.mouseEnabled = false;
         this.darkness.mouseChildren = false;
         this.m_dist = 0;
         this.momove = false;
         stage.addEventListener(MouseEvent.MOUSE_MOVE,this.mouseMoveHandler);
         stage.addEventListener(Event.ENTER_FRAME,function():*
         {
            if(momove)
            {
               momove = false;
               if(ALTCUR)
               {
                  if(myCursor.currentLabel != "loading")
                  {
                     if(currentFrame > 3)
                     {
                        if(currentLabel != "gaming" || currentLabel == "gaming" && (gamemenu.visible && !system_non_stop && !mens[MP_myid].dead))
                        {
                           myCursor.gotoAndPlay(1);
                        }
                        else if(myCursor.currentFrame != 7)
                        {
                           myCursor.gotoAndStop(7);
                        }
                        if(mouseX != 0 || mouseY != 0)
                        {
                           myCursor.x = mouseX;
                           myCursor.y = mouseY;
                        }
                        ++m_dist;
                        if(m_dist > 200)
                        {
                           m_dist = 0;
                           Mouse.hide();
                        }
                     }
                  }
                  if(!myCursor.visible)
                  {
                     myCursor.visible = true;
                  }
               }
               else if(Boolean(TOOLTIPS) && tooltip_updated)
               {
                  if(currentLabel != "gaming" || currentLabel == "gaming" && (gamemenu.visible && !mens[MP_myid].dead))
                  {
                     myCursor.visible = false;
                     myCursor.gotoAndPlay(1);
                     Mouse.show();
                  }
                  else
                  {
                     if(!myCursor.visible)
                     {
                        myCursor.visible = true;
                     }
                     if(myCursor.currentFrame != 7)
                     {
                        myCursor.gotoAndStop(7);
                     }
                     if(mouseX != 0 || mouseY != 0)
                     {
                        myCursor.x = mouseX;
                        myCursor.y = mouseY;
                     }
                  }
               }
               else
               {
                  Mouse.show();
                  if(myCursor.visible)
                  {
                     myCursor.visible = false;
                  }
               }
            }
            else if(!momove)
            {
               if(ALTCUR)
               {
                  if(!myCursor.visible)
                  {
                     myCursor.visible = true;
                     Mouse.hide();
                  }
               }
               else if(!Mouse.visible)
               {
                  Mouse.show();
               }
            }
         });
         this.debug_screen = new Shape();
         this.DEBUG_MODE = false;
         this.lastcurmove = 0;
         this.last_psi = 1;
         this.dying_after = 30;
         this.HUNT_LOST = 220;
         this.MP_teamkills = 0;
         this.MP_round = 0;
         this.MP_gamestate = 0;
         this.tooltip_updated = false;
         this.gamechat_input_text = "";
         this.MP_playerstotal = 0;
         this.PLAYER_WIDTH = 10;
         this.MP_start_x = 0;
         this.MP_start_y = 0;
         this.MP_force_disconnect = false;
         this.MP_chat_input = false;
         this.MP_chat_input_for = "all";
         this.MP_custom_events = "";
         this.MP_deaths = 0;
         this.MP_kills = 0;
         this.hero = new Array();
         this.hpwarning = false;
         this.hpbeepch = new SoundChannel();
         this.hp_warn_max = 0.5;
         this.s_hp_warn = new hp_warn();
         this.s_hp_dead = new hp_dead();
         this.gravitatorch = new SoundChannel();
         this.s_gravitator = new gravitator2();
         this.wind_base = 0;
         this.musch = new SoundChannel();
         this.s_gameplay_song = new gameplay_song();
         this.main_song_ch = new SoundChannel();
         this.s_main_song = new main_song();
         this.am_base_ch = new SoundChannel();
         this.s_am_base = new am_base();
         this.am_wind_ch = new SoundChannel();
         this.s_am_wind = new am_wind();
         this.timeshiftch = new SoundChannel();
         this.s_slow_down = new slow_down();
         this.s_slow_up = new slow_up();
         this.grenades_total = 0;
         this.grenades_port_total = 0;
         this.grenades_sh_total = 0;
         this.c_sim_rt = 0;
         this.c_sim_rt2 = 0;
         this.c_sim_stress = false;
         this.OpenTop = true;
         this.system_non_stop = true;
         this.stoped_by_focus = false;
         this.last_gun_b4_psi = -1;
         this.mini_scenario_cur = -1;
         this.mini_scenario_phase = 0;
         this.fps_last = getTimer();
         this.fps_ticks = 0;
         this.color_player = 11206570;
         this.color_friendly = 16776994;
         this.color_enemy = 16746632;
         this.color_player_over = "#EAFFEA";
         this.color_friendly_over = "#FFFF92";
         this.color_enemy_over = "#FFC8C8";
         this.firstframe = true;
         this.g_scale_outcar = 1;
         this.s_t_switch1 = new t_switch1();
         this.s_t_switch2 = new t_switch2();
         this.s_t_switch_denied = new t_switch_denied();
         this.s_t_door1_start = new t_door1_start();
         this.s_t_door1_stop = new t_door1_stop();
         this.s_step1 = new step1();
         this.s_step2 = new step2();
         this.s_step3 = new step3();
         this.s_step4 = new step4();
         this.s_robo_step1 = new robo_step1();
         this.s_robo_step2 = new robo_step2();
         this.s_robo_step3 = new robo_step3();
         this.s_robo_step4 = new robo_step4();
         this.s_body0 = new body0();
         this.s_body1 = new body1();
         this.s_body2 = new body2();
         this.s_body3 = new body3();
         this.s_metal0 = new metal_hor();
         this.s_metal1 = new metal_ver1();
         this.s_metal2 = new metal_ver2();
         this.s_metal3 = new metal_ver3();
         this.s_metal_gib = new metal_gib();
         this.s_steel_low = new steel_low();
         this.s_steel_med = new steel_med();
         this.s_steel_hor = new steel_hor();
         this.s_steel_hard = new steel_hard();
         this.s_glass1 = new glass1();
         this.s_glass2 = new glass2();
         this.s_barrel = new barrel();
         this.s_barrel2 = new barrel2();
         this.s_enemy_hurt1 = new enemy_hurt1();
         this.s_enemy_hurt_1 = new enemy_hurt_1();
         this.s_enemy_hurt_2 = new enemy_hurt_2();
         this.s_enemy_hurt_3 = new enemy_hurt_3();
         this.s_enemy_die1 = new enemy_die1();
         this.s_enemy_die_1 = new enemy_die_1();
         this.s_enemy_die_2 = new enemy_die_2();
         this.s_enemy_die_3 = new enemy_die_3();
         this.s_enemy_die_4 = new enemy_die_4();
         this.s_enemy_alert = new enemy_alert();
         this.s_usurpation_hurt = new usurpation_hurt();
         this.s_usurpation_death2 = new usurpation_death2();
         this.s_usurpation_death3 = new usurpation_death3();
         this.s_usurpation_alert = new usurpation_alert();
         this.s_usurpation_dying = new usurpation_dying();
         this.s_noir_die = new noir_die();
         this.s_noir_hurt1 = new noir_hurt1();
         this.s_noir_hurt2 = new noir_hurt2();
         this.s_teleport = new teleport_spawn();
         this.s_portnade_explode = new portnade_explode();
         this.s_portnade_act2 = new portnade_act2();
         this.s_shnade_act = new shnade_act();
         this.s_shnade_explode = new shnade_explode();
         this.s_shnade_hit = new shnade_hit();
         this.s_shnade_hit_low = new shnade_hit_low();
         this.s_shnade_offline = new shnade_offline();
         this.s_bounce_bullet = new bounce_bullet();
         this.s_wea_rail_alt2 = new wea_rail_alt2();
         this.s_wea_android_sniper = new wea_android_sniper();
         this.s_wea_crossfire2 = new wea_crossfire2();
         this.s_wea_incompetence_archetype_27xx_fire = new wea_incompetence_archetype_27xx_fire();
         this.s_wea_thetoppestkek_shotgun_nxs25 = new wea_thetoppestkek_shotgun_nxs25();
         this.s_wea_moonhawk_railgun = new wea_moonhawk_railgun();
         this.s_dart4 = new dart4();
         this.s_wea_glhf = new wea_glhf();
         this.s_wea_lazyrain_gravy_rl = new wea_lazyrain_gravy_rl();
         this.s_wea_m202 = new wea_m202();
         this.s_wea_android_shotgun = new wea_android_shotgun();
         this.s_wea_plasma_shotgun = new wea_plasma_shotgun();
         this.s_wea_ditzy_cs_ik = new wea_ditzy_cs_ik();
         this.s_wea_ditzy_cs_ik2 = new wea_ditzy_cs_ik2();
         this.s_wea_ph01 = new wea_ph01();
         this.s_wea_rail_toxic2 = new wea_rail_toxic2();
         this.s_wea_auto_sg2 = new wea_auto_sg2();
         this.s_wea_darkstar_rl3 = new wea_darkstar_rl3();
         this.s_wea_alien_rail_sg = new wea_alien_rail_sg();
         this.s_wea_bison = new wea_bison();
         this.s_wea_phanx = new wea_phanx();
         this.s_wea_ditzy_energy_rifle = new wea_ditzy_energy_rifle();
         this.s_wea_rifle_nade = new wea_rifle_nade();
         this.s_wea_revolver5 = new wea_revolver5();
         this.s_wea_android_railgun = new wea_android_railgun();
         this.s_wea_plasma_smg = new wea_plasma_smg();
         this.s_wea_acid_gl3 = new wea_acid_gl3();
         this.s_grenade_wet = new grenade_wet();
         this.s_hit_dmg = new hit_dmg();
         this.s_hit_dmg2 = new hit_dmg2();
         this.s_hit_dmg3 = new hit_dmg3();
         this.s_hit_frag = new hit_frag();
         this.s_sd_death = new sd_death();
         this.s_sd_hurt1 = new sd_hurt1();
         this.s_sd_hurt2 = new sd_hurt2();
         this.s_sd_welcome2 = new sd_welcome2();
         this.s_wea_lmg = new wea_lmg();
         this.s_exp_level = new exp_level();
         this.s_exp_tick = new exp_tick();
         this.s_exp_event_stop = new exp_event_stop();
         this.s_android_miner_die = new android_miner_die();
         this.s_android_miner_enemy_down = new android_miner_enemy_down();
         this.s_android_miner_welcome2 = new android_miner_welcome2();
         this.s_android_miner_hurt = new android_miner_hurt();
         this.s_reakhohsha_welcome1 = new reakhohsha_welcome1();
         this.s_reakhohsha_welcome2 = new reakhohsha_welcome2();
         this.s_reakhohsha_hurt1 = new reakhohsha_hurt1();
         this.s_reakhohsha_hurt2 = new reakhohsha_hurt2();
         this.s_reakhohsha_hurt3 = new reakhohsha_hurt3();
         this.s_reakhohsha_death3 = new reakhohsha_death3();
         this.s_hexagon_welcome1 = new hexagon_welcome1();
         this.s_hexagon_welcome2 = new hexagon_welcome2();
         this.s_hexagon_welcome3 = new hexagon_welcome3();
         this.s_hexagon_death1 = new hexagon_death1();
         this.s_hexagon_death2 = new hexagon_death2();
         this.s_hexagon_pain1 = new hexagon_pain1();
         this.s_hexagon_pain2 = new hexagon_pain2();
         this.s_hexagon_pain3 = new hexagon_pain3();
         this.s_hexagon_pain4 = new hexagon_pain4();
         this.s_beam1 = new beam1();
         this.s_beam5 = new beam5();
         this.s_beam1_recharge = new beam1_recharge();
         this.s_beam1_rechargeB = new beam1_rechargeB();
         this.s_beam5_recharge = new beam5_recharge();
         this.s_beam5_rechargeB = new beam5_rechargeB();
         this.s_wea_roxxar_rifle = new wea_roxxar_rifle();
         this.s_wea_moonhawk_smg2 = new wea_moonhawk_smg2();
         this.s_orakin_death1 = new orakin_death1();
         this.s_orakin_death2 = new orakin_death2();
         this.s_orakin_hurt = new orakin_hurt();
         this.s_orakin_welcome = new orakin_welcome();
         this.s_arrin_death1 = new arrin_death1();
         this.s_arrin_hurt1 = new arrin_hurt1();
         this.s_arrin_hurt2 = new arrin_hurt2();
         this.s_arrin_dying = new arrin_dying();
         this.s_arrin_welcome1 = new arrin_welcome1();
         this.s_arrin_welcome2 = new arrin_welcome2();
         this.s_arrin_welcome3 = new arrin_welcome3();
         this.s_Grosk_death1 = new Grosk_death1();
         this.s_Grosk_death2 = new Grosk_death2();
         this.s_Grosk_hurt1 = new Grosk_hurt1();
         this.s_Grosk_hurt2 = new Grosk_hurt2();
         this.s_Grosk_hurt3 = new Grosk_hurt3();
         this.s_Grosk_dying1 = new Grosk_dying1();
         this.s_Grosk_dying2 = new Grosk_dying2();
         this.s_Grosk_welcome1 = new Grosk_welcome1();
         this.s_Grosk_welcome2 = new Grosk_welcome2();
         this.s_Grosk_welcome3 = new Grosk_welcome3();
         this.s_Grosk_welcome4 = new Grosk_welcome4();
         this.s_Grosk_welcome5 = new Grosk_welcome5();
         this.s_Grosk_edown1 = new Grosk_edown1();
         this.s_Grosk_edown2 = new Grosk_edown2();
         this.s_Grosk_edown3 = new Grosk_edown3();
         this.s_drohnenfem_death1 = new drohnenfem_death1();
         this.s_drohnenfem_death2 = new drohnenfem_death2();
         this.s_drohnenfem_death3 = new drohnenfem_death3();
         this.s_drohnenfem_hurt1 = new drohnenfem_hurt1();
         this.s_drohnenfem_hurt2 = new drohnenfem_hurt2();
         this.s_drohnenfem_hurt3 = new drohnenfem_hurt3();
         this.s_drohnenfem_dying1 = new drohnenfem_dying1();
         this.s_drohnenfem_welcome1 = new drohnenfem_welcome1();
         this.s_drohnenfem_welcome2 = new drohnenfem_welcome2();
         this.s_drohnenfem_welcome3 = new drohnenfem_welcome3();
         this.s_drohnenfem_edown1 = new drohnenfem_edown1();
         this.s_drohnenfem_edown2 = new drohnenfem_edown2();
         this.s_drohnenfem_edown3 = new drohnenfem_edown3();
         this.s_drohnentroop_death1 = new drohnentroop_death1();
         this.s_drohnentroop_death2 = new drohnentroop_death2();
         this.s_drohnentroop_death3 = new drohnentroop_death3();
         this.s_drohnentroop_hurt1 = new drohnentroop_hurt1();
         this.s_drohnentroop_hurt2 = new drohnentroop_hurt2();
         this.s_drohnentroop_hurt3 = new drohnentroop_hurt3();
         this.s_drohnentroop_dying1 = new drohnentroop_dying1();
         this.s_drohnentroop_welcome1 = new drohnentroop_welcome1();
         this.s_drohnentroop_welcome2 = new drohnentroop_welcome2();
         this.s_drohnentroop_welcome3 = new drohnentroop_welcome3();
         this.s_drohnentroop_edown1 = new drohnentroop_edown1();
         this.s_drohnentroop_edown2 = new drohnentroop_edown2();
         this.s_drohnentroop_edown3 = new drohnentroop_edown3();
         this.s_serkova_death1 = new serkova_death1();
         this.s_serkova_hurt1 = new serkova_hurt1();
         this.s_serkova_welcome1 = new serkova_welcome1();
         this.s_serkova_welcome2 = new serkova_welcome2();
         this.s_serkova_welcome3 = new serkova_welcome3();
         this.s_serkova_edown1 = new serkova_edown1();
         this.s_serkova_edown2 = new serkova_edown2();
         this.s_ferro_death1 = new ferro_death1();
         this.s_ferro_death2 = new ferro_death2();
         this.s_ferro_hurt1 = new ferro_hurt1();
         this.s_ferro_hurt2 = new ferro_hurt2();
         this.s_ferro_welcome1 = new ferro_welcome1();
         this.s_ferro_welcome2 = new ferro_welcome2();
         this.s_ferro_welcome3 = new ferro_welcome3();
         this.s_ferro_edown1 = new ferro_edown1();
         this.s_ferro_edown2 = new ferro_edown2();
         this.s_ferro_edown3 = new ferro_edown3();
         this.s_elurra_death1 = new elurra_death1();
         this.s_elurra_hurt1 = new elurra_hurt1();
         this.s_elurra_hurt2 = new elurra_hurt2();
         this.s_elurra_dying1 = new elurra_dying1();
         this.s_elurra_welcome1 = new elurra_welcome1();
         this.s_elurra_welcome2 = new elurra_welcome2();
         this.s_elurra_welcome3 = new elurra_welcome3();
         this.s_elurra_edown1 = new elurra_edown1();
         this.s_elurra_edown2 = new elurra_edown2();
         this.s_phantom_death1 = new phantom_death1();
         this.s_phantom_welcome1 = new phantom_welcome1();
         this.s_phantom_welcome2 = new phantom_welcome2();
         this.s_phantom_edown1 = new phantom_edown1();
         this.s_phantom_edown1.custom_volume = 4;
         this.s_phantom_welcome1.custom_volume = 4;
         this.s_phantom_welcome2.custom_volume = 4;
         this.s_phantom_death1.custom_volume = 4;
         this.s_elurra_death1.custom_volume = 3;
         this.s_elurra_hurt1.custom_volume = 3;
         this.s_elurra_hurt2.custom_volume = 3;
         this.s_elurra_dying1.custom_volume = 3;
         this.s_elurra_welcome1.custom_volume = 3;
         this.s_elurra_welcome2.custom_volume = 3;
         this.s_elurra_welcome3.custom_volume = 3;
         this.s_elurra_edown1.custom_volume = 3;
         this.s_elurra_edown2.custom_volume = 3;
         this.s_wea_moonhawk_smg2.custom_volume = 1;
         this.s_wea_roxxar_rifle.custom_volume = 4;
         this.s_beam1.custom_volume = 2;
         this.s_beam5.custom_volume = 2;
         this.s_beam1_recharge.custom_volume = 2;
         this.s_beam1_rechargeB.custom_volume = 2;
         this.s_beam5_recharge.custom_volume = 2;
         this.s_beam5_rechargeB.custom_volume = 2;
         this.s_hexagon_welcome1.custom_volume = 4;
         this.s_hexagon_welcome2.custom_volume = 4;
         this.s_hexagon_welcome3.custom_volume = 4;
         this.s_hexagon_death1.custom_volume = 4;
         this.s_hexagon_death2.custom_volume = 4;
         this.s_hexagon_pain1.custom_volume = 4;
         this.s_hexagon_pain2.custom_volume = 4;
         this.s_hexagon_pain3.custom_volume = 4;
         this.s_hexagon_pain4.custom_volume = 4;
         this.s_android_miner_die.custom_volume = 2 * 0.5;
         this.s_android_miner_enemy_down.custom_volume = 2 * 0.5;
         this.s_android_miner_welcome2.custom_volume = 2 * 0.5;
         this.s_android_miner_hurt.custom_volume = 2 * 0.5;
         this.s_reakhohsha_welcome1.custom_volume = 2;
         this.s_reakhohsha_welcome2.custom_volume = 2;
         this.s_reakhohsha_hurt1.custom_volume = 2;
         this.s_reakhohsha_hurt2.custom_volume = 2;
         this.s_reakhohsha_hurt3.custom_volume = 2;
         this.s_reakhohsha_death3.custom_volume = 2;
         this.s_exp_level.custom_volume = 4;
         this.s_exp_tick.custom_volume = 1;
         this.s_exp_event_stop.custom_volume = 4;
         this.s_bounce_bullet.custom_volume = 1.5;
         this.s_wea_rail_alt2.custom_volume = 4;
         this.s_wea_android_sniper.custom_volume = 2.5;
         this.s_wea_android_shotgun.custom_volume = 4;
         this.s_wea_crossfire2.custom_volume = 2;
         this.s_wea_incompetence_archetype_27xx_fire.custom_volume = 3;
         this.s_wea_thetoppestkek_shotgun_nxs25.custom_volume = 2;
         this.s_wea_moonhawk_railgun.custom_volume = 8;
         this.s_dart4.custom_volume = 5;
         this.s_wea_glhf.custom_volume = 4;
         this.s_wea_lazyrain_gravy_rl.custom_volume = 8;
         this.s_wea_m202.custom_volume = 2.75;
         this.s_wea_plasma_shotgun.custom_volume = 3;
         this.s_wea_ph01.custom_volume = 5;
         this.s_wea_rail_toxic2.custom_volume = 2;
         this.s_wea_auto_sg2.custom_volume = 2;
         this.s_wea_darkstar_rl3.custom_volume = 3;
         this.s_wea_alien_rail_sg.custom_volume = 2;
         this.s_wea_bison.custom_volume = 2;
         this.s_wea_phanx.custom_volume = 2;
         this.s_wea_rifle_nade.custom_volume = 3;
         this.s_wea_revolver5.custom_volume = 2;
         this.s_wea_android_railgun.custom_volume = 4;
         this.s_wea_plasma_smg.custom_volume = 1.5;
         this.s_wea_acid_gl3.custom_volume = 3.5;
         this.s_grenade_wet.custom_volume = 3;
         this.s_hit_dmg.custom_volume = 3;
         this.s_hit_dmg2.custom_volume = 5;
         this.s_hit_dmg3.custom_volume = 7;
         this.s_hit_frag.custom_volume = 6;
         this.s_wea_lmg.custom_volume = 3;
         this.s_wea_ditzy_energy_rifle.custom_volume = 4;
         this.s_wea_ditzy_cs_ik2.custom_volume = 1.5;
         this.s_sd_death.custom_volume = 2;
         this.s_sd_hurt1.custom_volume = 2;
         this.s_sd_hurt2.custom_volume = 2;
         this.s_sd_welcome2.custom_volume = 2;
         this.s_fail_shot = new fail_shot();
         this.s_psi1 = new sou_blade_swing1();
         this.s_psi2 = new sou_blade_swing2();
         this.s_psi3 = new sou_blade_swing3();
         this.s_water_splash1 = new water_splash1();
         this.s_water_splash2 = new water_splash2();
         this.s_water_splash3 = new water_splash3();
         this.s_blood_hit = new blood_hit();
         this.s_blood_hit_sword = new blood_hit_sword();
         this.s_blood_head = new blood_head();
         this.s_blood_head2 = new blood_head2();
         this.s_blood_body = new blood_body();
         this.s_blood_body2 = new blood_body2();
         this.s_blood_leg_arm = new blood_leg_arm();
         this.s_body_fall = new body_fall();
         this.s_metal_hit = new metal_hit();
         this.s_wea1 = new wea1();
         this.s_wea2 = new wea2();
         this.s_wea_pickup = new wea_pickup();
         this.s_charged_explosion = new charged_explosion();
         this.s_silenced = new silenced();
         this.s_wea_sniper = new wea_sniper();
         this.s_wea_minigun2 = new wea_mingun2();
         this.s_wea_plasmagun = new wea_plasmagun();
         this.s_wea_apistol = new wea_apistol();
         this.s_wea_pistol = new wea_pistol();
         this.s_wea_pistol2 = new wea_pistol2();
         this.s_wea_shotgun = new wea_shotgun();
         this.s_wea_rifle = new wea_rifle();
         this.s_wea_rocket = new wea_rocket_launch();
         this.s_wea_railgun = new wea_railgun();
         this.s_wea_railgun2 = new wea_rail_alt();
         this.s_wea_mingun = new wea_mingun();
         this.s_wea_gl = new wea_gl();
         this.s_wea_vehcannon = new wea_vehcannon();
         this.s_wea_impulse = new wea_impulse();
         this.s_wea_rail_alt = new wea_rail_alt();
         this.s_wea_energy = new wea_energy();
         this.s_wea_evil_shot = new wea_evil_shot();
         this.s_wea_rifle_alt = new wea_rifle_alt();
         this.s_wea_shotgun_alt = new wea_shotgun_alt();
         this.s_wea_defibrillator = new wea_defibrillator();
         this.s_wea_vehminigun = new wea_vehminigun();
         this.s_wea_real_shotgun = new wea_real_shotgun();
         this.s_wea_real_shotgun_r = new wea_real_shotgun_r();
         this.s_wea_real_rifle = new wea_real_rifle();
         this.s_walker_step = new walker_step();
         this.s_walker_phase1 = new walker_phase1();
         this.s_walker_phase2 = new walker_phase2();
         this.s_walker_die = new walker_die();
         this.s_capsule_hit1 = new capsule_hit1();
         this.s_capsule_hit2 = new capsule_hit2();
         this.s_explode1 = new explode1();
         this.s_explode2 = new explode2();
         this.s_explode_bfg = new explode_bfg();
         this.s_reload = new reload();
         this.s_rl_reload = new rl_reload();
         this.s_hero_death1 = new hero_death1();
         this.s_hero_death2 = new hero_death2();
         this.s_hero_pain1 = new hero_pain1();
         this.s_hero_pain2 = new hero_pain2();
         this.s_hero_pain3 = new hero_pain3();
         this.s_hero_pain4 = new hero_pain4();
         this.s_android2_die = new android2_die();
         this.s_android2_hurt = new android2_hurt();
         this.s_android2_welcome2 = new android2_welcome2();
         this.s_android2_die.custom_volume = 2;
         this.s_android2_hurt.custom_volume = 2;
         this.s_android2_welcome2.custom_volume = 4;
         this.s_android_die_1 = new android_die_1();
         this.s_android_die = new android_die();
         this.s_android_welcome1 = new android_welcome1();
         this.s_android_welcome2 = new android_welcome2();
         this.s_android_welcome3 = new android_welcome3();
         this.s_android_hurt = new android_hurt();
         this.s_android_enemy_down1 = new android_enemy_down1();
         this.s_android_welcome = new android_welcome();
         this.s_android_welcome.custom_volume = 4;
         this.s_f_death1 = new f_death1();
         this.s_f_death2 = new f_death2();
         this.s_f_death3 = new f_death3();
         this.s_f_pain2 = new f_pain2();
         this.s_f_pain3 = new f_pain3();
         this.s_f_pain4 = new f_pain4();
         this.s_f_welcome1 = new f_welcome1();
         this.s_g_death1 = new g_death1();
         this.s_g_death2 = new g_death2();
         this.s_g_death3 = new g_death3();
         this.s_g_pain1 = new g_pain1();
         this.s_g_pain2 = new g_pain2();
         this.s_g_pain3 = new g_pain3();
         this.s_g_welcome1 = new g_welcome1();
         this.s_fp_death1 = new fp_death1();
         this.s_fp_death2 = new fp_death2();
         this.s_fp_death3 = new fp_death3();
         this.s_fp_pain2 = new fp_pain2();
         this.s_fp_pain3 = new fp_pain3();
         this.s_fp_pain4 = new fp_pain4();
         this.s_fp_welcome1 = new fp_welcome1();
         this.s_marine_death1 = new marine_death1();
         this.s_marine_death2 = new marine_death2();
         this.s_marine_death3 = new marine_death3();
         this.s_marine_pain1 = new marine_hurt1();
         this.s_marine_pain2 = new marine_hurt2();
         this.s_marine_pain3 = new marine_hurt3();
         this.s_marine_alert = new marine_alert();
         this.s_marine_alert2 = new marine_alert2();
         this.s_marine_alert3 = new marine_alert3();
         this.s_marine_alert4 = new marine_alert4();
         this.s_marine_dying = new marine_dying();
         this.s_slicer_alert = new slicer_alert();
         this.s_slicer_die = new slicer_die();
         this.s_hero_welcome1 = new hero_welcome1();
         this.s_hero_welcome2 = new hero_welcome2();
         this.s_hero_welcome3 = new hero_welcome3();
         this.s_grenade = new grenade();
         this.s_grenade_act = new grenade_act();
         this.s_nade_throw = new nade_throw();
         this.s_explode_underwater = new explode_underwater();
         this.s_plasma_explosion = new plasma_explosion();
         this.s_box_low = new box_ver1();
         this.s_box_med = new box_ver2();
         this.s_box_hor = new box_hor();
         this.s_box_hard = new box_ver3();
         this.s_box_die = new box_die();
         this.s_drone_die = new drone_die();
         this.s_drone_hurt = new drone_hurt();
         this.voices = {
            "mute":{
               "death":[],
               "enemy_down":[],
               "enemy_spotted":[],
               "hurt":[],
               "dying":[]
            },
            "marine":{
               "death":[this.s_hero_death1,this.s_hero_death2],
               "enemy_down":[],
               "enemy_spotted":[this.s_hero_welcome1,this.s_hero_welcome2,this.s_hero_welcome3],
               "hurt":[this.s_hero_pain1,this.s_hero_pain2,this.s_hero_pain3,this.s_hero_pain4],
               "dying":[]
            },
            "cs":{
               "death":[this.s_marine_death1,this.s_marine_death2,this.s_marine_death3],
               "enemy_down":[],
               "enemy_spotted":[this.s_marine_alert,this.s_marine_alert2,this.s_marine_alert3,this.s_marine_alert4],
               "hurt":[this.s_marine_pain1,this.s_marine_pain2,this.s_marine_pain3],
               "dying":[this.s_marine_dying]
            },
            "ghost":{
               "death":[this.s_slicer_die],
               "enemy_down":[],
               "enemy_spotted":[this.s_slicer_alert],
               "hurt":[],
               "dying":[]
            },
            "usurpation":{
               "death":[this.s_enemy_die_4,this.s_enemy_die1,this.s_enemy_die_1,this.s_enemy_die_2,this.s_enemy_die_3],
               "enemy_down":[],
               "enemy_spotted":[this.s_enemy_alert],
               "hurt":[this.s_enemy_hurt1,this.s_enemy_hurt_1,this.s_enemy_hurt_2,this.s_enemy_hurt_3],
               "dying":[]
            },
            "usurpation_destroyer":{
               "death":[this.s_usurpation_death2,this.s_usurpation_death3],
               "enemy_down":[],
               "enemy_spotted":[this.s_usurpation_alert],
               "hurt":[this.s_usurpation_hurt],
               "dying":[this.s_usurpation_dying]
            },
            "android":{
               "death":[this.s_android_die_1],
               "enemy_down":[this.s_android_enemy_down1],
               "enemy_spotted":[this.s_android_welcome1,this.s_android_welcome2,this.s_android_welcome3],
               "hurt":[this.s_android_hurt],
               "dying":[],
               "enemy_down_sp_chance":0.333
            },
            "oldandroid":{
               "death":[this.s_android_die],
               "enemy_down":[],
               "enemy_spotted":[this.s_android_welcome],
               "hurt":[this.s_android_hurt],
               "dying":[],
               "enemy_down_sp_chance":0.333
            },
            "hum_droid":{
               "death":[this.s_android2_die],
               "enemy_down":[],
               "enemy_spotted":[this.s_android2_welcome2],
               "hurt":[this.s_android2_hurt],
               "dying":[]
            },
            "proxy":{
               "death":this.LibSoundStringArray(2,["helm_proxy_death6","helm_proxy_death5","helm_proxy_death4","helm_proxy_death3"]),
               "enemy_down":this.LibSoundStringArray(2,["helm_proxy_enemy_down_niceC","helm_proxy_enemy_down_niceA","helm_proxy_enemy_down_got_oneD","helm_proxy_enemy_down_fantasticA"]),
               "enemy_spotted":this.LibSoundStringArray(2,["helm_proxy_alert_up_thereA","helm_proxy_alert_take_coverB","helm_proxy_alert_over_hereB"]),
               "hurt":this.LibSoundStringArray(2,["helm_proxy_hurt9","helm_proxy_hurt8","helm_proxy_hurt5","helm_proxy_hurt4","helm_proxy_hurt17","helm_proxy_hurt15","helm_proxy_hurt14","helm_proxy_hurt13","helm_proxy_hurt12","helm_proxy_hurt11"]),
               "dying":this.LibSoundStringArray(2,["helm_proxy_dyingF","helm_proxy_dyingC"])
            },
            "proxy_helmetless":{
               "death":this.LibSoundStringArray(2,["proxy_death6","proxy_death5","proxy_death4","proxy_death3"]),
               "enemy_down":this.LibSoundStringArray(2,["proxy_enemy_down_niceC","proxy_enemy_down_niceA","proxy_enemy_down_got_oneD","proxy_enemy_down_fantasticA"]),
               "enemy_spotted":this.LibSoundStringArray(2,["proxy_alert_up_thereA","proxy_alert_take_coverB","proxy_alert_over_hereB"]),
               "hurt":this.LibSoundStringArray(2,["proxy_hurt9","proxy_hurt8","proxy_hurt5","proxy_hurt4","proxy_hurt17","proxy_hurt15","proxy_hurt14","proxy_hurt13","proxy_hurt12","proxy_hurt11"]),
               "dying":this.LibSoundStringArray(2,["proxy_dyingF","proxy_dyingC"])
            },
            "silk":{
               "death":this.LibSoundStringArray(2,["silk_death1B","silk_death2B"]),
               "enemy_down":this.LibSoundStringArray(2,["silk_enemy_down_minus_oneB","silk_enemy_down_brilliantC","silk_enemy_down_eliminatedB","silk_enemy_down_hell_yeahB","silk_enemy_down_ive_got_oneB","silk_enemy_down_no_kicking_for_youB"]),
               "enemy_spotted":this.LibSoundStringArray(2,["silk_alert_contactA","silk_alert_i_see_oneA","silk_alert_there_is_oneA"]),
               "hurt":this.LibSoundStringArray(2,["silk_hurt1B","silk_hurt2B","silk_hurt5","silk_hurt6","silk_hurt9B"]),
               "dying":this.LibSoundStringArray(2,["silk_dyingB"])
            },
            "noir_lime":{
               "death":[this.s_noir_die],
               "enemy_down":[],
               "enemy_spotted":[],
               "hurt":[this.s_noir_hurt1,this.s_noir_hurt2],
               "dying":[]
            },
            "grub":{
               "death":[this.s_g_death1,this.s_g_death2,this.s_g_death3],
               "enemy_down":[],
               "enemy_spotted":[this.s_g_welcome1],
               "hurt":[this.s_g_pain1,this.s_g_pain2,this.s_g_pain3],
               "dying":[]
            },
            "falkok":{
               "death":[this.s_f_death1,this.s_f_death2,this.s_f_death3],
               "enemy_down":[],
               "enemy_spotted":[this.s_f_welcome1],
               "hurt":[this.s_f_pain2,this.s_f_pain3,this.s_f_pain4],
               "dying":[]
            },
            "falkok_phoenix":{
               "death":[this.s_fp_death1,this.s_fp_death2,this.s_fp_death3],
               "enemy_down":[],
               "enemy_spotted":[this.s_fp_welcome1],
               "hurt":[this.s_fp_pain2,this.s_fp_pain3,this.s_fp_pain4],
               "dying":[]
            },
            "star_defender":{
               "death":[this.s_sd_death],
               "enemy_down":[],
               "enemy_spotted":[this.s_sd_welcome2],
               "hurt":[this.s_sd_hurt1,this.s_sd_hurt2],
               "dying":[]
            },
            "mine_droid":{
               "death":[this.s_android_miner_die],
               "enemy_down":[this.s_android_miner_enemy_down],
               "enemy_spotted":[this.s_android_miner_welcome2],
               "hurt":[this.s_android_miner_hurt],
               "dying":[]
            },
            "reakhohsha":{
               "death":[this.s_reakhohsha_death3],
               "enemy_down":[],
               "enemy_spotted":[this.s_reakhohsha_welcome1,this.s_reakhohsha_welcome2],
               "hurt":[this.s_reakhohsha_hurt1,this.s_reakhohsha_hurt2,this.s_reakhohsha_hurt3],
               "dying":[]
            },
            "hexagon":{
               "death":[this.s_hexagon_death1,this.s_hexagon_death2],
               "enemy_down":[],
               "enemy_spotted":[this.s_hexagon_welcome1,this.s_hexagon_welcome2,this.s_hexagon_welcome3],
               "hurt":[this.s_hexagon_pain1,this.s_hexagon_pain2,this.s_hexagon_pain3,this.s_hexagon_pain4],
               "dying":[]
            },
            "orakin":{
               "death":[this.s_orakin_death1,this.s_orakin_death2],
               "enemy_down":[],
               "enemy_spotted":[this.s_orakin_welcome],
               "hurt":[this.s_orakin_hurt],
               "dying":[]
            },
            "arrin":{
               "death":[this.s_arrin_death1],
               "enemy_down":[],
               "enemy_spotted":[this.s_arrin_welcome1,this.s_arrin_welcome2,this.s_arrin_welcome3],
               "hurt":[this.s_arrin_hurt1,this.s_arrin_hurt2],
               "dying":[this.s_arrin_dying]
            },
            "grosk":{
               "death":[this.s_Grosk_death1,this.s_Grosk_death2],
               "enemy_down":[this.s_Grosk_edown1,this.s_Grosk_edown2,this.s_Grosk_edown3],
               "enemy_spotted":[this.s_Grosk_welcome1,this.s_Grosk_welcome2,this.s_Grosk_welcome3],
               "hurt":[this.s_Grosk_hurt1,this.s_Grosk_hurt2,this.s_Grosk_hurt3],
               "dying":[this.s_Grosk_dying1,this.s_Grosk_dying2]
            },
            "elurra":{
               "death":[this.s_elurra_death1],
               "enemy_down":[this.s_elurra_edown1,this.s_elurra_edown2],
               "enemy_spotted":[this.s_elurra_welcome1,this.s_elurra_welcome2,this.s_elurra_welcome3],
               "hurt":[this.s_elurra_hurt1,this.s_elurra_hurt2],
               "dying":[this.s_elurra_dying1]
            },
            "drohnenfem":{
               "death":[this.s_drohnenfem_death1,this.s_drohnenfem_death2,this.s_drohnenfem_death3],
               "enemy_down":[this.s_drohnenfem_edown1,this.s_drohnenfem_edown2,this.s_drohnenfem_edown3],
               "enemy_spotted":[this.s_drohnenfem_welcome1,this.s_drohnenfem_welcome2,this.s_drohnenfem_welcome3],
               "hurt":[this.s_drohnenfem_hurt1,this.s_drohnenfem_hurt2,this.s_drohnenfem_hurt3],
               "dying":[this.s_drohnenfem_dying1]
            },
            "serkova":{
               "death":[this.s_serkova_death1],
               "enemy_down":[this.s_serkova_edown1,this.s_serkova_edown2],
               "enemy_spotted":[this.s_serkova_welcome1,this.s_serkova_welcome2,this.s_serkova_welcome3],
               "hurt":[this.s_serkova_hurt1],
               "dying":[]
            },
            "ferro":{
               "death":[this.s_ferro_death1,this.s_ferro_death2],
               "enemy_down":[this.s_ferro_edown1,this.s_ferro_edown2,this.s_ferro_edown3],
               "enemy_spotted":[this.s_ferro_welcome1,this.s_ferro_welcome2,this.s_ferro_welcome3],
               "hurt":[this.s_ferro_hurt1,this.s_ferro_hurt2],
               "dying":[]
            },
            "phantom":{
               "death":[this.s_phantom_death1],
               "enemy_down":[this.s_phantom_edown1],
               "enemy_spotted":[this.s_phantom_welcome1,this.s_phantom_welcome2],
               "hurt":[],
               "dying":[]
            },
            "drohnentroop":{
               "death":[this.s_drohnentroop_death1,this.s_drohnentroop_death2,this.s_drohnentroop_death3],
               "enemy_down":[this.s_drohnentroop_edown1,this.s_drohnentroop_edown2,this.s_drohnentroop_edown3],
               "enemy_spotted":[this.s_drohnentroop_welcome1,this.s_drohnentroop_welcome2,this.s_drohnentroop_welcome3],
               "hurt":[this.s_drohnentroop_hurt1,this.s_drohnentroop_hurt2,this.s_drohnentroop_hurt3],
               "dying":[this.s_drohnentroop_dying1]
            },
            "civilian_male":{
               "death":this.LibSoundStringArray(2.2 * 0.75,["civilian_male_death1","civilian_male_death2"]),
               "enemy_down":this.LibSoundStringArray(2 * 0.75,["civilian_male_celebrate1","civilian_male_celebrate2"]),
               "enemy_spotted":this.LibSoundStringArray(2 * 0.75,["civilian_male_welcome1","civilian_male_welcome2"]),
               "hurt":this.LibSoundStringArray(2.2 * 0.75,["civilian_male_hurt1","civilian_male_hurt2","civilian_male_hurt3","civilian_male_hurt4"]),
               "dying":this.LibSoundStringArray(2 * 0.75,["civilian_male_dying2"])
            },
            "vulture":{
               "death":this.LibSoundStringArray(2 * 0.66,["vulture_death1","vulture_death2"]),
               "enemy_down":this.LibSoundStringArray(2 * 0.66,["vulture_celebrate1","vulture_celebrate2","vulture_celebrate3"]),
               "enemy_spotted":this.LibSoundStringArray(2 * 0.66,["vulture_welcome1","vulture_welcome2","vulture_welcome3"]),
               "hurt":this.LibSoundStringArray(2 * 0.66,["vulture_hurt1","vulture_hurt2","vulture_hurt3","vulture_hurt4"]),
               "dying":this.LibSoundStringArray(2 * 0.66,["vulture_dying"])
            },
            "crossfire_sentinel":{
               "death":this.LibSoundStringArray(2,["crossfire_sentinel_death1","crossfire_sentinel_death2","crossfire_sentinel_death3"]),
               "enemy_down":this.LibSoundStringArray(2,["crossfire_sentinel_celebrate1","crossfire_sentinel_celebrate2"]),
               "enemy_spotted":this.LibSoundStringArray(2,["crossfire_sentinel_welcome1","crossfire_sentinel_welcome2","crossfire_sentinel_welcome3"]),
               "hurt":this.LibSoundStringArray(2,["crossfire_sentinel_hurt1","crossfire_sentinel_hurt2","crossfire_sentinel_hurt3"]),
               "dying":this.LibSoundStringArray(2,["crossfire_sentinel_dying"])
            },
            "xin":{
               "death":this.LibSoundStringArray(2,["xin_death"]),
               "enemy_down":this.LibSoundStringArray(2,["xin_celebrate"]),
               "enemy_spotted":this.LibSoundStringArray(2,["xin_enemy_spotted"]),
               "hurt":this.LibSoundStringArray(2.5,["xin_hit"]),
               "dying":[],
               "always_enemy_down":true,
               "always_enemy_spotted":true
            }
         };
         this.hit_frame_damage = 0;
         this.hit_frags = new Vector.<Object>();
         this.hit_frags_timer = 0;
         this.expl_hurt_full = false;
         this.joint_cycle = 0;
         this.hpmax = 200;
         this.maxbulletlife = 0;
         this.boxx = new Array();
         this.boxy = new Array();
         this.boxw = new Array();
         this.boxh = new Array();
         this.boxmat = new Array();
         this.bgx = new Array();
         this.bgy = new Array();
         this.bgw = new Array();
         this.bgh = new Array();
         this.bg_cast = new Array();
         this.pushx = new Array();
         this.pushy = new Array();
         this.pushtox = new Array();
         this.pushtoy = new Array();
         this.pushstab = new Array();
         this.pushdamage = new Array();
         this.pushw = new Array();
         this.pushh = new Array();
         this.flare = new Array();
         this.flare_power = new Array();
         this.flarestotal = 0;
         this.wax = new Array();
         this.way = new Array();
         this.waw = new Array();
         this.wah = new Array();
         this.wadamage = new Array();
         this.wa_friction = new Array();
         this.ax = new Array();
         this.ay = new Array();
         this.lax = new Array();
         this.lay = new Array();
         this.atox = new Array();
         this.atoy = new Array();
         this.aio = new Array();
         this.aof = new Array();
         this.arad = new Array();
         this.around = new Array();
         this.amat = new Array();
         this.atim = new Array();
         this.acollided = new Array();
         this.ainwater = new Array();
         this.ablood = new Array();
         this.aactive = new Array();
         this.ainwater_shape = new Array();
         this.atom_first_position_corrections = new Vector.<Object>();
         this.pspeed = 0;
         this.weapon_penetration_factor = 0;
         this.rocket_speed_mult = 1;
         this.grenade_speed_mult = 1;
         this.plasma_speed_mult = 1;
         this.chtypa = new Array();
         this.chP = new Array();
         this.chC = new Array();
         this.chdef = new Array();
         this.chdamp = new Array();
         this.chio = new Array();
         this.chtsilp = new Array();
         this.atotal = 0;
         this.chtotal = 0;
         this.startatotal = 0;
         this.startchtotal = 0;
         this.bounce = 0.2;
         this.friction = 0.3;
         this.gravity = 0.5;
         this.barrels = new Array();
         this.guns = new Array();
         this.mens = new Array();
         this.vehicles = new Array();
         this.doors = new Array();
         this.decors = new Array();
         this.triggers = new Array();
         this.timers = new Array();
         this.regions = new Array();
         this.attachments = new Array();
         this._root = MovieClip(root);
         this.regionstotal = 0;
         this.triggerstotal = 0;
         this.timerstotal = 0;
         this.doorstotal = 0;
         this.bgstotal = 0;
         this.playerstotal = 0;
         this.boxestotal = 0;
         this.lampstotal = 0;
         this.watertotal = 0;
         this.gunstotal = 0;
         this.pushstotal = 0;
         this.vehiclestotal = 0;
         this.barrelstotal = 0;
         this.decorstotal = 0;
         this.fire = false;
         this.sitmax = 14;
         this.key_left = false;
         this.key_right = false;
         this.key_up = false;
         this.key_down = false;
         this.key_grenade = false;
         this.key_pick = false;
         this.key_alt = false;
         this.key_grab = false;
         this.key_kinetic = false;
         this.key_fall = false;
         this.key_ctrl = false;
         this.cinetic_target = -1;
         this.key_zoom_out = false;
         this.key_zoom_in = false;
         this.timeshift = 0;
         this.energy_max = 100;
         this.energy = 100;
         this.ALLOW_TIMESHIFT = true;
         this.joint_align = -1;
         this.puls = new Array();
         this.pulscur = 0;
         this.pulsmax = 64;
         this.surf_lnk = new Array();
         this.surf_lnk_to = new Array();
         this.ef = new Array();
         this.nextef = 0;
         this.maxef = 64;
         this.shnades = new Array();
         this.shnades_total = 0;
         this.shnades_next = 0;
         this.lamps_x = new Array();
         this.lamps_y = new Array();
         this.lamps_power = new Array();
         this.lamps_power2 = new Array();
         this.lamps_skips = 1;
         this.lamps_sprites = new Array();
         this.render_minX = 0;
         this.render_minY = 0;
         this.render_maxX = 0;
         this.render_maxY = 0;
         this.rnd = 1;
         this.Disable_next_click = false;
         this.FORCE_SNOW = false;
         this.flakes_spreadout = 150;
         this.flakes_letitsnow = true;
         this.mShape = new Sprite();
         this.optimalupd = true;
         this.NearBoxBSP_stepsize = 100;
         this.NearBoxBSP_empty = new Vector.<int>(0,true);
         this.synonym_uid = new Array();
         this.synonym_id = new Array();
         this.SHOW_FRAG_MESSAGES = true;
         this.trigger_to_key_binds_down = {};
         this.trigger_to_key_binds_up = {};
         this.mxnds1 = 0;
         this.mxnds2 = 0;
         this.mxnds3 = 0;
         this.tnds = 10;
         this.stable = true;
         this.unstable = -1;
         this.unstable_m = "none";
         this.MP_start_guns_total = 0;
         this.qpack_pattern = new Array();
         this.qpack_pattern_length = 0;
         this.qpack_pattern_simcalc = 0;
         this.qpack_base = "0123456789abcdefghijklmnopqrstuwxyzABCDEFGHIJKLMNOPQRSTUWXYZ_()$@~!.,*-+;:?<>/#%&";
         this.qpack_rule_2param("^","[^]");
         this.qpack_rule("\" /><player x=\"");
         this.qpack_rule("\" /><enemy x=\"");
         this.qpack_rule("\" /><door x=\"");
         this.qpack_rule("\" /><box x=\"");
         this.qpack_rule("\" /><gun x=\"");
         this.qpack_rule("\" /><pushf x=\"");
         this.qpack_rule("\" /><decor x=\"");
         this.qpack_rule("\" /><trigger enabled=\"true");
         this.qpack_rule("\" /><trigger enabled=\"false");
         this.qpack_rule("\" /><timer enabled=\"true");
         this.qpack_rule("\" /><timer enabled=\"false");
         this.qpack_rule("\" /><inf mark=\"");
         this.qpack_rule(" /><bg x=\"");
         this.qpack_rule(" /><lamp x=\"");
         this.qpack_rule(" /><region x=\"");
         this.qpack_rule("<player x=\"");
         this.qpack_rule("\" damage=\"");
         this.qpack_rule("\" maxspeed=\"");
         this.qpack_rule("\" model=\"gun_");
         this.qpack_rule("\" model=\"");
         this.qpack_rule("\" botaction=\"");
         this.qpack_rule("\" ondeath=\"");
         this.qpack_rule("\" actions_");
         this.qpack_rule("_targetB=\"");
         this.qpack_rule("_type=\"");
         this.qpack_rule("_targetA=\"");
         this.qpack_rule("\" team=\"");
         this.qpack_rule("\" side=\"");
         this.qpack_rule("\" command=\"");
         this.qpack_rule("\" flare=\"");
         this.qpack_rule("\" power=\"");
         this.qpack_rule("\" moving=\"true");
         this.qpack_rule("\" moving=\"false");
         this.qpack_rule("\" tarx=\"");
         this.qpack_rule("\" tary=\"");
         this.qpack_rule("\" tox=\"");
         this.qpack_rule("\" toy=\"");
         this.qpack_rule("\" hea=\"");
         this.qpack_rule("\" hmax=\"");
         this.qpack_rule("\" incar=\"");
         this.qpack_rule("\" char=\"");
         this.qpack_rule("\" maxcalls=\"");
         this.qpack_rule("\" vis=\"false");
         this.qpack_rule("\" vis=\"true");
         this.qpack_rule("\" use_on=\"");
         this.qpack_rule("\" use_target=\"");
         this.qpack_rule("\" upg=\"0^");
         this.qpack_rule("\" upg=\"");
         this.qpack_rule("^fgun_");
         this.qpack_rule("\" addx=\"");
         this.qpack_rule("\" addy=\"");
         this.qpack_rule("\" y=\"");
         this.qpack_rule("\" w=\"");
         this.qpack_rule("\" h=\"");
         this.qpack_rule("\" m=\"");
         this.qpack_rule("\" at=\"");
         this.qpack_rule("\" delay=\"");
         this.qpack_rule("\" target=\"");
         this.qpack_rule("\" stab=\"");
         this.qpack_rule("\" mark=\"");
         this.qpack_rule("0^T0^3");
         this.qpack_rule("0^x^y0^z0^h1^");
         this.qpack_rule("^m3^o-1^m3^p0^m3^n0^m4^o-1^m4^p0^m4^n0^m5^o-1^m5^p0^m5^n0^m6^o-1^m6^p0^m6^n0^m7^o-1^m7^p0^m7^n0^m8^o-1^m8^p0^m8^n0^m9^o-1^m9^p0^m9^n0^m10^o-1^m10^p0^m10^n0");
         this.qpack_rule("^m5^o-1^m5^p0^m5^n0^m6^o-1^m6^p0^m6^n0^m7^o-1^m7^p0^m7^n0^m8^o-1^m8^p0^m8^n0^m9^o-1^m9^p0^m9^n0^m10^o-1^m10^p0^m10^n0");
         this.qpack_rule("^A0^B0^C130^D130^q");
         this.qpack_rule("0^u0.4^t1\"^");
         this.qpack_rule("0^Q1");
         this.qpack_rule("0^R");
         this.qpack_rule("0^S");
         this.qpack_rule("0^Q-");
         this.qpack_rule("0^Q");
         this.qpack_rule("\" /><water x=\"");
         this.qpack_rule("\" forteam=\"");
         this.qpack_rule("^Ttrue");
         this.qpack_rule("true");
         this.qpack_rule("false");
         this.qpack_rule("^m2^o-1^m2^p0^m2^n0^)");
         this.qpack_rule("pistol");
         this.qpack_rule("rifle");
         this.qpack_rule("shotgun");
         this.qpack_rule("real_");
         this.qpack_rule_2param("","<q.");
         this.INTRUDER_DATABASE = new Object();
         this.INTRUDER_DATABASE_length = 0;
         this.ENABLE_LEVEL_LOGIC_ERRORS = false;
         this.trigger_loops = 0;
         this.level_variables = null;
         this.dm_slots_on_spawn = null;
         this.dm_max_guns_on_spawn = 0;
         this.session_variables = {};
         this.session_variables_source_id = {};
         this.pb2Bullet = {
            "csolver_GSPEED_atoms_from":0,
            "csolver_GSPEED_for_atoms_scale":1
         };
         this.pb2Bullet._DistanceFunctionPower2 = function(param1:*):*
         {
            var _loc2_:* = undefined;
            var _loc3_:* = undefined;
            _loc2_ = pb2Bullet.csolver_a + pb2Bullet.csolver_b * param1;
            _loc3_ = pb2Bullet.csolver_e + pb2Bullet.csolver_c * param1;
            return _loc2_ * _loc2_ + _loc3_ * _loc3_;
         };
         this.pb2Bullet._MovingSphereIntersection = function(param1:*, param2:*, param3:*, param4:*, param5:*):Boolean
         {
            var _loc6_:* = undefined;
            var _loc7_:* = undefined;
            var _loc8_:* = undefined;
            var _loc9_:* = undefined;
            pb2Bullet.csolver_arad_2 = param5 * param5;
            pb2Bullet.csolver_xx2 = param3 + (param1 - param3) * pb2Bullet.csolver_GSPEED_atoms_from;
            pb2Bullet.csolver_yy2 = param4 + (param2 - param4) * pb2Bullet.csolver_GSPEED_atoms_from;
            pb2Bullet.csolver_tox2 = (param1 - param3) * pb2Bullet.csolver_GSPEED_for_atoms_scale;
            pb2Bullet.csolver_toy2 = (param2 - param4) * pb2Bullet.csolver_GSPEED_for_atoms_scale;
            pb2Bullet.csolver_a = pb2Bullet.csolver_lx - pb2Bullet.csolver_xx2;
            pb2Bullet.csolver_e = pb2Bullet.csolver_ly - pb2Bullet.csolver_yy2;
            pb2Bullet.csolver_b = pb2Bullet.csolver_tox1 - pb2Bullet.csolver_tox2;
            pb2Bullet.csolver_c = pb2Bullet.csolver_toy1 - pb2Bullet.csolver_toy2;
            _loc6_ = pb2Bullet._DistanceFunctionPower2(0);
            if(pb2Bullet.csolver_b !== 0 || pb2Bullet.csolver_c !== 0)
            {
               _loc7_ = pb2Bullet._DistanceFunctionPower2(1);
               _loc8_ = (-2 * pb2Bullet.csolver_a * pb2Bullet.csolver_b - 2 * pb2Bullet.csolver_e * pb2Bullet.csolver_c) / (2 * pb2Bullet.csolver_b * pb2Bullet.csolver_b + 2 * pb2Bullet.csolver_c * pb2Bullet.csolver_c);
               if(_loc8_ > 0 && _loc8_ < 1)
               {
                  _loc9_ = pb2Bullet._DistanceFunctionPower2(_loc8_);
                  if(_loc9_ <= _loc6_ && _loc9_ <= _loc7_)
                  {
                     return pb2Bullet._GenerateResult(_loc8_,_loc9_);
                  }
               }
               if(_loc7_ < _loc6_)
               {
                  return pb2Bullet._GenerateResult(1,_loc7_);
               }
            }
            return pb2Bullet._GenerateResult(0,_loc6_);
         };
         this.pb2Bullet._GenerateResult = function(param1:*, param2:*):Boolean
         {
            if(param2 <= pb2Bullet.csolver_arad_2)
            {
               return true;
            }
         };
         this.atom_pos_buffer = [];
         this.TraceLine_lasttime = 0;
         this.tracep = 0;
         this.NO_PSI = false;
         this.START_CUSTOM_MAP = false;
         this.CUR_CUSTOM_MAP = "";
         if(this.loaderInfo.parameters.custommap != undefined)
         {
            this.START_CUSTOM_MAP = true;
         }
         this.CACHED_MAPS = new Array();
         this.CACHED_MAPS["c0a"] = "<q.^f-502^*199^A0^B0^C800^D800^q0^r1^F1^E3^k0^l-1\"^c-161^-6^.107^,310^T1\"^c-560^-43^.266^,410^T1\"^c-264^-5^.4^,150^T0^4-216^*150^i^/2^s-1^L3-178^-5^.18^,1150^T1^3-180^*19^.4^,13^_-197^*16^.19^,8^_-199^*19^.4^,140^T0\"^d-150^*300^u1^t0\" /><vehicle x=\"-43^*110^r-1^jveh_drone^A0^B0\" hpp=\"20^1-43^*69^A0^B0^C100^D100^q2^r-1^F5^E-2^k0^l-1^3-299^-20^.17^,1000^T1^3-630^-^.100^,500^T1^3-180^-3^.4^,4^_-261^-3^.4^,40^T0\" /><barrel x=\"-283^-30^jbar_orange^A0^B0\" /><barrel x=\"-279^-30^jbar_orange^A0^B0^3-202^*12^.7^,4^_-242^*19^.4^,14^_-259^*16^.19^,8^_-261^*19^.4^,130^T0\" /><vehicle x=\"-273^-20^r1^jveh_crate^A0^B0\" hpp=\"100\" /><vehicle x=\"-267^-20^r1^jveh_crate^A0^B0\" hpp=\"100\" /><barrel x=\"-182^-80^jbar_orange^A0^B0^3-222^*15^.4^,90^T0\"^d-280^*200^u1^t0\" /><barrel x=\"-236^*140^jbar_orange^A0^B0\" /><barrel x=\"-183^*180^jbar_orange^A0^B0^360^-47^.20^,73^_60^!1^.20^,18^_69^-51^.93^,69^_79^*33^.83^,480^T0^127^-51^A0^B0^C70^D70^q1^r-1^F2^E-1^k0^l-1^427^-20^ia^/^s-1^L267^-28^.9^,200^x^y0^z0^h4^I\" /><vehicle x=\"-502^*230^r1^jveh_capsule^A0^B10\" hpp=\"100^5-630^*240^.100^,2400^A1^B0^Y100^g0\"^d36^-0^u1^t0^3-10^-^.20^,18^_-50^-^.20^,180^T0^1-53^*59^A0^B0^C100^D100^q2^r-1^F5^E-2^k0^l-1\" /><vehicle x=\"-53^*100^r-1^jveh_drone^A0^B0\" hpp=\"20^4-53^*80^ivehminigun^s-1^L1-191^*159^A0^B0^C100^D100^q2^r-1^F7^E-1^k2^l-1^1-216^*119^A0^B0^C70^D70^q2^r-1^F8^E-1^k2^l-1^1-248^*159^A0^B0^C100^D100^q2^r1^F7^E-1^k0^l-1^4-42^*90^ivehminigun^s-1^L4-248^*180^i^&^#^s-1^L4-191^*180^i^&^#^s-1^L4-248^*190^i^/2^s-1^L4-191^*190^i^/2^s-1^L3-331^-20^.35^,300^T1^3-365^-31^.41^,310^T1^3-387^-40^.37^,270^T1^3-406^-50^.24^,130^T2^3-431^-63^.14^,290^T2^3-484^-73^.72^,190^T2^3-427^-69^.12^,140^T2^3-630^-80^.365^,400^T2\"^d-426^-260^u0.5^t0^3-480^-40^.60^,100^T1^3-630^-32^.80^,690^T2\"^d-477^-300^u0.3^t0\"^d-504^-300^u0.3^t0\"^d-399^-260^u0.5^t0^3-497^-62^.19^,250^T2^3-526^-70^.33^,250^T2^+-550^-74^.20^,60^g0^+-412^-74^.102^,60^g0^3-501^-67^.8^,80^T2^3-530^-73^.8^,110^T2^3-310^-70^.13^,140^T2^3-458^-46^.15^,80^T2^6-295^!40^jstone^U-1^O0^P0^2-301^!2^.14^,10^(H^2-372^-36^.9^,6^(H^6-368^-370^jstone2^U-1^O0^P0^2-298^-9^.12^,13^(H^2-300^!0^.14^,10^(H^2-370^-34^.10^,6^(H\" /><inf x=\"-502^*230^Zhero1_guns^;0^369^-8^.93^,14^_6^-50^.64^,700^T0^114^-51^A0^B0^C70^D70^q1^r-1^F2^E-1^k0^l-1^414^-20^ia^/^s-1^M0\"^c64^!6^.98^,44^_110^*90^.52^,700^T0^4-307^-690^jitem_grenade^s-1^L4-301^-690^jitem_grenade^s-1^L4-201^*130^jitem_grenade^s-1^L4-197^*200^jitem_grenade^s-1^M0\"^d-310^-510^u0.4^t1^7^G1^m1^o7^m1^p1^m1^nc1a^>\"^e31^-27^.37^,230^K0^J6^1-224^*119^A0^B0^C70^D70^q2^r-1^F8^E-1^k2^l-1^4-224^*140^i^/2^s-1^L4-264^-20^jitem_grenade^s-1^L4-276^!0^jitem_grenade^s-1^L3-263^*12^.5^,40^T0^4-264^-30^jitem_grenade^s-1^L3-60^-5^.91^,1150^T1^3-166^-30^.125^,900^T2^1-81^-201^A0^B0^C70^D70^q1^r-1^F2^E-1^k0^l-1^4-81^!90^ia^/^s-1^L1-70^-301^A0^B0^C70^D70^q1^r-1^F2^E-1^k0^l-1^4-70^-290^ia^/^s-1^L3-160^-27^.40^,10^_-90^-20^.10^,15^_-170^-24^.40^,10^_-173^-21^.33^,10^_-173^!8^.23^,10^_-140^-^.30^,100^T1^3-289^-5^.30^,1150^T1^3-100^-^.30^,100^T1\"^c-114^!^.18^,50^T1\"^d-105^*300^u1^t0\"^d-59^*300^u1^t0\" /><barrel x=\"-186^-80^jbar_orange^A0^B0^3-336^-53^.8^,130^T1^3-343^!8^.26^,160^T1\" /><barrel x=\"-532^-780^jbar_blue^A0^B0\" /><barrel x=\"-535^-780^jbar_blue^A0^B0^1-287^-91^A-5^B3^C0^D0^q1^r1^F2^E-1^k0^l-1^1-296^!31^A-8^B3^C0^D0^q1^r1^F2^E-1^k0^l-1^4-298^-80^ia^#^s-1^L4-311^!90^ia^#^s-1^L2-352^-20^.12^,13^(H^2-354^-21^.14^,10^(H^2-355^-23^.14^,10^(H^6-349^-250^jstone^U-1^O0^P0^3-225^*12^.10^,4^_-241^*12^.7^,40^T0\"^d-230^*500^u1^t0\"^d-207^*500^u1^t0\"^c-260^*15^.21^,40^T0\"^c-198^*15^.21^,4^_-270^!0^.100^,1100^T0\" /><barrel x=\"-255^-80^jbar_orange^A0^B0\" /><barrel x=\"-252^-80^jbar_orange^A0^B0^3-225^-3^.10^,4^_-222^-5^.4^,80^T0\"^c-177^-5^.4^,150^T0\"^c-260^*11^.83^,31^_-484^-64^.61^,140^T2^5110^*240^.52^,1500^A-2^B0^Y100^g0\" /><inf x=\"-482^*50^Znobase^;0\" />";
         this.CACHED_MAPS["c1a"] = "<q.^f35^*179^A0^B2^C800^D800^q0^r1^F1^E-1^k0^l-1^3-10^-5^.79^,1360^T0\"^c64^*26^.416^,146^_60^-2^.20^,38^_60^*34^.20^,18^_70^-6^.50^,13^_69^*37^.146^,14^_78^*80^.147^,480^T0^192^-61\" uid=\"#player^A0^B0^C70^D70^q1^r-1^F2^E-1^k0^l-1^1105^!\" uid=\"#player^A0^B0^C70^D70^q1^r-1^F2^E-1^k0^l-1^3100^-^.8^,10^_116^*31^.21^,17^_116^*3^.21^,120^T0^267^*17^.9^,200\" uid=\"#doori^x^y0^z0^h4^I\"^e58^*17^.7^,250\" uid=\"#region_193^K1^J2\"^e67^!^.9^,200\" uid=\"#region_195^K-1^J4^3181^*27^.34^,18^_135^-24^.33^,29^_133^-^.7^,6^_204^*53^.21^,136^_181^-4^.24^,6^_180^-2^.3^,8^_150^*14^.4^,20^_194^-24^.11^,6^_193^-22^.3^,80^T0^1186^-41\" uid=\"#player^A0^B0^C70^D70^q1^r-1^F2^E-1^k2^l-1^4186^!0\" uid=\"#gun_183^ia^#^s-1^L1137^-241\" uid=\"#player^A0^B0^C70^D70^q1^r1^F2^E-1^k3^l-1^1169^-241\" uid=\"#player^A0^B0^C140^D140^q1^r-1^F6^E-1^k3^l-1^4137^-210\" uid=\"#gun_183^ia^#^s-1^L3153^!^.9^,50^T0^1158^!1\" uid=\"#player^A0^B0^C70^D70^q1^r-1^F2^E-1^k2^l-1^4158^*20\" uid=\"#gun_183^ia^#^s-1^L3194^-44^.11^,6^_116^-6^.10^,7^_110^-33^.30^,70^T0\"^d97^*22^~d160^*22^~d179^-6^~d192^-26^~d95^-200^u0.4^t1^3120^-50^.10^,7^_103^-50^.7^,7^_60^-50^.30^,25^_60^-70^.108^,500^T0^4169^-210\" uid=\"#gun_183^ia^#2^s-1^L3143^!8^.5^,9^_166^-64^.4^,47^_166^-24^.4^,370^T0^1160^-691\" uid=\"#player^A0^B0^C70^D70^q1^r1^F2^E-1^k3^l-1^4160^-660\" uid=\"#gun_183^ia^#^s-1^M0\"^d192^-450^u0.4^t1^3193^-41^.3^,9^_194^-64^.16^,16^_193^-62^.3^,180^T0\"^d192^-660^u0.4^t1^1199^-641\" uid=\"#player^A0^B0^C70^D70^q1^r-1^F2^E-1^k2^l-1^4199^-610\" uid=\"#gun_183^ia^#^s-1^L2172^-25^.19^,50\" uid=\"#door2^x^y0^z0^h2^I\"^e172^-95^.19^,50\" uid=\"#regionT^K-1^J4^7^G1^m1^o0^m1^p1^m1^n2^m2^o28^m2^p13^m2^n4^m3^o28^m3^p13^m3^n5^m4^o28^m4^p14^m4^n6^m5^o43^m5^p0^m5^n0^m6^o-1^m6^p0^m6^n0^m7^o-1^m7^p0^m7^n0^m8^o-1^m8^p0^m8^n0^m9^o-1^m9^p0^m9^n0^m10^o-1^m10^p0^m10^n0\"^e143^-59^.12^,110\" uid=\"#region_334^K0^J1\" /><barrel x=\"153^*160\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"154^-220\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"150^-220\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"127^-480\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"131^-680\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"135^-680\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"95^-680\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"83^-480\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"203^-620\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"173^-230\" uid=\"#barrel^jbar_orange^A0^B0^354^!01^.143^,40^_191^-95^.45^,46^_240^-60^.40^,60^_220^*58^.50^,98^_315^*80^.95^,110^_310^-52^.10^,28^_270^-90^.140^,40^_340^-60^.70^,40^_369^*40^.111^,80^_372^-58^.30^,16^_376^-56^.30^,16^_380^-54^.30^,16^_384^-52^.96^,680^T0^+280^-62^.30^,280\" uid=\"#water^g0^+310^-80^.10^,100\" uid=\"#water^g0^+320^-62^.20^,280\" uid=\"#water^g0^1349^-601\" uid=\"#player^A0^B0^C70^D70^q1^r1^F2^E-1^k0^l-1^4349^-570\" uid=\"#gun_183^ia^#^s-1^L1283^-351\" uid=\"#player^A0^B0^C70^D70^q1^r1^F2^E-1^k0^l-1^4283^-320\" uid=\"#gun_183^ia^#^s-1^L1254^-601\" uid=\"#player^A0^B0^C70^D70^q1^r1^F2^E-1^k0^l-1^4254^-570\" uid=\"#gun_183^ia^#^s-1^M0\"^d245^-41^~d266^-41^~d290^-89^~d330^-89^~d380^-410^u0.4^t1^3131^-28^.6^,70^T0^1108^-501\" uid=\"#player^A0^B0^C70^D70^q1^r-1^F2^E-1^k3^l-1^4108^-470\" uid=\"#gun_183^ia^#^s-1^L492^-30\" uid=\"#gun_183^ia^/^s-1^L4105^*30\" uid=\"#gun_183^ia^/^s-1^L3210^*80^.60^,50^T0^1235^*579\" uid=\"#player_305^A0^B0^C70^D70^q1^r-1^F2^E-1^k0^l-1^4236^*610\" uid=\"#gun_183^ia^#^s-1^M0\"^e175^-23^.5^,20\" uid=\"#region_307^K-1^J4\"^e183^-23^.6^,20\" uid=\"#region_308^K-1^J4^1249^*579\" uid=\"#player_305B^A0^B0^C70^D70^q1^r1^F2^E-1^k0^l-1^4250^*610\" uid=\"#gun_183^ia^#^s-1^M0\"^e122^-43^.6^,50\" uid=\"#region_311^K-1^J4^3267^-35^.17^,60^T0^174^-501\" uid=\"#player^A0^B0^C140^D140^q1^r1^F6^E-1^k0^l-1^475^-470\" uid=\"#gun_183^ia^#2^s-1^M0\" /><inf x=\"35^*210\" uid=\"#engine_mark^Zhero1_guns^;0^3-60^*40^.91^,1810^T1^531^*70^.29^,400\" uid=\"#pusher^A0^B2^Y100^g0^5-60^*70^.91^,300\" uid=\"#pusher_408^A2^B0^Y100^g0^560^*70^.18^,360\" uid=\"#pusher_408^A-2^B0^Y100^g0\"^d36^*450^u1^t0^7^G1^m1^o0^m1^p0^m1^n1^>^1277^-601\" uid=\"#player^A0^B0^C140^D140^q1^r-1^F6^E-1^k0^l-1^4278^-570\" uid=\"#gun_183^ia^#2^s-1^M0\"^e387^-39^.63^,160\" uid=\"#region_462^K2^J6^7^G1^m1^o7^m1^p1^m1^nc2a^>^2400^-39^.3^,140\" uid=\"#door^x^y0^z0^h1^I^383^-60^.11^,15^_77^-33^.6^,7^_100^-47^.5^,10^_191^-76^.4^,40^T0\"^c69^*16^.5^,180^T4\"^c174^-27^.1^,710^T4\"^c188^-27^.1^,710^T4^3260^*80^.70^,100^_286^!1^.14^,190^T0^1275^-351\" uid=\"#player^A0^B0^C70^D70^q1^r1^F2^E-1^k0^l-1^4275^-320\" uid=\"#gun_183^ia^#^s-1^L3310^!^.10^,370^T0\" /><barrel x=\"272^-330\" uid=\"#barrel^jbar_orange^A0^B0\"^e206^-78^.40^,210\" uid=\"#region_277^K3^J6^7^G-1^m1^o43^m1^pRun, then only hold your jump key on walls to perform wall jumps.^m1^n0^>\"^e137^-52^.13^,200\" uid=\"#region_2863^K4^J6^7^G1^m1^o43^m1^pPress the E key to activate panel boards.^m1^n0^>\"^e217^-37^.30^,260\" uid=\"#region_278^K5^J6^7^G-1^m1^o43^m1^p0^m1^n0^>\"^d149^-640^u0.4^t0^3168^-48^.4^,4^_166^-95^.6^,9^_230^-99^.70^,42^_180^*27^.3^,210^T0^6315^-520\" uid=\"#decor^jray_floor^U-1^O0^P0^6315^-380\" uid=\"#decor^jray_ceil^U-1^O0^P0^5314^-35^.2^,190\" uid=\"#pusher_613^A0^B0^Y0^g-1000\"^d315^-390^u0.2^t0\"^d315^-510^u0.2^t0^4202^-30\" uid=\"#gun_156^jitem_grenade^s-1^L4197^-30\" uid=\"#gun_156^jitem_grenade^s-1^M0\" />";
         this.CACHED_MAPS["c2a"] = "<q.^f-98^*479^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c-200^*90^.470^,276^_-200^*100^.133^,40^_-200^*48^.141^,180^T0^2-112^*73^.3^,140^x^y0^z0^h10^I^3-81^*100^.91^,23^_-140^*40^.90^,20^_-3^*100^.43^,40^_-10^*48^.50^,18^_-20^*40^.80^,20^_10^*100^.50^,700^T0\" /><inf x=\"-98^*510^Zhero1_guns^;0\"^e-112^*61^.3^,140^K-1^J4^7^G1^m1^o0^m1^p0^m1^n0^>^9^G1^X0^W0\" /><barrel x=\"-57^*420^jbar_orange^A0^B0\" /><barrel x=\"-12^*420^jbar_orange^A0^B0\"^e-3^*61^.12^,140^K1^J1^2-50^*38^.30^,40^x^y0^z0^h4^I^3-20^-^.40^,20^_-90^-^.40^,20^_50^*100^.30^,190^_-200^*40^.80^,180^_-130^-40^.80^,20^_-20^-40^.80^,200^T0\"^e-50^-^.30^,40^K2^J5\"^d-10^*76^~d-60^*76^~d-49^*30^~d-21^*30^~d-49^!0^~d-21^!0^~d-49^-50^~d-21^-500^u0.4^t1^7^G1^m1^o0^m1^p1^m1^n2^>^7^G1^m1^o25^m1^p1^m1^n0^m2^o25^m2^p2^m2^n0^m3^o43^m3^pPress the Z or PageDown key to switch between slow and normal speed.^m3^n0^m4^o-1^m4^p0^m4^n0^$^a^G1^X3^W60^2-55^*10^.4^,110^x^y0^z0^h5^I^2-55^*21^.4^,110^x^y0^z0^h5^I^2-19^*10^.4^,110^x^y0^z0^h5^I^2-19^*21^.4^,110^x^y0^z0^h5^I^a^G1^X4^W120^7^G1^m1^o0^m1^p3^m1^n3^m2^o0^m2^p2^m2^n4^)^7^G1^m1^o0^m1^p5^m1^n5^m2^o0^m2^p4^m2^n6^)\"^e-55^*30^.4^,110^K-1^J4\"^e-55^*1^.4^,110^K-1^J4\"^e-19^*30^.4^,110^K-1^J4\"^e-19^*1^.4^,110^K-1^J4\"^d-80^*19^~d10^*19^~d49^!0^~d-91^!00^u0.4^t1^1-65^!^A0^B0^C140^D140^q1^r1^F6^E-1^k0^l-1^4-65^*30^ia^#2^s-1^L1-72^!^A0^B0^C100^D100^q1^r1^F2^E-1^k0^l-1^4-72^*30^ia^#^s-1^L1-7^!^A0^B0^C140^D140^q1^r-1^F6^E-1^k0^l-1^12^!^A0^B0^C100^D100^q1^r-1^F2^E-1^k0^l-1^4-7^*30^ia^#2^s-1^L42^*30^ia^#^s-1^L1-70^-401^A0^B0^C100^D100^q1^r-1^F2^E-1^k0^l-1^1-60^-401^A0^B0^C100^D100^q1^r-1^F2^E-1^k0^l-1^4-60^-370^ia^#^s-1^L4-70^-370^ia^#^s-1^L1-10^-401^A0^B0^C100^D100^q1^r1^F2^E-1^k0^l-1^1^-401^A0^B0^C100^D100^q1^r1^F2^E-1^k0^l-1^4-10^-370^ia^#^s-1^L4^-370^ia^#^s-1^L3-100^-^.15^,4^_-125^!6^.15^,8^_15^-^.15^,4^_39^!6^.15^,80^T0^1-118^-401^A0^B0^C100^D100^q1^r1^F2^E-1^k0^l-1^4-118^-370^ia^#^s-1^L148^-401^A0^B0^C100^D100^q1^r-1^F2^E-1^k0^l-1^448^-370^ia^#^s-1^M0\" /><barrel x=\"-111^!40^jbar_orange^A0^B0\" /><barrel x=\"40^!40^jbar_orange^A0^B0^3-130^-80^.80^,20^_-20^-80^.80^,20^_-20^!20^.60^,20^_-130^!20^.80^,200^T0\"^d-49^-90^~d-21^-90^~d-49^!30^~d-21^!300^u0.4^t1^2-55^-59^.4^,11^(I^2-55^-70^.4^,11^(I^2-55^-99^.4^,11^(I^2-55^!10^.4^,11^(I^2-19^!10^.4^,11^(I^2-19^-99^.4^,11^(I^2-19^-70^.4^,11^(I^2-19^-59^.4^,11^(I^3-200^!30^.130^,80^_-110^!70^.190^,40^_^!60^.70^,40^_^!30^.30^,20^_30^-90^.30^,35^_50^!44^.57^,47^_90^!24^.27^,30^_100^!30^.70^,61^_140^-70^.140^,110^_55^-70^.62^,320^T0^+40^!29^.50^,150^g0^+30^!40^.10^,100^g0^+40^!44^.10^,60^g0^+^!50^.50^,100^g0^+-70^!40^.70^,300^g0^+-50^!29^.30^,110^g0\"^d10^!51^~d10^!59^~d61^!24^~e-50^-80^.30^,90^K5^J6\"^e-50^!20^.30^,90^K6^J6^1-116^!201^A0^B0^C100^D100^q1^r1^F2^E-1^k0^l-1^4-116^!170^ia^#^s-1^L7^G1^m1^o28^m1^p11^m1^n9^m2^o28^m2^p11^m2^n10^)^8^G1^m1^o28^m1^p11^m1^n12^m2^o28^m2^p11^m2^n11^)\"^e-50^-69^.3^,30^K-1^J4\"^e-23^-69^.3^,30^K-1^J4\"^e-23^!09^.3^,30^K-1^J4\"^e-50^!09^.3^,30^K-1^J4^443^-390^jitem_grenade^s-1^L4-113^-390^jitem_grenade^s-1^L2117^-96^.23^,60^x^y0^z0^h3^I\"^e117^-70^.23^,60^K-1^J4\"^e93^!01^.23^,240^K8^J6\"^e118^!13^.21^,180^K7^J6\"^d118^-80^~d139^-80^~d139^!100^u0.4^t1^7^G1^m1^o0^m1^p14^m1^n13^m2^o22^m2^p8^m2^n1^)^7^G1^m1^o0^m1^p14^m1^n16^m2^o22^m2^p7^m2^n1^)\"^e117^!24^.23^,60^K-1^J4^1123^-961^A0^B0^C100^D100^q1^r-1^F2^E-1^k0^l-1^1135^-961^A0^B0^C100^D100^q1^r-1^F2^E-1^k0^l-1^4123^-930^ia^#^s-1^L4135^-930^ia^#^s-1^L3104^-64^.7^,9^_91^-47^.7^,11^_77^-49^.18^,6^_150^-60^.40^,14^_110^-35^.4^,5^_141^-40^.9^,5^_145^-64^.11^,100^T0^189^-491^A0^B0^C140^D140^q1^r1^F6^E-1^k0^l9^489^-460^irl^s-1^L370^*100^.110^,119^_164^*100^.116^,1300^T0\" /><barrel x=\"113^-680^jbar_orange^A0^B0\" /><barrel x=\"84^-470^jbar_orange^A0^B0\" /><barrel x=\"112^-330^jbar_orange^A0^B0\" /><barrel x=\"143^-380^jbar_orange^A0^B0\" /><barrel x=\"90^-680^jbar_orange^A0^B0\" /><barrel x=\"95^-680^jbar_orange^A0^B0\" /><barrel x=\"148^-620^jbar_orange^A0^B0^7^G1^m1^o0^m1^p15^m1^n17^>^2170^-29^.6^,320^x^y0^z0^h2^I\"^e170^!^.6^,320^K-1^J4\"^d99^-52^~d146^-20^~d116^-20^~e180^-30^.10^,300^K10^J6^7^G1^m1^o7^m1^p1^m1^nc3a^>^3112^-50^.11^,4^_135^-43^.9^,11^_110^-45^.4^,9^_131^-50^.9^,40^T0\"^c-112^*60^.3^,120^T4\"^c-55^*20^.4^,200^T4\"^c-19^*20^.4^,200^T4\"^c-19^-20^.4^,200^T4\"^c-55^-20^.4^,200^T4\"^c119^-72^.2^,560^T4\"^c136^-72^.2^,560^T4\"^c170^-30^.6^,300^T4\"^c-48^*37^.1^,1610^T4\"^c-23^*37^.1^,1610^T4\"^e-53^-50^.36^,170^K11^J6^7^G1^m1^o43^m1^p0^m1^n0^>\" />";
         this.CACHED_MAPS["c3a"] = "<q.^f-158^*99^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c392^*100^.115^,1550^T0\"^c-260^*50^.168^,58^_-260^-^.168^,80^_-260^*70^.170^,30^_-260^*10^.110^,200^T0^2-170^*41^.6^,32^(I\" /><vehicle x=\"-129^*160^r1^jveh_drone^A0^B0\" hpp=\"20\" /><inf x=\"-158^*140^Zhero1_guns^;0^3-120^-4^.180^,760^T1^1-3^-41^A0^B0^C100^D100^q1^r1^F2^E-1^k0^l-1^4-3^-20^ia^#^s1^L1-22^-41^A0^B0^C140^D140^q1^r1^F6^E-1^k0^l-1^4-22^-20^ia^#2^s1^L3150^-4^.250^,760^T1^350^!1^.115^,690^T2\"^c54^-5^.102^,130^T1^+60^-6^.90^,50^g0\"^d52^*300^u1^t0\"^d157^*300^u1^t0\"^d-70^*500^u1^t0^3250^*13^.20^,4^_248^-2^.4^,4^_248^*15^.4^,8^_268^*15^.7^,8^_268^-2^.4^,40^T0\"^c250^*29^.80^,40^_248^*32^.4^,8^_250^*30^.20^,4^_268^*32^.4^,80^T0^1266^*129^A0^B0^C300^D300^q2^r-1^F7^E-1^k0^l-1^1266^*299^A0^B0^C300^D300^q2^r-1^F7^E-1^k0^l-1^1254^-41^A0^B0^C150^D150^q2^r-1^F8^E-1^k0^l-1^4266^*330^irailgun^s-1^L4266^*160^irl^s-1^L4254^!0^i^&^#^s-1^L1266^-41^A0^B0^C150^D150^q2^r-1^F8^E-1^k0^l-1^4266^!0^i^&^#^s-1^L3308^-2^.4^,4^_328^-2^.4^,4^_305^*15^.7^,8^_328^*15^.4^,8^_308^*32^.4^,8^_328^*32^.4^,8^_310^*30^.20^,4^_310^*13^.20^,40^T0^1315^*129^A0^B0^C300^D300^q2^r-1^F7^E-1^k0^l-1^1315^*299^A0^B0^C300^D300^q2^r-1^F7^E-1^k0^l-1^4315^*330^irailgun^s-1^L1314^-41^A0^B0^C150^D150^q2^r-1^F8^E-1^k0^l-1^4314^!0^i^&^#^s-1^M0\"^d230^*400^u1^t0\"^d350^*400^u1^t0^3160^*2^.6^,9^_286^*7^.7^,13^_286^*45^.7^,20^_268^*47^.44^,4^_268^*47^.4^,6^_308^*47^.4^,60^T0\"^c270^*46^.40^,17^_282^-^.15^,6^_284^*4^.11^,70^T0^4255^*310^jitem_grenade^s-1^L4287^*480^jitem_grenade^s-1^L4325^*310^jitem_grenade^s-1^L4293^*480^jitem_grenade^s-1^L3390^-^.54^,80^_420^*4^.24^,30^_430^*8^.17^,18^_440^*12^.10^,92^_439^*30^.17^,5^_391^*27^.3^,7^_391^*40^.3^,7^_389^*105^.19^,69^_404^*27^.3^,7^_404^*40^.3^,7^_390^*24^.23^,7^_445^*50^.5^,11^_404^*120^.86^,760^T0^1396^*239^A0^B0^C300^D300^q2^r-1^F7^E-1^k0^l-1^4396^*270^irailgun^s-1^L1443^*299^A0^B0^C300^D300^q2^r-1^F7^E-1^k0^l-1^4443^*330^irailgun^s-1^L1411^*239^A0^B0^C300^D300^q2^r1^F7^E-1^k0^l-1^4411^*270^irailgun^s-1^L1409^!^A0^B0^C150^D150^q2^r-1^F8^E-1^k0^l-1^4409^*30^i^&^#^s-1^L1415^!^A0^B0^C150^D150^q2^r-1^F8^E-1^k0^l-1^1426^*39^A0^B0^C150^D150^q2^r-1^F8^E-1^k0^l-1^1436^*79^A0^B0^C150^D150^q2^r-1^F8^E-1^k0^l-1^4415^*30^i^&^#^s-1^L4436^*110^i^&^#^s-1^L2392^*18^.6^,19^(I\"^e392^-^.6^,190^K-1^J4\"^e380^*20^.23^,240^K0^J4^7^G1^m1^o0^m1^p1^m1^n0^>^3438^*32^.3^,70^T0\" /><barrel x=\"273^*170^jbar_orange^A0^B0\" /><barrel x=\"307^*170^jbar_orange^A0^B0\" /><barrel x=\"302^-20^jbar_orange^A0^B0\" /><barrel x=\"299^-20^jbar_orange^A0^B0\" /><barrel x=\"304^*490^jbar_orange^A0^B0\" /><barrel x=\"307^*490^jbar_orange^A0^B0\" /><barrel x=\"326^*150^jbar_orange^A0^B0^1452^*299^A0^B0^C150^D150^q2^r1^F8^E-1^k0^l-1\"^e490^*12^.10^,40^K2^J5^2450^*12^.10^,40^x^y0^z0^h3^I^3500^*100^.46^,180^_446^-50^.59^,300^T0\"^e490^*90^.10^,40^K-1^J4^7^G1^m1^o0^m1^p2^m1^n2^>\"^e451^*22^.8^,100^K1^J1^7^G1^m1^o0^m1^p2^m1^n3^>^1490^-31^A0^B0^C150^D150^q2^r-1^F8^E-1^k0^l-1^4490^-0^i^&^#^s-1^L3487^-3^.15^,50^T0^1498^-31^A0^B0^C150^D150^q2^r-1^F8^E-1^k0^l-1^4498^-0^i^&^#^s-1^L3455^*32^.3^,7^_487^*46^.3^,210^T0\"^e490^*70^.10^,200^K3^J6^7^G1^m1^o7^m1^p1^m1^nc4a^>\" /><barrel x=\"403^*260^jbar_orange^A0^B0\" /><barrel x=\"429^*60^jbar_orange^A0^B0\" /><barrel x=\"446^*320^jbar_orange^A0^B0\" /><barrel x=\"448^*320^jbar_orange^A0^B0^3448^-3^.12^,50^T0^1453^-31^A0^B0^C150^D150^q2^r-1^F8^E-1^k0^l-1^+450^!1^.50^,390^g10^4315^*160^irl^s-1^L4453^-0^irl^s-1^L4426^*70^irl^s-1^L4452^*330^irl^s-1^M0\"^d294^*28^~d285^*28^~d425^*43^~d471^*43^~d499^!0^~d451^!00^u0.4^t1^1-129^*119^A0^B0^C100^D100^q1^r1^F5^E-2^k0^l-1^4-129^*150^ivehminigl^s-1^M0\" /><vehicle x=\"45^*180^r-1^jveh_walker^A0^B0\" hpp=\"50^145^*149^A0^B0^C150^D150^q2^r-1^F8^E-2^k0^l-1^445^*170^ivehcannon^s-1^M1^5404^*190^.80^,700^A-3^B0^Y100^g0^3-260^*80^.160^,190^T0^5-200^*162^.100^,820^A3^B0^Y100^g0^445^*190^i^/2^s-1^L338^-8^.23^,180^T2^3149^-8^.23^,180^T2^1223^*149^A0^B0^C150^D150^q2^r-1^F8^E-2^k0^l-1\" /><vehicle x=\"223^*180^r-1^jveh_walker^A0^B0\" hpp=\"50^4223^*170^ivehcannon^s-1^M1^4223^*190^i^/2^s-1^L1-58^-41^A0^B0^C100^D100^q1^r1^F2^E-1^k0^l-1^1-47^-41^A0^B0^C100^D100^q1^r1^F2^E-1^k0^l-1^4-47^-20^ia^#^s1^L4-58^-20^ia^#^s1^M0\"^e-120^*15^.130^,240^K4^J6^7^G1^m1^o29^m1^p22^m1^n6^>^4103^!00^jitem_grenade^s-1^L491^!00^jitem_grenade^s-1^L3-94^*44^.4^,8^_-94^*4^.4^,110^T0\"^c392^*17^.6^,170^T4\"^c451^*10^.48^,10^T4\"^c498^*100^.1^,900^T4\"^c491^*100^.1^,900^T4^6494^-30^jantigravity0^U-1^O0^P0\"^e451^*6^.8^,100^K5^J1^7^G1^m1^o34^m1^p0^m1^nantigravity^m2^o36^m2^p2^m2^n-1^)^5490^*100^.10^,1040^A0^B0^Y0^g0^2489^-2^.10^,2^(H\"^e270^*42^.40^,150^K6^J6^7^G-1^m1^o43^m1^pPress the G or Ins0 key to throw grenades.^m1^n0^>\"^e352^*56^.18^,670^K7^J6^7^G-1^m1^o43^m1^p0^m1^n0^>\"^e426^*45^.17^,390^K8^J6^7^G-1^m1^o43^m1^pI\'m warning you, that stuff isn\'t water...^m1^n0^>\"^e489^*45^.13^,250^K9^J6^7^G-1^m1^o43^m1^p0^m1^n0^>\" />";
         this.CACHED_MAPS["c4a"] = "<q.^f5^-501^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c-175^*65^.295^,155^_10^-30^.110^,600^T0^2^-50^.10^,40^x^y0^z0^h3^I\"^e^-30^.10^,40^K-1^J4^9^G1^X0^W0^7^G1^m1^o0^m1^p0^m1^n0^>^310^*27^.110^,37^_22^-24^.4^,11^_22^-7^.4^,7^_44^-^.76^,40^_-30^*24^.50^,24^_-50^-^.30^,5^_-33^-27^.6^,13^_-120^-37^.106^,53^_-72^-31^.20^,9^_-120^-27^.30^,33^_-230^*30^.80^,120^_-111^-^.19^,5^_-120^*24^.19^,31^_-120^*24^.30^,7^_-101^*28^.21^,11^_-60^*28^.33^,11^_-30^*30^.20^,10^_-30^*58^.20^,10^_-50^*80^.64^,26^_10^*80^.110^,29^_-184^*54^.21^,33^_-184^*80^.34^,33^_-120^*80^.30^,330^T0^131^-301^A0^B0^C300^D300^q1^r-1^F7^E-1^k0^l-1^1-36^-351^A0^B0^C150^D150^q1^r1^F8^E-1^k0^l-1^1-41^-351^A0^B0^C150^D150^q1^r1^F8^E-1^k0^l-1^1-46^-351^A0^B0^C150^D150^q1^r1^F8^E-1^k0^l-1^1-77^-351^A0^B0^C300^D300^q1^r1^F7^E-1^k0^l-1^1-143^*49^A0^B0^C300^D300^q1^r1^F7^E-1^k0^l-1^4-143^*80^irl^s-1^L431^-270^irailgun^s-1^M0\" /><barrel x=\"40^-280^jbar_orange^A0^B0\" /><barrel x=\"37^-280^jbar_orange^A0^B0\" /><inf x=\"5^-470^Zhero1_guns^;0^1-85^!41^A0^B0^C300^D300^q1^r1^F7^E-1^k0^l-1^1-92^!^A0^B0^C300^D300^q1^r1^F7^E-1^k0^l-1^4-92^*30^irl^s-1^L1-46^!^A0^B0^C300^D300^q1^r-1^F7^E-1^k0^l-1^1-37^!^A0^B0^C300^D300^q1^r-1^F7^E-1^k0^l-1^4-46^*30^irailgun^s-1^L4-37^*30^irl^s-1^L3-110^-20^.8^,12^_-30^*20^.10^,27^_-82^*2^.7^,5^_-65^*2^.7^,5^_-93^!4^.29^,40^T0^1-78^*19^A0^B0^C300^D300^q1^r1^F7^E-1^k0^l-1^1-98^-271^A0^B0^C300^D300^q1^r1^F7^E-1^k0^l-1^4-98^-240^irl^s-1^L3-8^-27^.6^,6^_-160^*70^.18^,10^_-128^*70^.18^,100^T0^4-159^*310^jitem_grenade^s-1^L4-113^*250^jitem_grenade^s-1^L4-160^*810^jitem_grenade^s-1^L2-149^*5^.28^,40^x^y0^z0^h3^I^3-230^*110^.60^,940^T0^4-161^*810^jitem_grenade^s-1^M0\"^e-147^!4^.24^,150^K2^J6\"^e-149^-28^.28^,40^K-1^J4^3-100^*100^.10^,300^T0^5-230^*140^.60^,300^A2^B0^Y100^g0^5-50^*140^.30^,600^A-2^B0^Y100^g0^5-229^*196^.209^,560^A0^B2^Y100^g0^1-85^*279^A0^B0^C300^D300^q1^r-1^F7^E-1^k0^l-1^1-159^*299^A0^B0^C150^D150^q1^r1^F8^E-1^k0^l-1^1-113^*239^A0^B0^C150^D150^q1^r-1^F8^E-1^k0^l-1^1-49^*279^A0^B0^C300^D300^q1^r-1^F7^E-1^k0^l-1^1-36^*279^A0^B0^C300^D300^q1^r-1^F7^E-1^k0^l-1\"^e-149^*23^.28^,40^K3^J5^3-160^-60^.50^,300^T0^+-150^-35^.30^,250^g10\"^e-119^-6^.17^,220^K1^J6^7^G-1^m1^o0^m1^p1^m1^n2^m2^o19^m2^p1^m2^n0^m3^o20^m3^p2^m3^n0^m4^o-1^m4^p0^m4^n0^$^8^G-1^m1^o0^m1^p1^m1^n3^m2^o19^m2^p2^m2^n0^m3^o20^m3^p1^m3^n0^m4^o-1^m4^p0^m4^n0^$^4-85^!10^i^&^#^s-1^L4-78^*50^i^&^#^s-1^L4-85^*310^i^&^#^s-1^L4-49^*310^i^&^#^s-1^L4-36^*310^i^&^#^s-1^L239^*52^.10^,26^(I^2-81^*23^.22^,40^x^y0^z0^h10^I\"^e-59^*23^.22^,40^K-1^J4^7^G1^m1^o0^m1^p3^m1^n5^>^433^-290^jitem_grenade^s-1^L3-30^-30^.30^,600^T0\"^d-136^*800^u1^t0\"^d-80^*800^u0.5^t0\"^d-60^*800^u0.5^t0\"^d-4^!^~d-100^*10^~d-31^*10^~d-47^-6^~d-78^-4^~d^*530^u0.4^t1^4-77^-320^irailgun^s-1^L14^*239^A0^B0^C300^D300^q1^r-1^F7^E-1^k0^l-1^44^*290^irl^s-1^L7^G1^m1^o7^m1^p1^m1^nc5a^>\"^e30^*53^.9^,270^K4^J6\"^c1^-31^.1^,590^T4\"^c8^-31^.1^,590^T4\"^c-80^*23^.20^,40^T4\"^c-148^*22^.2^,530^T4\"^c-124^*22^.2^,530^T4\" />";
         this.CACHED_MAPS["c5a"] = "<q.^f-197^*699^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c71^*94^.129^,280^T0\"^c100^*38^.14^,220^T0\"^c-30^*98^.55^,430^T0\"^c-5^*55^.30^,560^T0\"^c-300^*100^.270^,104^_-270^*70^.90^,20^_-280^*110^.210^,160^T0^2-214^*95^.11^,26^(I^3-80^*110^.52^,30^_-70^*60^.40^,20^_-140^*30^.40^,50^_-110^*20^.80^,40^_-170^*30^.10^,50^_-200^*30^.10^,50^_-230^*30^.10^,50^_-170^*70^.18^,7^_-137^*66^.37^,19^_-160^*52^.26^,50^T0\" /><inf x=\"-197^*730^Zhero1_guns^;0^3-120^*69^.12^,19^_-73^*60^.6^,4^_-270^*30^.20^,50^_-280^*70^.20^,90^_-270^*10^.140^,30^_-156^*79^.11^,13^_-73^*30^.6^,200^T0^2-160^*12^.20^,32^(I^2-190^*12^.20^,32^(I^2-220^*12^.20^,32^(I^2-250^*12^.20^,32^(I^2-250^*29^.10^,40^x^y0^z0^h5^I^2-240^*29^.10^,40^x^y0^z0^h5^I^2-220^*29^.10^,40^x^y0^z0^h5^I^2-210^*29^.10^,40^x^y0^z0^h5^I^2-190^*29^.10^,40^x^y0^z0^h5^I^2-180^*29^.10^,40^x^y0^z0^h5^I^2-160^*29^.10^,40^x^y0^z0^h5^I^2-150^*29^.10^,40^x^y0^z0^h5^I\"^e-140^*29^.10^,40^K-1^J4\"^e-170^*29^.10^,40^K-1^J4\"^e-200^*29^.10^,40^K-1^J4\"^e-230^*29^.10^,40^K-1^J4\"^e-260^*29^.10^,40^K-1^J4\"^e-160^*27^.20^,40^K-1^J4\"^e-190^*27^.20^,40^K-1^J4\"^e-220^*27^.20^,40^K-1^J4\"^e-250^*27^.20^,40^K-1^J4\"^e-170^*40^.10^,110^K3^J1\"^e-200^*40^.10^,110^K2^J1\"^e-230^*40^.10^,110^K1^J1\"^e-260^*40^.10^,110^K0^J1^7^G1^m1^o0^m1^p5^m1^n4^m2^o0^m2^p6^m2^n3^m3^o0^m3^p4^m3^n8^m4^o-1^m4^p9^m4^n1^m5^o-1^m5^p9^m5^n0^m6^o-1^m6^p0^m6^n0^m7^o-1^m7^p0^m7^n0^m8^o-1^m8^p0^m8^n0^m9^o-1^m9^p0^m9^n0^m10^o-1^m10^p0^m10^n0^7^G1^m1^o0^m1^p7^m1^n3^m2^o0^m2^p8^m2^n2^m3^o0^m3^p3^m3^n7^m4^o-1^m4^p0^m4^n0^$^7^G1^m1^o0^m1^p9^m1^n2^m2^o0^m2^p10^m2^n1^m3^o0^m3^p2^m3^n6^m4^o32^m4^p4^m4^n1^m5^o32^m5^p2^m5^n1^m6^o33^m6^p4^m6^n0^m7^o33^m7^p2^m7^n0^m8^o43^m8^pThese prisoners are your allies now.^m8^n0^m9^o-1^m9^p0^m9^n0^m10^o-1^m10^p0^m10^n0^7^G1^m1^o0^m1^p11^m1^n1^m2^o0^m2^p12^m2^n0^m3^o0^m3^p1^m3^n5^m4^o-1^m4^p0^m4^n0^$^1-210^*119^A0^B0^C100^D100^q2^r1^F2^E-1^k2^l-1^1-178^*119^A0^B0^C300^D300^q3^r1^F8^E-1^k2^l-1^1-150^*119^A0^B0^C100^D100^q2^r1^F2^E-1^k2^l-1^1-182^*119^A0^B0^C300^D300^q3^r1^F8^E-1^k2^l-1^4-180^*300^i^/2^s-1^L4-180^*310^i^/2^s-1^L3-187^*55^.13^,50^T0^5-96^*59^.22^,390^A0^B-0.8^Y0^g0^5-74^*58^.4^,290^A-1^B0^Y0^g0^1-108^*299^A0^B0^C150^D150^q1^r1^F8^E-1^k0^l-1^1-121^*299^A0^B0^C300^D300^q1^r1^F7^E-1^k0^l-1^1-122^*659^A0^B0^C300^D300^q1^r-1^F7^E-1^k0^l-1^1-111^*699^A0^B0^C300^D300^q1^r-1^F7^E-1^k0^l-1^4-122^*690^irailgun^s-1^L1-242^*119^A0^B0^C140^D140^q2^r1^F6^E-1^k2^l-1^4-240^*300^i^/2^s-1^L4-121^*330^i^&^#^s-1^L4-108^*330^i^&^#^s-1^L1-143^*719^A0^B0^C300^D300^q1^r1^F7^E-1^k0^l-1^4-143^*740^i^&^#^s-1^L1-103^*299^A0^B0^C150^D150^q1^r1^F8^E-1^k0^l-1^4-103^*330^i^&^#^s-1^L1-60^*599^A0^B0^C300^D300^q1^r-1^F7^E-1^k0^l-1^4-60^*630^irl^s-1^L1-50^*599^A0^B0^C300^D300^q1^r-1^F7^E-1^k0^l-1^4-50^*630^irailgun^s-1^L1-233^*289^A0^B0^C150^D150^q1^r1^F8^E-1^k0^l-1^4-233^*320^i^&^#^s-1^L3-143^*57^.13^,10^_-150^*72^.9^,4^_-103^*60^.6^,40^T0^5-100^*58^.4^,110^A1^B0^Y0^g0^3-136^*99^.63^,13^_-84^*91^.8^,80^T0^2-40^*81^.5^,220^x^y0^z0^h6^I\"^e-50^*81^.10^,220^K4^J6^7^G1^m1^o0^m1^p13^m1^n14^m2^o43^m2^p0^m2^n0^)\"^e-40^*101^.5^,220^K-1^J4^3-40^*60^.40^,10^_20^*70^.6^,36^_20^*8^.6^,6^_-6^*53^.6^,19^_-6^*24^.6^,6^_-6^*8^.6^,6^_-38^*3^.188^,230^T1^1-14^*599^A0^B0^C300^D300^q1^r-1^F7^E-1^k0^l-1^4-14^*630^igl^s1^L1-2^*699^A0^B0^C300^D300^q1^r-1^F7^E-1^k0^l-1^4-2^*710^irailgun^s-1^L485^*710^irl^s-1^L322^*70^.18^,90^T0^660^*30^jship^U-1^O0^P0^5^*70^.20^,670^A0^B-0.45^Y0^g0^246^*10^.11^,7^(H^264^*7^.10^,4^(H^259^*6^.7^,3^(H^254^*8^.8^,5^(H^465^*80^iraygun^s0^L461^*90^irl^s0^L449^*110^jitem_grenade^s0^L457^*100^jitem_grenade^s0^L3-70^*58^.20^,48^_-33^*24^.3^,11^_-33^*45^.3^,150^T0\"^d-160^*93^~d-110^*85^~d-60^*79^~d12^*910^u1^t0\"^d-71^*40^~d-225^*49^~d-194^*49^~d-135^*46^~d-165^*620^u0.4^t1^1-36^*199^A0^B0^C300^D300^q1^r1^F7^E-1^k0^l-1^1-45^*199^A0^B0^C300^D300^q1^r1^F7^E-1^k0^l-1^4-36^*220^irailgun^s-1^L4-45^*220^irl^s-1^L133^*29^A0^B0^C150^D150^q1^r1^F8^E-1^k0^l-1^441^*50^i^&^#^s-1^L141^*29^A0^B0^C150^D150^q1^r1^F8^E-1^k0^l-1^433^*50^i^&^#^s-1^L4-111^*720^irailgun^s-1^L4-143^*750^i^/2^s-1^M0\"^d31^*170^u0.4^t0^170^*69^A0^B0^C150^D150^q1^r1^F8^E-1^k0^l-1^470^*90^i^&^#^s-1^M0\" /><barrel x=\"-49^*220^jbar_orange^A0^B0^3100^*20^.50^,30^_100^*70^.100^,36^_100^*24^.3^,11^_100^*45^.3^,150^T0^1106^*199^A0^B0^C300^D300^q1^r-1^F7^E-1^k0^l-1^370^*70^.36^,9^_110^*50^.90^,70^_-35^*99^.35^,90^T0\"^d-17^*310^u0.4^t0^3100^*110^.100^,20^_70^*99^.36^,90^T0^2120^*93^.5^,26^(I^320^*99^.20^,9^_-10^*70^.10^,140^T0\"^c25^*98^.14^,320^T0^470^*80^irailgun^s-1^L441^*40^irailgun^s-1^L433^*40^irailgun^s-1^L5-70^*176^.42^,660^A3^B0^Y100^g0^5100^*170^.42^,600^A-3^B0^Y100^g0^185^*699^A0^B0^C300^D300^q1^r-1^F7^E-1^k0^l-1^1-237^*289^A0^B0^C150^D150^q1^r1^F8^E-1^k0^l-1^4-237^*320^i^&^#^s-1^M0\"^e110^*92^.10^,250^K5^J6^7^G1^m1^o7^m1^p1^m1^nc6a^>^4106^*210^igl^s1^L4-36^*210^igl^s1^L453^*110^jitem_grenade^s0^L6-90^*200^jantigravity^U-1^O0^P0^6-80^*200^jantigravity^U-1^O0^P0^66^*30^jantigravity^U-1^O0^P0^614^*30^jantigravity^U-1^O0^P0\" /><inf x=\"-188^*750^Zshadowmap_size^;35\"^d56^*850^u1^t0^2-330^!0^.530^,40^(I^2-330^*110^.60^,160^(I\"^c-40^*80^.5^,200^T4\"^c-250^*28^.110^,20^T4\" />";
         this.CACHED_MAPS["c6a"] = "<q.^f-83^*299^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c-60^*9^.120^,240^T0\"^c-60^*130^.160^,1210^T0\"^c140^*10^.40^,500^T0\"^e-130^*114^.60^,240^K-1^J4^3-150^*30^.100^,70^_-150^*90^.100^,400^T0^2-90^*51^.5^,22^(I\" /><inf x=\"-83^*340^Zhero1_guns^;0^3-60^*80^.39^,16^_-20^*18^.23^,6^_-26^*20^.16^,8^_-20^*55^.10^,15^_40^*20^.100^,60^_-20^-^.68^,40^_35^*10^.20^,20^_-60^*9^.30^,190^T0^2-51^*53^.32^,20^x^y0^z0^h5^I\"^e-82^*53^.32^,20^K-1^J4^7^G1^m1^o0^m1^p1^m1^n1^>^143^*199^A0^B0^C400^D400^q3^r-1^F9^E-1^k0^l-1^1-47^*529^A0^B0^C400^D400^q3^r1^F9^E-1^k0^l-1^1-7^!^A0^B0^C400^D400^q3^r1^F9^E-1^k0^l-1^1-28^*529^A0^B0^C400^D400^q3^r1^F9^E-1^k0^l-1\"^e-70^*51^.10^,220^K0^J6^4-28^*550^irailgun^s-1^L443^*210^irailgun^s-1^L4-7^*10^irailgun^s-1^L4-47^*550^irailgun^s-1^L390^*57^.50^,180^T0^1-13^*199^A0^B0^C150^D150^q1^r1^F8^E-1^k0^l-1^4-13^*210^i^&^#^s-1^L1-20^*199^A0^B0^C300^D300^q1^r1^F7^E-1^k0^l-1^4-20^*210^irl^s-1^L319^*42^.5^,21^_-19^*44^.15^,4^_14^*44^.11^,4^_21^*83^.99^,5^_-55^*30^.20^,4^_-32^*15^.12^,30^T0^1-7^*439^A0^B0^C400^D400^q3^r1^F9^E-1^k0^l-1^117^*439^A0^B0^C400^D400^q3^r1^F9^E-1^k0^l-1^4-7^*450^irailgun^s-1^L417^*450^irailgun^s-1^L3-7^*42^.24^,1^_-43^*54^.9^,4^_19^*18^.5^,5^_-61^-3^.47^,37^_^*16^.5^,60^T0^1-19^!^A0^B0^C400^D400^q3^r-1^F9^E-1^k0^l-1^4-19^*10^irailgun^s-1^L3113^*61^.7^,7^_-14^*58^.2^,2^_-14^*64^.2^,2^_-14^*61^.2^,2^_23^*47^.2^,2^_23^*50^.2^,2^_20^*53^.5^,2^_-23^*67^.11^,20^T0\" /><vehicle x=\"56^*780^r1^jveh_rope^A0^B0\" hpp=\"100^323^*77^.2^,2^_23^*74^.2^,2^_23^*71^.2^,2^_-13^*80^.2^,2^_-13^*83^.2^,2^_-13^*86^.2^,2^_-13^*89^.2^,2^_-30^*94^.19^,40^T0\" /><vehicle x=\"-48^*820^r1^jveh_crate^A0^B0\" hpp=\"100^3^*110^.18^,5^_40^*110^.18^,5^_20^*94^.10^,16^_70^*94^.7^,13^_-60^*137^.50^,17^_70^*137^.121^,17^_75^*87^.6^,6^_75^*89^.4^,4^_79^*85^.4^,4^_-58^*110^.18^,40^T0^1-38^*799^A0^B0^C400^D400^q3^r1^F9^E-1^k0^l-1^4-38^*810^irl^s-1^L1-43^*1099^A0^B0^C400^D400^q3^r1^F9^E-1^k0^l-1^4-43^*1110^irl^s-1^L113^*1099^A0^B0^C400^D400^q3^r-1^F9^E-1^k0^l-1^413^*1110^irl^s-1^L187^*829^A0^B0^C400^D400^q3^r-1^F9^E-1^k0^l-1^487^*850^irl^s-1^L3113^*83^.7^,9^_110^*125^.81^,440^T0\"^e100^*100^.10^,180^K1^J1^7^G1^m1^o0^m1^p2^m1^n4^>^2114^*75^.5^,15^(I\"^e114^*89^.5^,150^K-1^J4^377^*34^.3^,4^_77^*58^.3^,40^T0^580^*58^.10^,380^A0^B-0.45^Y0^g0^377^*50^.3^,4^_77^*42^.3^,4^_-150^*137^.100^,23^_-70^*118^.20^,12^_-150^*123^.20^,40^_-120^*93^.10^,70^T0^4-115^*940^iplasmagun^s0^L3-100^*97^.6^,130^T0^2-69^*123^.4^,18^(I\"^e-69^*108^.4^,180^K3^J5\"^e-120^*108^.10^,150^K2^J6^7^G1^m1^o0^m1^p3^m1^n5^>^2-130^*90^.60^,24^(I^7^G1^m1^o0^m1^p4^m1^n0^>^5-60^*180^.50^,430^A3^B0^Y100^g0^570^*180^.50^,430^A-3^B0^Y100^g0^5-60^*220^.180^,400^A0^B3^Y100^g0^193^*829^A0^B0^C400^D400^q3^r-1^F9^E-1^k0^l-1^493^*850^irl^s-1^L3-120^*117^.10^,70^T0\"^d26^*420^u0.6^t1^3170^*137^.80^,1770^T0\"^d10^*1400^u0.5^t0\"^d30^*1400^u0.5^t0\"^d50^*1400^u0.5^t0\"^d-72^*49^~d-13^*39^~d-5^*11^~d-22^*11^~d130^*80^~d97^*770^u0.6^t1\"^d-9^*500^u0.6^t1\"^d19^*85^~d-118^*109^~d-112^*109^~d-55^*105^~c-136^*120^.76^,400^T0\"^c100^*130^.20^,1200^T0\"^c120^*90^.60^,800^T0\"^c-150^*60^.90^,400^T0^2-203^*137^.53^,87^(I\" /><barrel x=\"-27^*170^jbar_orange^A0^B0\" /><barrel x=\"7^*20^jbar_orange^A0^B0\" /><barrel x=\"11^*20^jbar_orange^A0^B0\" /><barrel x=\"1^*200^jbar_orange^A0^B0\" /><barrel x=\"-14^*960^jbar_orange^A0^B0\" /><barrel x=\"-18^*960^jbar_orange^A0^B0\" /><barrel x=\"108^*850^jbar_orange^A0^B0\" /><barrel x=\"105^*850^jbar_orange^A0^B0\" /><barrel x=\"-48^*110^jbar_orange^A0^B0\" /><barrel x=\"61^*220^jbar_orange^A0^B0^3130^*57^.20^,97^_90^*34^.3^,4^_90^*42^.3^,40^T0\" /><barrel x=\"105^*220^jbar_orange^A0^B0\" /><barrel x=\"102^*220^jbar_orange^A0^B0^3115^*24^.5^,70^T0^1124^*199^A0^B0^C400^D400^q3^r-1^F9^E-1^k0^l-1^4124^*210^irailgun^s-1^L685^*200^jantigravity^U-1^O0^P0^1129^*569^A0^B0^C400^D400^q3^r-1^F9^E-1^k0^l-1^1133^*569^A0^B0^C400^D400^q3^r-1^F9^E-1^k0^l-1^1137^*569^A0^B0^C400^D400^q3^r-1^F9^E-1^k0^l-1\"^e149^*30^.22^,270^K4^J6^7^G1^m1^o7^m1^p1^m1^nc7a^>\"^c-50^*53^.30^,20^T4\"^c-69^*106^.4^,160^T4\"^c-129^*113^.2^,240^T4\"^c-73^*113^.2^,240^T4\"^c-91^*113^.2^,240^T4\"^c-107^*113^.2^,240^T4\"^c114^*74^.5^,130^T4^3-10^*89^.29^,20^T0\"^e49^*78^.14^,280^K5^J6^7^G-1^m1^o43^m1^pPress the Left and Right key to swing ropes. Press E or X to release yourself from it.^m1^n0^>\"^e21^*80^.10^,420^K6^J6^7^G-1^m1^o43^m1^p0^m1^n0^>\"^e85^*80^.10^,640^K6^J6\"^e28^*44^.61^,100^K6^J6\" />";
         this.CACHED_MAPS["c7a"] = "<q.^f-64^*1109^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c-100^*190^.250^,220^_-150^*60^.120^,120^_-40^*200^.20^,90^_7^*74^.28^,4^_105^*60^.65^,100^_86^*120^.20^,20^_114^*81^.56^,31^_-50^*200^.15^,95^_-85^*87^.31^,70^T0^5-70^*160^.20^,400^A0^B0^Y100^g0\" /><inf x=\"-64^*1150^Zhero1_guns^;0^320^*160^.30^,40^_-101^*200^.321^,20^_100^*150^.50^,10^_130^*194^.90^,34^_-40^*87^.20^,7^_-30^*90^.20^,6^_-60^*66^.20^,12^_-46^*63^.10^,11^_-40^-20^.210^,40^_90^*170^.20^,30^_-150^*160^.80^,80^_-40^*51^.20^,51^_90^*51^.20^,550^T0^+-30^!^.135^,190^g0^3-24^*40^.74^,8^_60^*40^.18^,8^_32^*14^.26^,4^_30^*22^.4^,12^_^-^.30^,4^_58^-^.35^,4^_56^*14^.4^,7^_^*15^.4^,25^_^*39^.4^,9^_26^!4^.4^,8^_56^-^.4^,80^T0^6-13^*400^jantigravity^U-1^O0^P0^61^*400^jantigravity^U-1^O0^P0^615^*400^jantigravity^U-1^O0^P0^629^*400^jantigravity^U-1^O0^P0^643^*400^jantigravity^U-1^O0^P0^669^*400^jantigravity^U-1^O0^P0^683^-0^jantigravity^U-1^O0^P0^669^-0^jantigravity^U-1^O0^P0^623^-0^jantigravity^U-1^O0^P0^3-12^*4^.13^,40^T0^6-6^*40^jantigravity^U-1^O0^P0^637^-200^jantigravity^U-1^O0^P0^5-20^*52^.69^,120^A0^B-1^Y0^g0^315^*90^.9^,20^_46^*90^.9^,20^_20^*100^.30^,14^_44^*74^.5^,40^T0^561^*52^.17^,120^A0^B-1^Y0^g0^560^*24^.18^,240^A0^B-1^Y0^g0^516^*24^.14^,240^A0^B-1^Y0^g0^5-11^*24^.11^,200^A0^B-1^Y0^g0^530^*2^.14^,220^A0^B-1^Y0^g0^3-29^*117^.19^,50^T0^427^*750^iplasmagun^s0^L3130^*130^.40^,60^_139^*150^.81^,1300^T0^6123^*810^jantigravity^U-1^O0^P0^5114^*140^.16^,590^A0^B-0.45^Y0^g0^3110^*76^.14^,21^_45^*126^.21^,60^T0^262^*144^.3^,18^(I^656^*1260^jantigravity^U-1^O0^P0^361^*141^.5^,40^T0\"^e62^*154^.3^,180^K-1^J4^7^G1^m1^o0^m1^p0^m1^n0^>\"^e63^-6^.17^,130^K0^J1^3-30^*170^.55^,200^T0^550^*163^.11^,370^A0^B-0.45^Y0^g0^1-34^*869^A0^B0^C150^D150^q1^r1^F4^E-1^k0^l-1^4-23^*930^ia^#2^s-1^L1-23^*899^A0^B0^C150^D150^q1^r1^F4^E-1^k0^l-1^3-150^*90^.60^,700^T0^1-68^*599^A0^B0^C150^D150^q1^r1^F4^E-1^k0^l-1^110^*739^A0^B0^C150^D150^q1^r-1^F4^E-1^k0^l-1^1-26^*509^A0^B0^C150^D150^q1^r1^F4^E-1^k0^l-1^1-13^*1169^A0^B0^C150^D150^q1^r1^F4^E-1^k0^l-1^310^*125^.19^,50^T0^130^*999^A0^B0^C150^D150^q1^r-1^F4^E-1^k0^l-1^322^*108^.6^,100^T0^129^*1599^A0^B0^C150^D150^q1^r1^F4^E-1^k0^l-1^135^*1599^A0^B0^C150^D150^q1^r1^F4^E-1^k0^l-1^3-60^*90^.4^,40^T0\"^d-48^*76^~d1^*135^~d37^*112^~d20^*60^~d55^*15^~d-19^*25^~d45^*9^~d18^-5^~d83^-5^~d-16^!90^u0.4^t1^361^*160^.35^,170^T0\"^d18^*176^~d65^*1700^u0.4^t1^4-34^*900^ia^#2^s-1^L4-68^*630^ia^#2^s-1^L4-26^*540^ia^#2^s-1^L410^*770^ia^#2^s-1^L4-13^*1190^ia^#2^s-1^L429^*1620^ia^#2^s-1^L435^*1620^ia^#2^s-1^L431^*1020^ia^#2^s-1^L372^*76^.20^,6^_50^*86^.12^,6^_72^*106^.20^,12^_67^*100^.20^,60^T0^183^*1059^A0^B0^C400^D400^q1^r-1^F9^E-1^k0^l-1^1137^*1299^A0^B0^C150^D150^q1^r1^F4^E-1^k0^l-1^4137^*1320^ia^#2^s-1^L377^*110^.4^,7^_-15^*74^.15^,4^_12^*82^.8^,120^T0^1-6^*739^A0^B0^C150^D150^q1^r-1^F4^E-1^k0^l-1^4-6^*770^ia^#2^s-1^M0\"^d104^*870^u0.4^t1^177^*759^A0^B0^C400^D400^q1^r1^F9^E-1^k0^l-1^185^*759^A0^B0^C400^D400^q1^r1^F9^E-1^k0^l-1^1100^*1199^A0^B0^C400^D400^q1^r-1^F9^E-1^k0^l-1^578^*40^.12^,400^A0^B-1^Y0^g0\"^c150^*170^.70^,300^T0^113^*1699^A0^B0^C150^D150^q1^r1^F4^E-1^k0^l-1^413^*1710^ia^#2^s-1^L4-6^*760^irl^s-1^L4-17^*1710^jitem_grenade^s-1^L4-12^*1710^jitem_grenade^s-1^L417^*1260^jitem_grenade^s-1^L415^*1260^jitem_grenade^s-1^L432^*750^jitem_grenade^s-1^M0\"^e140^*167^.76^,230^K1^J6^7^G1^m1^o7^m1^p1^m1^nc8a^>^483^*1110^irailgun2^s1^M2^4100^*1250^irailgun2^s1^M2^477^*810^irailgun2^s1^M2^485^*810^irailgun2^s1^M2^1130^*1499^A0^B0^C150^D150^q1^r-1^F4^E-1^k0^l-1^4130^*1520^irl^s-1^M0\" />";
         this.CACHED_MAPS["c8a"] = "<q.^f53^*139^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c41^*100^.34^,300^T0\"^c41^*70^.16^,3100^T0\"^c63^*70^.147^,3100^T0^7^G1^m1^o0^m1^p#door_left^m1^n#door_left_open^>\"^e53^*16^.14^,110^K1^J1^250^*6^.20^,50^x^y0^z0^h8^I\"^e50^-225^.20^,50^K-1^J4^7^G1^m1^o0^m1^p0^m1^n1^>^3-30^-230^.310^,40^_75^-201^.81^,5^_150^!80^.13^,30^_120^!20^.37^,7^_75^!03^.23^,13^_96^!50^.37^,4^_120^!45^.17^,5^_123^!03^.36^,7^_193^*40^.87^,2900^T0^8^G-1^m1^o0^m1^p2^m1^n4^m2^o19^m2^p2^m2^n0^m3^o20^m3^p3^m3^n0^m4^o-1^m4^p0^m4^n0^$^3115^-70^.80^,100^T0\"^e137^!45^.13^,90^K8^J5^373^-50^.27^,5^_114^-50^.46^,5^_164^-65^.15^,7^_173^-60^.22^,12^_78^-40^.13^,14^_122^-26^.15^,8^_127^-21^.12^,9^_132^!6^.9^,23^_77^!1^.31^,10^_137^!1^.58^,10^_78^*14^.51^,8^_-30^*100^.80^,350^_70^-225^.93^,250^T0\"^d60^-2120^u0.3^t1^370^!00^.10^,110^_70^-64^.10^,320^T0\" /><inf x=\"53^*170^Zhero1_guns^;0^2101^!05^.19^,50^x^y0^z0^h5^I^376^!45^.25^,9^_134^!87^.19^,17^_128^!71^.9^,330^T0^+80^!80^.48^,210^g0^+90^!76^.38^,40^g0^374^!71^.16^,90^T0^484^!700^jitem_grenade^s-1^L487^!700^jitem_grenade^s-1^M0\"^e78^!51^.13^,250^K7^J1\"^e163^!80^.30^,70^K-1^J4\"^e163^-225^.30^,50^K-1^J4\"^e120^-212^.42^,140^K3^J6\"^e164^-211^.12^,200^K2^J6^7^G-1^m1^o0^m1^p2^m1^n5^m2^o19^m2^p3^m2^n0^m3^o20^m3^p2^m3^n0^m4^o-1^m4^p0^m4^n0^$^2163^-205^.30^,50^x^y0^z0^h6^I\"^e139^!08^.10^,140^K4^J1^7^G1^m1^o0^m1^p1^m1^n9^>\"^e101^!45^.19^,50^K-1^J4\"^e176^!67^.15^,140^K5^J1^7^G-1^m1^o0^m1^p2^m1^n5^m2^o19^m2^p2^m2^n0^m3^o20^m3^p3^m3^n0^m4^o-1^m4^p0^m4^n0^$\"^e137^!78^.13^,90^K6^J5^7^G-1^m1^o0^m1^p3^m1^n2^>^7^G1^m1^o0^m1^p3^m1^n11^>\"^e128^!32^.9^,130^K7^J1^2137^!45^.13^,90^x^y0^z0^h3^I^377^-221^.22^,6^_148^*12^.18^,6^_76^!30^.22^,60^T0^1187^-2051^A0^B0^C300^D300^q2^r-1^F7^E-1^k0^l-1^370^-7^.10^,530^T0\"^c57^*70^.6^,510^T0\"^c57^*17^.6^,440^T0\"^c57^-29^.6^,440^T0\"^c57^-75^.6^,440^T0\"^c57^!21^.6^,440^T0\"^c57^!67^.6^,440^T0\"^c57^-213^.6^,270^T0\"^d60^*180^u0.3^t1\"^d60^-280^u0.3^t1\"^d60^-740^u0.3^t1\"^d60^!200^u0.3^t1\"^d60^!660^u0.3^t1^370^*100^.10^,1030^T0\"^d110^-207^~d153^-2110^u0.4^t1^4187^-2030^irailgun2^s2^M2\" /><barrel x=\"106^-2230^jbar_orange^A0^B0\" /><barrel x=\"109^-2230^jbar_orange^A0^B0^3105^-7^.3^,5^_101^*100^.179^,66^_75^*100^.20^,660^T0^595^*100^.6^,860^A0^B-1.5^Y100^g0^5101^*30^.4^,160^A-0.5^B-1^Y100^g0^591^*30^.4^,160^A0.5^B-1^Y100^g0\"^d120^*290^u0.4^t1^698^*140^jantigravity^U-1^O0^P0^377^*40^.14^,10^_105^*40^.93^,100^T0^2101^*40^.5^,7^(I^2102^*36^.5^,4^(I^2103^*35^.5^,4^(I^290^*40^.5^,7^(I^289^*36^.5^,4^(I^288^*35^.5^,4^(I^2104^*34^.2^,4^(I^290^*34^.2^,4^(I^3180^*5^.18^,22^_88^-216^.16^,11^_120^!45^.13^,90^T0\" /><inf x=\"56^*1030^Zsky^;3\"^d86^!23^~d134^!510^u0.4^t1^7^G-1^m1^o22^m1^p7^m1^n1^>^3117^-31^.20^,8^_146^-35^.10^,4^_154^-32^.3^,7^_172^-3^.12^,13^_185^*20^.12^,4^_105^*7^.3^,50^T0\"^d110^*50^u0.4^t1^3154^!7^.3^,70^T0\"^d159^-22^~d104^-220^u0.4^t1^3185^-40^.10^,230^T0^1152^-351^A0^B0^C200^D200^q2^r-1^F8^E-1^k0^l-1^4152^-340^iplasmagun^s2^L1130^-501^A0^B0^C200^D200^q2^r-1^F8^E-1^k0^l-1^1169^-651^A0^B0^C200^D200^q2^r-1^F8^E-1^k0^l-1^197^-501^A0^B0^C300^D300^q2^r1^F7^E-1^k0^l-1^4130^-480^iplasmagun^s2^L497^-480^iplasmagun^s2^L4169^-640^iplasmagun^s2^L1189^-401^A0^B0^C300^D300^q2^r-1^F7^E-1^k0^l-1^4189^-380^irailgun^s-1^L1182^-601^A0^B0^C300^D300^q2^r-1^F7^E-1^k0^l-1^4182^-590^irailgun^s-1^L4182^-580^irl^s-1^L4189^-370^irl^s-1^L3114^-36^.8^,40^T0^1102^!11^A0^B0^C200^D200^q2^r1^F8^E-1^k0^l-1^489^-90^irl^s-1^L489^!00^irailgun^s-1^L189^!11^A0^B0^C200^D200^q2^r1^F8^E-1^k0^l-1^4102^!00^irailgun^s-1^L4102^-90^irl^s-1^L1155^!11^A0^B0^C200^D200^q2^r-1^F8^E-1^k0^l-1^1149^*119^A0^B0^C300^D300^q2^r-1^F7^E-1^k0^l-1^4155^!00^iplasmagun^s2^L4149^*130^iplasmagun^s2^L1184^*49^A0^B0^C300^D300^q2^r-1^F7^E-1^k0^l-1^1187^*199^A0^B0^C300^D300^q2^r-1^F7^E-1^k0^l-1^4184^*60^iplasmagun^s2^L4187^*210^iplasmagun^s2^M0\" /><barrel x=\"125^-240^jbar_orange^A0^B0\" /><barrel x=\"130^!90^jbar_orange^A0^B0\" /><barrel x=\"135^!40^jbar_orange^A0^B0\" /><barrel x=\"93^-480^jbar_orange^A0^B0\" /><barrel x=\"119^-680^jbar_orange^A0^B0\" /><barrel x=\"145^-680^jbar_orange^A0^B0\" /><barrel x=\"148^-680^jbar_orange^A0^B0\" /><barrel x=\"156^-480^jbar_orange^A0^B0\" /><barrel x=\"162^-680^jbar_orange^A0^B0\" /><barrel x=\"156^-300^jbar_orange^A0^B0\" /><barrel x=\"89^-380^jbar_orange^A0^B0^197^!451^A0^B0^C200^D200^q2^r1^F8^E-1^k0^l-1^191^!451^A0^B0^C200^D200^q2^r1^F8^E-1^k0^l-1^191^!301^A0^B0^C200^D200^q2^r1^F8^E-1^k0^l-1^197^!301^A0^B0^C200^D200^q2^r1^F8^E-1^k0^l-1^1124^!201^A0^B0^C200^D200^q2^r-1^F8^E-1^k0^l-1^1133^!201^A0^B0^C200^D200^q2^r-1^F8^E-1^k0^l-1^1143^!451^A0^B0^C200^D200^q2^r-1^F8^E-1^k0^l-1^1127^!031^A0^B0^C200^D200^q2^r-1^F8^E-1^k0^l-1^497^!430^i^/2^s-1^L497^!280^i^/2^s-1^L4124^!190^i^/2^s-1^L4133^!190^i^&^#^s-1^L491^!290^i^&^#^s-1^L491^!430^i^&^#^s-1^L4143^!430^i^&^#^s-1^L396^!05^.4^,11^_121^!05^.4^,50^T0\" /><vehicle x=\"67^*90^r1^jveh_crate^A0^B0\" hpp=\"100^468^*80^jitem_grenade^s-1^L467^*100^jitem_grenade^s-1^M0\" /><inf x=\"63^*1030^Zshadowmap_size^;35^3107^!67^.5^,7^_150^!03^.13^,63^_160^!03^.40^,57^_73^-76^.57^,140^T0^572^-96^.6^,40^A-1^B0^Y100^g0^194^!031^A0^B0^C300^D300^q2^r-1^F7^E-1^k0^l-1^494^!000^iplasmagun^s2^L4127^!000^iplasmagun^s2^M0\" /><barrel x=\"101^-740^jbar_orange^A0^B0\" /><barrel x=\"104^-740^jbar_orange^A0^B0^3170^-76^.10^,8^_170^!01^.10^,80^T0^6175^!000^jteleport^U-1^O0^P0^6175^-850^jteleport2^U-1^O0^P0\"^d175^-85^~d175^!000^u0.4^t1^383^-74^.10^,8^_83^-51^.10^,80^T0^688^-600^jteleport2^U-1^O0^P0^688^-730^jteleport^U-1^O0^P0\"^d88^-73^~d88^-60^~e84^-60^.8^,130^K-1^J4\"^e171^-83^.8^,190^K9^J2^7^G-1^m1^o30^m1^p14^m1^n13^>^377^!7^.14^,130^T0^1151^!031^A0^B0^C200^D200^q2^r-1^F8^E-1^k0^l-1^1168^!031^A0^B0^C200^D200^q2^r-1^F8^E-1^k0^l-1^4151^!000^iplasmagun^s2^L4168^!000^iplasmagun^s2^L4124^!170^iplasmagun^s2^L4133^!170^irailgun2^s2^M2^4149^*150^irl^s-1^L4187^*230^irl^s-1^L4184^*80^irl^s-1^L4155^-80^irl^s-1^M0\" /><barrel x=\"170^-90^jbar_orange^A0^B0\" /><barrel x=\"82^*160^jbar_orange^A0^B0\" /><barrel x=\"85^*160^jbar_orange^A0^B0\" /><barrel x=\"88^*160^jbar_orange^A0^B0\" /><barrel x=\"107^*160^jbar_orange^A0^B0\"^d95^!55^~c82^*100^.32^,300^T0\"^e87^*105^.21^,630^K10^J6^7^G1^m1^o7^m1^p1^m1^nc9a^>^550^*100^.20^,400^A0^B0^Y100^g0^494^!020^irailgun2^s2^M2^3107^!56^.5^,70^T0\"^c52^*58^.1^,2860^T4\"^c190^!82^.1^,460^T4\"^c165^!82^.1^,460^T4\"^c143^!48^.2^,360^T4\"^c103^!07^.1^,410^T4\"^c67^*58^.1^,2860^T4\"^c117^!07^.1^,410^T4^396^!13^.5^,20^T0\" />";
         this.CACHED_MAPS["c9a"] = "<q.^f-118^-2031^A4^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c-210^!80^.150^,600^T0\"^c-60^*14^.109^,2540^T0^411^-280^irailgun^s-1^L3-48^*40^.99^,40^_10^*6^.35^,11^_31^!8^.13^,22^_40^!4^.10^,46^_-30^-30^.46^,10^_-8^-21^.15^,11^_-30^-50^.74^,10^_34^-70^.11^,100^T0^240^-60^.5^,100^x^y0^z0^h3^I^326^-77^.17^,11^_17^-85^.28^,15^_10^-97^.35^,4^_2^!11^.46^,9^_40^-200^.10^,32^_-30^-70^.10^,140^_-24^!28^.11^,9^_-25^!50^.50^,7^_4^!71^.26^,6^_3^!97^.19^,10^_-24^-200^.74^,10^_-23^!79^.15^,4^_-70^*40^.26^,250^_-30^-225^.80^,55^_40^-70^.10^,710^T0\" /><inf x=\"-118^!990^Zhero1_guns^;0^340^*6^.10^,160^T0^2-44^-204^.14^,60^x^y0^z0^h7^I\"^e-44^-30^.14^,60^K-1^J4^7^G-1^m1^o0^m1^p1^m1^n0^m2^o19^m2^p0^m2^n0^m3^o20^m3^p3^m3^n0^m4^o-1^m4^p0^m4^n0^$\"^e-43^-210^.12^,230^K0^J6^211^-72^.23^,50^x^y0^z0^h3^I^7^G1^m1^o0^m1^p2^m1^n13^m2^o0^m2^p3^m2^n6^m3^o0^m3^p1^m3^n7^m4^o0^m4^p4^m4^n10^m5^o28^m5^p5^m5^n11^m6^o29^m6^p0^m6^n11^m7^o-1^m7^p0^m7^n0^m8^o-1^m8^p0^m8^n0^m9^o-1^m9^p0^m9^n0^m10^o-1^m10^p0^m10^n0\"^e29^-40^.11^,100^K1^J1\"^e40^-50^.5^,100^K-1^J4\"^e11^-75^.22^,170^K2^J6^7^G1^m1^o0^m1^p0^m1^n3^>\"^e-20^!91^.10^,100^K4^J1^2-28^-60^.5^,100^x^y0^z0^h3^I\"^e-28^-50^.5^,100^K-1^J4\"^e-44^-70^.14^,60^K-1^J4\"^e-54^-210^.9^,200^K3^J6\"^e-44^-225^.14^,60^K-1^J4^7^G-1^m1^o0^m1^p1^m1^n9^m2^o19^m2^p3^m2^n0^m3^o20^m3^p0^m3^n0^m4^o-1^m4^p0^m4^n0^$^2-28^-40^.5^,100^x^y0^z0^h3^I\"^e-28^-30^.5^,100^K-1^J4^3^!36^.13^,5^_-22^!13^.5^,5^_2^!18^.7^,8^_36^!31^.9^,6^_21^!55^.9^,5^_^!54^.6^,7^_7^!75^.6^,7^_34^!80^.11^,5^_-24^!46^.15^,7^_-9^!16^.11^,6^_-26^-70^.37^,9^_^!05^.7^,150^T0^426^-2230^iplasmagun^s2^L134^-2251^A0^B0^C250^D250^q2^r-1^F8^E-1^k3^l-1^434^-2230^irl^s-1^L418^-2230^irailgun^s-1^L329^!4^.3^,260^T0^111^!971^A0^B0^C250^D250^q2^r-1^F8^E-1^k0^l-1^118^!971^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^418^!960^iplasmagun^s2^L411^!960^iplasmagun^s2^L111^!361^A0^B0^C250^D250^q2^r-1^F8^E-1^k0^l-1^411^!350^iplasmagun^s2^L119^!111^A0^B0^C250^D250^q2^r-1^F8^E-1^k0^l-1^131^!111^A0^B0^C250^D250^q2^r-1^F8^E-1^k0^l-1^419^!100^irl^s-1^L431^!100^irailgun^s-1^M0\"^e46^-68^.3^,10^K-1^J4\"^d5^!^~d28^-37^~d47^-61^~d9^-80^~d20^!21^~d14^!58^~d-10^!58^~d-19^!890^u0.4^t1^120^!711^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^420^!700^iplasmagun^s2^L122^!501^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^422^!490^iplasmagun^s2^L1-36^-2041^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^4-36^-2010^iplasmagun^s2^L123^-851^A0^B0^C150^D150^q2^r1^F8^E-1^k0^l-1^423^-830^iplasmagun^s2^L111^-301^A0^B0^C250^D250^q2^r-1^F8^E-1^k0^l-1^411^-290^iplasmagun^s2^L132^-501^A0^B0^C250^D250^q2^r-1^F8^E-1^k0^l-1^114^-501^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^414^-480^iplasmagun^s2^L432^-480^iplasmagun^s2^L135^!81^A0^B0^C250^D250^q2^r-1^F8^E-1^k0^l-1^435^!70^iplasmagun^s2^L414^-470^irl^s-1^L432^-470^irl^s-1^L435^!60^irailgun^s-1^L411^!340^irl^s-1^L422^!480^irl^s-1^L420^!690^irl^s-1^L418^!950^irl^s-1^L411^!950^irl^s-1^L4-36^-2020^irl^s-1^L3-49^!5^.33^,6^_-11^-26^.6^,60^T0^126^-2251^A0^B0^C250^D250^q2^r-1^F8^E-1^k3^l-1^118^-2251^A0^B0^C250^D250^q2^r-1^F8^E-1^k3^l-1^3-130^-225^.86^,55^_40^!48^.10^,37^_-54^-231^.34^,49^_-130^*40^.70^,230^_-210^-201^.90^,69^_-210^!28^.90^,680^T0^5-210^!91^.89^,150^A1^B-0.5^Y100^g0^1-75^-2251^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^1-67^-2251^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^4-75^-2220^i^&^#^s-1^L4-67^-2220^i^&^#^s-1^M0\"^d-56^-2110^u0.4^t1^3-80^!80^.20^,20^_-130^-215^.35^,170^T0\"^e-29^-210^.9^,200^K3^J6\" /><barrel x=\"-97^-2130^jbar_orange^A0^B0\" /><barrel x=\"-100^-2130^jbar_orange^A0^B0\" /><barrel x=\"-103^-2130^jbar_orange^A0^B0\"^e-12^-72^.23^,50^K-1^J4^348^-202^.162^,780^T1^347^!53^.9^,27^_47^-76^.9^,60^_47^!9^.9^,35^_47^*40^.9^,430^T0^241^!85^.7^,150^x^y0^z0^h5^I\"^e41^!70^.7^,150^K-1^J4^7^G1^m1^o0^m1^p5^m1^n14^>\"^d71^!330^u1^t0\"^d72^-580^u1^t0^2120^!92^.14^,10^(H^6127^!970^jstone^U-1^O0^P0\"^e110^!80^.100^,240^K5^J6^7^G1^m1^o7^m1^p1^m1^nc10a^>\"^c41^!85^.7^,150^T4\"^c-28^-40^.5^,300^T4\"^c40^-60^.5^,100^T4\"^c11^-72^.23^,50^T4\"^c-38^-32^.2^,1970^T4^590^-49^.80^,1310^A-1^B0^Y100^g0\" />";
         this.CACHED_MAPS["c10a"] = "<q.^f9^-2021^A4^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c91^-91^.208^,1180^T0\" /><inf x=\"9^!980^Zhero1_guns^;0^3-120^-202^.219^,780^T1\" /><vehicle x=\"197^!730^r-1^jveh_jeep^A0^B0\" hpp=\"30^4197^!720^ivehminigun^s-1^M1^1197^!751^A0^B0^C250^D250^q2^r-1^F8^E-2^k0^l-1^3221^!60^.89^,51^_190^!80^.40^,310^T0^4197^!700^igl^s2^L3210^!70^.20^,20^_160^!90^.40^,200^T0^1157^-2021^A0^B0^C400^D400^q2^r1^F7^E-1^k0^l-1^4157^-2010^irl^s-1^L1187^!901^A0^B0^C400^D400^q2^r1^F7^E-1^k0^l-1^4187^!890^irl^s-1^L390^!96^.60^,14^_90^-90^.10^,88^_94^!56^.102^,4^_120^!20^.40^,4^_94^!50^.96^,8^_180^!26^.40^,4^_240^!36^.56^,7^_290^!30^.90^,81^_115^!15^.8^,25^_157^!15^.5^,9^_178^!21^.5^,19^_217^!21^.5^,9^_238^!31^.5^,190^T0\"^d119^-580^u1^t0\"^d219^-580^u1^t0\"^d164^-580^u1^t0\"^d261^-590^u1^t0\"^d311^-590^u1^t0^1176^!501^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^4156^!480^irailgun^s-1^L1155^!501^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^1191^!261^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^1209^!261^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^1201^!261^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^1149^!201^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^1132^!201^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^1141^!201^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^1252^!361^A0^B0^C400^D400^q2^r1^F7^E-1^k0^l-1^1276^!361^A0^B0^C400^D400^q2^r1^F7^E-1^k0^l-1^1265^!361^A0^B0^C400^D400^q2^r1^F7^E-1^k0^l-1^4177^!480^irailgun^s-1^L4191^!240^irailgun^s-1^L4210^!240^irailgun^s-1^L4149^!180^irailgun^s-1^L4133^!180^irailgun^s-1^M0\" /><vehicle x=\"256^!570^r1^jveh_crate^A0^B0\" hpp=\"100\" /><vehicle x=\"267^!570^r1^jveh_crate^A0^B0\" hpp=\"100\" /><vehicle x=\"277^!570^r1^jveh_crate^A0^B0\" hpp=\"100\" /><vehicle x=\"287^!570^r1^jveh_crate^A0^B0\" hpp=\"100^4256^!540^i^&^#^s-1^L4256^!530^i^&^#^s-1^L4256^!520^i^&^#^s-1^L4267^!540^i^/2^s-1^L4277^!540^jitem_grenade^s-1^L4267^!530^i^/2^s-1^L4267^!520^i^/2^s-1^L4277^!530^jitem_grenade^s-1^L4277^!520^jitem_grenade^s-1^L4287^!540^iplasmagun^s-1^L4287^!530^iplasmagun^s-1^L4287^!520^iplasmagun^s-1^M0\" /><barrel x=\"242^!580^jbar_orange^A0^B0\" /><barrel x=\"239^!580^jbar_orange^A0^B0\" /><barrel x=\"216^!680^jbar_orange^A0^B0\" /><barrel x=\"185^!240^jbar_orange^A0^B0\" /><barrel x=\"272^!340^jbar_orange^A0^B0\" /><barrel x=\"249^!340^jbar_orange^A0^B0\" /><barrel x=\"246^!340^jbar_orange^A0^B0\" /><barrel x=\"192^!540^jbar_orange^A0^B0\" /><barrel x=\"142^!480^jbar_orange^A0^B0\" /><barrel x=\"144^!480^jbar_orange^A0^B0^3290^-90^.20^,300^T0\"^c299^!06^.81^,300^T0\"^d61^!630^u1^t0^5-160^*21^.130^,2110^A2^B0^Y40^g0^217^!95^.12^,7^(H^623^!980^jstone^U-1^O0^P0^219^!93^.8^,4^(H^380^-84^.14^,760^T0\"^d180^!61^~d200^!31^~d142^!250^u0.4^t1^3160^-96^.27^,5^_220^!00^.30^,50^T0^1165^-961^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^1174^-961^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^1184^-961^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^1225^!001^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^1234^!001^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^1246^!001^A0^B0^C250^D250^q2^r1^F8^E-1^k0^l-1^4246^-980^irailgun^s-1^L4225^-980^irailgun^s-1^L4184^-950^irailgun^s-1^L4174^-950^irailgun2^s2^M2^4165^-950^irailgun^s-1^L3160^!41^.10^,14^_96^-202^.284^,78^_300^-70^.80^,400^T0^5300^*28^.60^,980^A-3^B0^Y100^g0^4234^-990^irailgun2^s2^M2^4202^!250^irailgun2^s2^M2^4142^!190^irailgun2^s2^M2^4252^!330^irailgun2^s2^M2^4265^!330^irailgun2^s2^M2^4276^!330^irailgun2^s2^M2^390^-90^.30^,10^_210^!37^.21^,6^_320^!20^.60^,210^T0\"^e294^!19^.16^,120^K0^J6^7^G1^m1^o7^m1^p1^m1^nc11a^>^3-160^!90^.130^,780^T1^394^!51^.75^,220^T0\" />";
         this.CACHED_MAPS["c11a"] = "<q.^f-70^-21^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c-160^*67^.420^,113^_-160^-^.87^,20^_-80^-2^.26^,18^_-57^*3^.7^,23^_-58^*22^.12^,5^_-160^*40^.87^,28^_-80^*22^.13^,5^_-160^!3^.160^,67^_5^-3^.35^,5^_10^*6^.20^,12^_-3^-20^.23^,6^_-3^-24^.15^,16^_-3^-37^.65^,43^_44^-25^.101^,55^_50^-3^.10^,7^_55^-5^.30^,5^_80^-3^.10^,7^_110^-3^.35^,34^_120^*23^.140^,103^_110^*25^.40^,5^_70^*25^.20^,5^_50^*20^.10^,6^_49^*45^.38^,5^_100^*45^.40^,5^_12^*37^.8^,7^_10^*37^.5^,17^_12^*50^.14^,5^_-21^*35^.12^,5^_-30^*23^.3^,13^_-20^*15^.10^,9^_-29^*13^.11^,3^_160^*55^.30^,5^_165^*90^.95^,46^_-160^*70^.70^,40^_34^-30^.16^,110^T0\" /><inf x=\"-70^*10^Zhero1_guns^;0^2-80^*12^.4^,12^(I^33^*25^.10^,5^_94^*12^.12^,2^_88^-8^.6^,20^T0^2170^*44^.6^,210^x^y0^z0^h3^I^390^-20^.25^,10^_84^-22^.11^,8^_106^-8^.6^,2^_-36^!0^.26^,70^T0^1-32^!01^A0^B0^C250^D250^q1^r-1^F8^E-1^k0^l-1^1-19^!01^A0^B0^C250^D250^q1^r-1^F8^E-1^k0^l-1^118^*59^A0^B0^C250^D250^q1^r-1^F8^E-1^k0^l-1^16^-201^A0^B0^C250^D250^q1^r-1^F8^E-1^k0^l-1^139^-301^A0^B0^C250^D250^q1^r-1^F8^E-1^k0^l-1^125^*59^A0^B0^C250^D250^q1^r-1^F8^E-1^k0^l-1^163^-51^A0^B0^C250^D250^q1^r-1^F8^E-1^k0^l-1^1157^*229^A0^B0^C1000^D1000^q1^r-1^F11^E-1^k3^l2^4-32^-70^i^&^#^s-1^L4-19^-70^i^&^#^s-1^L418^*80^i^&^#^s-1^L425^*80^i^&^#^s-1^L46^!80^i^&^#^s-1^L439^-270^i^&^#^s-1^L463^-30^i^&^#^s-1^L4157^*240^i^&^#^s-1^L6-52^*220^jantigravity^U-1^O0^P0^6-15^*350^jantigravity^U-1^O0^P0^5-19^*60^.8^,250^A0^B-1^Y0^g0^5-56^*47^.8^,250^A0^B-1^Y0^g0^3-41^*50^.12^,50^T0^6-35^*500^jantigravity^U-1^O0^P0^5-39^*75^.8^,250^A0^B-1^Y0^g0\" /><barrel x=\"-87^*420^jbar_orange^A0^B0\" /><barrel x=\"-85^*420^jbar_orange^A0^B0^5-160^*151^.70^,810^A2^B0^Y100^g0^655^*450^jantigravity^U-1^O0^P0^551^*70^.8^,250^A0^B-1^Y0^g0^620^*500^jantigravity^U-1^O0^P0^516^*75^.8^,250^A0^B-1^Y0^g0^4157^*250^ibfg^s1^L4157^*260^iplasmagun^s1^L4157^*270^irailgun2^s1^M2^5165^*171^.85^,810^A-2^B0^Y100^g0^317^*35^.23^,50^T0\"^d110^*900^u1^t0\"^d150^*900^u1^t0\"^d70^*900^u1^t0\"^d30^*900^u1^t0\"^d-10^*900^u1^t0\"^d-50^*900^u1^t0\"^d-90^*900^u1^t0\"^d72^!7^~d44^!7^~d23^*25^~d-70^*900^u1^t0\"^d-30^*900^u1^t0\"^d10^*900^u1^t0\"^d50^*900^u1^t0\"^d90^*900^u1^t0\"^d130^*900^u1^t0^4158^*250^jitem_grenade^s-1^L4158^*240^jitem_grenade^s-1^L6100^-200^jantigravity^U-1^O0^P0^596^-^.8^,200^A0^B-1^Y0^g0^397^*11^.6^,3^_98^*11^.4^,4^_99^*11^.2^,50^T0\" /><barrel x=\"-25^*150^jbar_orange^A0^B0\" /><barrel x=\"-22^*150^jbar_orange^A0^B0\" /><barrel x=\"8^*270^jbar_orange^A0^B0\" /><barrel x=\"22^*370^jbar_orange^A0^B0\" /><barrel x=\"25^*370^jbar_orange^A0^B0\" /><barrel x=\"14^-350^jbar_orange^A0^B0\" /><barrel x=\"17^-350^jbar_orange^A0^B0\" /><barrel x=\"108^!80^jbar_orange^A0^B0\" /><barrel x=\"118^!0^jbar_orange^A0^B0\"^e170^*64^.6^,210^K-1^J4^7^G1^m1^o0^m1^p1^m1^n0^>\"^e180^*44^.20^,210^K1^J6^7^G1^m1^o7^m1^p1^m1^nc12a^>^2176^*44^.6^,210^x^y0^z0^h3^I\"^e176^*64^.6^,210^K-1^J4^7^G1^m1^o0^m1^p2^m1^n2^>^1146^*249^A0^B0^C1000^D1000^q1^r-1^F11^E-1^k3^l0^4146^*290^irailgun2^s1^M2^4146^*280^iplasmagun^s1^L4146^*270^ibfg^s1^L4146^*260^i^&^#^s-1^L4147^*260^jitem_grenade^s-1^L4147^*270^jitem_grenade^s-1^L4146^*300^irl^s1^M2^4157^*280^irl^s1^M2^310^*56^.5^,11^_85^*51^.5^,11^_40^*20^.15^,30^T0\"^c170^*44^.12^,210^T4\" />";
         this.CACHED_MAPS["c12a"] = "<q.^f-89^*599^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c-170^*98^.146^,820^T0\"^c-24^*48^.131^,320^T0\"^c-39^*16^.158^,75^_-170^*60^.90^,80^_-160^*40^.90^,100^_-80^*30^.30^,90^_-70^*20^.50^,15^_-6^*20^.46^,15^_-6^!0^.46^,10^_-40^!0^.20^,10^_-60^*14^.30^,70^_-160^-50^.350^,40^_47^!4^.48^,16^_20^-27^.34^,29^_60^!0^.10^,10^_20^*40^.23^,33^_40^*34^.10^,4^_37^*11^.13^,4^_60^*34^.10^,3^_80^*34^.41^,4^_100^*48^.31^,38^_80^*21^.41^,9^_80^*50^.41^,4^_110^*80^.80^,1400^T0^+-30^-20^.50^,120^g0^+-20^!6^.14^,40^g0\" /><barrel x=\"7^*220^jbar_orange^A0^B0\" /><barrel x=\"9^*220^jbar_orange^A0^B0\" /><barrel x=\"-47^*220^jbar_orange^A0^B0\" /><barrel x=\"-30^*220^jbar_orange^A0^B0\" /><barrel x=\"-23^-80^jbar_orange^A0^B0\" /><barrel x=\"14^-80^jbar_orange^A0^B0\" /><barrel x=\"38^-80^jbar_orange^A0^B0\" /><barrel x=\"56^!20^jbar_orange^A0^B0\" /><barrel x=\"59^!20^jbar_orange^A0^B0^396^*55^.20^,130^T0\" /><inf x=\"-89^*630^Zhero1_guns^;0^3-170^*110^.90^,30^_-45^*103^.23^,33^_-90^*110^.60^,200^T0^2-100^*80^.10^,20^(I^165^*339^A0^B0^C400^D400^q1^r-1^F6^E-1^k0^l-1^465^*350^ia^#2^s1^L187^*209^A0^B0^C400^D400^q1^r-1^F6^E-1^k0^l-1^487^*220^ia^#2^s1^L145^*109^A0^B0^C400^D400^q1^r1^F6^E-1^k0^l-1^445^*120^ia^#2^s1^L166^!01^A0^B0^C400^D400^q1^r-1^F6^E-1^k0^l-1^187^!41^A0^B0^C400^D400^q1^r-1^F6^E-1^k0^l-1^466^-80^ia^#2^s1^L487^!30^ia^#2^s1^L171^-501^A0^B0^C400^D400^q1^r-1^F6^E-1^k0^l-1^180^-501^A0^B0^C400^D400^q1^r-1^F6^E-1^k0^l-1^471^-480^ia^#2^s1^L480^-480^ia^#2^s1^L18^!01^A0^B0^C400^D400^q1^r-1^F6^E-1^k0^l-1^48^-70^ia^#2^s1^L3-55^*32^.3^,40^T0^190^*499^A0^B0^C400^D400^q1^r-1^F6^E-1^k0^l-1^490^*510^ia^#2^s1^L490^*530^irl^s-1^L487^*240^irl^s-1^L465^*370^irl^s-1^L487^!10^irl^s-1^M0\" /><inf x=\"-77^*660^Zshadowmap_size^;35\" /><vehicle x=\"16^*360^r1^jveh_drone^A0^B0\" hpp=\"50^116^*319^A0^B0^C100^D100^q2^r-1^F5^E-2^k0^l-1^416^*340^ivehminigun^s-1^L1-31^*349^A0^B0^C100^D100^q2^r1^F5^E-2^k0^l-1\" /><vehicle x=\"-31^*390^r1^jveh_drone^A0^B0\" hpp=\"50^4-31^*360^ivehminigl^s-1^M0\" /><vehicle x=\"^*380^r-1^jveh_drone^A0^B0\" hpp=\"50^1^*349^A0^B0^C100^D100^q2^r-1^F5^E-2^k0^l-1^4^*360^ivehminigun^s-1^M0\"^d18^-2^~d60^*600^u1^t0\"^d80^*600^u1^t0\"^d40^*600^u1^t0^333^*50^.7^,130^T0\"^d14^*720^u1^t0\"^d-5^*850^u1^t0^+20^-20^.27^,70^g0^+40^!6^.7^,40^g0^3-35^-32^.62^,240^T0^662^-490^jteleport^U-1^O0^P0^662^-310^jteleport2^U-1^O0^P0\"^e57^-29^.10^,230^K0^J6^7^G1^m1^o7^m1^p1^m1^nc13a^>\"^d62^-31^~d62^-490^u0.4^t1\" />";
         this.CACHED_MAPS["c13a"] = "<q.^f^*559^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^e-15^*22^.30^,150^K0^J6\"^c-90^*100^.180^,1600^T2^3-8^*50^.16^,110^T3^3-13^*46^.26^,100^T3^3-17^*40^.34^,30^T3^3-34^*35^.16^,50^T3^3-70^*34^.20^,40^T3^350^*34^.20^,40^T3^3-80^*90^.20^,400^T3^360^*34^.20^,940^T3^3-70^*20^.30^,70^T3^340^*20^.30^,70^T3^310^*10^.10^,700^T3^3-20^*10^.10^,700^T3^3-70^-^.55^,600^T3^314^-^.66^,600^T3^3-30^*5^.15^,150^T3^314^*5^.16^,150^T3\" /><inf x=\"^*590^Zhero1_guns^;0^270^*120^.80^,180^(I^2-150^*120^.80^,180^(I^3-80^*90^.150^,200^T0^2-150^*120^.300^,40^(I\"^d-30^*60^~d30^*60^~d^*280^u0.4^t1\" /><barrel x=\"-16^*420^jbar_blue^A0^B0\" /><barrel x=\"16^*420^jbar_blue^A0^B0\" /><barrel x=\"58^*220^jbar_blue^A0^B0\" /><barrel x=\"52^*220^jbar_blue^A0^B0\" /><barrel x=\"-58^*220^jbar_blue^A0^B0\" /><barrel x=\"-52^*220^jbar_blue^A0^B0^3-20^*34^.4^,80^T3^316^*34^.4^,80^T3\" /><barrel x=\"-28^*70^jbar_blue^A0^B0\" /><barrel x=\"27^*70^jbar_blue^A0^B0^2-10^*8^.20^,80^x^y0^z0^h1000^I^1^*79^A0^B0^C300^D300^q1^r-1^F2^E-1^k2^l-1^1120^*1199^A0^B0^C300^D300^q1^r-1^F2^E-1^k3^l-1^298^*136^.14^,24^(I^2109^*142^.22^,12^(I^2127^*133^.13^,19^(I\"^e-59^*49^.8^,160^K-1^J4\"^e51^*49^.8^,160^K-1^J4^7^G1^m1^o25^m1^p0^m1^n0^m2^o25^m2^p1^m2^n0^)^a^G7^X1^W30^7^G-1^m1^o28^m1^p2^m1^n1^m2^o28^m2^p2^m2^n2^m3^o29^m3^p1^m3^n0^m4^o29^m4^p2^m4^n0^$^4120^*1210^ia^#^s1^L318^*35^.16^,50^T3^1-22^*49^A4^B2^C0^D0^q1^r1^F8^E-1^k0^l-1^122^*39^A-4^B-2^C0^D0^q1^r1^F8^E-1^k0^l-1^130^*39^A-2^B0^C0^D0^q1^r-1^F8^E-1^k0^l-1^2-80^*32^.20^,14^(I^2-90^*15^.30^,17^(I^260^*15^.30^,17^(I^260^*32^.20^,14^(I\"^e-70^*32^.20^,20^K-1^J4\"^e-70^*15^.30^,20^K-1^J4\"^e40^*15^.30^,20^K-1^J4\"^e50^*32^.20^,20^K-1^J4^a^G1^X2^W60^7^G1^m1^o0^m1^p7^m1^n3^m2^o0^m2^p8^m2^n4^m3^o0^m3^p10^m3^n6^m4^o0^m4^p9^m4^n5^m5^o0^m5^p12^m5^n8^m6^o0^m6^p11^m6^n7^m7^o-1^m7^p0^m7^n0^m8^o-1^m8^p0^m8^n0^m9^o-1^m9^p0^m9^n0^m10^o-1^m10^p0^m10^n0^4-19^*100^i^&^#^s-1^L424^*50^i^&^#^s-1^L436^-0^i^/2^s-1^L360^*90^.20^,400^T3^3-80^*34^.20^,940^T3^2-70^*50^.10^,16^(I^260^*50^.10^,16^(I\"^e-80^*50^.10^,20^K-1^J4\"^e70^*50^.10^,20^K-1^J4^2-10^*8^.20^,80^x^y0^z0^h1000^I\"^e-35^-2^.20^,80^K-1^J4\"^e14^-2^.20^,80^K-1^J4^7^G1^m1^o0^m1^p3^m1^n9^>^7^G1^m1^o0^m1^p13^m1^n10^>\"^e-69^*49^.8^,170^K3^J1\"^e61^*49^.8^,170^K4^J1^3-80^*52^.10^,200^T3^370^*52^.10^,200^T3^350^*80^.20^,200^T3^3-70^*80^.20^,200^T3\"^e-20^-20^.40^,300^K5^J6^7^G1^m1^o7^m1^p1^m1^nc14a^>\"^c-10^*5^.7^,20^T4\"^c3^*5^.7^,20^T4\" />";
         this.CACHED_MAPS["c14a"] = "<q.^f-50^*289^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c-200^*100^.420^,2300^T2^3-200^*100^.140^,600^T3^3-40^*100^.20^,600^T3^3-60^*20^.20^,200^T3^3-200^*10^.280^,400^T3^3-200^*50^.120^,500^T3^3^*40^.70^,400^T3\" /><inf x=\"-50^*320^Zhero1_guns^;0^3-43^*13^.17^,70^T3^3-20^*15^.23^,70^T3^3-30^*100^.100^,400^T3^310^*70^.50^,700^T3^65^*410^jteleport^U-1^O0^P0^65^*590^jteleport2^U-1^O0^P0^5-20^*60^.20^,200^A1^B0^Y0^g0\"^d5^*59^~d5^*410^u0.4^t1^665^*590^jteleport2^U-1^O0^P0^665^*410^jteleport^U-1^O0^P0\"^d65^*59^~d65^*41^~e^*60^.10^,220^K0^J6\"^e60^*60^.10^,220^K-1^J6^7^G-1^m1^o30^m1^p0^m1^n1^m2^o43^m2^p0^m2^n0^)^+80^-60^.50^,300^g3\" /><barrel x=\"77^*120^jbar_blue^A0^B0\" /><barrel x=\"137^*120^jbar_blue^A0^B0^3140^*100^.80^,1100^T3^3130^*10^.90^,1400^T3^360^*100^.90^,300^T3^364^*38^.20^,40^T3^3120^*40^.26^,40^T3^390^*30^.14^,40^T3^3116^*20^.12^,40^T3^385^*14^.13^,40^T3^3100^*60^.4^,40^T3^3114^*53^.4^,40^T3^380^*60^.4^,40^T3^3130^*60^.4^,40^T3^399^*45^.11^,40^T3^3107^*6^.13^,40^T3^3118^!0^.16^,90^T3^390^-7^.14^,130^T3^371^-23^.15^,40^T3^391^!6^.43^,40^T3^3123^-35^.15^,40^T3^395^-41^.13^,40^T3^3-78^-68^.118^,620^T3^3107^-55^.15^,40^T3^376^-55^.15^,40^T3^330^-90^.114^,400^T3^330^-50^.50^,600^T3\" /><barrel x=\"73^*120^jbar_blue^A0^B0\" /><barrel x=\"133^*120^jbar_blue^A0^B0\" /><barrel x=\"132^*620^jbar_blue^A0^B0\" /><barrel x=\"102^*620^jbar_blue^A0^B0\" /><barrel x=\"82^*620^jbar_blue^A0^B0\" /><barrel x=\"116^*550^jbar_blue^A0^B0^1101^*449^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^1102^*299^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^192^*139^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^1109^*69^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^1118^*199^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^1122^*399^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^164^-501^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^174^-501^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^474^-470^ia^#^s1^L464^-470^ia^#^s1^L3-56^-50^.30^,40^T3\" /><barrel x=\"-16^-570^jbar_blue^A0^B0\" /><barrel x=\"19^-620^jbar_blue^A0^B0\" /><barrel x=\"-27^-480^jbar_blue^A0^B0\" /><barrel x=\"42^-480^jbar_blue^A0^B0\" /><barrel x=\"45^-480^jbar_blue^A0^B0\" /><barrel x=\"-4^-630^jbar_blue^A0^B0^320^-58^.20^,220^T3^3-20^-59^.11^,190^T3^3^-63^.10^,100^T3^3-120^-63^.52^,670^T3^3-200^-50^.100^,800^T3^3-88^-57^.11^,130^T3^3-10^-20^.30^,200^T3^4101^*470^ia^#^s1^L4102^*320^ia^#^s1^L4122^*430^ia^#^s1^L4118^*230^ia^#^s1^L492^*170^ia^#^s1^L4109^*100^ia^#^s1^L155^-501^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^159^-501^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^460^-470^ia^#^s1^L455^-470^ia^#^s1^L4-76^*110^jitem_grenade^s-1^L4-70^*110^jitem_grenade^s-1^L4-64^*110^jitem_grenade^s-1^L1-32^-501^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^4-32^-480^ia^#^s1^L1-92^-631^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^1-105^-501^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^3-90^-20^.30^,200^T3^1-11^-591^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^13^-631^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^4-11^-570^ia^#^s1^L42^-620^ia^#^s1^L3102^!8^.1^,120^T3^1126^-351^A0^B0^C300^D300^q1^r-1^F2^E-1^k0^l-1^4126^-320^irailgun2^s1^M2^1-111^-501^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^1-61^-671^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^4-61^-640^ia^#^s1^L4-111^-480^ia^#^s1^L5-60^*100^.20^,550^A0^B0^Y100^g0^2-126^-29^.6^,23^(I\"^e-121^-29^.7^,230^K1^J6\"^d90^*50^~d130^*30^~d83^-29^~d37^-35^~d-34^-350^u0.4^t1^1-98^-631^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^1-84^-561^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^4-84^-550^ia^#^s1^L1-71^-621^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^4-71^-590^ia^#^s1^L1-46^-501^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^4-46^-480^ia^#^s1^L1-111^-401^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^1-98^-521^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^1-91^-521^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^4-111^-380^ia^#^s1^L1-93^-401^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^325^-54^.10^,100^T3^315^-64^.10^,100^T3^3-5^-65^.10^,100^T3^4-93^-380^irl^s-1^L4-98^-490^irl^s-1^L4-92^-610^irl^s-1^L4-98^-610^irl^s-1^L4-91^-490^irl^s-1^L4-105^-480^irl^s-1^L7^G1^m1^o7^m1^p1^m1^nc15a^>\"^e-38^*25^.10^,130^K2^J6^7^G-1^m1^o43^m1^pThe grenade\'s blast force is a great power. What about a grenade jump?^m1^n0^>\" />";
         this.CACHED_MAPS["c15a"] = "<q.^f67^*399^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c-170^*80^.390^,2100^T2^360^*40^.160^,100^T3^360^*10^.90^,100^T3^360^*80^.160^,200^T3^360^!4^.60^,100^T3^360^-50^.90^,700^T3^3-5^!4^.35^,100^T3^3-10^-50^.40^,700^T3^3-75^*10^.35^,100^T3^274^*60^.6^,20^(I^3-80^!10^.230^,400^T3^5-40^!08^.30^,20^A0^B0^Y0^g100\" /><inf x=\"67^*430^Zhero1_guns^;0^3-170^*80^.120^,500^T3\"^d-130^*1100^u1^t0\"^d-100^*1100^u1^t0\"^d-70^*1100^u1^t0\"^d-40^*1100^u1^t0\"^d-10^*1100^u1^t0\"^d20^*1100^u1^t0\"^d50^*1100^u1^t0\"^d80^*1100^u1^t0^167^*99^A0^B0^C300^D300^q1^r-1^F2^E-1^k0^l-1^467^*130^irl^s-1^L320^*80^.10^,800^T3^3-5^*10^.31^,100^T3^3-10^*15^.10^,450^T3^185^!41^A0^B0^C400^D400^q1^r-1^F6^E-1^k0^l-1^325^*20^.15^,100^T3^485^!10^irl^s-1^L110^!41^A0^B0^C400^D400^q1^r1^F6^E-1^k0^l-1^410^!10^irl^s-1^L230^!4^.30^,50^x^y0^z0^h5^I^+30^-73^.30^,370^g50\"^e30^-4^.30^,110^K0^J6^4-65^!90^jitem_grenade^s0^M0\"^e30^!05^.30^,50^K-1^J6^7^G1^m1^o0^m1^p1^m1^n1^>^4-24^-490^jitem_grenade^s0^L4-67^!90^jitem_grenade^s0^L120^-501^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^420^-470^irailgun^s-1^L410^-390^irailgun^s-1^L410^-470^irailgun^s-1^L374^*33^.146^,270^T3^3140^*10^.80^,1600^T3^3130^-30^.17^,260^T3^3120^-40^.16^,180^T3\" /><barrel x=\"138^-280^jbar_blue^A0^B0\" /><barrel x=\"134^-280^jbar_blue^A0^B0\" /><barrel x=\"117^-480^jbar_blue^A0^B0\" /><barrel x=\"111^-480^jbar_blue^A0^B0^476^-470^irailgun^s-1^L486^-470^irailgun^s-1^L486^-390^irailgun^s-1^L3-170^-20^.130^,1300^T3^3-30^-50^.10^,50^T3^3-30^-35^.10^,50^T3^3-30^-20^.10^,50^T3^3-30^-5^.10^,50^T3^3-30^*10^.10^,50^T3^3-6^*30^.31^,50^T3^3-170^*17^.100^,470^T3^1-44^-201^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^4-44^!70^igl^s1^M3^1^*299^A0^B0^C400^D400^q1^r-1^F6^E-1^k0^l-1^4^*330^irl^s-1^L15^*299^A0^B0^C400^D400^q1^r-1^F6^E-1^k0^l-1^45^*330^irl^s-1^L1-48^*99^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^4-48^*130^igl^s1^M3^1-25^-51^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^4-25^-20^igl^s1^M3^1-58^-201^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^4-58^!70^igl^s1^M3\"^d-50^!0^~d100^-40^~d100^!0^~d11^*200^u0.4^t1^175^-501^A0^B0^C300^D300^q1^r-1^F2^E-1^k0^l-1^186^-501^A0^B0^C300^D300^q1^r-1^F2^E-1^k0^l-1^186^-421^A0^B0^C300^D300^q1^r-1^F2^E-1^k0^l-1^110^-501^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^110^-421^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^2-90^*30^.10^,13^(I^1-8^*149^A0^B0^C300^D300^q1^r-1^F2^E-1^k0^l-1^4-8^*170^igl^s1^M3^118^*99^A0^B0^C300^D300^q1^r-1^F2^E-1^k0^l-1^418^*130^igl^s1^M3\"^e-81^*31^.8^,160^K1^J6^7^G1^m1^o7^m1^p1^m1^nc16a^>\"^c32^!6^.1^,920^T4\"^c57^!6^.1^,920^T4^5-88^*156^.38^,760^A3^B0^Y100^g0^560^*156^.38^,760^A-3^B0^Y100^g0\" />";
         this.CACHED_MAPS["c16a"] = "<q.^f-170^*59^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c-203^*50^.403^,1030^T2^3-178^!0^.142^,600^T3\" /><inf x=\"-170^*80^Zhero1_guns^;0^310^!0^.190^,600^T3^3-49^!9^.72^,510^T3\" /><barrel x=\"-126^-80^jbar_blue^A0^B0\" /><barrel x=\"-81^-80^jbar_blue^A0^B0^3-260^*60^.88^,1300^T3\" /><barrel x=\"-135^-80^jbar_blue^A0^B0\" /><barrel x=\"-150^-80^jbar_blue^A0^B0\" /><barrel x=\"-75^-80^jbar_blue^A0^B0\"^d-70^*100^u0.4^t1^1-358^*1099^A0^B0^C350^D350^q1^r-1^F2^E-1^k1^l-1^4-358^*1130^ibfg^s1^L3-177^*6^.17^,210^T3^3-160^*25^.20^,50^T3^3-120^*13^.24^,110^T3^3-80^*24^.20^,40^T3^3-40^*20^.20^,200^T3^3^*15^.20^,50^T3^340^*20^.20^,420^T3^380^*60^.120^,400^T3^2-355^*125^.8^,20^(I^2-371^*126^.8^,20^(I^2-368^*131^.19^,11^(I\"^e-168^*41^.8^,360^K0^J6^7^G1^m1^o25^m1^p0^m1^n0^>^a^G3^X1^W50\"^e-68^*6^.18^,40^K-1^J4\"^e-39^*24^.18^,40^K-1^J4\"^e-20^!5^.18^,40^K-1^J4\"^e1^*19^.18^,40^K-1^J4^7^G-1^m1^o28^m1^p1^m1^n1^m2^o28^m2^p1^m2^n3^m3^o28^m3^p1^m3^n2^m4^o28^m4^p1^m4^n4^$^3-144^*9^.32^,60^T3^2-368^*110^.19^,11^(I^530^*19^.39^,290^A0^B-1^Y0^g0^635^!00^jantigravity^U-1^O0^P0^665^!00^jantigravity^U-1^O0^P0^3-69^*2^.19^,220^T3^3-10^*60^.98^,200^T3^3^*50^.20^,200^T3^3-110^*20^.20^,150^T3^3-140^*60^.100^,200^T3\"^d-170^*800^u1^t0\"^d-156^*800^u1^t0\"^d-140^*800^u1^t0\"^d-25^*800^u1^t0\"^d-39^*800^u1^t0\"^d-11^*800^u1^t0\"^d35^-90^u0.4^t0\"^d65^-90^u0.4^t0^380^-6^.7^,70^T3^399^*2^.101^,220^T3\"^e115^*23^.38^,260^K2^J6^7^G1^m1^o7^m1^p1^m1^nc17a^>^5^*152^.90^,920^A-1^B0^Y100^g0^5-260^*152^.70^,920^A1^B0^Y100^g0^3-132^*45^.13^,150^T3\"^c47^*40^.6^,200^T4\" />";
         this.CACHED_MAPS["c17a"] = "<q.^f118^*19^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c354^!1^.73^,160^T0\"^c511^-21^.74^,370^T1\"^c-50^*50^.308^,1010^T2^4227^*20^ivehcannon^s-1^M2\" /><inf x=\"118^*50^Zhero1_guns^;0^3-50^!0^.310^,900^T3^340^*20^.20^,420^T3^380^*62^.120^,420^T3^530^*19^.39^,290^A0^B-1^Y0^g0^635^!00^jantigravity^U-1^O0^P0^665^!00^jantigravity^U-1^O0^P0^3-50^*60^.138^,200^T3\"^d35^-90^u0.4^t0\"^d65^-90^u0.4^t0^380^-6^.7^,70^T3^399^*2^.101^,220^T3^247^*40^.6^,20^(I^3179^*60^.61^,200^T3^3230^*64^.30^,340^T3\" /><vehicle x=\"226^*80^r1^jveh_walker^A0^B0\" hpp=\"500^3250^-20^.263^,800^T1\"^d280^*400^u1^t0\"^d285^*300^u1^t0\"^d275^*490^u1^t0^3330^!0^.30^,30^_420^!0^.30^,30^_323^!6^.40^,11^_417^!6^.40^,110^T0^1356^!01^A0^B0^C150^D150^q1^r1^F8^E-1^k2^l-1^4356^-70^i^&^#^s-1^L4367^!70^irailgun2^s1^M3^4374^!70^irl^s-1^M3^4411^!70^irailgun2^s1^M3^4415^!70^irl^s-1^M3^1374^!91^A0^B0^C400^D400^q1^r-1^F11^E-1^k0^l-1^1338^!01^A0^B0^C150^D150^q1^r1^F8^E-1^k2^l-1^4338^-70^i^&^#^s-1^L1410^-201^A0^B0^C400^D400^q1^r-1^F11^E-1^k0^l-1^1366^!91^A0^B0^C400^D400^q1^r-1^F11^E-1^k0^l-1^1415^-201^A0^B0^C400^D400^q1^r-1^F11^E-1^k0^l-1\" /><vehicle x=\"391^*30^r-1^jveh_walker^A0^B0\" hpp=\"100^4389^*40^ivehcannon^s-1^M2^1391^-31^A0^B0^C150^D150^q1^r1^F8^E-2^k2^l-1^3580^-20^.127^,800^T1^3489^-50^.115^,500^T2^+513^-36^.67^,140^g15\"^d500^-0^u1^t0\"^d530^-0^u1^t0\"^d560^-0^u1^t0\"^d590^-0^u1^t0\"^d390^*80^u1^t0\" /><inf x=\"129^*60^Zshadowmap_size^;40\" /><vehicle x=\"484^!20^r-1^jveh_jeep^A0^B0\" hpp=\"100^1484^!61^A0^B0^C150^D150^q1^r-1^F8^E-2^k2^l-1^4483^!40^ivehminigun^s-1^M2\"^e590^*39^.20^,810^K0^J6^7^G1^m1^o3^m1^p0^m1^n0^m2^o43^m2^p0^m2^n0^)\" /><vehicle x=\"635^!20^r1^jveh_jeep^A0^B0\" hpp=\"200^4635^!20^ivehminigun^s-1^M3^3687^-40^.56^,600^T1^3733^-50^.177^,500^T1^3859^-40^.33^,350^T1^3870^-24^.33^,280^T1^3880^!0^.40^,900^T1^1775^-501^A0^B0^C300^D300^q1^r-1^F8^E-1^k0^l-1^1807^-501^A0^B0^C300^D300^q1^r-1^F8^E-1^k0^l-1^1837^-501^A0^B0^C300^D300^q1^r-1^F8^E-1^k0^l-1^1850^-501^A0^B0^C300^D300^q1^r-1^F8^E-1^k0^l-1^4775^-470^iplasmagun^s-1^L4807^-470^iplasmagun^s-1^L4837^-470^iplasmagun^s-1^L4850^-470^iplasmagun^s-1^M0\" /><inf x=\"135^*70^Zsky^;1^3940^!0^.100^,900^T1\"^e912^-20^.38^,560^K1^J6^7^G1^m1^o7^m1^p1^m1^nc18a^>\" /><vehicle x=\"741^-370^r1^jveh_crate^A0^B0\" hpp=\"100\" /><vehicle x=\"735^-370^r1^jveh_crate^A0^B0\" hpp=\"100^3950^*40^.20^,30^_960^*60^.80^,400^T0\"^d930^*300^u1^t0\"^c952^*37^.88^,700^T0^2954^*10^.9^,19^(I^5960^*141^.80^,810^A-2^B0^Y100^g0^582^*182^.178^,1220^A2^B0^Y100^g0\"^c914^!1^.31^,890^T1^31010^*40^.20^,300^T0^21015^*10^.9^,19^(I^3952^-9^.88^,110^T0\"^e161^*25^.31^,260^K2^J6^7^G1^m1^o43^m1^pPress the USE button to enter a vehicle.^m1^n0^>\"^e273^*47^.41^,710^K3^J6^7^G1^m1^o43^m1^pHold JUMP or DUCK buttons to control the walker\'s body positions.^m1^n0^>\"^e558^*3^.20^,550^K4^J3^7^G1^m1^o43^m1^pPress USE button again to leave walker.^m1^n0^>\"^e665^*40^.42^,760^K5^J6^7^G1^m1^o43^m1^p0^m1^n0^>\" />";
         this.CACHED_MAPS["c18a"] = "<q.^f-10^*369^A0^B10^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c40^*175^.260^,2350^T0\"^c-170^*80^.210^,1600^T1^3-60^*80^.40^,1000^T1^3^*80^.50^,1000^T1\" /><inf x=\"-10^*400^Zhero1_guns^;0^3-120^-40^.160^,400^T2^3-170^!0^.90^,700^T2^3-170^*80^.119^,700^T1^+-20^*20^.20^,400^g1^+-80^-20^.150^,200^g1^+-170^*10^.110^,200^g1^+-80^!0^.20^,100^g1^2-91^*9^.2^,2^(I^2-91^*5^.2^,2^(I^2-91^*1^.2^,2^(I^2-91^-3^.2^,2^(I^2-91^-7^.2^,2^(I^2-98^*10^.10^,20^(H^5-88^*10^.28^,200^A-0.2^B0^Y0^g0^5-60^-20^.120^,200^A-0.2^B0^Y0^g0^5-80^!0^.20^,300^A0^B-0.2^Y0^g0\"^d-10^*1200^u2^t0^5-20^!0^.20^,100^A0^B0.2^Y0^g0\" /><barrel x=\"31^-260^jbar_orange^A0^B0\" /><barrel x=\"-32^-370^jbar_orange^A0^B0\" /><barrel x=\"-87^-70^jbar_orange^A0^B0^128^-281^A-2^B-3^C0^D0^q1^r1^F2^E-1^k0^l-1^112^-401^A-2^B3^C0^D0^q1^r-1^F2^E-1^k0^l-1^1-40^-291^A-2^B-3^C0^D0^q1^r-1^F2^E-1^k0^l-1^1-86^-31^A-2^B0^C0^D0^q1^r-1^F2^E-1^k0^l-1^417^-330^ia^#^s1^L434^-320^ia^#^s1^L4-53^-330^ia^#^s1^L4-84^*20^ia^#^s1^M0\"^d-85^-70^u0.3^t0^+50^*20^.30^,400^g1^370^-20^.69^,10^_40^-40^.170^,40^_80^*22^.59^,52^_30^-41^.20^,39^_40^*60^.30^,30^_50^*60^.70^,200^T0^+70^-30^.100^,100^g1^560^-30^.110^,100^A-0.2^B0^Y0^g0^290^-31^.2^,2^(I^290^-34^.2^,2^(I^290^-37^.2^,2^(I^289^-30^.4^,10^(H\" /><barrel x=\"55^*110^jbar_orange^A0^B0\" /><barrel x=\"65^*10^jbar_orange^A0^B0^164^!21^A-20^B30^C0^D0^q1^r1^F2^E-1^k0^l-1^469^*100^ia^#^s1^M0\"^d95^-380^u0.3^t0\" /><barrel x=\"94^-380^jbar_orange^A0^B0^3124^*60^.42^,20^_133^*11^.74^,41^_113^*66^.17^,230^T0\"^d122^*42^~d122^*230^u0.1^t0^3195^*60^.125^,140^_162^*15^.8^,45^_162^*64^.8^,280^T0^2170^*15^.20^,40^x^y0^z0^h4^I^2170^*40^.20^,40^x^y0^z0^h4^I\"^e170^*64^.20^,40^K2^J6\"^e170^*89^.20^,40^K-1^J4^3190^*64^.8^,56^_162^*111^.8^,26^_190^*111^.8^,26^_113^*98^.17^,230^T0\"^d146^*1040^u0.4^t1^3192^*94^.18^,7^_219^*70^.101^,50^_229^*94^.19^,10^_236^*110^.84^,56^_79^*64^.21^,10^_45^*72^.39^,17^_97^*93^.21^,11^_89^*90^.11^,100^T0^2166^*57^.2^,210^x^y0^z0^h20^I^2168^*15^.2^,210^x^y0^z0^h20^I\"^e168^*36^.2^,210^K-1^J4\"^e166^*36^.2^,210^K-1^J4^7^G1^m1^o0^m1^p13^m1^n2^m2^o0^m2^p12^m2^n3^m3^o25^m3^p0^m3^n0^m4^o-1^m4^p0^m4^n0^$\"^e180^*36^.10^,210^K0^J6^a^G1^X1^W30^7^G1^m1^o0^m1^p11^m1^n1^m2^o0^m2^p10^m2^n0^)^2166^*85^.2^,210^x^y0^z0^h20^I^2168^*85^.2^,210^x^y0^z0^h20^I^2190^*85^.2^,210^x^y0^z0^h20^I^2192^*85^.2^,210^x^y0^z0^h20^I\"^e166^*106^.2^,210^K-1^J4\"^e168^*64^.2^,210^K-1^J4\"^e190^*64^.2^,210^K-1^J4\"^e192^*106^.2^,210^K-1^J4^7^G1^m1^o25^m1^p1^m1^n0^>^a^G1^X3^W60^7^G1^m1^o0^m1^p14^m1^n5^m2^o0^m2^p16^m2^n7^m3^o0^m3^p15^m3^n6^m4^o0^m4^p17^m4^n8^$^3152^*90^.3^,2^_160^*90^.5^,4^_127^*90^.11^,4^_127^*95^.7^,2^_161^*101^.10^,2^_161^*112^.10^,2^_161^*123^.10^,2^_161^*134^.10^,2^_169^*94^.22^,5^_12^*81^.58^,210^T0\"^c12^*160^.28^,810^T0^214^*100^.9^,19^(I^310^*135^.17^,350^T0^259^*100^.9^,19^(I^323^*120^.66^,10^_55^*123^.17^,23^_10^*168^.17^,27^_20^*177^.143^,27^_197^*177^.103^,27^_260^*125^.90^,45^_189^*101^.10^,2^_189^*112^.10^,2^_189^*123^.10^,2^_189^*134^.10^,20^T0\"^d163^*1830^u1^t0\"^d180^*1830^u1^t0\"^d197^*1830^u1^t0\"^d-10^*1400^u1^t0^355^*136^.17^,3^_117^*113^.13^,3^_113^*133^.29^,3^_128^*117^.4^,7^_128^*132^.4^,6^_90^*153^.10^,13^_87^*83^.10^,2^_19^*127^.23^,120^T0^511^*141^.15^,60^A1^B0^Y100^g0^3178^*162^.4^,4^_168^*162^.4^,4^_188^*162^.4^,40^T0^5163^*177^.34^,150^A0^B0^Y100^g0^5197^*244^.63^,670^A-1^B0^Y100^g0^5100^*244^.63^,670^A1^B0^Y100^g0^383^*113^.17^,3^_128^*153^.4^,70^T0^6225^*700^jantigravity^U-1^O0^P0^5220^*90^.9^,200^A0^B-1^Y0^g0^3214^*140^.26^,3^_250^*142^.20^,5^_240^*125^.30^,5^_214^*125^.16^,5^_232^*105^.19^,170^T0\"^d172^*1830^u1^t0\"^d189^*1830^u1^t0\"^d225^*710^u0.4^t0^1168^*239^A4^B7^C0^D0^q1^r1^F2^E-1^k0^l-1^1159^*599^A0^B0^C300^D300^q1^r1^F8^E-1^k0^l-1^1201^*599^A0^B0^C300^D300^q1^r-1^F8^E-1^k0^l-1^1144^*599^A0^B0^C400^D400^q1^r1^F7^E-1^k0^l-1^1216^*599^A0^B0^C400^D400^q1^r-1^F7^E-1^k0^l-1^4143^*630^i^&^#^s-1^L4217^*630^i^&^#^s-1^L1243^*1099^A0^B0^C400^D400^q1^r-1^F7^E-1^k0^l-1^4243^*1120^irl^s-1^L1189^*1119^A0^B0^C400^D400^q1^r-1^F7^E-1^k0^l-1^4189^*1140^irl^s-1^L1220^*1249^A0^B0^C400^D400^q1^r-1^F7^E-1^k0^l-1^4220^*1260^irl^s-1^L1237^*1399^A0^B0^C400^D400^q1^r-1^F7^E-1^k0^l-1^4237^*1410^irl^s-1^L1104^*929^A0^B0^C400^D400^q1^r1^F7^E-1^k0^l-1^4104^*950^irl^s-1^L192^*899^A0^B0^C400^D400^q1^r1^F7^E-1^k0^l-1^492^*920^irl^s-1^L177^*1199^A0^B0^C400^D400^q1^r1^F7^E-1^k0^l-1^1116^*1329^A0^B0^C400^D400^q1^r1^F7^E-1^k0^l-1^478^*1230^irl^s-1^L4117^*1360^irl^s-1^L4117^*1340^irailgun^s-1^L477^*1210^irailgun^s-1^L492^*940^irailgun^s-1^L3190^*137^.8^,15^_162^*137^.8^,150^T0^1136^*899^A0^B0^C1000^D1000^q1^r1^F11^E-1^k3^l-1^4136^*920^irl^s1^M2^4136^*930^irailgun2^s1^M1^4136^*940^iplasmagun^s1^M2^4136^*950^ibfg^s1^M1\" /><barrel x=\"73^*740^jbar_orange^A0^B0\" /><barrel x=\"133^*620^jbar_orange^A0^B0\" /><barrel x=\"123^*1150^jbar_orange^A0^B0\" /><barrel x=\"126^*1150^jbar_orange^A0^B0\" /><barrel x=\"91^*1150^jbar_orange^A0^B0\" /><barrel x=\"53^*1220^jbar_orange^A0^B0\" /><barrel x=\"135^*1350^jbar_orange^A0^B0\" /><barrel x=\"138^*1350^jbar_orange^A0^B0\" /><barrel x=\"203^*960^jbar_orange^A0^B0\" /><barrel x=\"206^*960^jbar_orange^A0^B0\" /><barrel x=\"234^*720^jbar_orange^A0^B0\" /><barrel x=\"231^*720^jbar_orange^A0^B0\" /><barrel x=\"254^*1120^jbar_orange^A0^B0\" /><barrel x=\"219^*1420^jbar_orange^A0^B0\" /><barrel x=\"224^*1420^jbar_orange^A0^B0\" /><barrel x=\"255^*1440^jbar_orange^A0^B0^1223^*939^A0^B0^C1000^D1000^q1^r-1^F11^E-1^k3^l-1^4223^*950^irl^s1^M2^4223^*960^irailgun2^s1^M1^4223^*970^iplasmagun^s1^M2^4223^*980^ibfg^s1^M1^3260^*180^.90^,430^T0\"^c300^*143^.50^,270^T0\"^e270^*140^.39^,200^K4^J6^7^G1^m1^o7^m1^p1^m1^nc19a^>\"^c166^*85^.4^,700^T4\"^c190^*85^.4^,210^T4\" />";
         this.CACHED_MAPS["c19a"] = "<q.^f-80^*679^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c-110^*161^.165^,131^_-170^*107^.96^,28^_-170^*68^.96^,28^_-170^*63^.115^,63^_-79^*90^.14^,5^_-68^*90^.21^,8^_-51^*95^.5^,17^_-49^*66^.10^,3^_-57^*43^.31^,43^_-32^*45^.67^,45^_-2^*51^.8^,10^_-10^*49^.12^,10^_29^*51^.94^,51^_-37^*90^.76^,8^_-38^*95^.5^,17^_29^*90^.18^,24^_41^*123^.82^,83^_-14^*95^.5^,22^_16^*107^.5^,290^T0^2-93^*79^.6^,11^(I\" /><inf x=\"-80^*700^Zhero1_guns^;0^3-50^*110^.36^,2^_-3^*105^.13^,5^_-170^*146^.80^,44^_-17^*64^.28^,4^_-24^*73^.5^,100^T0^1-12^*449^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4-12^*480^i^&^#^s-1^L1-2^*639^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^17^*639^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4-2^*670^i^&^#^s-1^L47^*670^i^&^#^s-1^L126^*449^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^118^*449^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^418^*480^i^&^#^s-1^L426^*480^i^&^#^s-1^L4-2^*660^irl^s-1^L47^*660^irl^s-1^L418^*470^irl^s-1^L426^*470^irl^s-1^L4-12^*470^irl^s-1^M0\"^d-23^*81^~d5^*81^~d-60^*810^u0.4^t1^3-40^*66^.3^,12^_-63^*54^.20^,21^_22^*70^.9^,40^T0^126^*699^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^426^*730^i^&^#^s-1^L426^*720^irl^s-1^M0^+-46^*95^.8^,80^g0^+-74^*135^.24^,460^g0^+-33^*108^.19^,180^g0^5-46^*87^.8^,210^A0^B-0.45^Y0^g0^+-9^*100^.25^,100^g0^+-90^*130^.16^,230^g0^+-50^*108^.17^,130^g0^+-14^*110^.5^,150^g0^+-9^*130^.6^,300^g0^+10^*130^.6^,300^g0^+-3^*130^.13^,250^g0^3-20^*130^.4^,11^_-40^*125^.4^,60^T0^+16^*130^.25^,230^g0^+21^*107^.20^,170^g0^+-50^*119^.41^,90^g0^+-50^*130^.10^,110^g0^+-36^*130^.16^,110^g0^+-16^*130^.7^,110^g0^+-40^*130^.4^,50^g0^+-50^*144^.70^,140^g0^3-170^*190^.96^,60^_-105^*190^.55^,55^_-60^*190^.96^,46^_20^*190^.103^,600^T0^1-5^*899^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4-5^*930^irl^s-1^L113^*929^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^413^*960^irl^s-1^L1-6^*1139^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^117^*1199^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^126^*1089^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4-6^*1170^irl^s-1^L417^*1230^irl^s-1^L426^*1120^irl^s-1^L1-43^*1129^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1-32^*1259^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1-27^*1129^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4-27^*1160^irl^s-1^L4-43^*1160^irl^s-1^L4-32^*1290^irl^s-1^L1-84^*1079^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^1-74^*1189^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^4-84^*1110^irl^s-1^L4-74^*1220^irl^s-1^L4-43^*1150^iplasmagun^s-1^L4-32^*1280^iplasmagun^s-1^L4-27^*1150^iplasmagun^s-1^L4-6^*1160^iplasmagun^s-1^L413^*950^iplasmagun^s-1^M0\"^d-61^*1200^u0.4^t0\"^d1^*1260^u0.4^t0\"^d-29^*1370^u0.4^t0\"^d31^*970^u0.4^t0\"^c-170^*84^.60^,230^T0\"^c55^*134^.68^,150^T0^+41^*130^.82^,70^g0\"^e45^*134^.41^,170^K0^J6^7^G1^m1^o7^m1^p1^m1^nc20a^>^6-42^*660^jantigravity^U-1^O0^P0\" />";
         this.CACHED_MAPS["c20a"] = "<q.^f-148^*1409^A0^B0^C100^D100^q0^r1^F1^E-1^k1^l-1\"^e127^*135^.11^,200^K2^J4\"^c40^*160^.220^,900^T0\"^c-240^*190^.280^,120^_-160^*140^.40^,10^_-100^*160^.20^,30^_-240^*110^.216^,70^_-240^*140^.100^,700^T0^+-240^*150^.140^,100^g0^+-120^*140^.20^,80^g0\" /><inf x=\"-148^*1450^Zhero1_guns^;0^5-240^*150^.88^,100^A3^B0^Y0^g0^3-100^*115^.30^,15^_-86^*160^.56^,20^_-40^*160^.20^,30^_-50^*115^.30^,350^T0\"^e-68^*123^.16^,140^K0^J1^7^G1^m1^o30^m1^p9^m1^n2^m2^o-1^m2^p0^m2^n2^m3^o0^m3^p0^m3^n3^m4^o40^m4^p1^m4^n0^$\"^e-139^*112^.12^,30^K-1^J4^6-133^*1110^jteleport^U-1^O0^P0\"^d-133^*1110^u0.4^t0^2-27^*131^.5^,170^x^y0^z0^h2^I\"^e-27^*146^.5^,170^K-1^J4^3-240^*190^.290^,40^_12^*136^.18^,3^_28^*116^.32^,6^_-24^*112^.24^,8^_26^*126^.14^,16^_-96^*90^.160^,50^_11^*99^.20^,15^_7^*95^.10^,8^_-30^*136^.15^,6^_96^*90^.140^,50^_-20^*85^.200^,45^_110^*116^.65^,6^_100^*170^.180^,30^_120^*125^.6^,15^_120^*143^.6^,14^_140^*93^.10^,8^_140^*112^.10^,13^_170^*116^.10^,35^_60^*100^.40^,50^T0^1-18^*1359^A0^B0^C500^D500^q1^r1^F7^E-1^k0^l-1^4-18^*1390^igl^s1^M2^1-12^*899^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^4-12^*930^irl^s-1^L118^*1359^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^135^*1259^A0^B0^C500^D500^q1^r-1^F7^E-1^k0^l-1^145^*1159^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^156^*1159^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^435^*1290^irl^s1^M2^445^*1190^irl^s1^M2^418^*1390^irailgun^s1^M2^456^*1190^irailgun^s1^M2^167^*849^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^191^*849^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^179^*849^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^467^*880^irailgun^s-1^L491^*880^irailgun^s-1^L479^*880^irl^s-1^L359^*118^.5^,8^_66^*103^.5^,80^T0^177^*999^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^477^*1030^irailgun^s-1^L315^*116^.18^,30^T0^124^*1159^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^121^*1159^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1160^*899^A0^B0^C500^D500^q1^r-1^F7^E-1^k0^l-1\" /><barrel x=\"168^*920^jbar_orange^A0^B0\" /><barrel x=\"165^*920^jbar_orange^A0^B0\" /><barrel x=\"19^*1010^jbar_orange^A0^B0\" /><barrel x=\"22^*1010^jbar_orange^A0^B0\" /><barrel x=\"41^*920^jbar_orange^A0^B0\" /><barrel x=\"45^*920^jbar_orange^A0^B0\" /><barrel x=\"-10^*1140^jbar_orange^A0^B0\" /><barrel x=\"-5^*1140^jbar_orange^A0^B0\" /><barrel x=\"-3^*1140^jbar_orange^A0^B0^420^*1190^irailgun2^s1^M2^3-1^*95^.3^,10^_-1^*112^.3^,12^_60^*97^.5^,3^_95^*97^.5^,30^T0^4160^*930^irailgun2^s1^M2^6133^*910^jteleport^U-1^O0^P0^6133^*1090^jteleport2^U-1^O0^P0^6133^*1170^jteleport^U-1^O0^P0^6133^*1390^jteleport2^U-1^O0^P0\"^d133^*1090^u0.4^t0\"^d133^*910^u0.4^t0\"^d133^*1390^u0.4^t0\"^d133^*1170^u0.4^t0^6-133^*1290^jteleport2^U-1^O0^P0\"^d-133^*1290^u0.4^t0^328^*160^.4^,370^T0\"^d3^*124^~d-15^*980^u0.4^t1\" /><barrel x=\"-18^*920^jbar_orange^A0^B0\" /><barrel x=\"-15^*920^jbar_orange^A0^B0\" /><barrel x=\"86^*870^jbar_orange^A0^B0\" /><barrel x=\"84^*870^jbar_orange^A0^B0\"^d60^*1700^u0.5^t0\"^d76^*1700^u0.5^t0\"^d90^*1700^u0.5^t0^330^*142^.30^,3^_55^*140^.12^,60^T0^165^*1399^A0^B0^C500^D500^q1^r1^F7^E-1^k0^l-1^465^*1430^igl^s1^M2^157^*1419^A0^B0^C500^D500^q1^r1^F7^E-1^k0^l-1^457^*1450^igl^s1^M2\"^c-27^*130^.5^,150^T4\"^e128^*109^.11^,200^K1^J4\"^e124^*108^.3^,190^K-1^J4\"^e139^*134^.3^,190^K-1^J4^7^G-1^m1^o30^m1^p4^m1^n6^>^7^G-1^m1^o30^m1^p0^m1^n5^>^3220^*116^.120^,760^T0^4149^*1190^igl^s1^M2^1186^*899^A0^B0^C500^D500^q1^r-1^F7^E-1^k0^l-1^4186^*930^irailgun2^s1^M2^1213^*899^A0^B0^C500^D500^q1^r-1^F7^E-1^k0^l-1^4213^*930^irailgun2^s1^M2^3160^*148^.20^,13^_220^*148^.20^,13^_190^*95^.3^,7^_207^*95^.3^,70^T0^6200^*900^jantigravity^U-1^O0^P0^5193^*105^.14^,150^A0^B-0.7^Y0^g0\"^d200^*910^u0.4^t0\"^e64^*96^.32^,120^K3^J1\"^e64^*111^.32^,110^K-1^J4^7^G-1^m1^o30^m1^p7^m1^n8^>\" /><barrel x=\"177^*1180^jbar_orange^A0^B0\" /><barrel x=\"172^*1180^jbar_orange^A0^B0^2-157^*235^.17^,26^(H^2-131^*235^.17^,26^(H^2-150^*218^.30^,13^(H^2-150^*241^.30^,13^(H^1-136^*2179^A0^B0^C600^D600^q0^r1^F1^E-1^k1^l-1\" /><inf x=\"-136^*2200^Zhero1_guns^;-1\"^e-143^*230^.15^,150^K-1^J4^330^*160^.17^,200^T0^1227^*1159^A0^B0^C500^D500^q1^r-1^F7^E-1^k0^l-1^4227^*1190^igl^s1^M2^1239^*1159^A0^B0^C500^D500^q1^r-1^F7^E-1^k0^l-1^4239^*1190^igl^s1^M2^1148^*1159^A0^B0^C500^D500^q1^r-1^F7^E-1^k0^l-1^5180^*115^.40^,100^A0^B-0.7^Y0^g0\"^c250^*150^.90^,50^_250^*170^.90^,400^T0\"^e230^*147^.110^,430^K4^J7^7^G1^m1^o7^m1^p1^m1^nc21a^>\"^e-21^*106^.22^,180^K5^J1\"^e-19^*121^.14^,100^K-1^J4^7^G-1^m1^o30^m1^p11^m1^n12^>^4-73^*1160^idefibrillator^s0^L5100^*300^.97^,1310^A-3^B0^Y100^g0^5-47^*300^.97^,1100^A3^B0^Y100^g0^4-136^*2200^idefibrillator^s-1^M0\"^e-90^*129^.10^,150^K6^J6^7^G-1^m1^o43^m1^pWith help of this device (slot 6), you can revive dead allies. Press TAB to switch between heroes.^m1^n0^>^6-115^*1100^jantigravity^U-1^O0^P0^6-105^*1100^jantigravity^U-1^O0^P0\"^e257^*137^.8^,250^K7^J6^7^G-1^m1^o43^m1^pYou can continue only with ally.^m1^n0^>\"^e240^*155^.20^,720^K6^J6^2260^*133^.5^,19^(I\" />";
         this.CACHED_MAPS["c21a"] = "<q.^f-53^*199^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c-140^*130^.260^,160^_-200^*70^.145^,20^_-200^*130^.70^,130^_-55^*74^.90^,24^_-30^*60^.40^,15^_-50^*20^.80^,80^_-60^*80^.10^,40^_30^*80^.10^,40^_100^*20^.80^,80^_110^*130^.70^,130^_90^*70^.90^,20^_80^*60^.20^,10^_-110^*10^.50^,10^_40^*10^.50^,10^_60^*40^.20^,10^_-100^*40^.20^,100^T0\" /><inf x=\"-53^*220^Zhero1_guns^;0^1-38^*199^A0^B0^C700^D700^q0^r-1^F1^E-1^k0^l1\" /><inf x=\"-38^*220^Zhero1_guns^;-1^330^*70^.40^,6^_-100^*15^.30^,15^_50^*15^.30^,15^_-77^*20^.5^,20^_52^*20^.5^,20^_-55^*20^.95^,50^T0^9^G1^X0^W30^7^G1^m1^o33^m1^p1^m1^n1^>\" /><barrel x=\"-79^*170^jbar_orange^A0^B0\" /><barrel x=\"-82^*170^jbar_orange^A0^B0\" /><barrel x=\"59^*170^jbar_orange^A0^B0\" /><barrel x=\"62^*170^jbar_orange^A0^B0\" /><barrel x=\"-89^*420^jbar_orange^A0^B0\" /><barrel x=\"82^*350^jbar_orange^A0^B0\" /><barrel x=\"-68^*120^jbar_orange^A0^B0\" /><barrel x=\"48^*120^jbar_orange^A0^B0\" /><barrel x=\"-128^*220^jbar_orange^A0^B0\" /><barrel x=\"-125^*220^jbar_orange^A0^B0\" /><barrel x=\"108^*220^jbar_orange^A0^B0\" /><barrel x=\"105^*220^jbar_orange^A0^B0^2-28^*143^.7^,16^(H^2-12^*143^.7^,16^(H^2-26^*145^.18^,5^(H^1-16^*1299^A0^B0^C700^D700^q1^r-1^F1^E-1^k3^l-1\"^e7^*22^.6^,40^K-1^J4\"^e63^*43^.6^,40^K-1^J4^7^G1^m1^o25^m1^p1^m1^n0^m2^o0^m2^p3^m2^n2^)^a^G1^X2^W30^7^G1^m1^o28^m1^p2^m1^n0^m2^o28^m2^p2^m2^n1^m3^o28^m3^p2^m3^n0^m4^o28^m4^p2^m4^n1^$^+30^!0^.70^,100^g100^3-140^-20^.260^,40^_-110^*130^.145^,40^_-110^*33^.20^,3^_70^*33^.20^,3^_34^*43^.16^,3^_-70^*43^.16^,3^_74^*53^.16^,30^T0^610^*210^jteleport^U-1^O0^P0^666^*410^jteleport^U-1^O0^P0^3-125^*5^.80^,33^_30^*130^.90^,20^_70^*120^.57^,30^_-200^*20^.80^,800^T0\"^d-116^*42^~d-67^*25^~d52^*24^~d100^*43^~d60^*98^~d99^*800^u0.4^t1^4-16^*1320^iraygun^s1^M3^3-31^*26^.2^,8^_-1^*26^.2^,8^_94^*5^.10^,5^_47^*43^.4^,110^T0^270^*69^.20^,4^(I\"^e90^*69^.20^,40^K-1^J4\"^e-40^*93^.60^,210^K3^J6^7^G1^m1^o7^m1^p1^m1^nc22a^>\" />";
         this.CACHED_MAPS["c22a"] = "<q.^f20^*739^A0^B0^C100^D100^q0^r-1^F1^E-1^k0^l-1\"^c-169^*230^.122^,590^T0\"^c-140^*171^.260^,142^_-200^*70^.145^,20^_-200^*183^.70^,154^_-55^*74^.90^,24^_-60^*80^.10^,40^_30^*80^.10^,40^_110^*180^.110^,151^_90^*70^.90^,200^T0\" /><inf x=\"20^*760^Zhero1_guns^;0^330^*70^.40^,6^_-60^*130^.95^,40^_30^*130^.90^,20^_70^*120^.57^,300^T0\"^d60^*98^~d99^*800^u0.4^t1^270^*69^.20^,4^(I^3-60^*180^.95^,33^_-200^*230^.40^,600^T0^1-55^*1299^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4-55^*1320^irl^s-1^L1-117^*1459^A0^B15^C350^D350^q1^r1^F8^E-1^k0^l-1^1-43^*1299^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4-117^*1470^irl^s-1^L4-43^*1320^irl^s-1^L1-33^*1299^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4-33^*1320^iplasmagun^s-1^L1-86^*1699^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1-74^*1699^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^4-86^*1720^iplasmagun^s-1^L4-73^*1720^iplasmagun^s-1^L6-80^*700^jantigravity^U-1^O0^P0^5-90^*90^.20^,200^A0^B-0.8^Y0^g0\"^d-80^*710^u0.4^t0^5-120^*120^.20^,200^A0^B-0.8^Y0^g0^6-110^*1000^jantigravity^U-1^O0^P0\"^d-110^*1010^u0.4^t0^3-120^*100^.20^,5^_-90^*130^.20^,50^T0^5-90^*150^.20^,200^A0^B-0.8^Y0^g0^6-80^*1300^jantigravity^U-1^O0^P0\"^d-80^*1310^u0.4^t0^3-120^*160^.20^,50^T0^6-110^*1600^jantigravity^U-1^O0^P0\"^d-110^*1610^u0.4^t0^3-200^*257^.160^,37^_-93^*230^.6^,30^_-17^*150^.17^,24^_-64^*170^.8^,6^_-55^*230^.15^,20^_130^*190^.90^,200^T0\"^c-50^*210^.5^,300^T4\"^d-20^*2100^u0.6^t0\"^d-11^*2060^u0.6^t0\"^d132^*2100^u0.6^t0\"^d65^*2370^u0.6^t0^327^*161^.40^,8^_82^*161^.40^,36^_74^*147^.14^,23^_67^*140^.14^,17^_60^*135^.12^,110^T0^1-28^*1799^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1-17^*1799^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4-28^*1820^irailgun^s-1^L4-17^*1820^irailgun^s-1^L1-10^*1799^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4-10^*1820^irailgun^s-1^L189^*1609^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1100^*1609^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^489^*1620^irailgun^s-1^L4101^*1620^irailgun^s-1^L127^*1299^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^139^*1299^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^427^*1320^irl^s-1^L440^*1330^irl^s-1^M0\" /><vehicle x=\"38^*1640^r1^jveh_crate^A0^B0\" hpp=\"100\" /><vehicle x=\"52^*1320^r1^jveh_crate^A0^B0\" hpp=\"100\" /><vehicle x=\"3^*1330^r1^jveh_crate^A0^B0\" hpp=\"100\" /><vehicle x=\"9^*1330^r1^jveh_crate^A0^B0\" hpp=\"100^44^*1340^jitem_grenade^s-1^L46^*1350^jitem_grenade^s-1^L46^*1320^jitem_grenade^s-1^L14^*1369^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^110^*1369^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^410^*1420^irailgun^s-1^L45^*1420^irailgun^s-1^M0\"^d49^*1520^u0.4^t1^3105^*170^.10^,15^_-144^*192^.18^,160^T0^2-50^*210^.5^,300^x^y0^z0^h5^I\"^e-50^*180^.5^,300^K-1^J4^7^G1^m1^o0^m1^p1^m1^n0^>\"^e-59^*206^.9^,260^K0^J6\" /><inf x=\"-8^*240^Zsky^;2\"^e137^*256^.83^,670^K1^J6^7^G1^m1^o7^m1^p1^m1^nc23a^>^355^*175^.27^,5^_73^*208^.11^,380^T0^5-90^*110^.20^,200^A0^B-0.6^Y0^g0^5-120^*140^.20^,200^A0^B-0.6^Y0^g0^5-90^*170^.20^,200^A0^B-0.6^Y0^g0^5-120^*180^.20^,200^A0^B-0.8^Y0^g0^5-120^*200^.20^,200^A0^B-0.6^Y0^g0\" />";
         this.CACHED_MAPS["c23a"] = "<q.^f-208^*99^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c-181^*10^.131^,490^T0\" /><inf x=\"-208^*120^Zhero1_guns^;0\" /><inf x=\"-191^*150^Zsky^;2^3-300^*10^.130^,80^_-350^*40^.90^,110^_-60^*10^.90^,80^_-190^-30^.150^,40^_-150^*40^.10^,50^_-120^*40^.10^,20^_-90^*40^.10^,500^T0^5-170^*10^.10^,400^A0^B-0.6^Y0^g0^5-70^*10^.10^,400^A0^B-0.6^Y0^g0^3-150^-25^.20^,15^_-120^-20^.10^,20^_-100^-25^.20^,15^_-100^-5^.16^,5^_-146^-5^.16^,50^T0^1-30^*359^A0^B0^C350^D350^q1^r-1^F8^E-2^k0^l-1^1-2^*359^A0^B0^C350^D350^q1^r-1^F8^E-2^k0^l-1^1-92^-51^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1-137^-51^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1-72^-301^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1-95^-251^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1-138^-251^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4-138^-30^i^&^#^s-1^L4-91^-30^i^&^#^s-1^L4-95^-220^i^&^#^s-1^L4-71^-270^i^&^#^s-1^L4-138^-220^i^&^#^s-1^L4-138^-40^irl^s-1^L4-91^-40^irl^s-1^L4-95^-230^irl^s-1^L4-138^-230^irl^s-1^L4-71^-280^irl^s-1^L4-95^-210^irailgun2^s1^M2\" /><vehicle x=\"-236^*500^r1^jveh_capsule^A0^B30\" hpp=\"100\" /><vehicle x=\"-220^*500^r1^jveh_capsule^A0^B20\" hpp=\"100^1-236^*459^A0^B0^C350^D350^q1^r1^F8^E-2^k0^l-1^1-220^*459^A0^B0^C350^D350^q1^r1^F8^E-2^k0^l-1^4-220^*490^irailgun2^s1^M2^4-236^*490^irailgun2^s1^M2\" /><barrel x=\"-158^-280^jbar_orange^A0^B0\" /><barrel x=\"-153^-280^jbar_orange^A0^B0\" /><barrel x=\"-173^*120^jbar_orange^A0^B0\" /><barrel x=\"-250^*120^jbar_orange^A0^B0\" /><barrel x=\"-256^*120^jbar_orange^A0^B0\" /><vehicle x=\"-30^*400^r1^jveh_capsule^A0^B20\" hpp=\"100\" /><vehicle x=\"-2^*400^r1^jveh_capsule^A0^B20\" hpp=\"100^4-29^*390^irailgun2^s1^M2^4-1^*390^irailgun2^s1^M2^350^*10^.50^,80^_20^*36^.50^,10^_60^*49^.90^,119^_9^*16^.13^,120^T0^5-300^*131^.40^,910^A2^B0^Y100^g0\"^c20^*31^.53^,1010^T0\"^d10^*280^u1^t0^124^*99^A0^B0^C350^D350^q1^r-1^F8^E-2^k0^l-1^425^*110^iplasmagun^s1^M3^153^*99^A0^B0^C350^D350^q1^r-1^F8^E-2^k0^l-1^157^*99^A0^B0^C350^D350^q1^r-1^F8^E-2^k0^l-1^453^*110^iplasmagun^s1^M3^457^*110^iplasmagun^s1^M3\"^e30^-20^.20^,500^K0^J6^7^G1^m1^o7^m1^p1^m1^nc24a^>\"^c-150^*40^.70^,300^T0\"^d-140^*600^u1^t0\"^d-115^*600^u1^t0\"^d-90^*600^u1^t0\"^d-165^*600^u1^t0\"^d-65^*600^u1^t0\"^d-40^*600^u1^t0\"^d-190^*600^u1^t0^6-165^-300^jantigravity^U-1^O0^P0^6-65^-300^jantigravity^U-1^O0^P0\"^d-65^-290^u0.4^t0\"^d-165^-290^u0.4^t0^5-35^*47^.38^,160^A0^B0.1^Y0^g0^580^*158^.70^,680^A-2^B0^Y100^g0^380^*90^.70^,840^T0\" />";
         this.CACHED_MAPS["c24a"] = "<q.^f-72^*599^A0^B4^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c-260^*150^.428^,190^_-260^*150^.180^,100^_-60^*97^.30^,47^_-80^*36^.20^,7^_-70^*30^.30^,70^_-30^*20^.10^,6^_30^*30^.90^,70^_-10^*70^.10^,40^_-20^*50^.24^,10^_50^*52^.30^,12^_90^*40^.10^,20^_110^*70^.70^,110^_70^*55^.20^,5^_94^*160^.86^,950^T0\" /><inf x=\"-72^*630^Zhero1_guns^;0^3-65^*150^.75^,60^_-36^*75^.16^,4^_40^*78^.19^,4^_^*160^.80^,50^_74^*160^.29^,400^T0\"^d-74^*1490^u0.7^t0^1-7^*699^A-4^B2^C0^D0^q1^r1^F2^E-1^k0^l-1^1-1^*709^A-6^B0^C0^D0^q1^r1^F2^E-1^k0^l-1^1-20^*749^A2^B0^C0^D0^q1^r1^F2^E-1^k0^l-1\"^d-8^*81^~d34^*810^u0.4^t1^1-9^*199^A0^B0^C300^D300^q1^r1^F12^E-1^k3^l-1^117^*499^A0^B0^C300^D300^q1^r1^F12^E-1^k3^l-1^127^*499^A0^B0^C300^D300^q1^r1^F12^E-1^k3^l-1^148^*779^A0^B0^C300^D300^q1^r1^F12^E-1^k3^l-1^159^*779^A0^B0^C300^D300^q1^r1^F12^E-1^k3^l-1^175^*899^A0^B0^C300^D300^q1^r1^F12^E-1^k3^l-1^1102^*299^A0^B0^C300^D300^q1^r1^F12^E-1^k3^l-1^1105^*299^A0^B0^C300^D300^q1^r1^F12^E-1^k3^l-1^1108^*299^A0^B0^C300^D300^q1^r1^F12^E-1^k3^l-1^195^*399^A0^B0^C300^D300^q1^r-1^F12^E-1^k3^l-1^186^*549^A0^B0^C300^D300^q1^r1^F12^E-1^k3^l-1^3-50^*20^.13^,20^_27^*20^.14^,20^_-50^*3^.124^,430^T0^1-78^*199^A0^B0^C300^D300^q1^r-1^F12^E-1^k0^l-1^1-72^*199^A0^B0^C300^D300^q1^r-1^F12^E-1^k0^l-1^313^*50^.27^,4^_61^*90^.18^,4^_56^*70^.23^,4^_56^*77^.3^,100^T0^1-26^*29^A0^B0^C300^D300^q1^r-1^F12^E-1^k3^l-1^117^*29^A0^B0^C300^D300^q1^r1^F12^E-1^k3^l-1^3-160^*20^.100^,60^_-110^*25^.20^,10^_-8^*34^.18^,4^_27^*66^.19^,40^T0^154^*519^A0^B0^C300^D300^q1^r1^F12^E-1^k3^l-1^163^*519^A0^B0^C300^D300^q1^r1^F12^E-1^k3^l-1^158^*519^A0^B0^C300^D300^q1^r1^F12^E-1^k3^l-1\"^e28^*77^.12^,120^K0^J1^7^G1^m1^o0^m1^p0^m1^n1^>^2-107^*44^.14^,200^x^y0^z0^h3^I^3-110^*57^.20^,140^T0\"^e-107^*26^.14^,200^K-1^J4^1-109^*249^A0^B0^C300^D300^q1^r1^F12^E-1^k0^l-1^1-120^*199^A0^B0^C300^D300^q1^r1^F12^E-1^k0^l-1^1-126^*289^A0^B0^C300^D300^q1^r1^F12^E-1^k0^l-1^1-145^*199^A0^B0^C300^D300^q1^r1^F12^E-1^k0^l-1^3-142^*25^.11^,11^_-160^*25^.10^,130^T0^16^*339^A0^B0^C300^D300^q1^r1^F12^E-1^k3^l-1^1-18^*499^A0^B0^C300^D300^q1^r1^F12^E-1^k3^l-1^112^*29^A0^B0^C300^D300^q1^r1^F12^E-1^k3^l-1^324^*10^.14^,10^_-47^*10^.13^,10^_-11^*20^.31^,6^_-17^*7^.4^,6^_-160^*58^.10^,13^_-260^*58^.80^,980^T0^2-180^*24^.20^,6^(I\"^c-106^*43^.2^,170^T4\"^c-96^*43^.2^,170^T4\"^c-101^*43^.2^,170^T4\"^c-178^*22^.2^,620^T4\"^c-164^*22^.2^,620^T4\"^c-159^*45^.4^,200^T4^4-126^*320^i^&^%^s1^L4-145^*230^i^&^%^s1^L4-120^*230^i^&^%^s1^L4-109^*280^i^&^%^s1^M0\"^d-130^*400^u0.2^t1^3-135^*29^.11^,110^T0\" /><barrel x=\"-58^*320^jbar_blue^A0^B0\" /><barrel x=\"-55^*320^jbar_blue^A0^B0\" /><barrel x=\"-52^*320^jbar_blue^A0^B0\" /><barrel x=\"-87^*220^jbar_blue^A0^B0\" /><barrel x=\"-24^*220^jbar_blue^A0^B0\" /><barrel x=\"-22^*220^jbar_blue^A0^B0\" /><barrel x=\"32^*320^jbar_blue^A0^B0\" /><barrel x=\"-5^*50^jbar_blue^A0^B0^460^*310^ia^#^s2^L434^*510^ia^#^s2^L473^*560^ia^#^s2^L4-64^*370^ia^#^s2^M0\"^e-180^*41^.20^,180^K1^J1^7^G1^m1^o7^m1^p1^m1^nc25a^>\" />";
         this.CACHED_MAPS["c25a"] = "<q.^f-59^*299^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c-150^*120^.480^,130^_-80^*30^.80^,40^_-150^*143^.120^,93^_-150^*90^.80^,100^_-36^*54^.22^,4^_-14^*37^.40^,27^_2^*43^.26^,33^_21^*46^.35^,360^T0\" /><inf x=\"-59^*320^Zhero1_guns^;0^1-26^*539^A0^B0^C300^D300^q1^r1^F12^E-1^k0^l-1^4-19^*550^irailgun2^s1^M2^3-36^*70^.22^,7^_-49^*130^.104^,62^_70^*75^.5^,25^_90^*54^.13^,4^_110^*44^.25^,14^_67^*40^.15^,4^_91^*34^.48^,21^_-12^*22^.201^,32^_86^*27^.11^,12^_126^*53^.71^,40^_125^*67^.23^,3^_129^*81^.27^,30^T0^168^*399^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^3153^*85^.35^,360^T0^468^*430^i^&^#^s1^M2^494^*570^i^&^#^s1^M2^4103^*370^i^&^#^s1^M2^4117^*470^i^&^#^s1^M2^4149^*560^i^&^#^s1^M2\"^d56^*61^~d111^*72^~d95^*47^~d-28^*430^u0.4^t1\" /><barrel x=\"-29^*560^jbar_blue^A0^B0^222^*71^.11^,15^(I^240^*57^.11^,17^(I\"^e33^*68^.7^,230^K0^J6^7^G1^m1^o0^m1^p0^m1^n1^m2^o0^m2^p1^m2^n2^)\"^e22^*82^.11^,150^K-1^J4\"^e40^*45^.11^,170^K-1^J4^475^*240^iplasmagun^s1^M3^492^*360^iplasmagun^s1^M3^4103^*360^iplasmagun^s1^M3^4133^*690^iplasmagun^s1^M3^4146^*700^i^&^#^s1^M2\" /><barrel x=\"^*390^jbar_blue^A0^B0\" /><barrel x=\"-3^*390^jbar_blue^A0^B0^343^*126^.82^,53^_178^*78^.79^,88^_196^*95^.31^,4^_119^*132^.27^,40^_140^*122^.36^,12^_162^*100^.14^,60^T0^1248^*939^A0^B0^C1000^D1000^q1^r-1^F11^E-1^k0^l-1^1241^*939^A0^B0^C1000^D1000^q1^r-1^F11^E-1^k0^l-1^4180^*880^irl^s1^M2^4193^*810^irl^s1^M2^4206^*810^irl^s1^M2^4241^*960^irailgun^s1^M2^4248^*960^irailgun^s1^M2\"^d155^*105^~d192^*1070^u0.4^t1^3210^*150^.120^,40^_240^*94^.90^,104^_250^*125^.80^,410^T0^5240^*259^.121^,790^A-2^B0^Y100^g0\"^d181^*1410^u1^t0\"^d193^*1460^u1^t0\"^d206^*1500^u1^t0\"^d168^*1340^u1^t0^6204^*950^jantigravity^U-1^O0^P0^5198^*130^.12^,350^A0^B-1^Y0^g0^3240^*180^.90^,440^T0\" /><barrel x=\"59^*1280^jbar_orange^A0^B0\" /><barrel x=\"114^*1280^jbar_orange^A0^B0\" /><barrel x=\"117^*1280^jbar_orange^A0^B0^3-16^*137^.39^,18^_71^*133^.19^,110^T0^186^*1329^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^486^*1360^igl^s1^M2^486^*1370^irailgun^s1^M2^198^*1259^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^1107^*1259^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^498^*1300^irl^s1^M2^4107^*1300^irl^s1^M2^498^*1290^igl^s1^M2^4107^*1290^igl^s1^M2^128^*1299^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^138^*1299^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^428^*1330^irl^s1^M2^438^*1330^irl^s1^M2^438^*1320^igl^s1^M2^428^*1320^igl^s1^M2^1-25^*1299^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^1-52^*1429^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^1-38^*1429^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^4-25^*1330^irl^s1^M2^4-38^*1460^irailgun^s1^M2^4-52^*1460^irl^s1^M2^4-25^*1320^igl^s1^M2^4-38^*1450^igl^s1^M2^4-52^*1450^igl^s1^M2^4236^*1510^jitem_grenade^s-1^L4231^*1510^jitem_grenade^s-1^L4226^*1510^jitem_grenade^s-1^L4220^*1510^iplasmagun^s-1^L4215^*1510^iraygun^s-1^M0\"^e-150^*220^.90^,770^K1^J6^7^G1^m1^o7^m1^p1^m1^nc26a^>^3195^*101^.3^,10^_234^*86^.12^,110^T0\"^d86^*600^u0.4^t1^352^*27^.18^,10^_51^*36^.9^,13^_170^*114^.20^,40^T0^175^*219^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^194^*539^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^192^*339^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1103^*339^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1117^*439^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1149^*529^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1146^*669^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1133^*669^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1180^*849^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1193^*779^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1206^*779^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1\" />";
         this.CACHED_MAPS["c26a"] = "<q.^f68^*199^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c-113^*130^.164^,930^T0\"^c-104^*37^.132^,46^_-75^-^.255^,40^_-30^*3^.30^,19^_-35^*6^.30^,19^_-40^*9^.30^,19^_-45^*12^.30^,19^_-53^*15^.33^,19^_20^*50^.10^,36^_-20^*32^.48^,5^_-180^*32^.135^,72^_70^*20^.70^,300^T0^570^*113^.118^,930^A-2^B0^Y100^g0\" /><inf x=\"68^*220^Zhero1_guns^;0\"^e-20^*27^.10^,150^K0^J6^7^G1^m1^o28^m1^p1^m1^n1^m2^o28^m2^p1^m2^n2^)\"^e4^*46^.5^,20^K-1^J4\"^e-9^*37^.5^,20^K-1^J4^3-100^*60^.88^,5^_-180^*70^.90^,60^_-100^*35^.50^,15^_-15^*35^.43^,60^T0^1-91^*729^A0^B0^C500^D500^q2^r-1^F6^E-1^k0^l-1^4-91^*750^irailgun2^s2^M3\"^e-45^*27^.25^,130^K1^J1^2-45^*31^.25^,3^(I\"^e-20^*31^.25^,30^K-1^J4^7^G1^m1^o0^m1^p0^m1^n4^>^3-67^*40^.7^,11^_23^*50^.27^,20^_45^*80^.10^,45^_10^*90^.40^,200^T0^613^*350^jantigravity^U-1^O0^P0^56^*50^.14^,150^A0^B-1^Y0^g0^3-15^*60^.7^,100^T0^1-18^*319^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4-18^*350^i^&^#^s1^M2^1-70^*349^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^4-70^*380^irl^s1^M2^3-94^*58^.34^,8^_-49^*27^.7^,190^T0^128^*499^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^428^*530^i^&^#^s1^M2^3-55^*64^.25^,70^T0^1-26^*599^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4-26^*630^i^&^#^s1^M2^1-16^*599^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^4-16^*630^irl^s1^M2^3-55^*85^.25^,7^_-72^*90^.88^,10^_-180^*140^.80^,800^T0^2-34^*78^.3^,70^x^y0^z0^h3^I^2-34^*71^.3^,70^x^y0^z0^h3^I\"^e-34^*84^.3^,70^K-1^J4\"^e-34^*65^.3^,70^K-1^J4\"^e-26^*76^.11^,170^K2^J1^7^G1^m1^o0^m1^p1^m1^n5^m2^o0^m2^p2^m2^n6^)^3-106^*122^.26^,22^_-50^*95^.60^,9^_-180^*185^.155^,69^_-90^*120^.24^,8^_-50^*130^.30^,20^_-11^*54^.11^,40^T0\"^d60^*400^u1^t0\"^d70^*400^u1^t0\"^d80^*350^u1^t0^360^*10^.20^,16^_^*110^.23^,27^_-6^*103^.14^,12^_-30^*180^.53^,58^_40^*180^.20^,1040^T0^+23^*108^.17^,180^g0^3-75^*86^.5^,10^T0^45^*1110^i^#^s0^L3-180^*220^.240^,20^_47^*204^.13^,280^T0^424^*1810^jitem_grenade^s-1^L431^*1810^jitem_grenade^s-1^L438^*1810^jitem_grenade^s-1^L29^*110^.7^,20^x^y0^z0^h10^I\"^e19^*110^.7^,20^K-1^J4\"^e16^*110^.7^,20^K-1^J4\"^e12^*122^.11^,120^K3^J6^7^G-1^m1^o0^m1^p3^m1^n8^m2^o19^m2^p3^m2^n0^m3^o20^m3^p4^m3^n0^m4^o-1^m4^p0^m4^n0^$^8^G-1^m1^o0^m1^p3^m1^n9^m2^o19^m2^p4^m2^n0^m3^o20^m3^p3^m3^n0^m4^o-1^m4^p0^m4^n0^$\"^e23^*136^.17^,60^K4^J6\" /><barrel x=\"10^*1820^jbar_orange^A0^B0\" /><barrel x=\"7^*1820^jbar_orange^A0^B0\" /><barrel x=\"4^*1820^jbar_orange^A0^B0^3-120^*211^.95^,150^T0\"^e-120^*198^.80^,170^K5^J6^7^G1^m1^o7^m1^p1^m1^nc27a^>\" /><vehicle x=\"-72^*930^r1^jveh_crate^A0^B0\" hpp=\"100\" /><vehicle x=\"^*1820^r1^jveh_crate^A0^B0\" hpp=\"100^4-72^*920^irl^s-1^M0\" /><vehicle x=\"5^*1120^r1^jveh_crate^A0^B0\" hpp=\"100^45^*1130^i^&^#^s0^M0\"^c-180^*207^.233^,370^T0\"^c17^*170^.33^,400^T0\"^c23^*14^.4^,140^T4\"^d13^*360^u0.4^t0\"^d-35^*48^~d-57^*114^~d-3^*78^~d-60^*194^~d32^*142^~d32^*1710^u0.4^t1\" /><inf x=\"48^*230^Zsky^;2\"^e-101^*89^.12^,200^K6^J6^7^G1^m1^o43^m1^pI heard rockets can make you fly, maybe you should try that sometime.^m1^n0^>\"^e-66^*112^.18^,230^K7^J6^7^G1^m1^o43^m1^p0^m1^n0^>\"^e-9^*123^.11^,210^K8^J6^7^G1^m1^o43^m1^pThe distance between walls is larger than usual... Rifles are now your best friend.^m1^n0^>\" />";
         this.CACHED_MAPS["c27a"] = "<q.^f70^!001^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1\"^c-240^-57^.290^,730^T0\"^c-170^-20^.120^,370^T0\"^c-340^*10^.100^,150^_70^!00^.30^,10^_10^-60^.70^,20^_73^-75^.7^,9^_98^-84^.2^,2^_10^!00^.70^,70^_70^!20^.70^,500^T1^3160^!00^.100^,700^T1^3130^!25^.40^,450^T2\"^c140^!20^.20^,50^T1^+140^!20^.20^,50^g5^3180^-70^.80^,520^T1^3-90^-60^.110^,10^_-80^!20^.100^,50^_-210^!10^.90^,60^_-100^-60^.30^,33^_-150^-60^.30^,33^_-83^!12^.19^,15^_-77^!14^.19^,15^_-71^!16^.19^,15^_-65^!18^.19^,150^T0\" /><inf x=\"70^-970^Zhero1_guns^;0\"^d100^-400^u1^t0^3-280^-40^.120^,26^_-60^-21^.120^,45^_-190^*10^.220^,430^T0^2-149^-42^.10^,180^x^y0^z0^h3^I^2-81^-42^.10^,180^x^y0^z0^h3^I^3-100^!08^.3^,4^_-123^!08^.3^,4^_-180^-78^.10^,10^_-210^-60^.20^,17^_-210^-86^.40^,70^T0^1-207^-861^A0^B0^C300^D300^q1^r-1^F7^E-1^k0^l-1^4-207^-840^iplasmagun^s1^M2^2-120^!08^.20^,40^x^y0^z0^h3^I\"^e-120^-60^.20^,40^K-1^J4\"^e-120^!08^.20^,40^K-1^J4\"^e-130^-93^.10^,170^K0^J6^8^G-1^m1^o0^m1^p2^m1^n1^m2^o19^m2^p0^m2^n0^m3^o20^m3^p1^m3^n0^m4^o-1^m4^p0^m4^n0^$\"^e-100^-93^.10^,170^K0^J6\"^e-118^-94^.16^,170^K1^J1^7^G-1^m1^o0^m1^p2^m1^n0^m2^o19^m2^p1^m2^n0^m3^o20^m3^p0^m3^n0^m4^o-1^m4^p0^m4^n0^$\"^e-130^-33^.10^,270^K1^J6\"^e-100^-33^.10^,270^K1^J6\"^e-118^-46^.16^,170^K0^J1^3-142^-29^.3^,13^_-81^-29^.3^,130^T0\"^e-138^-47^.8^,140^K2^J1\"^e-81^-59^.10^,180^K-1^J4\"^e-149^-59^.10^,180^K-1^J4^7^G1^m1^o0^m1^p1^m1^n9^>\"^e-69^-47^.8^,140^K3^J1^7^G1^m1^o0^m1^p0^m1^n10^>^3-149^-29^.3^,13^_-74^-29^.3^,13^_-148^-29^.8^,6^_-80^-29^.8^,60^T0^1-144^-421^A0^B0^C500^D500^q1^r1^F7^E-1^k0^l-1^1-76^-421^A0^B0^C500^D500^q1^r-1^F7^E-1^k0^l-1^1-198^!101^A0^B0^C500^D500^q1^r1^F7^E-1^k0^l-1^4-198^!080^iplasmagun^s1^M2^1-190^!101^A0^B0^C500^D500^q1^r1^F7^E-1^k0^l-1^1-181^!101^A0^B0^C1000^D1000^q1^r1^F11^E-1^k0^l-1^4-190^!080^iplasmagun^s1^M2^4-181^!080^iplasmagun^s1^M2^1-205^!101^A0^B0^C500^D500^q1^r1^F7^E-1^k0^l-1^4-205^!080^iplasmagun^s1^M2^1-162^!101^A0^B0^C350^D350^q1^r1^F8^E-1^k3^l-1^1-155^!101^A0^B0^C350^D350^q1^r1^F8^E-1^k3^l-1^1-148^!101^A0^B0^C350^D350^q1^r1^F8^E-1^k3^l-1^4-76^-410^ibfg^s-1^L4-144^-410^ibfg^s1^M2\"^d142^!230^u1^t0^3-174^!07^.8^,70^T0\" /><barrel x=\"-7^!180^jbar_orange^A0^B0\" /><barrel x=\"-2^!180^jbar_orange^A0^B0^3-280^!12^.77^,58^_-240^!06^.14^,14^_-270^-60^.14^,14^_-240^-60^.14^,140^T0\"^d-267^-75^~d-259^-75^~d-237^-75^~d-229^-75^~d-144^-41^~d-76^-41^~d-110^-340^u0.4^t1^3-129^-54^.5^,8^_-96^-54^.5^,8^_-300^-89^.30^,4^_-330^!06^.30^,4^_-330^!30^.60^,40^_-410^-67^.90^,103^_-340^-67^.30^,5^_-290^-58^.20^,50^T0\" /><barrel x=\"-293^-870^jbar_orange^A0^B0\" /><barrel x=\"-289^-870^jbar_orange^A0^B0\" /><barrel x=\"-304^!040^jbar_orange^A0^B0\" /><barrel x=\"-301^!040^jbar_orange^A0^B0^5180^*140^.80^,2100^A-3^B0^Y100^g0^5-90^*170^.120^,1600^A3^B0^Y100^g0\"^d131^-430^u1^t0\"^d160^-600^u1^t0^1-283^-891^A0^B0^C500^D500^q1^r1^F7^E-1^k0^l-1^4-283^-880^iplasmagun^s1^M2^1-298^-891^A0^B0^C500^D500^q1^r1^F7^E-1^k0^l-1^4-298^-880^iplasmagun^s1^M2^1-289^-851^A0^B0^C500^D500^q1^r1^F7^E-1^k0^l-1^4-289^-840^iplasmagun^s1^M2^1-296^!301^A0^B0^C500^D500^q1^r1^F7^E-1^k0^l-1^1-303^!301^A0^B0^C500^D500^q1^r1^F7^E-1^k0^l-1^1-314^!301^A0^B0^C500^D500^q1^r1^F7^E-1^k0^l-1^4-314^!280^iplasmagun^s1^M2^4-303^!280^iplasmagun^s1^M2^4-296^!280^iplasmagun^s1^M2^1-237^!061^A0^B0^C1000^D1000^q1^r1^F11^E-1^k0^l-1^1-232^!061^A0^B0^C1000^D1000^q1^r1^F11^E-1^k0^l-1^4-237^!040^iplasmagun^s1^M2^4-232^!040^iplasmagun^s1^M2^1-307^!061^A0^B0^C1000^D1000^q1^r1^F11^E-1^k0^l-1^1-315^!061^A0^B0^C1000^D1000^q1^r1^F11^E-1^k0^l-1^4-315^!030^iplasmagun^s1^M2^4-307^!030^iplasmagun^s1^M2^1-279^!121^A0^B0^C500^D500^q1^r1^F11^E-1^k0^l-1^4-279^!090^irailgun^s1^M3^4-279^!100^irailgun^s1^M3^4-275^-880^irailgun^s1^M3^4-232^!030^irailgun^s1^M3^3-272^-85^.4^,8^_-272^-63^.4^,150^T0\"^d-300^-400^u0.4^t1^3-340^*10^.73^,40^_-410^*10^.80^,80^_-250^*10^.94^,560^T0^4150^!240^jitem_grenade^s-1^M0\"^d-200^-95^~d-180^-95^~d-160^-95^~d-140^-95^~d-120^-95^~d-100^-95^~d-80^-95^~c50^-70^.30^,40^_99^-85^.1^,160^T0^4-314^!260^ibfg^s1^M2^3-100^!10^.31^,60^_-125^!12^.31^,58^_-250^-90^.6^,24^_-207^-92^.4^,80^T0^6-256^!120^jantigravity^U-1^O0^P0^5-262^-98^.12^,140^A0^B-1^Y0^g0\" /><barrel x=\"-242^!100^jbar_orange^A0^B0^3-169^-79^.2^,2^_-165^-79^.2^,2^_-161^-79^.2^,2^_-157^-79^.2^,2^_-153^-79^.2^,2^_-152^-67^.7^,7^_-283^!12^.10^,50^T0\"^e-270^*10^.24^,300^K4^J6^7^G1^m1^o7^m1^p1^m1^nc28a^>\"^e-302^-65^.32^,250^K5^J6^7^G1^m1^o43^m1^pWith a rocket, anything is possible... even jumping!^m1^n0^>\" />";
         this.CACHED_MAPS["c28a"] = "<q.^f46^!^A0^B0^C100^D100^q0^r1^F1^E-1^k0^l-1^3-10^-^.60^,140^_67^-^.83^,1400^T0\" /><inf x=\"46^*20^Zhero1_guns^;0^5-180^-20^.566^,1200^A0^B0^Y0^g1000^330^*23^.50^,7^_33^*30^.7^,12^_90^*3^.40^,8^_-19^*10^.39^,150^_13^*5^.14^,13^_110^*17^.10^,22^_138^*33^.22^,6^_134^*30^.46^,6^_146^*26^.8^,13^_140^-5^.168^,135^_200^*20^.57^,39^_190^*13^.13^,40^T0\" /><inf x=\"40^*40^Zsky^;2^376^*18^.7^,6^_167^*3^.13^,12^_-20^*15^.3^,90^T0\" /><barrel x=\"42^*250^jbar_blue^A0^B0\" /><barrel x=\"45^*250^jbar_blue^A0^B0\" /><barrel x=\"101^*50^jbar_blue^A0^B0\" /><barrel x=\"-5^*120^jbar_blue^A0^B0\" /><barrel x=\"132^*20^jbar_blue^A0^B0\" /><barrel x=\"136^*20^jbar_blue^A0^B0\" /><barrel x=\"164^-30^jbar_blue^A0^B0\" /><barrel x=\"162^*320^jbar_blue^A0^B0\" /><barrel x=\"194^*150^jbar_blue^A0^B0\" /><barrel x=\"197^*150^jbar_blue^A0^B0\" /><barrel x=\"184^-30^jbar_blue^A0^B0^2147^*52^.6^,200^x^y0^z0^h5^I\"^e147^*34^.6^,200^K-1^J4^7^G1^m1^o0^m1^p0^m1^n0^>\"^e191^*7^.8^,130^K0^J1\"^c45^!0^.27^,1300^T0\"^c30^*18^.53^,280^T0\"^c134^*30^.46^,500^T0\"^c180^*12^.30^,320^T0\"^c30^*23^.50^,50^T0\"^c15^*9^.15^,190^T0\"^c83^*15^.51^,35^_146^*59^.8^,80^T0\"^d-10^*500^u1^t0\"^d-30^*500^u1^t0\"^d10^*500^u1^t0\"^d30^*500^u1^t0\"^d80^*500^u1^t0\"^d100^*500^u1^t0\"^d120^*500^u1^t0\"^d140^*500^u1^t0\"^d180^*500^u1^t0\"^d200^*500^u1^t0\"^d220^*500^u1^t0^170^*229^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^470^*260^irl^s1^M2^154^*229^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^454^*260^irl^s1^M2^136^*299^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^436^*330^irailgun^s1^M2^1-14^*99^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^4-14^*130^igl^s1^M2^1114^*169^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4114^*200^irl^s1^M2^1136^*299^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1144^*329^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4136^*330^irl^s1^M2^4144^*360^irl^s1^M2^4136^*320^irailgun^s1^M2^4144^*350^irailgun^s1^M2^1142^!^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1169^*29^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4142^*20^irailgun^s1^M2^4142^*30^irl^s1^M2^4169^*60^irl^s1^M2^4169^*50^irailgun^s1^M2^1169^*299^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4169^*330^irl^s1^M2^4169^*320^irailgun^s1^M2^1205^*199^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1215^*199^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^1227^*199^A0^B0^C350^D350^q1^r-1^F8^E-1^k0^l-1^4205^*230^irl^s1^M2^4215^*230^irl^s1^M2^4227^*230^irl^s1^M2^4205^*220^irailgun^s1^M2^4215^*220^irailgun^s1^M2^4227^*220^irailgun^s1^M2\"^c147^*52^.6^,200^T4^3336^-5^.104^,135^_358^*1^.22^,130^T0\"^e360^*30^.81^,440^K1^J6^7^G1^m1^o7^m1^p1^m1^nc29a^>^3254^*16^.28^,80^T0\" /><barrel x=\"288^-30^jbar_blue^A0^B0\" /><barrel x=\"291^-30^jbar_blue^A0^B0^1267^-51^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^1279^-51^A0^B0^C350^D350^q1^r1^F8^E-1^k0^l-1^4267^-20^irl^s1^M2^4279^-20^irl^s1^M2\" />";
         this.CACHED_MAPS["c29a"] = "<q.^f-156^-201^A0^B0^C100^D100^q1^r1^F3^E-1^k0^l-1\"^c-340^*150^.530^,210^_-210^*60^.352^,40^_-340^-20^.530^,40^_-110^*40^.40^,40^_-340^*60^.170^,60^_-143^*21^.2^,3^_-139^*21^.2^,30^T0\"^d-140^*190^u0.4^t1^3-43^*21^.2^,3^_-39^*21^.2^,30^T0\"^d-40^*190^u0.4^t1^1-196^-201^A0^B0^C1000^D1000^q0^r1^F8^E-1^k1^l9^1-189^-201^A0^B0^C1000^D1000^q0^r1^F8^E-1^k1^l9^5-340^-^.130^,200^A1^B0^Y100^g0^1-182^-201^A0^B0^C1000^D1000^q0^r1^F11^E-1^k1^l9^4-189^!70^i^&^#^s-1^L4-196^!70^i^/2^s-1^L37^*21^.2^,30^T0\"^d10^*190^u0.4^t1^311^*21^.2^,3^_57^*21^.2^,30^T0\"^d60^*190^u0.4^t1^361^*21^.2^,3^_107^*21^.2^,3^_111^*21^.2^,30^T0\"^d110^*190^u0.4^t1^3-50^-5^.30^,2^_^*2^.30^,2^_50^*2^.30^,2^_110^*2^.30^,2^_-52^-5^.3^,5^_-21^-5^.3^,5^_-2^*2^.3^,5^_29^*2^.3^,5^_48^*2^.3^,5^_79^*2^.3^,5^_108^*2^.3^,5^_139^*2^.3^,250^T0^2142^*2^.18^,40^x^y0^z0^h3^I^3160^*60^.90^,1200^T0\"^e109^*17^.15^,160^K0^J6^7^G1^m1^o48^m1^p3^m1^n5^m2^o48^m2^p2^m2^n5^m3^o48^m3^p1^m3^n5^m4^o48^m4^p8^m4^n5^m5^o48^m5^p9^m5^n5^m6^o48^m6^p10^m6^n5^m7^o48^m7^p11^m7^n5^m8^o20^m8^p9^m8^n0^m9^o-1^m9^p0^m9^n0^m10^o-1^m10^p0^m10^n0^2-175^-^.4^,200^x^y0^z0^h3^I^2-209^*19^.4^,200^x^y0^z0^h3^I\"^e-209^-^.4^,200^K-1^J4\"^e-175^*19^.4^,200^K-1^J4^9^G1^X1^W20^7^G1^m1^o0^m1^p2^m1^n1^m2^o0^m2^p1^m2^n2^m3^o19^m3^p9^m3^n0^m4^o-1^m4^p0^m4^n0^$\"^e-204^-7^.9^,140^K2^J1^7^G1^m1^o0^m1^p3^m1^n4^>^4-189^!80^i^/2^s-1^L4-196^!80^i^&^#^s-1^L2139^*20^.3^,180^x^y0^z0^h50^I\"^e139^*2^.3^,180^K-1^J4\"^e139^*20^.3^,180^K-1^J4\"^e150^*20^.10^,180^K3^J6^7^G1^m1^o0^m1^p3^m1^n5^m2^o0^m2^p0^m2^n7^)^35^!5^.6^,8^_52^!5^.7^,9^_-110^!4^.40^,16^_140^-2^.26^,210^T0\"^e142^*40^.18^,40^K4^J5^7^G1^m1^o25^m1^p1^m1^n0^>^a^G1^X0^W30^1139^*599^A0^B0^C150^D150^q0^r1^F8^E-1^k0^l-1^4139^*630^i^&^#^s-1^L1163^*599^A0^B0^C150^D150^q0^r-1^F8^E-1^k0^l-1^4163^*630^i^&^#^s-1^L3170^*210^.80^,160^_100^*100^.90^,200^T0^177^*599^A0^B0^C150^D150^q0^r1^F8^E-1^k0^l-1^183^*599^A0^B0^C150^D150^q0^r1^F8^E-1^k0^l-1^483^*630^i^&^#^s-1^L477^*630^i^&^#^s-1^L116^-201^A0^B0^C1000^D1000^q0^r-1^F8^E-1^k0^l-1^447^!70^i^/2^s-1^L137^-201^A0^B0^C1000^D1000^q0^r-1^F8^E-1^k0^l-1^147^-201^A0^B0^C1000^D1000^q0^r-1^F8^E-1^k0^l-1^170^-201^A0^B0^C1000^D1000^q0^r-1^F8^E-1^k0^l-1^4-35^-40^jitem_grenade^s-1^L437^!70^i^/2^s-1^L470^!70^i^/2^s-1^M0\"^d90^*830^u0.4^t1^340^*100^.70^,10^_40^*100^.20^,300^T0\" /><vehicle x=\"63^*750^r1^jveh_crate^A0^B0\" hpp=\"100^463^*740^irailgun2^s-1^L358^*73^.8^,3^_120^*70^.10^,21^_-20^*70^.40^,20^_-30^*90^.30^,10^_-10^*84^.20^,4^_30^*90^.16^,7^_-140^*100^.100^,50^_50^*105^.40^,15^_-340^*150^.280^,100^_-140^*150^.120^,30^_-20^*107^.20^,4^_10^*107^.20^,4^_-30^*65^.20^,110^T0^1-19^*899^A0^B0^C200^D200^q0^r1^F8^E-1^k0^l-1^4-19^*930^irl^s0^L1-3^*899^A0^B0^C200^D200^q0^r1^F8^E-1^k0^l-1^4-3^*930^irl^s0^L1-24^*649^A0^B0^C200^D200^q0^r1^F8^E-1^k0^l-1^4-24^*680^irl^s0^L142^*999^A0^B0^C200^D200^q0^r-1^F8^E-1^k0^l-1^138^*899^A0^B0^C200^D200^q0^r-1^F8^E-1^k0^l-1^438^*930^irailgun^s0^L442^*1030^irailgun^s0^M0\" /><barrel x=\"22^*620^jbar_blue^A0^B0\" /><barrel x=\"25^*620^jbar_blue^A0^B0\" /><barrel x=\"2^*860^jbar_blue^A0^B0^1-44^*999^A0^B0^C200^D200^q0^r1^F8^E-1^k0^l-1^4-44^*1030^irailgun^s0^L1-53^*999^A0^B0^C200^D200^q0^r1^F8^E-1^k0^l-1^4-53^*1030^irailgun^s0^L4-53^*1020^irl^s0^M0\"^d5^*96^~d-36^*74^~d41^*1180^u0.4^t1^350^*150^.40^,300^T0^2140^*104^.30^,40^x^y0^z0^h3^I^1150^*1039^A0^B0^C200^D200^q0^r-1^F8^E-1^k0^l-1^1161^*1039^A0^B0^C200^D200^q0^r-1^F8^E-1^k0^l-1^4150^*1070^irailgun^s0^L4161^*1070^irailgun^s0^L3117^*104^.23^,90^T0\"^e140^*210^.30^,40^K-1^J4\"^e160^*120^.9^,170^K5^J1^7^G-1^m1^o0^m1^p4^m1^n8^>\"^e120^*120^.17^,170^K6^J1^7^G-1^m1^o0^m1^p4^m1^n11^>\"^e140^*104^.30^,40^K-1^J4^3110^*130^.30^,3^_100^*140^.7^,70^T0^1112^*1299^A0^B0^C200^D200^q0^r-1^F8^E-1^k0^l-1^1138^*1299^A0^B0^C200^D200^q0^r-1^F8^E-1^k0^l-1^4138^*1330^irailgun^s0^L4112^*1330^irailgun^s0^M0\"^d100^*1800^u1^t0\"^d120^*1800^u1^t0\"^d140^*1800^u1^t0\"^d80^*1800^u1^t0\"^d60^*1800^u1^t0\"^d40^*1800^u1^t0\"^d20^*1800^u1^t0\"^d^*1800^u1^t0\"^d-20^*1800^u1^t0\"^d-40^*1800^u1^t0\" /><inf x=\"85^*1650^Zsky^;2\"^d150^*700^u0.4^t1^5-121^*286^.101^,1360^A2^B0^Y100^g0\"^e130^*300^.40^,1300^K7^J6^7^G1^m1^o7^m1^p2^m1^nc30a^>\" /><inf x=\"119^*30^Zhero2_guns^;1^9^G1^X8^W40^7^G1^m1^o42^m1^pHalt! There\'s an intruder! She must be stopped!^m1^n4^>^8^G1^m1^o42^m1^pI\'m back! Did you miss me?^m1^n3^>\" />";
         this.CACHED_MAPS["c30a"] = "<q.^f-165^-261^A0^B0^C100^D100^q0^r1^F3^E-1^k0^l-1\"^c-86^*19^.49^,270^T0\"^c-184^*21^.38^,23^_-150^-^.380^,150^_-185^*26^.5^,560^T0^2-180^-26^.30^,40^x^y0^z0^h3^I\" /><inf x=\"-165^-240^Zhero2_guns^;0^3-182^*22^.37^,60^T0^5-342^-30^.209^,700^A0^B0^Y0^g1000\"^e-176^*14^.22^,150^K0^J1\"^c-149^*16^.3^,160^T4^2-149^*16^.3^,160^x^y0^z0^h10^I\"^e-149^*1^.3^,160^K-1^J4^7^G1^m1^o0^m1^p1^m1^n1^>^1-137^!^A0^B0^C200^D200^q1^r1^F8^E-1^k0^l2^4-137^*30^i^&^#^s-1^L1-125^!^A0^B0^C200^D200^q1^r1^F8^E-1^k0^l2^4-125^*30^i^&^#^s-1^L1-147^*219^A0^B0^C200^D200^q1^r1^F8^E-1^k0^l2^4-147^*250^i^&^%^s-1^L3-183^*29^.29^,120^T0\"^d-115^*400^u1^t0\"^d-230^!000^u1^t0\" /><barrel x=\"-152^*240^jbar_blue^A0^B0\" /><inf x=\"-140^*270^Zsky^;2^3-330^-60^.70^,900^T0^9^G1^X1^W0\"^e-180^-^.30^,40^K-1^J4^7^G1^m1^o0^m1^p0^m1^n2^>^3-122^*5^.12^,90^T0^1-85^!^A0^B0^C300^D300^q2^r-1^F6^E-1^k0^l3^4-85^*30^ia^#2^s2^L1-74^*199^A0^B0^C300^D300^q2^r-1^F6^E-1^k0^l3^4-74^*220^irl^s2^M3^1-69^!^A0^B0^C200^D200^q2^r-1^F2^E-1^k0^l-1^1-54^*259^A0^B0^C200^D200^q2^r-1^F2^E-1^k0^l3^4-69^*30^ia^#^s2^L4-54^*290^ia^#^s2^L3-87^*20^.18^,4^_-71^*26^.12^,10^_-63^*26^.27^,5^_-85^*18^.4^,7^_-55^*8^.25^,180^T0^1-40^*259^A0^B0^C200^D200^q2^r-1^F2^E-1^k0^l3^1-41^*79^A0^B0^C200^D200^q2^r-1^F2^E-1^k0^l-1^4-40^*290^ia^#^s2^L4-41^*110^ia^#^s2^M0\"^c-62^*24^.25^,50^T0\"^d-6^*400^u1^t0\" /><barrel x=\"-133^*20^jbar_blue^A0^B0\" /><barrel x=\"-130^*20^jbar_blue^A0^B0\" /><barrel x=\"-63^*280^jbar_blue^A0^B0\" /><barrel x=\"-108^*20^jbar_blue^A0^B0\" /><barrel x=\"-24^*20^jbar_blue^A0^B0^3-180^*50^.16^,28^_-2^*6^.98^,20^_16^*21^.22^,35^_77^*21^.37^,35^_62^*14^.33^,28^_6^*14^.19^,280^T0^113^*139^A0^B0^C200^D200^q2^r-1^F2^E-1^k0^l-1^1-8^!^A0^B0^C200^D200^q2^r-1^F2^E-1^k0^l3^13^*59^A0^B0^C200^D200^q2^r-1^F2^E-1^k0^l3^4-8^*30^ia^#^s2^L43^*90^ia^#^s2^L413^*170^ia^#^s2^L1101^*209^A0^B0^C200^D200^q2^r-1^F2^E-1^k0^l-1^4101^*240^ibfg^s2^L1126^!^A0^B0^C200^D200^q2^r-1^F2^E-1^k0^l-1^4126^*30^ibfg^s2^L352^*33^.35^,5^_79^*31^.7^,140^T0^161^*329^A0^B0^C200^D200^q2^r-1^F2^E-1^k0^l3^461^*360^ibfg^s2^L176^*329^A0^B0^C200^D200^q2^r-1^F2^E-1^k0^l-1^476^*360^ibfg^s2^L9^G1^X0^W120^21^*150^.34^,4^(I^217^*167^.3^,21^(I^2^*167^.3^,21^(I^2^*167^.35^,4^(I^232^*167^.3^,21^(I^110^*1499^A0^B0^C200^D200^q1^r1^F8^E-1^k3^l2^410^*1530^irailgun^s1^L126^*1499^A0^B0^C200^D200^q2^r-1^F2^E-1^k3^l3^426^*1530^ia^#^s2^L7^G20^m1^o28^m1^p17^m1^n-4^>^7^G20^m1^o28^m1^p18^m1^n-3^>\"^e-140^*60^.236^,30^K-1^J4\"^e-145^*50^.259^,30^K-1^J4^331^*14^.12^,140^T0^1-85^*199^A0^B0^C200^D200^q1^r1^F8^E-1^k0^l2^4-85^*230^i^&^#^s-1^L1-96^!^A0^B0^C200^D200^q1^r1^F8^E-1^k0^l2^4-96^*30^i^&^#^s-1^L3140^*14^.90^,240^T0\"^e150^*40^.80^,400^K4^J6^7^G1^m1^o7^m1^p2^m1^nc31a^>^9^G1^X5^W30^7^G1^m1^o42^m1^pAliens are attacking our base! Call for reinforcements now!^m1^n4^>^7^G1^m1^o42^m1^pI will die before I surrender to these monsters!^m1^n4^>^7^G1^m1^o42^m1^pWe must stop them! Don\'t stop shooting!^m1^n4^>^9^G1^X6^W100^9^G1^X7^W200^7^G1^m1^o42^m1^pMan, I hate those aliens, they remind me of my wife!^m1^n4^>^7^G1^m1^o42^m1^pHold them off for as long as possible!^m1^n4^>^9^G1^X8^W260^9^G1^X9^W340\" /><inf x=\"-135^*270^Zmeat^;0\" />";
         this.CACHED_MAPS["c31a"] = "<q.^f-56^*599^A3^B6^C100^D100^q0^r1^F3^E-1^k0^l-1\"^e99^*14^.47^,280^K8^J6\"^c134^*30^.306^,1100^T0\"^c46^!0^.14^,330^T0\" /><inf x=\"-56^*620^Zhero2_guns^;0^5-150^*155^.90^,950^A2^B0^Y100^g0^3-150^-40^.90^,14^_-80^-38^.18^,9^_-80^!3^.18^,90^T0^2-70^-22^.6^,16^(I^2-78^-22^.6^,16^(I^3-70^-43^.20^,7^_-20^-43^.40^,7^_40^-43^.30^,7^_-70^-70^.217^,400^T0^+-60^-50^.190^,200^g0^+-50^-46^.30^,40^g0^+20^-46^.20^,40^g0\"^c-150^!0^.90^,400^T0\"^c-70^-44^.210^,360^T0\"^d-40^-0^u1^t0\"^d-20^-0^u1^t0\"^d^-0^u1^t0\"^d20^-0^u1^t0\"^d40^*100^u1^t0\"^d60^*200^u1^t0^1-12^-431^A0^B0^C200^D200^q1^r1^F8^E-1^k0^l4^4-12^-400^irailgun2^s1^M3^1-7^-431^A0^B0^C200^D200^q1^r1^F8^E-1^k0^l4^4-7^-400^irailgun2^s1^M3^143^-431^A0^B0^C200^D200^q1^r-1^F8^E-1^k0^l4^151^-411^A0^B0^C200^D200^q1^r-1^F8^E-1^k0^l4^443^-400^irailgun^s1^M3^452^-380^irailgun^s1^M3^360^!0^.20^,440^T0^246^-40^.14^,3^(I^3-150^*60^.90^,800^T0\"^c57^!1^.1^,310^T4\"^c48^!1^.1^,310^T4^370^!0^.50^,10^_130^-58^.15^,32^_100^-44^.40^,60^T0\"^d102^-24^~c74^!4^.70^,300^T0\"^c120^!0^.20^,100^T0\"^d80^*300^u1^t0\"^d100^*300^u1^t0\"^d120^*300^u1^t0^3-150^-58^.90^,52^_-150^-47^.80^,200^T0^+-70^-54^.10^,40^g0^2-70^-54^.20^,40^x^y0^z0^h3^I^3130^-46^.15^,8^_140^!0^.10^,700^T0^+130^-54^.10^,40^g0\"^e-70^-54^.20^,40^K0^J5^7^G-1^m1^o0^m1^p3^m1^n2^>^7^G-1^m1^o0^m1^p3^m1^n1^>\"^e120^-54^.20^,40^K1^J5^9^G1^X0^W100\"^c-69^-55^.208^,20^T4^4-57^-530^jitem_grenade^s-1^L4-53^-530^jitem_grenade^s-1^L4138^-570^jitem_grenade^s-1^L4134^-570^jitem_grenade^s-1^L7^G0^m1^o-1^m1^p0^m1^n0^>\"^e101^-28^.15^,170^K2^J1^389^-5^.21^,9^_95^*4^.8^,12^_144^-71^.216^,390^T0\"^e-18^*60^.153^,20^K-1^J4^2-167^*39^.24^,8^(I^2-169^*54^.7^,18^(I^2-167^*54^.19^,5^(I^1-155^*389^A0^B0^C200^D200^q1^r-1^F8^E-1^k3^l-1^4-155^*420^irailgun2^s1^M3^a^G10^X3^W10^7^G10^m1^o28^m1^p5^m1^n-3^>^7^G1^m1^o25^m1^p1^m1^n0^>^3156^!6^.14^,64^_176^-22^.14^,58^_196^-30^.14^,50^_216^-22^.14^,58^_156^*33^.14^,33^_176^*33^.14^,18^_196^*33^.14^,24^_216^*33^.14^,27^_134^*33^.16^,23^_236^-31^.14^,49^_256^-25^.14^,55^_276^-22^.14^,58^_256^!0^.14^,5^_236^*33^.14^,33^_276^*33^.14^,23^_296^!6^.14^,64^_296^*33^.14^,33^_316^*33^.14^,33^_334^*33^.106^,39^_316^!0^.14^,70^_334^!6^.106^,940^T0\"^d153^*310^u0.6^t0\"^d174^*310^u0.6^t0\"^d193^*310^u0.6^t0\"^d213^*310^u0.6^t0\"^d233^*310^u0.6^t0\"^d253^*310^u0.6^t0\"^d273^*310^u0.6^t0\"^d293^*310^u0.6^t0\"^d313^*310^u0.6^t0\"^d332^*310^u0.6^t0^3256^*33^.14^,32^_196^-8^.14^,12^_276^-3^.14^,7^_236^!6^.14^,5^_176^*8^.14^,80^T0\" /><barrel x=\"199^-60^jbar_blue^A0^B0\" /><barrel x=\"203^-60^jbar_blue^A0^B0\" /><barrel x=\"180^*100^jbar_blue^A0^B0\" /><barrel x=\"205^-280^jbar_blue^A0^B0\" /><barrel x=\"208^-280^jbar_blue^A0^B0\" /><barrel x=\"178^-200^jbar_blue^A0^B0\" /><barrel x=\"246^-290^jbar_blue^A0^B0\" /><barrel x=\"246^!40^jbar_blue^A0^B0\" /><barrel x=\"249^!40^jbar_blue^A0^B0\" /><barrel x=\"258^-230^jbar_blue^A0^B0\" /><barrel x=\"228^-200^jbar_blue^A0^B0\" /><barrel x=\"268^-80^jbar_blue^A0^B0\" /><barrel x=\"282^!0^jbar_blue^A0^B0\" /><barrel x=\"285^!0^jbar_blue^A0^B0\" /><barrel x=\"278^-200^jbar_blue^A0^B0\" /><barrel x=\"281^-200^jbar_blue^A0^B0\" /><barrel x=\"308^!40^jbar_blue^A0^B0\" /><barrel x=\"335^!40^jbar_blue^A0^B0\" /><barrel x=\"338^!40^jbar_blue^A0^B0\" /><barrel x=\"304^!40^jbar_blue^A0^B0^1188^*79^A0^B0^C200^D200^q1^r-1^F8^E-1^k0^l-1^4188^*100^irl^s1^M3^1207^-81^A0^B0^C200^D200^q1^r-1^F8^E-1^k0^l-1^1188^-221^A0^B0^C200^D200^q1^r-1^F8^E-1^k0^l-1^1221^-221^A0^B0^C200^D200^q1^r-1^F8^E-1^k0^l-1^1258^!01^A0^B0^C200^D200^q1^r-1^F8^E-1^k0^l-1^1278^-31^A0^B0^C200^D200^q1^r-1^F8^E-1^k0^l-1^1322^!01^A0^B0^C200^D200^q1^r-1^F8^E-1^k0^l-1^1285^-221^A0^B0^C200^D200^q1^r-1^F8^E-1^k0^l-1^1344^!61^A0^B0^C200^D200^q1^r-1^F8^E-1^k0^l-1^4207^-50^irl^s1^M3^4188^!90^irl^s1^M3^4221^!90^irl^s1^M3^4258^-70^irl^s1^M3^4278^-0^irl^s1^M3^4285^!90^irl^s1^M3^4322^-70^irl^s1^M3^4344^!30^irl^s1^M3^5150^-68^.200^,30^A0^B0^Y0^g1000^5136^*30^.214^,100^A0^B0^Y100^g0^1262^-251^A0^B0^C200^D200^q1^r-1^F8^E-1^k0^l-1^4262^-220^irl^s1^M3^1238^-311^A0^B0^C200^D200^q1^r-1^F8^E-1^k0^l-1^4238^-280^irl^s1^M3^1238^!61^A0^B0^C200^D200^q1^r-1^F8^E-1^k0^l-1^4238^!30^irl^s1^M3\"^e360^-^.80^,210^K5^J6^7^G1^m1^o7^m1^p2^m1^nc32a^>\" /><inf x=\"-51^*480^Zsky^;2\"^e-59^*30^.25^,240^K6^J4^7^G1^m1^o43^m1^pPsst, hide...^m1^n0^>\"^e116^-24^.24^,210^K7^J6^7^G-1^m1^o43^m1^pYou really should think about that grenade jump!^m1^n0^>^7^G-1^m1^o43^m1^p0^m1^n0^>^3136^-20^.13^,2^_112^-20^.12^,2^_112^!8^.8^,4^_139^-32^.10^,15^_137^-24^.12^,2^_138^-28^.11^,2^_128^!1^.4^,20^T0\" />";
         this.CACHED_MAPS["c32a"] = "<q.^f-120^*199^A0^B0^C100^D100^q0^r1^F3^E-1^k0^l-1\"^c60^*160^.30^,480^T0^7^G-1^m1^o43^m1^pStand against a wall and look at the place where your feet collides with fall, jump and start firing plasma!^m1^n0^>\"^c-210^*112^.336^,113^_-210^*20^.120^,50^_-210^*60^.120^,30^_-100^*10^.60^,40^_-50^*20^.20^,50^_-36^*17^.68^,47^_-100^*38^.20^,40^T0\" /><inf x=\"-120^*230^Zhero2_guns_nonades^;0^1-87^*99^A0^B0^C200^D200^q1^r1^F7^E-1^k0^l-1^1196^*489^A0^B0^C200^D200^q2^r-1^F2^E-1^k3^l-1^4196^*510^ia^#^s2^M3^1-78^*99^A0^B0^C300^D300^q1^r1^F12^E-1^k0^l-1^1-59^*99^A0^B0^C300^D300^q1^r1^F12^E-1^k0^l-1^4-87^*130^i^&^%^s1^M3^3-15^*38^.39^,5^_-66^*34^.9^,10^_-71^*35^.35^,40^T0^1-61^*349^A0^B0^C200^D200^q1^r1^F7^E-1^k3^l-1^1-85^*379^A0^B0^C200^D200^q1^r1^F7^E-1^k3^l-1^4-85^*410^iplasmagun^s1^M3^4-61^*380^iplasmagun^s1^M3^1185^*489^A0^B0^C300^D300^q2^r-1^F6^E-1^k3^l3^4185^*510^ia^#2^s2^M3^3-72^*38^.4^,4^_-97^*56^.24^,6^_-45^*56^.35^,6^_-64^*56^.12^,40^T0^2171^*66^.8^,21^(I^2167^*49^.43^,5^(I^2200^*66^.13^,25^(I^2168^*72^.40^,13^(I^320^*38^.106^,68^_58^*70^.68^,45^_58^*112^.68^,28^_78^*170^.48^,113^_7^*66^.35^,6^_8^*85^.29^,5^_-41^*86^.32^,6^_-77^*72^.35^,4^_-50^*86^.10^,18^_5^*66^.3^,9^_-11^*59^.3^,9^_-210^*99^.90^,460^T0^2-133^*30^.6^,10^(I^3-290^*124^.110^,154^_-124^*99^.38^,9^_11^*46^.29^,120^T0\"^d70^*1700^u0.4^t0\"^d50^*1600^u0.4^t0\"^d30^*1500^u0.4^t0\"^d10^*1400^u0.4^t0\"^d-10^*1300^u0.4^t0\"^d-30^*1300^u0.4^t0\"^d-50^*1300^u0.4^t0\"^d-70^*1300^u0.4^t0\"^d-90^*1300^u0.4^t0\"^d-110^*1400^u0.4^t0\"^d-130^*1500^u0.4^t0\" /><inf x=\"-51^*1410^Zsky^;2^3-92^*93^.9^,80^T0\"^d-75^*44^~d-25^*43^~d-25^*72^~d-103^*76^~d68^*78^~e-90^*116^.150^,20^K-1^J4\"^e-90^*118^.150^,20^K-1^J4\"^e-116^*32^.24^,140^K1^J6^7^G1^m1^o25^m1^p0^m1^n0^>^a^G10^X2^W60^7^G10^m1^o28^m1^p7^m1^n-1^m2^o28^m2^p2^m2^n-1^m3^o28^m3^p2^m3^n-1^m4^o-1^m4^p0^m4^n0^$^7^G-1^m1^o25^m1^p0^m1^n0^>^649^*380^jantigravity^U-1^O0^P0^543^*66^.13^,280^A0^B-1^Y0^g0^6-84^*560^jantigravity^U-1^O0^P0^5-90^*72^.12^,160^A0^B-1^Y0^g0^333^*98^.9^,180^T0^2-70^*36^.3^,4^(H^2-210^*40^.83^,30^(H^560^*274^.67^,1090^A-2^B0^Y100^g0^4-105^*210^iplasmagun^s0^M3^3-154^*138^.7^,18^_-290^*180^.143^,340^T0\"^c-290^*149^.140^,290^T0\"^d-182^*1440^u0.4^t1\" /><vehicle x=\"-140^*1150^r1^jveh_crate^A0^B0\" hpp=\"100^3-147^*113^.2^,2^_-142^*113^.5^,17^_-134^*113^.2^,20^T0^4-140^*1140^iplasmagun^s0^M3\" /><inf x=\"-194^*1270^Zhero2_guns_nades^;0^3-198^*127^.8^,50^T0\"^e-188^*146^.38^,220^K4^J6\"^e-181^*123^.28^,20^K-1^J4^2-208^*123^.28^,20^x^y0^z0^h20^I^7^G-1^m1^o0^m1^p7^m1^n4^m2^o19^m2^p4^m2^n0^m3^o20^m3^p5^m3^n0^m4^o43^m4^p0^m4^n0^$\"^e-208^*123^.28^,20^K-1^J4\"^e-180^*114^.27^,160^K5^J6^8^G-1^m1^o0^m1^p7^m1^n5^m2^o19^m2^p5^m2^n0^m3^o20^m3^p4^m3^n0^m4^o-1^m4^p0^m4^n0^$\"^e-290^*149^.80^,290^K6^J6^7^G1^m1^o7^m1^p2^m1^nc33a^>\"^e-182^*110^.41^,130^K0^J6^3-150^*138^.5^,30^T0^7^G-1^m1^o0^m1^p8^m1^n10^>\"^c-145^*137^.205^,10^T4^360^*138^.10^,3^_70^*125^.11^,30^T0\"^e-145^*138^.5^,30^K-1^J4\"^e55^*138^.5^,30^K-1^J4\"^e67^*124^.14^,140^K7^J1^2-110^*138^.5^,30^x^y0^z0^h6^I^7^G-1^m1^o0^m1^p8^m1^n9^>^360^*165^.30^,70^T0\"^e58^*151^.14^,140^K8^J1^2-272^*200^.6^,23^(H^2-288^*200^.6^,23^(H^2-288^*200^.22^,6^(H^1-277^*1799^A0^B0^C350^D350^q2^r1^F2^E-1^k9^l-1^4-277^*1830^irailgun2^s2^M3\"^e-70^*152^.10^,210^K9^J6^7^G1^m1^o14^m1^p8^m1^n14^>\"^e-142^*124^.4^,70^K-1^J4\" /><inf x=\"-110^*630^Zmeat^;0\" />";
         this.CACHED_MAPS["c33a"] = "<q.^f104^*479^A0^B0^C100^D100^q0^r1^F3^E-1^k0^l-1\"^c-150^*80^.270^,110^_93^*41^.97^,41^_79^*32^.25^,3^_48^*41^.26^,4^_36^*39^.22^,9^_76^*29^.8^,4^_36^*14^.154^,84^_32^*17^.28^,5^_-75^*17^.81^,5^_-71^*14^.71^,64^_-119^!2^.179^,58^_14^*39^.9^,6^_7^*37^.12^,4^_-9^*52^.8^,12^_-9^*21^.11^,6^_-65^*56^.59^,9^_-70^*52^.8^,12^_-50^*50^.29^,5^_-50^*34^.29^,4^_-70^*21^.10^,6^_-45^*32^.19^,17^_25^*55^.11^,3^_34^*58^.4^,8^_-71^*140^.161^,70^_110^*140^.80^,1100^T0\"^c80^*140^.40^,600^T0\" /><inf x=\"104^*500^Zhero2_guns^;0^3-26^*37^.4^,5^_-210^*40^.115^,110^_-150^*140^.55^,800^T0\"^c-110^*140^.50^,600^T0\" /><vehicle x=\"90^*350^r1^jveh_crate^A0^B0\" hpp=\"100\"^d66^*32^~d-17^*39^~d-54^*39^~d-108^*500^u0.4^t1^3-210^*140^.80^,140^_10^*75^.10^,15^_50^*77^.19^,150^T0^640^*300^jray_ceil^U-1^O0^P0^640^*170^jray_floor^U-1^O0^P0\"^d40^*180^u0.4^t0\"^d40^*290^u0.4^t0^539^*30^.2^,130^A0^B0^Y0^g-100^192^*209^A0^B0^C300^D300^q1^r-1^F2^E-1^k0^l-1^192^*129^A0^B0^C300^D300^q1^r-1^F2^E-1^k0^l-1^492^*170^irl^s1^M3^119^*389^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^131^*549^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^1-12^*559^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^1-23^*559^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^492^*240^irl^s1^M3^419^*420^irl^s1^M3^431^*580^irl^s1^M3^4-12^*590^irl^s1^M3^4-23^*590^irl^s1^M3^57^*12^.24^,240^A0^B-1^Y0^g0^613^!20^jantigravity^U-1^O0^P0^625^!20^jantigravity^U-1^O0^P0^3-26^*47^.4^,70^T0^1-29^*339^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^4-29^*370^irl^s1^M3^1-40^*339^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^1-22^*169^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^4-40^*370^irl^s1^M3^4-22^*200^irl^s1^M3\" /><vehicle x=\"84^*350^r1^jveh_crate^A0^B0\" hpp=\"100^492^*160^irailgun^s1^M3^492^*230^irailgun^s1^M3^431^*570^irailgun^s1^M3^419^*410^irailgun^s1^M3^4-22^*190^irailgun^s1^M3^4-29^*360^irailgun^s1^M3^4-40^*360^irailgun^s1^M3^4-23^*580^irailgun^s1^M3^4-12^*580^irailgun^s1^M3^379^*32^.5^,70^T0^492^*250^iplasmagun^s1^M3^492^*180^iplasmagun^s1^M3^419^*430^iplasmagun^s1^M3^431^*590^iplasmagun^s1^M3^4-22^*210^iplasmagun^s1^M3^4-12^*600^iplasmagun^s1^M3^4-23^*600^iplasmagun^s1^M3^4-29^*380^iplasmagun^s1^M3^4-40^*380^iplasmagun^s1^M3\"^d3^*67^~d36^*680^u0.4^t1^358^*77^.22^,200^T0\"^e18^*1^.16^,140^K0^J1^2-32^*71^.5^,160^x^y0^z0^h5^I\"^e-32^*85^.5^,160^K-1^J4^7^G1^m1^o0^m1^p0^m1^n1^>^590^*140^.20^,600^A0^B2^Y100^g0^+-95^*10^.24^,220^g0^3-103^*30^.13^,50^T0^6-82^!20^jantigravity0^U-1^O0^P0\"^e-59^*29^.13^,130^K1^J1^7^G1^m1^o34^m1^p4^m1^nantigravity^m2^o36^m2^p3^m2^n-1^)^5-90^*140^.15^,1520^A0^B0^Y0^g0^2-89^!1^.13^,3^(H^2-97^*86^.26^,60^x^y0^z0^h10^I\"^e-71^*86^.26^,60^K-1^J4^7^G1^m1^o0^m1^p2^m1^n3^>\"^e-64^*66^.10^,110^K2^J1^1-115^*399^A0^B0^C300^D300^q1^r1^F2^E-1^k0^l-1^4-115^*430^irailgun2^s1^M3^4-115^*450^igl^s1^M3^1-82^*59^A0^B0^C0^D0^q1^r1^F2^E-1^k0^l-1\" /><barrel x=\"-85^!00^jbar_blue^A0^B0\" /><barrel x=\"-87^!00^jbar_blue^A0^B0\"^e-110^*140^.52^,400^K3^J6^7^G1^m1^o7^m1^p2^m1^nc34a^>\" />";
         this.CACHED_MAPS["c34a"] = "<q.^f60^-341^A0^B-10^C100^D100^q0^r1^F3^E-1^k0^l-1\"^c-138^*90^.344^,140^_-21^-^.71^,90^_70^-^.180^,90^_20^*4^.20^,14^_85^*4^.15^,14^_20^*34^.20^,14^_80^*34^.20^,14^_10^*40^.47^,16^_63^*40^.47^,16^_50^*45^.20^,130^T0\"^d41^*230^u0.4^t1^553^-7^.14^,830^A0^B-1^Y0^g0\" /><inf x=\"60^-320^Zhero2_guns^;0\"^d41^*1^~d79^*1^~d79^*23^~d60^*31^~e45^*17^.30^,150^K0^J6^7^G1^m1^o0^m1^p0^m1^n1^>^270^!^.20^,60^x^y0^z0^h10^I\"^e50^!^.20^,60^K-1^J4^164^-591^A0^B-10^C0^D0^q1^r1^F2^E-1^k0^l-1^3170^*46^.80^,86^_-200^-30^.200^,60^_-200^-^.120^,50^_-200^*40^.90^,450^T0^+-80^!0^.59^,200^g1000^3-30^*40^.20^,16^_-79^*35^.95^,9^_-98^*32^.23^,4^_-135^*110^.85^,50^_-60^*110^.140^,40^_-200^*110^.80^,800^T0^6-104^-0^jantigravity0^U-1^O0^P0^2-110^*1^.11^,1^(H^6-60^-300^jantigravity0^U-1^O0^P0^6-40^-300^jantigravity0^U-1^O0^P0\"^e-47^*10^.14^,200^K1^J1\"^e-67^*10^.14^,200^K2^J1^5-70^*6^.20^,360^A0^B0^Y0^g0^5-50^*6^.20^,360^A0^B0^Y0^g0^7^G1^m1^o36^m1^p2^m1^n-1^m2^o34^m2^p2^m2^nantigravity^m3^o36^m3^p4^m3^n-1^m4^o-1^m4^p0^m4^n0^$^7^G1^m1^o36^m1^p1^m1^n-1^m2^o34^m2^p1^m2^nantigravity^m3^o36^m3^p3^m3^n-1^m4^o-1^m4^p0^m4^n0^$^5-70^-^.20^,300^A0^B0^Y0^g0^5-50^-^.20^,300^A0^B0^Y0^g0\"^d-60^-0^u0.2^t0\"^d-40^-0^u0.2^t0^3-110^*50^.12^,60^T0\" /><barrel x=\"-97^*20^jbar_red^A0^B0\"^e-110^*13^.11^,140^K3^J1^5-110^*34^.11^,330^A0^B0^Y0^g0^7^G1^m1^o36^m1^p5^m1^n-1^m2^o34^m2^p0^m2^nantigravity^)\" /><barrel x=\"-87^*20^jbar_red^A0^B0\" /><barrel x=\"-109^*30^jbar_red^A0^B0\" /><barrel x=\"-106^*30^jbar_red^A0^B0\" /><barrel x=\"-103^*30^jbar_red^A0^B0\" /><barrel x=\"-57^-280^jbar_red^A0^B0\" /><barrel x=\"-54^-280^jbar_red^A0^B0\" /><barrel x=\"-45^-280^jbar_red^A0^B0\" /><barrel x=\"-36^-280^jbar_red^A0^B0^227^*21^.6^,180^x^y0^z0^h10^I\"^e27^*37^.6^,180^K-1^J4^7^G1^m1^o0^m1^p2^m1^n5^>\"^e159^*19^.10^,200^K4^J1^2108^*30^.63^,50^x^y0^z0^h60^I\" /><barrel x=\"112^*320^jbar_red^A0^B0\" /><barrel x=\"119^*320^jbar_red^A0^B0\" /><barrel x=\"131^*320^jbar_red^A0^B0\" /><barrel x=\"127^*320^jbar_red^A0^B0\" /><barrel x=\"141^*320^jbar_red^A0^B0\" /><barrel x=\"146^*320^jbar_red^A0^B0\" /><barrel x=\"148^*320^jbar_red^A0^B0\" /><barrel x=\"144^*320^jbar_red^A0^B0\" /><barrel x=\"134^*320^jbar_red^A0^B0\" /><barrel x=\"123^*320^jbar_red^A0^B0\" /><barrel x=\"116^*320^jbar_red^A0^B0\" /><barrel x=\"114^*320^jbar_red^A0^B0\" /><barrel x=\"138^*320^jbar_red^A0^B0\" /><barrel x=\"136^*320^jbar_red^A0^B0\" /><barrel x=\"151^*320^jbar_red^A0^B0\"^e108^*29^.63^,50^K7^J5\"^e130^*27^.20^,280^K5^J6^7^G1^m1^o0^m1^p3^m1^n7^>^391^*46^.96^,110^T0\"^d-40^*67^~d80^*410^u0.4^t1^375^*110^.175^,460^T0\"^c33^-50^.52^,40^_80^*10^.10^,200^T0^6120^-0^jantigravity0^U-1^O0^P0^6150^-0^jantigravity0^U-1^O0^P0^6135^-0^jantigravity0^U-1^O0^P0^2114^*1^.12^,3^(H^2129^*1^.12^,3^(H^2144^*1^.12^,3^(H\"^c206^*80^.44^,500^T0\"^e120^*71^.130^,310^K6^J6^7^G1^m1^o7^m1^p2^m1^nc35a^>^5162^*36^.9^,70^A-1^B0^Y0^g0^5164^*37^.8^,80^A-4^B0^Y0^g0^5166^*38^.7^,90^A-10^B0^Y0^g0\" /><barrel x=\"-3^*370^jbar_red^A0^B0\" /><barrel x=\"1^*370^jbar_red^A0^B0\" /><barrel x=\"7^*370^jbar_red^A0^B0\" /><barrel x=\"3^*370^jbar_red^A0^B0\" /><barrel x=\"90^*420^jbar_red^A0^B0\" /><barrel x=\"88^*420^jbar_red^A0^B0\" /><barrel x=\"86^*420^jbar_red^A0^B0\" /><barrel x=\"83^*420^jbar_red^A0^B0\" /><barrel x=\"-112^*420^jbar_red^A0^B0\" /><barrel x=\"-114^*420^jbar_red^A0^B0\" /><barrel x=\"154^*320^jbar_red^A0^B0\" /><barrel x=\"158^*320^jbar_red^A0^B0\" /><barrel x=\"160^*320^jbar_red^A0^B0\"^e169^*29^.63^,50^K-1^J5^7^G1^m1^o0^m1^p3^m1^n10^m2^o36^m2^p9^m2^n0.1^)^5109^*36^.53^,50^A0^B0^Y0^g0\" />";
         this.CACHED_MAPS["c35a"] = "<q.^f-67^*499^A0^B0^C100^D100^q0^r1^F3^E-1^k0^l-1\"^c-180^*90^.340^,113^_-180^*50^.130^,40^_-180^*113^.130^,43^_-55^*150^.112^,77^_50^*50^.100^,40^_50^*150^.80^,80^_-180^!0^.330^,40^_100^*50^.140^,100^_-180^*20^.80^,400^T0\" /><inf x=\"-67^*540^Zhero2_guns^;0\"^d-30^*30^~d30^*300^u0.4^t1^3-33^*33^.2^,2^_-29^*33^.2^,2^_-29^*29^.2^,2^_-33^*29^.2^,2^_31^*33^.2^,2^_27^*33^.2^,2^_27^*29^.2^,2^_31^*29^.2^,2^_-60^-4^.5^,8^_-110^-6^.30^,14^_55^-4^.5^,8^_80^-6^.30^,14^_-20^-6^.40^,9^_-30^-8^.60^,70^T0\"^d-49^*300^u0.05^t0\"^d49^*300^u0.05^t0\"^d30^-70^u0.02^t0\"^d-30^-70^u0.02^t0\"^d-30^*720^u0.02^t0\"^d30^*720^u0.02^t0^3-80^*20^.10^,15^_70^*20^.10^,15^_-13^*13^.2^,3^_11^*13^.2^,3^_2^*14^.10^,2^_-12^*14^.10^,2^_-3^*13^.6^,20^T0\"^d10^*11^~d-10^*11^~d-4^*11^~d4^*110^u0.4^t1^3-2^*12^.4^,2^_-10^*80^.20^,200^T0^670^*700^jray_ceil^U-1^O0^P0^670^*500^jray_floor^U-1^O0^P0\"^d70^*690^u0.2^t0\"^d70^*510^u0.2^t0^7^G1^m1^o38^m1^p0^m1^n0^m2^o34^m2^p1^m2^nnull^m3^o34^m3^p0^m3^nnull^m4^o25^m4^p0^m4^n0^$^568^*68^.4^,160^A0^B0^Y0^g-50000\"^e-95^*7^.12^,140^K0^J1\"^e^*43^.49^,20^K-1^J4^2-79^*129^.10^,17^(I^2-75^*130^.26^,5^(I^1-62^*1129^A0^B0^C400^D400^q1^r-1^F7^E-1^k3^l1^7^G20^m1^o28^m1^p1^m1^n-1^>^a^G5^X1^W15^4-62^*1150^iraygun^s1^M2\" /><vehicle x=\"117^*530^r1^jveh_crate^A0^B0\" hpp=\"100\" /><vehicle x=\"129^*530^r1^jveh_crate^A0^B0\" hpp=\"100\" /><vehicle x=\"135^*530^r1^jveh_crate^A0^B0\" hpp=\"100\" /><barrel x=\"-1^*150^jbar_red^A0^B0\" /><barrel x=\"1^*150^jbar_red^A0^B0\" /><barrel x=\"53^-80^jbar_red^A0^B0\" /><barrel x=\"62^-80^jbar_red^A0^B0\" /><barrel x=\"65^-80^jbar_red^A0^B0\" /><barrel x=\"-53^-80^jbar_red^A0^B0\" /><barrel x=\"-62^-80^jbar_red^A0^B0\" /><barrel x=\"-65^-80^jbar_red^A0^B0\" /><barrel x=\"-78^-80^jbar_red^A0^B0\" /><barrel x=\"-98^-40^jbar_red^A0^B0\" /><barrel x=\"78^-80^jbar_red^A0^B0\" /><barrel x=\"98^-40^jbar_red^A0^B0^3150^*150^.90^,120^_128^*150^.5^,900^T0^5-180^*80^.110^,410^A10^B0^Y-100^g0\"^c120^*150^.40^,600^T0\"^e119^*150^.44^,400^K2^J6^7^G1^m1^o7^m1^p2^m1^nc36a^>\"^e-19^*8^.38^,170^K3^J6^7^G-1^m1^o43^m1^pYou know, swords can make you jump higher.^m1^n0^>\"^e-40^*27^.11^,420^K4^J6\"^e-37^*37^.72^,130^K4^J6\"^e29^*28^.14^,440^K4^J6^7^G-1^m1^o43^m1^p0^m1^n0^>^3-4^*1^.7^,11^_-30^*10^.4^,4^_26^*10^.4^,40^T0\" /><inf x=\"-21^*170^Zmeat^;0\" />";
         this.CACHED_MAPS["c36a"] = "<q.^f-71^*899^A0^B0^C100^D100^q0^r1^F1^E-1^k1^l8\"^c-160^*150^.750^,130^_-100^*90^.78^,70^_-160^*150^.70^,130^_-100^*150^.70^,40^_-32^*94^.23^,74^_-14^*88^.30^,68^_60^*90^.36^,11^_-6^*77^.42^,14^_5^*69^.48^,49^_-40^*150^.138^,30^_30^*124^.17^,24^_-7^*144^.17^,34^_70^*144^.17^,34^_70^*96^.18^,11^_44^*61^.268^,41^_72^*83^.18^,11^_99^*66^.18^,11^_150^*66^.18^,11^_130^*94^.13^,4^_180^*94^.13^,4^_190^*78^.37^,220^T0^1-60^*899^A0^B0^C100^D100^q0^r1^F3^E-1^k1^l8\" /><inf x=\"-71^*930^Zhero1_guns^;-1\" /><inf x=\"-60^*930^Zhero2_guns^;-1^3150^*84^.12^,4^_165^*112^.5^,29^_120^*130^.61^,20^_180^*70^.18^,14^_270^*78^.37^,50^T0^2237^*77^.2^,2^(I^2242^*77^.2^,2^(I^2247^*77^.2^,2^(I^2252^*77^.2^,2^(I^2257^*77^.2^,2^(I^3223^*75^.7^,19^_267^*75^.7^,19^_210^*104^.25^,4^_213^*110^.12^,8^_257^*150^.54^,40^_250^*150^.12^,55^_253^*99^.15^,7^_200^*150^.70^,30^_92^*90^.13^,4^_306^*65^.4^,8^_306^*75^.4^,5^_290^*65^.4^,8^_290^*75^.4^,5^_308^*63^.44^,43^_300^*100^.13^,4^_330^*94^.13^,3^_330^*82^.13^,2^_329^*85^.4^,4^_329^*93^.4^,4^_340^*85^.4^,4^_340^*93^.4^,4^_370^*83^.13^,3^_369^*82^.4^,4^_380^*82^.4^,4^_380^*74^.4^,4^_369^*74^.4^,4^_370^*71^.2^,2^_340^*55^.67^,35^_397^*63^.123^,43^_381^*71^.2^,2^_375^*71^.3^,2^_410^*72^.20^,5^_414^*81^.20^,5^_418^*90^.20^,5^_422^*99^.20^,5^_426^*108^.20^,5^_444^*108^.16^,51^_458^*108^.20^,5^_462^*99^.20^,5^_466^*90^.20^,5^_391^*110^.13^,4^_374^*98^.13^,4^_444^*150^.21^,30^_440^*150^.29^,20^_291^*121^.89^,10^_348^*150^.41^,170^T0\"^d-18^*116^~d59^*114^~d109^*115^~d187^*1060^u0.4^t1^3510^*150^.110^,70^_540^*90^.80^,70^_512^*83^.8^,70^T0^2520^*63^.20^,5^(I^3470^*81^.20^,50^T0\"^d336^*87^~d376^*76^~d283^*106^~d359^*105^~d339^*1600^u0.2^t0\"^d430^*1600^u0.2^t0\"^d500^*1600^u0.2^t0\"^d189^*1600^u0.2^t0\"^d111^*1600^u0.2^t0\"^d415^*1600^u0.2^t0\"^d399^*1600^u0.2^t0\"^d489^*1600^u0.2^t0\"^d479^*1600^u0.2^t0\"^d323^*1600^u0.2^t0\"^d174^*1600^u0.2^t0\"^d145^*1600^u0.2^t0\"^d128^*1600^u0.2^t0\"^d161^*1600^u0.2^t0\"^d530^*750^u0.4^t1^1336^*819^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1376^*709^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1415^*809^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1420^*899^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1424^*989^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1412^*719^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1363^*549^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1382^*549^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1391^*549^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1376^*979^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1377^*829^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1385^*979^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1311^*999^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1265^*989^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1242^*609^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1250^*609^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1258^*769^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1229^*749^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1234^*1039^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1212^*1039^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1184^*939^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1189^*939^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1171^*609^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1177^*609^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1186^*699^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1158^*839^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1130^*609^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1142^*609^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^1102^*899^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^170^*609^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^143^*689^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^133^*769^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^124^*769^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^165^*899^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^184^*959^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^424^*820^ia^#^s1^M3^433^*820^ia^#^s1^M3^443^*740^ia^#^s1^M3^470^*660^ia^#^s1^M3^465^*950^ia^#^s1^M3^484^*1010^ia^#^s1^M3^4102^*950^ia^#^s1^M3^4130^*660^ia^#^s1^M3^4142^*660^ia^#^s1^M3^4158^*890^ia^#^s1^M3^4171^*660^ia^#^s1^M3^4177^*660^ia^#^s1^M3^4186^*750^ia^#^s1^M3^4184^*990^ia^#^s1^M3^4189^*990^ia^#^s1^M3^4212^*1090^ia^#^s1^M3^4234^*1090^ia^#^s1^M3^4229^*800^ia^#^s1^M3^4258^*820^ia^#^s1^M3^4250^*660^ia^#^s1^M3^4242^*660^ia^#^s1^M3^4265^*1040^ia^#^s1^M3^4311^*1050^ia^#^s1^M3^1285^*609^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^4285^*640^ia^#^s1^M3^4336^*850^ia^#^s1^M3^4363^*600^ia^#^s1^M3^4382^*600^ia^#^s1^M3^4391^*600^ia^#^s1^M3^4376^*740^ia^#^s1^M3^4377^*880^ia^#^s1^M3^4376^*1030^ia^#^s1^M3^4385^*1030^ia^#^s1^M3^4412^*770^ia^#^s1^M3^4415^*860^ia^#^s1^M3^4420^*950^ia^#^s1^M3^4424^*1040^ia^#^s1^M3^1471^*1079^A0^B0^C350^D350^q1^r-1^F2^E-1^k0^l-1^4471^*1130^ia^#^s1^M3\" /><inf x=\"-62^*1020^Zstrict_casual^;0^4-53^*910^idefibrillator^s-1^L4-51^*910^idefibrillator^s-1^M0\" /><barrel x=\"59^*630^jbar_blue^A0^B0\" /><barrel x=\"64^*630^jbar_blue^A0^B0\" /><barrel x=\"47^*710^jbar_blue^A0^B0\" /><barrel x=\"90^*920^jbar_blue^A0^B0\" /><barrel x=\"96^*920^jbar_blue^A0^B0\" /><barrel x=\"125^*630^jbar_blue^A0^B0\" /><barrel x=\"134^*630^jbar_blue^A0^B0\" /><barrel x=\"194^*800^jbar_blue^A0^B0\" /><barrel x=\"202^*800^jbar_blue^A0^B0\" /><barrel x=\"227^*1060^jbar_blue^A0^B0\" /><barrel x=\"334^*960^jbar_blue^A0^B0\" /><barrel x=\"330^*650^jbar_blue^A0^B0\" /><barrel x=\"334^*650^jbar_blue^A0^B0\" /><barrel x=\"395^*570^jbar_blue^A0^B0\" /><barrel x=\"367^*570^jbar_blue^A0^B0\" /><barrel x=\"358^*570^jbar_blue^A0^B0^1-3^*879^A0^B0^C350^D350^q2^r1^F8^E-1^k0^l-1^19^*879^A0^B0^C350^D350^q2^r1^F8^E-1^k0^l-1^49^*910^irailgun^s-1^L4-3^*910^irl^s-1^M0\"^e510^*78^.32^,170^K0^J7^7^G1^m1^o7^m1^p1^m1^nc37a^>^5-160^*232^.258^,820^A3^B0^Y100^g0^5510^*232^.110^,820^A-3^B0^Y100^g0^4242^*620^irailgun2^s1^M3^4285^*620^irailgun2^s1^M3^4471^*1090^irailgun2^s1^M3^1470^*629^A0^B0^C350^D350^q1^r1^F2^E-1^k0^l-1^4470^*680^ia^#^s1^M3^4470^*650^irailgun2^s1^M3^9^G1^X1^W30^7^G1^m1^o42^m1^pHey! Who are you and why are you here?^m1^n3^m2^o25^m2^p1^m2^n0^)^a^G1^X2^W90^7^G1^m1^o42^m1^pI\'m here to complete my mission.^m1^n1^m2^o25^m2^p2^m2^n0^)^a^G1^X3^W60^7^G1^m1^o42^m1^pWhat about you?^m1^n1^m2^o25^m2^p3^m2^n0^)^a^G1^X4^W30^7^G1^m1^o42^m1^pYou better not be part of the security troops. I hate those guys!^m1^n3^m2^o25^m2^p4^m2^n0^)^a^G1^X5^W60^7^G1^m1^o42^m1^pDon\'t be silly, of course I\'m not.^m1^n1^m2^o25^m2^p5^m2^n0^)^a^G1^X6^W60^7^G1^m1^o42^m1^pIf we stick together, we might live longer!^m1^n3^m2^o25^m2^p6^m2^n0^)^a^G1^X7^W60^7^G1^m1^o42^m1^pOkay.^m1^n1^>^7^G1^m1^o19^m1^p1^m1^n0^m2^o19^m2^p2^m2^n0^m3^o19^m3^p3^m3^n0^m4^o19^m4^p4^m4^n0^m5^o19^m5^p5^m5^n0^m6^o19^m6^p6^m6^n0^m7^o19^m7^p7^m7^n0^m8^o-1^m8^p0^m8^n0^m9^o-1^m9^p0^m9^n0^m10^o-1^m10^p0^m10^n0^3114^*114^.14^,40^T0\"^e135^*142^.25^,130^K9^J1^7^G1^m1^o33^m1^p42^m1^n0^m2^o28^m2^p42^m2^n3^m3^o28^m3^p42^m3^n2^m4^o33^m4^p42^m4^n1^m5^o42^m5^pSecret Androids activated.^m5^n-1^m6^o-1^m6^p0^m6^n0^m7^o-1^m7^p0^m7^n0^m8^o-1^m8^p0^m8^n0^m9^o-1^m9^p0^m9^n0^m10^o-1^m10^p0^m10^n0^2-173^*137^.18^,9^(I^2-175^*150^.8^,16^(I^2-173^*155^.23^,8^(I^1-165^*1369^A0^B0^C400^D400^q1^r1^F9^E-1^k1^l-1\"^e129^*148^.6^,60^K-1^J4\"^e160^*148^.6^,60^K-1^J4^4-165^*1400^ia^#2^s-1^M3^4329^*1220^ibfg^s-1^M0\" /><vehicle x=\"329^*1240^r1^jveh_crate^A0^B0\" hpp=\"100\"^e275^*74^.14^,140^K10^J4\"^e295^*74^.10^,140^K10^J4\"^e276^*82^.26^,50^K-1^J4^7^G-1^m1^o30^m1^p4^m1^n6^m2^o30^m2^p5^m2^n6^)\" />";
         this.CACHED_MAPS["c37a"] = "<q.^f-55^*899^A0^B0^C100^D100^q0^r1^F1^E-1^k1^l10\"^c-90^*160^.50^,920^T0\"^c-40^*118^.546^,59^_-50^*160^.20^,56^_-150^*160^.80^,140^_-94^*90^.64^,70^_-4^*118^.34^,13^_-45^*86^.30^,66^_-28^*81^.48^,61^_-38^*123^.41^,12^_90^*118^.34^,13^_100^*81^.38^,61^_10^*75^.100^,55^_42^*93^.12^,3^_66^*93^.12^,3^_43^*91^.4^,7^_40^*79^.7^,100^T0^1-64^*899^A0^B0^C100^D100^q0^r1^F3^E-1^k1^l10\" /><inf x=\"-55^*930^Zhero1_guns^;-1\" /><inf x=\"-64^*930^Zhero2_guns^;-1\" /><inf x=\"-59^*1010^Zstrict_casual^;0^373^*79^.7^,10^_73^*91^.4^,7^_45^*91^.30^,3^_117^*91^.34^,71^_101^*133^.41^,16^_142^*110^.12^,3^_170^*110^.12^,3^_144^*83^.86^,63^_192^*96^.32^,21^_178^*90^.20^,12^_112^*86^.12^,9^_210^*71^.138^,51^_248^*80^.19^,20^_289^*92^.18^,32^_265^*107^.17^,7^_225^*115^.17^,5^_241^*136^.11^,9^_286^*83^.24^,23^_326^*93^.41^,6^_364^*91^.41^,6^_319^*68^.99^,48^_369^*75^.10^,15^_393^*90^.10^,12^_427^*74^.10^,11^_397^*66^.73^,46^_419^*92^.8^,9^_433^*95^.13^,9^_430^*99^.10^,13^_430^*111^.10^,9^_416^*118^.29^,10^_374^*97^.16^,11^_320^*150^.98^,40^_374^*115^.16^,8^_300^*113^.17^,3^_80^*108^.12^,3^_28^*108^.12^,3^_96^*125^.28^,11^_190^*121^.18^,9^_194^*148^.18^,3^_207^*148^.7^,13^_247^*136^.44^,13^_300^*128^.10^,3^_182^*133^.14^,16^_154^*133^.16^,16^_131^*137^.57^,13^_460^*70^.33^,50^_470^*80^.33^,60^_480^*90^.33^,700^T0\"^c110^*128^.84^,100^T0\"^c194^*147^.20^,290^T0\"^c214^*136^.116^,180^T0\"^d20^*1400^u0.4^t0\"^d40^*1400^u0.4^t0\"^d60^*1400^u0.4^t0\"^d80^*1400^u0.4^t0\"^d100^*1400^u0.4^t0\"^d160^*1600^u0.4^t0\"^d180^*1600^u0.4^t0\"^d200^*1600^u0.4^t0\"^d220^*1600^u0.4^t0\"^d240^*1600^u0.4^t0\"^d260^*1600^u0.4^t0\"^d280^*1600^u0.4^t0\"^d300^*1600^u0.4^t0\"^d320^*1600^u0.4^t0\"^d148^*100^~d176^*100^~d-9^*108^~d345^*103^~d360^*84^~d447^*100^~d438^*84^~d274^*1210^u0.4^t1^3203^*115^.10^,30^T0\"^e487^*111^.15^,220^K-1^J4^151^*929^A0^B0^C300^D300^q1^r-1^F6^E-1^k0^l-1^171^*929^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^186^*1079^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^152^*749^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^164^*749^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^133^*749^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1107^*809^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1126^*909^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1147^*1099^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1179^*1099^A0^B0^C300^D300^q1^r-1^F6^E-1^k0^l-1^1175^*829^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1240^*1149^A0^B0^C300^D300^q1^r-1^F6^E-1^k0^l-1^1266^*799^A0^B0^C300^D300^q1^r-1^F6^E-1^k0^l-1^1294^*919^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1288^*829^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1245^*709^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1269^*1069^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1280^*1069^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1305^*1129^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1333^*929^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1331^*709^A0^B0^C300^D300^q1^r-1^F6^E-1^k0^l-1^1349^*929^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1364^*929^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1356^*679^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1389^*679^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1425^*919^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1398^*909^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1435^*739^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1441^*659^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1443^*949^A0^B0^C300^D300^q1^r-1^F6^E-1^k0^l-1^1467^*699^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1477^*799^A0^B0^C300^D300^q1^r-1^F6^E-1^k0^l-1^1484^*899^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^433^*780^ia^#^s1^M3^452^*780^ia^#^s1^M3^451^*960^ia^#2^s1^M3^464^*780^ia^#^s1^M3^471^*960^ia^#^s1^M3^486^*1110^ia^#^s1^M3^4107^*840^ia^#^s1^M3^4126^*940^ia^#^s1^M3^4147^*1130^ia^#^s1^M3^4179^*1130^ia^#2^s1^M3^4175^*860^ia^#^s1^M3^1218^*959^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^1207^*959^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^4207^*990^ia^#^s1^M3^4218^*990^ia^#^s1^M3^4240^*1180^ia^#2^s1^M3^4245^*740^ia^#^s1^M3^4266^*830^ia^#2^s1^M3^4288^*860^ia^#^s1^M3^4294^*950^ia^#^s1^M3^4280^*1100^ia^#^s1^M3^4269^*1100^ia^#^s1^M3^4305^*1160^ia^#^s1^M3^1321^*709^A0^B0^C200^D200^q1^r-1^F2^E-1^k0^l-1^4333^*960^ia^#^s1^M3^4321^*740^ia^#^s1^M3^4331^*740^ia^#2^s1^M3^4356^*710^ia^#^s1^M3^4349^*960^ia^#^s1^M3^4364^*960^ia^#^s1^M3^4398^*940^ia^#^s1^M3^4389^*710^ia^#^s1^M3^4425^*950^ia^#^s1^M3^4435^*770^ia^#^s1^M3^4441^*690^ia^#^s1^M3^4467^*730^ia^#^s1^M3^4443^*980^ia^#2^s1^M3^4477^*830^ia^#2^s1^M3^4484^*930^ia^#^s1^M3^3399^*81^.14^,3^_330^*210^.40^,700^T0^451^*950^ibfg^s1^M2^433^*1100^ibfg^s1^M2^133^*1079^A0^B0^C300^D300^q1^r1^F6^E-1^k0^l-1^433^*1110^ia^#2^s1^M3^4179^*1120^ibfg^s1^M2^4240^*1170^ibfg^s1^M2^4266^*820^ibfg^s1^M2^4331^*730^ibfg^s1^M2^4443^*970^ibfg^s1^M2^4477^*820^ibfg^s1^M2^4107^*860^irl^s1^M3^4126^*960^irl^s1^M3^4207^*1010^irl^s1^M3^4245^*760^irl^s1^M3^4269^*1120^irl^s1^M3^4333^*980^irl^s1^M3^4321^*760^irl^s1^M3^4398^*960^irl^s1^M3^4364^*980^irl^s1^M3^452^*760^irailgun^s1^M3^486^*1090^irailgun^s1^M3^4147^*1110^irailgun^s1^M3^4175^*840^irailgun^s1^M3^4218^*970^irailgun^s1^M3^4294^*930^irailgun^s1^M3^4288^*840^irailgun^s1^M3^4280^*1080^irailgun^s1^M3^4356^*690^irailgun^s1^M3^4435^*750^irailgun^s1^M3^4467^*710^irailgun^s1^M3^4425^*930^irailgun^s1^M3^4484^*910^irailgun^s1^M3\"^e47^*88^.26^,140^K0^J1\"^e55^*103^.10^,120^K-1^J4^7^G-1^m1^o30^m1^p1^m1^n2^>^1210^*1149^A0^B0^C300^D300^q1^r1^F6^E-1^k0^l-1^4210^*1190^irailgun2^s1^M3^1195^*1329^A0^B0^C300^D300^q1^r-1^F6^E-1^k0^l-1^4195^*1370^irailgun2^s1^M3^1195^*1479^A0^B0^C300^D300^q1^r-1^F6^E-1^k0^l-1^4195^*1520^irailgun2^s1^M3^1243^*1359^A0^B0^C300^D300^q1^r-1^F6^E-1^k0^l-1^4243^*1400^irailgun2^s1^M3^1255^*799^A0^B0^C300^D300^q1^r-1^F6^E-1^k0^l-1^4255^*840^irailgun2^s1^M3^1306^*1279^A0^B0^C300^D300^q1^r-1^F6^E-1^k0^l-1^4306^*1320^irailgun2^s1^M3^1291^*1359^A0^B0^C300^D300^q1^r1^F6^E-1^k0^l-1^4291^*1400^irailgun2^s1^M3\" /><vehicle x=\"8^*840^r1^jveh_crate^A0^B0\" hpp=\"100\" /><barrel x=\"-13^*830^jbar_blue^A0^B0\" /><barrel x=\"58^*770^jbar_blue^A0^B0\" /><barrel x=\"61^*770^jbar_blue^A0^B0\" /><barrel x=\"92^*770^jbar_blue^A0^B0\" /><barrel x=\"153^*850^jbar_blue^A0^B0\" /><barrel x=\"156^*850^jbar_blue^A0^B0\" /><barrel x=\"298^*940^jbar_blue^A0^B0\" /><barrel x=\"277^*730^jbar_blue^A0^B0\" /><barrel x=\"388^*990^jbar_blue^A0^B0\" /><barrel x=\"380^*990^jbar_blue^A0^B0\" /><barrel x=\"384^*990^jbar_blue^A0^B0\" /><barrel x=\"446^*680^jbar_blue^A0^B0\" /><barrel x=\"451^*680^jbar_blue^A0^B0^3505^*87^.215^,670^T1\" /><vehicle x=\"559^*1080^r-1^jveh_walker^A0^B0\" hpp=\"100^3490^*118^.16^,30^T0\"^d440^*1400^u0.4^t0\"^d460^*1400^u0.4^t0\"^d480^*1400^u0.4^t0\"^d500^*1400^u0.4^t0\"^d520^*1400^u0.4^t0\"^d540^*1400^u0.4^t0\"^d560^*1400^u0.4^t0^4559^*1050^ivehcannon^s-1^M2\" /><barrel x=\"516^*890^jbar_blue^A0^B0\" /><barrel x=\"522^*890^jbar_blue^A0^B0\" /><barrel x=\"502^*1200^jbar_blue^A0^B0^4559^*1110^igl^s1^M3^1559^*1049^A0^B0^C200^D200^q1^r-1^F2^E-2^k0^l-1^3504^*102^.2^,16^_470^*102^.2^,120^T0^5640^*140^.80^,610^A-2^B0^Y100^g0\"^e590^*140^.50^,610^K1^J7^3638^*89^.4^,4^_640^*88^.80^,20^T0^7^G1^m1^o7^m1^p1^m1^nc38a^>^9^G1^X2^W30^7^G1^m1^o42^m1^pSo what are you doing here?^m1^n3^m2^o25^m2^p1^m2^n0^)^a^G1^X3^W90^7^G1^m1^o42^m1^pDo you remember that day when the first experimental portal was opened up to go to \'\'Another World\'\'?^m1^n1^m2^o25^m2^p2^m2^n0^)^a^G1^X4^W180^7^G1^m1^o42^m1^pOh...^m1^n3^m2^o25^m2^p3^m2^n0^)^a^G1^X5^W230^7^G1^m1^o42^m1^pThat portal, which connects us to an unknown race in a corner of a galaxy, was the biggest mistake humanity made.^m1^n3^m2^o25^m2^p4^m2^n0^)^a^G1^X6^W230^7^G1^m1^o42^m1^pOnly one day, which abolished more than 2700 years of human life...^m1^n3^m2^o25^m2^p5^m2^n0^)^a^G1^X7^W210^7^G1^m1^o42^m1^pI remember that, scientists had sent two volunteers armed to the teeth... back to the past to change the course of history...^m1^n3^m2^o25^m2^p6^m2^n0^)^a^G1^X8^W140^7^G1^m1^o42^m1^pBut communication with them was lost.^m1^n3^m2^o-1^m2^p0^m2^n0^m3^o25^m3^p7^m3^n0^m4^o-1^m4^p0^m4^n0^$\"^e-38^*115^.23^,330^K9^J4^7^G1^m1^o42^m1^pYes, it\'s better we go.^m1^n3^m2^o19^m2^p2^m2^n0^m3^o19^m3^p3^m3^n0^m4^o19^m4^p4^m4^n0^m5^o19^m5^p5^m5^n0^m6^o19^m6^p6^m6^n0^m7^o19^m7^p7^m7^n0^m8^o19^m8^p8^m8^n0^m9^o-1^m9^p0^m9^n0^m10^o-1^m10^p0^m10^n0^7^G1^m1^o19^m1^p9^m1^n0^m2^o19^m2^p2^m2^n0^m3^o19^m3^p3^m3^n0^m4^o19^m4^p4^m4^n0^m5^o19^m5^p5^m5^n0^m6^o19^m6^p6^m6^n0^m7^o19^m7^p7^m7^n0^m8^o19^m8^p8^m8^n0^m9^o-1^m9^p0^m9^n0^m10^o-1^m10^p0^m10^n0^5-84^*160^.44^,500^A0^B0^Y100^g0^5-123^*215^.93^,550^A2^B0^Y100^g0^5-80^*160^.37^,400^A0^B3^Y0^g0^7^G1^m1^o19^m1^p9^m1^n0^m2^o42^m2^pSo let\'s find \'\'Correction Nine\'\' and finish what they started.^m2^n1^)^a^G1^X11^W140\" />";
         this.CACHED_MAPS["c38a"] = "<q.^f-32^!^A0^B0^C100^D100^q0^r1^F1^E-1^k1^l-1\"^c190^*50^.170^,62^_-50^-^.100^,41^_-180^-2^.380^,400^T1^349^*1^.2^,4^_-51^*1^.2^,40^T0\" /><inf x=\"-69^*20^Zhero2_guns^;-1\" /><inf x=\"-32^*40^Zhero1_guns^;-1^6-50^*10^jray_floor^U-1^O0^P0^1-69^-21^A0^B0^C100^D100^q0^r1^F3^E-1^k0^l4^650^*10^jray_floor^U-1^O0^P0^3190^*60^.10^,500^T0^5-58^*120^.9^,1200^A10^B0^Y0^g-10^549^*120^.9^,1190^A-10^B0^Y0^g-10^5-80^*120^.22^,1000^A0^B0^Y0^g10000^558^*120^.82^,1300^A0^B0^Y0^g10000^5-180^*160^.360^,400^A0^B0^Y0^g10000^9^G50^X0^W100^7^G30^m1^o28^m1^p2^m1^n-1^m2^o29^m2^p0^m2^n1^)\"^e235^*30^.125^,360^K5^J7\"^e-40^*63^.80^,670^K-1^J4^3216^*10^.19^,17^_219^*18^.5^,100^T0^1229^*99^A0^B0^C150^D150^q1^r-1^F2^E-1^k2^l-1^4229^*130^irl^s1^M1^3-30^*23^.20^,3^_10^*23^.20^,3^_-7^*10^.5^,2^_20^*40^.10^,3^_-30^*40^.10^,3^_-40^*53^.10^,3^_30^*53^.10^,30^T0\"^c-12^*21^.1^,220^T4\"^c-29^*38^.1^,390^T4\"^c11^*21^.1^,220^T4\"^c28^*38^.1^,390^T4\"^c8^*8^.1^,90^T4\"^c-9^*8^.1^,90^T4\"^c21^*38^.1^,160^T4\"^c-22^*38^.1^,160^T4\"^c-39^*51^.1^,520^T4\"^c-32^*51^.1^,520^T4\"^c31^*51^.1^,520^T4\"^c38^*51^.1^,520^T4\" /><barrel x=\"12^*20^jbar_blue^A0^B0\" /><barrel x=\"-24^*250^jbar_blue^A0^B0\" /><barrel x=\"24^*250^jbar_blue^A0^B0\" /><barrel x=\"36^*20^jbar_blue^A0^B0\" /><barrel x=\"-28^*420^jbar_blue^A0^B0\" /><barrel x=\"28^*420^jbar_blue^A0^B0\" /><barrel x=\"18^*250^jbar_blue^A0^B0\" /><barrel x=\"-18^*250^jbar_blue^A0^B0\" /><barrel x=\"-12^*20^jbar_blue^A0^B0\"^d-15^*460^u1^t0\"^d-35^*300^u1^t0\"^d35^*300^u1^t0\"^d20^*30^u1^t0\"^d-20^*30^u1^t0^5-62^*22^.4^,340^A0^B0^Y0^g10000^5-180^*150^.100^,1620^A3^B0^Y100^g0^7^G-1^m1^o14^m1^p1^m1^n2^m2^o4^m2^p1^m2^n100^m3^o32^m3^p1^m3^n0^m4^o-1^m4^p0^m4^n0^$^9^G-1^X1^W0\"^e-73^!^.8^,20^K-1^J4\" /><barrel x=\"-36^*20^jbar_blue^A0^B0^3-10^*12^.5^,6^_5^*12^.5^,6^_26^*30^.3^,9^_-29^*30^.3^,9^_-39^*63^.3^,11^_36^*63^.3^,11^_-10^*43^.20^,3^_6^*46^.3^,4^_-9^*46^.3^,40^T0\"^c-5^*41^.1^,320^T4\"^c4^*41^.1^,320^T4\"^d15^*460^u1^t0^9^G50^X0^W80^9^G50^X0^W90\" /><inf x=\"-42^*110^Zmeat^;0^32^*10^.5^,20^T0^9^G1^X2^W1300^7^G1^m1^o38^m1^p4^m1^n0^m2^o38^m2^p2^m2^n0^m3^o38^m3^p5^m3^n0^m4^o38^m4^p0^m4^n0^m5^o38^m5^p1^m5^n0^m6^o38^m6^p3^m6^n0^m7^o34^m7^p0^m7^nnull^m8^o34^m8^p1^m8^nnull^m9^o35^m9^p0^m9^n0^m10^o35^m10^p1^m10^n0^7^G1^m1^o19^m1^p1^m1^n0^m2^o26^m2^p1^m2^n0^m3^o32^m3^p1^m3^n1^m4^o42^m4^pThe field is disabled, lets go!^m4^n3^$^7^G1^m1^o9^m1^pPROXY HAS DIED^m1^n0^>^9^G1^X3^W1300^3207^*2^.32^,8^_197^*70^.163^,40^_243^*60^.10^,500^T0\"^d222^*25^~d180^*200^u1^t0\"^d263^*200^u1^t1^3-11^*3^.4^,5^_7^*3^.4^,50^T0^5197^*187^.140^,1170^A-3^B0^Y100^g0^3265^*5^.55^,14^_190^-^.170^,420^T0^5270^*32^.90^,340^A-3^B0^Y100^g0^7^G1^m1^o7^m1^p1^m1^nc39a^>^9^G1^X6^W60^7^G1^m1^o42^m1^pOh no, you\'re trapped! Use your skills to stay alive!^m1^n3^>^4^*440^jitem_grenade^s-1^L45^*440^jitem_grenade^s-1^L4-5^*440^jitem_grenade^s-1^M0\" />";
         this.CACHED_MAPS["c39a"] = "<q.^f255^-21\" uid=\"#hero_7^A0^B0^C100^D100^q0^r1^F1^E-1^k1^l-1\"^c535^*40^.312^,860^T0\"^c190^*40^.345^,62^_120^-2^.79^,780^T1\" /><inf x=\"246^*20\" uid=\"#engine_mark_8^Zhero2_guns^;-1\" /><inf x=\"255^*20\" uid=\"#engine_mark_9^Zhero1_guns^;-1^1246^-21\" uid=\"#player_12^A0^B0^C100^D100^q0^r1^F3^E-1^k1^l-1^3190^*60^.10^,50^_216^*10^.19^,17^_219^*18^.5^,100^T0^1235^*59\" uid=\"#playeri^A0^B0^C0^D0^q1^r-1^F2^E-1^k2^l-1^4229^*100\" uid=\"#gun_30^irl^s1^M1^3207^*2^.32^,8^_197^*70^.51^,40^_243^*60^.10^,500^T0\"^d222^*25^~d180^*200^u1^t0\"^d261^*290^u1^t1^5220^*254^.40^,1170\" uid=\"#pusher_93^A2^B0^Y100^g0^3270^*5^.50^,14^_190^-^.350^,800^T0^2192^*13^.6^,190\" uid=\"#door^x^y0^z0^h1^I^3390^*42^.70^,20^_400^*5^.50^,14^_267^*42^.63^,200^T0\"^d340^*600^u0.5^t0^3239^*64^.51^,300^T0\"^d360^*600^u0.5^t0\"^d380^*600^u0.5^t0^3380^*41^.20^,12^_320^*41^.20^,12^_450^*41^.20^,12^_260^*3^.70^,120^T0^6365^-0\" uid=\"#decor_563^jnull^U-1^O0^P0\"^e334^*29^.13^,330\" uid=\"#region_564^K0^J4^7^G1^m1^o34^m1^p0^m1^nship_noir^m2^o39^m2^p10^m2^n0^m3^o25^m3^p3^m3^n0^m4^o25^m4^p4^m4^n0^$^2365^-2^.18^,90\" uid=\"#doorc^x^y0^z0^h10^H^2369^-^.11^,60\" uid=\"#doorb^x^y0^z0^h10^H^2348^!^.9^,60\" uid=\"#doora^x^y0^z0^h10^H\"^e348^*3^.2^,20\" uid=\"#region_569^K-1^J4\"^e369^*6^.2^,20\" uid=\"#region_570^K-1^J4\"^e365^*4^.2^,20\" uid=\"#region_571^K-1^J4^7^G1^m1^o0^m1^p3^m1^n1^m2^o0^m2^p1^m2^n3^m3^o0^m3^p2^m3^n2^m4^o39^m4^p0^m4^n0^m5^o14^m5^p3^m5^n3^m6^o33^m6^p3^m6^n0^m7^o32^m7^p3^m7^n1^m8^o4^m8^p3^m8^n0^m9^o43^m9^pRevive Noir Lime to continue...^m9^n0^m10^o20^m10^p9^m10^n0^2199^*154^.20^,70\" uid=\"#door^x^y0^z0^h1^H^2213^*168^.6^,180\" uid=\"#door^x^y0^z0^h1^H^2197^*171^.22^,50\" uid=\"#door^x^y0^z0^h1^H^2199^*169^.5^,180\" uid=\"#door^x^y0^z0^h1^H^1209^*1539\" uid=\"#player_578^A0^B0^C1^D800^q2^r1^F13^E-1^k0^l-1^4209^*1570\" uid=\"#gun_579^iminigun^s-1^M0\" /><inf x=\"259^*160\" uid=\"#engine_mark_580^Zstrict_casual^;0\"^e390^*28^.30^,300\" uid=\"#region_581^K2^J7^7^G1^m1^o0^m1^p8^m1^n5^m2^o45^m2^p1^m2^n0^m3^o43^m3^p0^m3^n0^m4^o-1^m4^p0^m4^n0^$^5224^*159^.354^,390\" uid=\"#pusher_583^A0^B2^Y100^g0^3390^*3^.70^,12^_510^*41^.20^,12^_520^*42^.25^,20^_510^*3^.20^,12^_520^*5^.30^,470^T0^5540^*189^.38^,1170\" uid=\"#pusher_93^A-2^B0^Y100^g0^2420^*25^.10^,200\" uid=\"#doorczx^x^y0^z0^h10^I\"^e420^*41^.10^,200\" uid=\"#region_592^K-1^J4\"^d470^*600^u0.5^t0\"^d490^*600^u0.5^t0\"^d510^*600^u0.5^t0^3540^*74^.175^,38^_660^*42^.71^,18^_600^!8^.4^,12^_480^-24^.150^,56^_660^*5^.50^,10^_690^*74^.120^,82^_660^-24^.71^,56^_595^*5^.35^,10^_540^*5^.29^,10^_595^*40^.35^,160^T0^2630^*3^.30^,70\" uid=\"#doorasd^x^y0^z0^h5^I\"^e630^-26^.30^,70\" uid=\"#regionasd^K-1^J4\"^d575^*13^~d640^*34^~d627^-9^~d627^-21^~d650^*340^u0.4^t1^3621^*2^.4^,120^T0^1589^-201\" uid=\"#player^A0^B0^C1000^D1000^q1^r1^F11^E-1^k0^l-1^3553^*1^.46^,40^T0^1603^*49\" uid=\"#player^A0^B0^C1000^D1000^q1^r-1^F11^E-1^k0^l-1^1638^*29\" uid=\"#player^A0^B0^C1000^D1000^q1^r-1^F11^E-1^k0^l-1^1573^*9\" uid=\"#player^A0^B0^C1000^D1000^q1^r1^F11^E-1^k0^l-1^1596^-201\" uid=\"#player^A0^B0^C1000^D1000^q1^r1^F11^E-1^k0^l-1^2530^*25^.10^,200\" uid=\"#doorczx2^x^y0^z0^h10^I\"^e530^*41^.10^,200\" uid=\"#region_592b^K-1^J4\"^e500^*28^.30^,300\" uid=\"#region_581^K3^J7^7^G1^m1^o0^m1^p10^m1^n7^>^3480^*10^.10^,16^_475^*5^.10^,110^T0^4573^*30\" uid=\"#gun^irl^s-1^M3^4603^*70\" uid=\"#gun^irl^s-1^M3^4638^*50\" uid=\"#gun^irl^s-1^M3^3555^*14^.15^,16^_609^*28^.7^,130^T0^1666^*49\" uid=\"#player^A0^B0^C1000^D1000^q1^r-1^F11^E-1^k0^l-1^4666^*70\" uid=\"#gun^irailgun2^s-1^M3^1675^*49\" uid=\"#player^A0^B0^C1000^D1000^q1^r-1^F11^E-1^k0^l-1^4675^*70\" uid=\"#gun^irailgun2^s-1^M3^4209^*1560\" uid=\"#gun_712^jitem_grenade^s-1^L4209^*1550\" uid=\"#gun_712^jitem_grenade^s-1^L4209^*1580\" uid=\"#gun_712^jitem_grenade^s-1^L4209^*1590\" uid=\"#gun_712^jitem_grenade^s-1^L4209^*1600\" uid=\"#gun_712^jitem_grenade^s-1^L4209^*1610\" uid=\"#gun_712^jitem_grenade^s-1^L3560^*39^.27^,130^T0^4596^!80\" uid=\"#gun^iraygun^s-1^M3^4589^!80\" uid=\"#gun^iraygun^s-1^M3^4589^!70\" uid=\"#gun^i^#^s-1^M3^4596^!70\" uid=\"#gun^i^#^s-1^M3^1672^-241\" uid=\"#player^A0^B0^C1000^D1000^q1^r1^F11^E-1^k0^l-1^4672^-210\" uid=\"#gun^i^#^s-1^M3^4672^-220\" uid=\"#gun^iraygun^s-1^M3^1686^-241\" uid=\"#player^A0^B0^C1000^D1000^q1^r1^F11^E-1^k0^l-1^4686^-210\" uid=\"#gun^i^#^s-1^M3^4686^-220\" uid=\"#gun^iraygun^s-1^M3^3620^-34^.53^,460^T0\" /><vehicle x=\"436^*80\" uid=\"#vehicle_733^r1^jveh_crate^A0^B0\" hpp=\"100^4436^*70\" uid=\"#gun_734^idefibrillator^s-1^L4436^*80\" uid=\"#gun_734^idefibrillator^s-1^L4436^*90\" uid=\"#gun_734^idefibrillator^s-1^M0\" /><vehicle x=\"441^*80\" uid=\"#vehicle_733^r1^jveh_crate^A0^B0\" hpp=\"100^4441^*80\" uid=\"#gun_734^iplasmagun^s-1^M3^4441^*70\" uid=\"#gun_734^i^/2^s-1^M3\"^e637^*16^.16^,150\" uid=\"#region_741^K4^J1^7^G1^m1^o0^m1^p9^m1^n6^m2^o0^m2^p12^m2^n6^m3^o0^m3^p13^m3^n15^m4^o-1^m4^p0^m4^n0^$\" /><barrel x=\"628^-220\" uid=\"#barrel_743^jbar_red^A0^B0\" /><barrel x=\"662^-220\" uid=\"#barrel_743^jbar_red^A0^B0^3567^-^.9^,100^T0^6685^*60\" uid=\"#decor^jteleport^U-1^O0^P0^6685^*230\" uid=\"#decor^jteleport2^U-1^O0^P0\"^d685^*22^~d685^*70^u0.4^t1^6555^-230\" uid=\"#decor^jteleport^U-1^O0^P0^6555^-60\" uid=\"#decor^jteleport2^U-1^O0^P0\"^d555^-7^~d555^-220^u0.4^t1^3567^-20^.56^,120^T0\"^e552^-5^.6^,200\" uid=\"#regionfag^K5^J4\"^e682^*24^.6^,200\" uid=\"#region_758^K6^J4\"^e560^!5^.2^,90\" uid=\"#region_759^K-1^J4^7^G-1^m1^o30^m1^p10^m1^n13^>^7^G-1^m1^o30^m1^p11^m1^n12^>\"^e678^*14^.2^,90\" uid=\"#region_762^K-1^J4^3600^*2^.4^,11^_664^*2^.4^,12^_690^-21^.120^,590^T0^1613^-201\" uid=\"#player^A0^B0^C1000^D1000^q1^r1^F11^E-1^k0^l-1^4613^!70\" uid=\"#gun^i^#^s-1^M3^4613^!80\" uid=\"#gun^iraygun^s-1^M3\" /><inf x=\"264^*140\" uid=\"#engine_mark_772^Zno_auto_revive^;0^4484^*110\" uid=\"#gun^ivgun^s-1^L4573^*60\" uid=\"#gun^ivgun^s1^M3\" /><vehicle x=\"484^*130\" uid=\"#vehicle_733^r1^jveh_crate^A0^B0\" hpp=\"100^4484^*120\" uid=\"#gun^ivgun^s-1^L4485^*130\" uid=\"#gun^ivgun^s-1^L4603^*100\" uid=\"#gun^ivgun^s1^M3^4638^*90\" uid=\"#gun^ivgun^s1^M3^4666^*110\" uid=\"#gun^ivgun^s1^M3^4675^*110\" uid=\"#gun^ivgun^s1^M3^4672^!80\" uid=\"#gun^ivgun^s1^M3^4613^!40\" uid=\"#gun^ivgun^s1^M3^4596^!40\" uid=\"#gun^ivgun^s1^M3^4589^!40\" uid=\"#gun^ivgun^s1^M3^4686^!80\" uid=\"#gun^ivgun^s1^M3^2730^-6^.8^,170\" uid=\"#door^x^y0^z0^h1^I\"^e691^-7^.39^,150\" uid=\"#region_279^K7^J7^7^G1^m1^o7^m1^p1^m1^nc40a^>^2630^*3^.3^,400\" uid=\"#door_174^x^y0^z0^h5^I^2657^*3^.3^,400\" uid=\"#door_175^x^y0^z0^h5^I\"^e657^-26^.3^,70\" uid=\"#region_176^K-1^J4^3622^*11^.7^,80^T0\"^e372^*25^.38^,430\" uid=\"#region_402^K9^J7^7^G1^m1^o42^m1^pWelcome back to life, newcomer.^m1^n3^m2^o25^m2^p1^m2^n0^)^a^G1^X8^W30^8^G1^m1^o43^m1^p0^m1^n0^m2^o25^m2^p0^m2^n0^m3^o19^m3^p12^m3^n0^m4^o19^m4^p13^m4^n0^m5^o19^m5^p14^m5^n0^m6^o19^m6^p15^m6^n0^m7^o-1^m7^p0^m7^n0^m8^o-1^m8^p0^m8^n0^m9^o-1^m9^p0^m9^n0^m10^o-1^m10^p0^m10^n0^a^G1^X10^W60^7^G1^m1^o42^m1^pHi guys. It\'s very good that we do not have to wait for each other. It seems that all of us are ready.^m1^n2^m2^o25^m2^p2^m2^n0^)^a^G1^X11^W90^7^G1^m1^o42^m1^pWe\'re almost there, the time machine must be in this place...^m1^n2^m2^o25^m2^p7^m2^n0^)^a^G1^X12^W30^7^G1^m1^o42^m1^pOh...^m1^n1^m2^o25^m2^p5^m2^n0^)^a^G1^X13^W5^7^G1^m1^o42^m1^pDo you hear that noise?^m1^n3^>^7^G1^m1^o42^m1^pWait, I know this guy...^m1^n1^m2^o25^m2^p6^m2^n0^)^a^G1^X14^W60^7^G1^m1^o42^m1^pShould we revive him?^m1^n3^>^a^G1^X15^W120^a^G1^X16^W90^7^G1^m1^o42^m1^pSo let\'s go.^m1^n1^>^3200^*140^.30^,80^_270^*50^.30^,130^T0^6269^*640\" uid=\"#decor_800^jship^U-1^O0^P0^1254^*639\" uid=\"#player_801^A-3^B0^C0^D200^q10^r1^F14^E-1^k0^l-1^4237^*710\" uid=\"#gun_802^i^#^s-1^M3^1237^*699\" uid=\"#player_801^A-2^B0^C29^D200^q10^r1^F14^E-1^k0^l-1^1277^*639\" uid=\"#player_801^A1^B0^C0^D200^q10^r-1^F14^E-1^k0^l-1^4257^*650\" uid=\"#gun_802^i^#^s-1^M3^4280^*650\" uid=\"#gun_802^i^#^s-1^M3^4271^*650\" uid=\"#gun_802^iraygun^s-1^M3^4237^*730\" uid=\"#gun_802^idefibrillator^s-1^M0\" />";
         this.CACHED_MAPS["c40a"] = "<q.^f-42^*699^A0^B0^C100^D100^q0^r1^F1^E-1^k1^l-1\"^c-260^*130^.720^,230^_-30^*70^.30^,40^_-120^*2^.20^,22^_-260^*130^.260^,400^T0\" /><inf x=\"-42^*740^Zhero1_guns^;0^2-60^*91^.11^,31^(H^2-55^*109^.4^,200^x^y0^z0^h5^I^2-31^*91^.7^,31^(H^2-29^*109^.4^,200^x^y0^z0^h5^I^1-21^*699^A0^B0^C100^D100^q0^r-1^F3^E-1^k0^l-1^1-15^*699^A0^B0^C800^D800^q0^r-1^F13^E-1^k0^l-1\" /><inf x=\"-21^*720^Zhero2_guns^;-1^4-15^*710^idefibrillator^s-1^L4-15^*720^i^/2^s-1^M3^4-15^*730^iraygun^s-1^M3^4-15^*740^iminigun^s-1^L4-15^*750^iplasmagun^s-1^M3^4-15^*760^irl^s-1^M3^4-15^*770^jitem_grenade^s-1^L2-50^*70^.20^,50^x^y0^z0^h10^I^9^G1^X0^W0^7^G1^m1^o0^m1^p1^m1^n0^>\"^e-55^*90^.4^,200^K-1^J4\"^e-50^*82^.20^,130^K1^J1^7^G1^m1^o0^m1^p4^m1^n2^>\"^e-50^-50^.20^,50^K-1^J4^3-10^*70^.100^,30^_^*76^.40^,30^_19^*80^.101^,300^T0\"^e-60^*20^.60^,140^K2^J6^3-111^-55^.170^,45^_-144^-50^.94^,50^_-30^-50^.120^,19^_23^-20^.81^,10^_20^-26^.90^,740^T0^7^G1^m1^o1^m1^p4^m1^n2^m2^o41^m2^ptest_sound^m2^n0^m3^o29^m3^p0^m3^n4^m4^o29^m4^p0^m4^n5^$^3-180^-40^.50^,60^_-260^-20^.110^,80^_-218^*70^.58^,60^_-260^*70^.80^,108^_-140^*10^.30^,10^_-70^*10^.20^,20^_-10^*130^.205^,30^_50^*10^.40^,10^_40^*70^.80^,40^_-130^*6^.15^,160^T0^5^-20^.20^,300^A0^B-1^Y0^g0^610^-500^jantigravity^U-1^O0^P0^3-180^*70^.130^,400^T0\"^d-40^*89^~d20^*99^~d50^*99^~d-80^*20^~d-55^!5^~d10^*36^~d10^-49^~d-170^-0^u0.4^t1^3100^*10^.95^,1100^T0\" /><vehicle x=\"77^!00^r-1^jveh_corvette^A0^B0\" hpp=\"400^177^!61^A0^B0^C100^D100^q1^r-1^F5^E-2^k0^l5^477^!30^ivehgun^s-1^L3^*10^.10^,10^_-30^-20^.10^,100^T0\" /><vehicle x=\"60^*200^r-1^jveh_corvette^A0^B0\" hpp=\"400^460^*180^ivehgun^s-1^L160^*159^A0^B0^C100^D100^q1^r-1^F5^E-2^k0^l4^3-80^*2^.20^,220^T0\"^e53^*40^.41^,630^K-1^J4^1-127^*129^A0^B0^C100^D100^q1^r1^F5^E-2^k0^l3\" /><vehicle x=\"-127^*170^r1^jveh_corvette^A0^B0\" hpp=\"400^4-127^*150^ivehgun^s-1^M0\"^e-138^*33^.24^,260^K-1^J4^+-80^-46^.100^,40^g1^+-50^-50^.20^,50^g1^+-130^-46^.30^,40^g1^3-100^-40^.20^,15^_-170^!4^.10^,10^_-140^-33^.8^,11^_-26^-24^.16^,60^T0^270^*30^.5^,200^x^y0^z0^h10^I^276^*30^.5^,200^x^y0^z0^h10^I^282^*30^.5^,200^x^y0^z0^h10^I^386^*7^.18^,30^T0\"^e70^*49^.5^,200^K-1^J4\"^e76^*49^.5^,200^K-1^J4\"^e82^*49^.5^,200^K-1^J4^7^G1^m1^o0^m1^p5^m1^n6^>^7^G1^m1^o0^m1^p6^m1^n7^>^7^G1^m1^o0^m1^p7^m1^n8^>^1105^*99^A0^B0^C1000^D1000^q1^r-1^F2^E-1^k0^l-1^4105^*130^iraygun^s-1^M2^1114^*99^A0^B0^C1000^D1000^q1^r-1^F2^E-1^k0^l-1^1123^*99^A0^B0^C1000^D1000^q1^r-1^F2^E-1^k0^l-1^4114^*130^iraygun^s-1^M2^4123^*130^iraygun^s-1^M2^3130^*22^.38^,22^_100^*80^.95^,40^_240^*60^.220^,160^_190^*5^.62^,1050^T0^9^G1^X6^W10^7^G1^m1^o42^m1^pSomebody has to activate the time machine, I will do it myself.^m1^n1^m2^o25^m2^p2^m2^n0^)^a^G1^X7^W60^7^G1^m1^o42^m1^pGood luck!^m1^n3^m2^o25^m2^p3^m2^n0^)^9^G1^X8^W60^7^G1^m1^o0^m1^p3^m1^n9^m2^o32^m2^p1^m2^n3^m3^o32^m3^p2^m3^n3^m4^o-1^m4^p0^m4^n0^$\"^e-29^*90^.4^,200^K-1^J4^260^*100^.6^,20^(I^3152^*17^.28^,170^T0\"^e186^*85^.5^,50^K-1^J4\"^e177^*41^.12^,330^K9^J6^7^G1^m1^o14^m1^p1^m1^n10^m2^o40^m2^p1^m2^n0^m3^o32^m3^p1^m3^n1^m4^o0^m4^p9^m4^n12^m5^o14^m5^p2^m5^n13^m6^o0^m6^p#doorasdc^m6^n#region_212^m7^o32^m7^p2^m7^n1^m8^o-1^m8^p0^m8^n0^m9^o-1^m9^p0^m9^n0^m10^o-1^m10^p0^m10^n0\"^c-55^*90^.4^,200^T4\"^c-29^*90^.4^,200^T4\"^c-48^*68^.1^,1210^T4\"^c-33^*68^.1^,1210^T4\"^c71^*30^.3^,200^T4\"^c77^*30^.3^,200^T4\"^c83^*30^.3^,200^T4\"^d196^*500^u0.4^t1^2162^*57^.5^,180^x^y0^z0^h10^I\"^e162^*40^.5^,180^K-1^J4\"^c163^*40^.3^,180^T4^2180^*100^.6^,20^(I\"^e190^*85^.5^,50^K-1^J4^3380^*130^.80^,1000^T0^6353^*740^jfinal_place2^U-1^O0^P0^2336^*75^.34^,3^(H^3180^*130^.90^,200^T0^6217^*50^jantigravity^U-1^O0^P0^6230^*50^jantigravity^U-1^O0^P0^6204^*50^jantigravity^U-1^O0^P0^5195^*60^.45^,550^A0^B-0.7^Y0^g0^3243^*70^.8^,16^_280^*66^.13^,16^_282^*73^.8^,16^_325^*73^.64^,16^_316^*65^.21^,10^_350^*130^.53^,200^T0\"^d280^*1500^u0.4^t0\"^d300^*1500^u0.4^t0\"^d320^*1500^u0.4^t0\"^d340^*1500^u0.4^t0\"^d360^*1500^u0.4^t0\"^d260^*1500^u0.4^t0\"^d200^*105^~d217^*6^~d230^*6^~d204^*60^u0.4^t1^1305^*899^A0^B0^C100^D100^q1^r-1^F5^E-2^k0^l-1\" /><vehicle x=\"305^*940^r-1^jveh_corvette^A0^B0\" hpp=\"400^4305^*930^ivehgun^s-1^L5270^*130^.80^,100^A0^B3^Y0^g0^1331^*889^A0^B0^C100^D100^q1^r-1^F5^E-2^k0^l-1\" /><vehicle x=\"331^*930^r-1^jveh_corvette^A0^B0\" hpp=\"400^4331^*920^ivehgun^s-1^L1322^*1059^A0^B0^C100^D100^q1^r-1^F5^E-2^k0^l-1\" /><vehicle x=\"322^*1100^r-1^jveh_corvette^A0^B0\" hpp=\"400^4322^*1090^ivehgun^s-1^L1288^*1059^A0^B0^C100^D100^q1^r-1^F5^E-2^k0^l-1\" /><vehicle x=\"288^*1100^r-1^jveh_corvette^A0^B0\" hpp=\"400^4288^*1090^ivehgun^s-1^L4230^*850^ivehgun^s-1^L1229^*819^A0^B0^C100^D100^q1^r-1^F5^E-2^k0^l-1\" /><vehicle x=\"229^*860^r-1^jveh_corvette^A0^B0\" hpp=\"400\"^e336^*102^.34^,280^K10^J7^7^G1^m1^o43^m1^pTo be continued...^m1^n0^m2^o47^m2^p0^m2^n0^m3^o41^m3^plast_teleport^m3^n0^m4^o-1^m4^p0^m4^n0^$^3187^*80^.23^,50^T0\"^e134^*40^.14^,190^K-1^J1\"^e134^*40^.14^,190^K11^J6^7^G1^m1^o41^m1^pt_switch2^m1^n0^>\"^e310^*123^.77^,680^K12^J7^7^G1^m1^o42^m1^pForward to the past!^m1^n2^>\" />";
         this.CACHED_MAPS["c41a"] = "<q.^f-47^*259^A0^B0^C400^D400^q1^r1^F9^E-1^k0^l-1^3-180^-^.148^,700^T0\"^c-185^*100^.330^,1120^T1^3-8^*26^.46^,5^_-6^*30^.6^,19^_-40^*30^.6^,19^_-78^*26^.46^,5^_-96^*50^.46^,8^_10^*50^.46^,8^_60^*20^.10^,10^_-110^*20^.10^,10^_-170^*30^.40^,40^_90^*30^.40^,40^_-90^*5^.10^,10^_40^*5^.10^,10^_10^*5^.10^,10^_-60^*5^.10^,10^_-70^*24^.10^,8^_20^*24^.10^,8^_80^*20^.20^,10^_-140^*20^.20^,10^_-240^*180^.80^,2500^T2^3120^*180^.120^,1350^T2\"^d-150^*1100^u1^t0\"^d-120^*1100^u1^t0\"^d-90^*1100^u1^t0\"^d-60^*1100^u1^t0\"^d-30^*1100^u1^t0\"^d^*1100^u1^t0\"^d30^*1100^u1^t0\"^d60^*1100^u1^t0\"^d90^*1100^u1^t0\"^d119^*1100^u1^t0\" /><barrel x=\"-43^*280\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"-33^*280\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"-7^*280\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"3^*280\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"-33^*20\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"-7^*20\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"22^*20\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"-62^*20\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"-122^*20\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"82^*20\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"88^*220\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"-129^*220\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"-150^*320\" uid=\"#barrel^jbar_orange^A0^B0\" /><barrel x=\"110^*320\" uid=\"#barrel^jbar_orange^A0^B0\"^e-49^*66^.13^,50\" uid=\"#region^K-1^J4\"^e-150^*79^.260^,70\" uid=\"#region^K-1^J4^2-257^*20^.19^,90\" uid=\"#door^x^y0^z0^h1^I^2-257^*36^.6^,200\" uid=\"#door^x^y0^z0^h1^I^2-256^*36^.25^,50\" uid=\"#door^x^y0^z0^h1^I^a^G10^X0^W30^7^G-1^m1^o28^m1^p1^m1^n-1^>^1-241^*199\" uid=\"#playerasds2^A0^B0^C100^D100^q2^r1^F12^E-1^k3^l0^2-32^*19^.24^,40\" uid=\"#doorsadf^x^y0^z0^h4^I^9^G1^X1^W0^7^G-1^m1^o0^m1^p3^m1^n2^m2^o26^m2^p3^m2^n0^)\"^e-32^*26^.24^,40\" uid=\"#region_356^K3^J5^7^G-1^m1^o26^m1^p2^m1^n0^m2^o0^m2^p3^m2^n3^)^7^G-1^m1^o25^m1^p2^m1^n0^>^a^G-1^X2^W30\"^e-32^*1^.24^,40\" uid=\"#region_360^K4^J5^7^G-1^m1^o25^m1^p3^m1^n0^>^a^G-1^X1^W30^3-8^-^.148^,70^_-60^-3^.78^,670^T0\" /><inf x=\"-47^*560\" uid=\"#engine_mark^Zmeat^;0^3-60^*44^.15^,4^_5^*44^.15^,4^_-110^*44^.20^,4^_50^*44^.20^,40^T0^9^G1^X5^W1^7^G1^m1^o-1^m1^p0^m1^n0^m2^o25^m2^p0^m2^n0^)^5-32^!^.24^,40\" uid=\"#pusher_374^A0^B0^Y0^g0^4-47^*290\" uid=\"#gun_378^irailgun2^s1^M3\"^d-50^*20^~d10^*20^~d-75^*41^~d35^*410^u0.4^t1\" /><inf x=\"-47^*520\" uid=\"#engine_mark^Zsky^;3^+-130^*10^.220^,50\" uid=\"#water^g0^+50^*5^.40^,50\" uid=\"#water^g0^+20^*5^.20^,50\" uid=\"#water^g0^+-50^*5^.60^,50\" uid=\"#water^g0^+-32^-^.24^,30\" uid=\"#water^g0^+-130^*5^.40^,50\" uid=\"#water^g0^+-80^*5^.20^,50\" uid=\"#water^g0^+-120^*15^.10^,50\" uid=\"#water^g0^+-100^*15^.60^,50\" uid=\"#water^g0^+^*15^.60^,50\" uid=\"#water^g0^+-40^*11^.40^,10\" uid=\"#water^g0^+-34^*15^.28^,40\" uid=\"#water^g0^+70^*15^.10^,50\" uid=\"#water^g0^3120^*32^.120^,1020^T0\"^c124^*50^.116^,280^T0\"^c127^*45^.24^,130^T4^2127^*45^.4^,130\" uid=\"#door1^x^y0^z0^h1^I^2132^*45^.4^,130\" uid=\"#door2^x^y0^z0^h1^I^2137^*45^.4^,130\" uid=\"#door3^x^y0^z0^h1^I^2142^*45^.4^,130\" uid=\"#door4^x^y0^z0^h1^I^2147^*45^.4^,130\" uid=\"#door5^x^y0^z0^h1^I\"^e127^*57^.4^,130\" uid=\"#region1^K-1^J4\"^e132^*57^.4^,130\" uid=\"#region2^K-1^J4\"^e137^*57^.4^,130\" uid=\"#region3^K-1^J4\"^e142^*57^.4^,130\" uid=\"#region4^K-1^J4\"^e147^*57^.4^,130\" uid=\"#region5^K-1^J4\"^e155^*56^.41^,390\" uid=\"#region_507^K6^J6^7^G1^m1^o7^m1^pc0a^m1^n0^>^7^G1^m1^o0^m1^p4^m1^n4^>^7^G1^m1^o0^m1^p5^m1^n5^>^7^G1^m1^o0^m1^p6^m1^n6^>^7^G1^m1^o0^m1^p7^m1^n7^>^7^G1^m1^o0^m1^p8^m1^n8^>\"^e81^*11^.8^,120\" uid=\"#region_514^K7^J1\"^e21^*37^.8^,120\" uid=\"#region_514^K8^J1\"^e-69^*37^.8^,120\" uid=\"#tr^K10^J1\"^e-129^*11^.8^,120\" uid=\"#region_514^K11^J1\"^e-30^*73^.20^,120\" uid=\"#region_514^K9^J1^5-160^*180^.280^,300\" uid=\"#pusher_121^A0^B5^Y0^g0\" />";
         this.CUR_LOADING = "";
         this.GET_TRIES = 0;
         this.MP_waiting_for_answer = true;
         this.last_net_error = 0;
         this.players_online = 0;
         this.connection_lost_ping = 0;
         this.MP_get_done_STR = "";
         this.MP_get_done_HAP = false;
         this.last_mp_param = new Array();
         this.exec_measures_len = 30;
         this.exec_measures_rate = 90;
         this.exec_measures_rate_passed = 0;
         this.exec_measures_tot = new Vector.<uint>(this.exec_measures_len);
         this.exec_measures_calls = new Vector.<uint>(this.exec_measures_len);
         this.exec_measures_peak = new Vector.<uint>(this.exec_measures_len);
         this.exec_measures_start = new Vector.<uint>(this.exec_measures_len);
         this.MeasuresReset();
         this.LITE_PHYS_tim = true;
         this.phys_stress = 0;
         this.last_key_code = -1;
         this.keys_are_being_pressed = false;
         this.let_scroll_last = 0;
         this.game_focus_ever_lost = false;
         this.maximum_hit_delay_time = 125;
         this.hit_retry_time = 16;
         this.possible_bullet_data = new Vector.<Object>();
         this.vc_cache = new Array();
         this.vc_fresh = true;
         this.vs_salt = Math.floor(Math.random() * 10);
         this.mouse_x = 0;
         this.mouse_y = 0;
         this.temp_fps = 0;
         this.set_timeouts = new Vector.<Object>();
         this.respawn_logic_last_addr = 0;
         this.gravitatorTransform = new SoundTransform(0);
         this.musTransform = new SoundTransform(0);
         this.am_base_Transform = new SoundTransform(0);
         this.am_wind_Transform = new SoundTransform(0);
         this.main_song_Transform = new SoundTransform(0);
         this.grav_working = true;
         this.mus_working = true;
         this.am_base_working = true;
         this.am_wind_working = true;
         this.main_song_working = true;
         this.CreateRestoreLoopSounds();
         this.multiplayer_repsawn_timer_speed = 1;
         this.voice_pressure = 0.2;
         this.FUN_NICE_BULLETS = 0;
         this.FUN_SPENT_BULLETS = 0;
         this.FUN_DAMAGE_MADE = 0;
         this.FUN_HEADSHOTS_MADE = 0;
         this.FUN_DAMAGE_TAKEN = 0;
         this.FUN_TIME_SPEND = 0;
         this.FUN_ELEMINATED = 0;
         this.last_gun_b4_psi = -1;
         this.FORCE_CUSTOM_MAP = false;
         this.EXP_TYPE_DEATH_IN_APPROVED = -1;
         this.EXP_TYPE_SYNC_SKILL_POINTS = -2;
         this.EXP_TYPE_PLAYING_CAMPAIGN = 0;
         this.EXP_TYPE_PLAYING_CUSTOM = 1;
         this.EXP_TYPE_PLAYING_CUSTOM_MP = 2;
         this.EXP_TYPE_PLAYING_IN_APPROVED = 3;
         this.EXP_TYPE_BEAT_CUSTOM = 4;
         this.EXP_TYPE_HEAL_AND_TEAMMATE_SURVIVED_IN_APPROVED = 5;
         this.EXP_TYPE_KILL_IN_APPROVED = 6;
         this.EXP_TYPE_KILL_ENEMY_NON_PLAYER = 7;
         this.EXP_TYPE_BEAT_CAMPAIGN_LEVEL = 8;
         this.EXP_TYPE_KILL_TEAMMATE_MP = 9;
         this.EXP_TYPE_CHECK_OUT_MULTIPLAYER = 10;
         this.EXP_TYPE_SYNC = 11;
         this.EXP_TYPE_KILL_PLAYER_USING_GRENADE_IN_APPROVED = 12;
         this.EXP_TYPE_KILL_PLAYER_WITH_HEADSHOT_IN_APPROVED = 13;
         this.EXP_TYPE_KILL_PLAYER_USING_WALL_OR_ACID_IN_APPROVED = 14;
         this.EXP_TYPE_KILL_PLAYER_USING_SWORDS_IN_APPROVED = 15;
         this.EXP_TYPE_KILL_PLAYER_WITHOUT_LEGS_IN_APPROVED = 16;
         this.EXP_TYPE_KILL_PLAYER_WITH_DEFIBRILLATOR_IN_APPROVED = 17;
         this.EXP_TYPE_BREAK_ALIVE_PLAYERS_ARMS_IN_APPROVED = 18;
         this.EXP_TYPE_BREAK_ALIVE_PLAYERS_LEGS_IN_APPROVED = 19;
         this.EXP_TYPE_KILL_PLAYER_MIDAIR_IN_APPROVED = 20;
         this.EXP_TYPE_TRY_CUSTOM = 21;
         this.EXP_TYPE_STREAK = 22;
         this.EXP_TYPE_LEGEND = 23;
         this.EXP_TYPE_AFK_KILL = 24;
         this.exp_titles = new Vector.<String>();
         this.exp_titles[this.EXP_TYPE_PLAYING_CAMPAIGN] = "";
         this.exp_titles[this.EXP_TYPE_PLAYING_CUSTOM] = "";
         this.exp_titles[this.EXP_TYPE_PLAYING_CUSTOM_MP] = "";
         this.exp_titles[this.EXP_TYPE_PLAYING_IN_APPROVED] = "";
         this.exp_titles[this.EXP_TYPE_BEAT_CUSTOM] = "Level complete";
         this.exp_titles[this.EXP_TYPE_HEAL_AND_TEAMMATE_SURVIVED_IN_APPROVED] = "6";
         this.exp_titles[this.EXP_TYPE_KILL_IN_APPROVED] = "Elimination";
         this.exp_titles[this.EXP_TYPE_KILL_ENEMY_NON_PLAYER] = "Elimination";
         this.exp_titles[this.EXP_TYPE_BEAT_CAMPAIGN_LEVEL] = "Level complete";
         this.exp_titles[this.EXP_TYPE_KILL_TEAMMATE_MP] = "Teamkills are not so welcome";
         this.exp_titles[this.EXP_TYPE_CHECK_OUT_MULTIPLAYER] = "";
         this.exp_titles[this.EXP_TYPE_SYNC] = "";
         this.exp_titles[this.EXP_TYPE_KILL_PLAYER_USING_GRENADE_IN_APPROVED] = "Grenade elimination";
         this.exp_titles[this.EXP_TYPE_KILL_PLAYER_WITH_HEADSHOT_IN_APPROVED] = "Headshot";
         this.exp_titles[this.EXP_TYPE_KILL_PLAYER_USING_WALL_OR_ACID_IN_APPROVED] = "Let environment do the job";
         this.exp_titles[this.EXP_TYPE_KILL_PLAYER_USING_SWORDS_IN_APPROVED] = "Sword elimination";
         this.exp_titles[this.EXP_TYPE_KILL_PLAYER_WITHOUT_LEGS_IN_APPROVED] = "Still kicking";
         this.exp_titles[this.EXP_TYPE_KILL_PLAYER_WITH_DEFIBRILLATOR_IN_APPROVED] = "The unnecessary ways";
         this.exp_titles[this.EXP_TYPE_BREAK_ALIVE_PLAYERS_ARMS_IN_APPROVED] = "No arms";
         this.exp_titles[this.EXP_TYPE_BREAK_ALIVE_PLAYERS_LEGS_IN_APPROVED] = "Not going anywhere";
         this.exp_titles[this.EXP_TYPE_KILL_PLAYER_MIDAIR_IN_APPROVED] = "Mid-air kill";
         this.exp_titles[this.EXP_TYPE_TRY_CUSTOM] = "";
         this.exp_titles[this.EXP_TYPE_STREAK] = "# kills in a row!";
         this.exp_titles[this.EXP_TYPE_LEGEND] = "Hey, a real # is in this match";
         this.exp_titles[this.EXP_TYPE_AFK_KILL] = "Not a threat";
         this.exp_tried_custom_maps = {};
         this.exp_points = 0;
         this.exp_points_target = 0;
         this.exp_timer = uint.MAX_VALUE;
         this.NoMouse(this.exp_bar);
         this.NoMouse(this.exp_bar_shadow);
         this.SKILL_POINTS_SCALE = 100;
         this.exp_bar.levelup.visible = false;
         this.exp_bar.visible = false;
         this.exp_bar_shadow.visible = false;
         this.exp_bar.alpha = 0;
         this.exp_bar.glow.alpha = 0;
         this.exp_first_sync_await = true;
         this.exp_last_level = 0;
         this.exp_points_per_level = 100;
         this.exp_min_level = 0;
         this.exp_max_level = 0;
         this.exp_bar.exp_min.x = -100;
         this.exp_bar.exp_max.x = -100;
         this.exp_max_level_this_time = 0;
         this.myExpLoader = this.GetNewURLLoader();
         this.exp_alive = false;
         this.exp_mp_enter_once = true;
         this.exp_scheduled = new Vector.<Object>();
         this.exp_busy = false;
         this.skill_points_tim = uint.MAX_VALUE;
         this.skill_points_change_expect_tries = 0;
         this.can_get_exp_for_level = false;
         this.exp_heal_tracked_players = [];
         if(this.loaderInfo.parameters.l != undefined || this.loaderInfo.url.split("%5F").join("_").indexOf("pb2_re34.swf") != -1 || this.loaderInfo.url.split("%5F").join("_").indexOf("pb2_re34_alt.swf") != -1)
         {
            (function():*
            {
               var ten_second_counter:* = undefined;
               exp_alive = true;
               ten_second_counter = 0;
               setInterval(function():*
               {
                  if(currentFrameLabel == "gaming")
                  {
                     if(system_non_stop)
                     {
                        if(keys_are_being_pressed)
                        {
                           keys_are_being_pressed = false;
                           ++ten_second_counter;
                           if(ten_second_counter >= 6)
                           {
                              ten_second_counter = 0;
                              if(MP_mode)
                              {
                                 if(MP_giveguns)
                                 {
                                    ExpTask(EXP_TYPE_PLAYING_IN_APPROVED,ten_second_counter);
                                 }
                                 else
                                 {
                                    ExpTask(EXP_TYPE_PLAYING_CUSTOM_MP,ten_second_counter);
                                 }
                              }
                              else if(FORCE_CUSTOM_MAP)
                              {
                                 ExpTask(EXP_TYPE_PLAYING_CUSTOM,ten_second_counter);
                              }
                              else
                              {
                                 ExpTask(EXP_TYPE_PLAYING_CAMPAIGN,ten_second_counter);
                              }
                           }
                        }
                     }
                  }
               },1000 * 10);
            })();
         }
         this.ExpTask(this.EXP_TYPE_SYNC,getTimer());
         this.myMPlayerInfoLoader = this.GetNewURLLoader();
         this.player_info_busy = false;
         this.exp_legens = {};
         this.last_server_list_str = "Local|ca.pb2.club|10015|0|";
         stage.addEventListener(KeyboardEvent.KEY_DOWN,this.k_down);
         stage.addEventListener(KeyboardEvent.KEY_UP,this.k_up);
      }
      
      internal function frame4() : *
      {
         stop();
         this.setTrapAllKeys(true);
         stage.scaleMode = this.proper_scale_mode;
         stage.align = this.proper_stage_align;
         this.darkness.visible = true;
         this.darkness.alpha = 1;
         this.mupd.visible = false;
         this.mupd.ttt.gotoAndStop(1);
         this.CREDITS_BY_GAME_END = false;
         this.menu_buttons_tot = 7;
         this.MP_clan = "";
         try
         {
            this.ResetVol();
            this.UpdateGravitatorVol();
         }
         catch(e:Error)
         {
            NONMUTE = false;
         }
         stage.quality = "HIGH";
         this.FUN_TIME_SPEND = 0;
         if(this.ALTCUR)
         {
            Mouse.hide();
         }
         if(this.ui_bg)
         {
            this.earth.visible = false;
            this.uibackground.visible = false;
         }
         else
         {
            this.earth.visible = true;
            this.uibackground.visible = true;
         }
         if(this.NetworkLoad_failed && !this.NetworkLoad_complete)
         {
            this.NetworkLoad_failed = false;
            this.NetworkLoad_triesleft = 0;
            this.LAST_ERROR = "Warning: Unable to complete synchronization for saved data. Can\'t connect to server.\n\nUsing saved data from computer.";
         }
         if(this._flash_version < 11.15)
         {
            if(this.LAST_ERROR == "")
            {
               this.LAST_ERROR = "*Your Flash Player (" + this._flash_version + ") is outdated.\n\n" + "This game requires Flash Player 11.8 or higher.\n\n" + "Please consider Flash Player update by following link:\n\n" + "<a href=\"http://get.adobe.com/flashplayer\"><font size=\"14\" color=\"#FFFFFF\">http://get.adobe.com/flashplayer</font></a>";
            }
            else if(this.LAST_ERROR.indexOf("Error") != -1)
            {
               this.LAST_ERROR = "*<font color=\"#FF3333\">Your Flash Player (" + this._flash_version + ") is outdated.</font>\n" + "This game requires Flash Player 11.8 or higher.\n" + "Please consider Flash Player update by following link:\n" + "<a href=\"http://get.adobe.com/flashplayer\"><font size=\"14\" color=\"#FFFFFF\">http://get.adobe.com/flashplayer</font></a>\n\n" + this.LAST_ERROR;
            }
         }
         if(this.LAST_ERROR == "")
         {
            this.errmenu.visible = false;
         }
         else
         {
            if(this.LAST_ERROR.charAt(0) == "*")
            {
               this.errmenu.txt.htmlText = this.LAST_ERROR.slice(1);
            }
            else
            {
               this.errmenu.txt.text = this.LAST_ERROR;
            }
            this.LAST_ERROR = "";
         }
         this.errmenu.b_close2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.errmenu.b_close2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.errmenu.b_close2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_act);
            errmenu.visible = false;
         });
         this.menu_buttons2.scaleX = this.menu_buttons2.scaleY = this.menu_buttons2.scaleZ = this.menu_buttons.scaleX = this.menu_buttons.scaleY = this.menu_buttons.scaleZ = 1.5;
         this.menu_buttons.alpha = 0.5;
         this.menu_buttons2.addEventListener(MouseEvent.MOUSE_OUT,function():*
         {
            m_active = -1;
         });
         this.menu_buttons2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            m = 0;
            while(m < menu_buttons_tot)
            {
               if(menu_buttons["btn" + m].visible)
               {
                  if(menu_buttons2.mouseX > menu_buttons["btn" + m].x && menu_buttons2.mouseX < menu_buttons["btn" + m].x + 200 && menu_buttons2.mouseY > menu_buttons["btn" + m].y && menu_buttons2.mouseY < menu_buttons["btn" + m].y + 20)
                  {
                     m_active = m;
                     m_hold = m;
                     menu_buttons["btn" + m].btn_over.alpha = 0;
                     menu_buttons["btn" + m].ghost.alpha = 1;
                     menu_buttons["btn" + m].z = 5;
                     PlaySound_full(ss_info_off);
                  }
                  else
                  {
                     menu_buttons["btn" + m].z = 0;
                  }
               }
               ++m;
            }
         });
         this.allow_mp_connect = false;
         this.menu_buttons2.addEventListener(MouseEvent.CLICK,function():*
         {
            m = 0;
            while(m < menu_buttons_tot)
            {
               if(menu_buttons["btn" + m].visible)
               {
                  menu_buttons["btn" + m].z = 0;
                  if(m_hold == m)
                  {
                     if(menu_buttons2.mouseX > menu_buttons["btn" + m].x && menu_buttons2.mouseX < menu_buttons["btn" + m].x + 200 && menu_buttons2.mouseY > menu_buttons["btn" + m].y && menu_buttons2.mouseY < menu_buttons["btn" + m].y + 20)
                     {
                        m_hold = -1;
                        m_active = m;
                        if(m == 0)
                        {
                           UnloadMenuItems();
                           gotoAndStop("campaign");
                        }
                        if(m == 1)
                        {
                           UnloadMenuItems();
                           custompage = true;
                           gotoAndStop("custom");
                        }
                        if(m == 2)
                        {
                           UnloadMenuItems();
                           gotoAndStop("options");
                        }
                        if(m == 3)
                        {
                           UnloadMenuItems();
                           LocateMeToMp();
                        }
                        if(m == 4)
                        {
                           UnloadMenuItems();
                           gotoAndStop("credits");
                        }
                        if(m == 5)
                        {
                           try
                           {
                              navigateToURL(new URLRequest("http://www.plazmaburst2.com"),"_blank");
                           }
                           catch(e:Error)
                           {
                           }
                        }
                        if(m == 6)
                        {
                           try
                           {
                              navigateToURL(new URLRequest("http://www.coolbuddy.com"),"_blank");
                           }
                           catch(e:Error)
                           {
                           }
                        }
                        PlaySound_full(ss_info_act);
                        break;
                     }
                  }
               }
               ++m;
            }
            if(m_hold != -1)
            {
               m_hold = -1;
            }
         });
         this.lm_active = -1;
         this.m_active = -1;
         this.m_time = 0;
         this.m_hold = -1;
         this.menu_buttons2.addEventListener(MouseEvent.MOUSE_MOVE,this.mov);
         this.menu_buttons["btn" + 0].txt.text = "CAMPAIGN";
         this.menu_buttons["btn" + 1].txt.text = "CUSTOM MAPS";
         this.menu_buttons["btn" + 2].txt.text = "SETTINGS & PERFORMANCE";
         this.menu_buttons["btn" + 3].txt.text = "MULTIPLAYER";
         this.menu_buttons["btn" + 4].txt.text = "CREDITS";
         this.menu_buttons["btn" + 5].txt.text = "OFFICIAL WEBSITE";
         this.menu_buttons["btn" + 6].txt.text = "PLAY COOLBUDDY GAMES";
         if(this.loaderInfo.url.indexOf(".plazmaburst2.com") != -1)
         {
            (function():*
            {
               var _loc1_:* = undefined;
               _loc1_ = 1;
               menu_buttons["btn" + _loc1_].visible = false;
               while(_loc1_ < menu_buttons_tot)
               {
                  menu_buttons["btn" + _loc1_].y -= 20;
                  _loc1_++;
               }
            })();
         }
         if(this.loaderInfo.url.indexOf(".plazmaburst2.com") != -1)
         {
            (function():*
            {
               var _loc1_:* = undefined;
               _loc1_ = 6;
               menu_buttons["btn" + _loc1_].visible = false;
               while(_loc1_ < menu_buttons_tot)
               {
                  menu_buttons["btn" + _loc1_].y -= 20;
                  _loc1_++;
               }
            })();
         }
         this.m = 0;
         while(this.m < this.menu_buttons_tot)
         {
            this.menu_buttons["btn" + this.m].ghost.alpha = 0;
            this.menu_buttons["btn" + this.m].ghost.txt.text = this.menu_buttons["btn" + this.m].txt.text;
            ++this.m;
         }
         this.earth_pos1 = 0;
         this.earth.rotation = (Math.random() - 0.5) * 0.3;
         this.new_nick = this.CMPG_name.toLowerCase();
         this.newString = "";
         this.pattern_no_nix = "!@#$%^&*()+=|/\\№;%:?*[];\',.<>{}~`";
         this.pattern_no_nix += "\"";
         this.i = 0;
         while(this.i < this.new_nick.length)
         {
            if(this.pattern_no_nix.indexOf(this.new_nick.charAt(this.i)) == -1)
            {
               if(this.new_nick.charAt(this.i) == " ")
               {
                  this.newString += "_";
               }
               else
               {
                  this.newString += this.new_nick.charAt(this.i);
               }
            }
            ++this.i;
         }
         this.new_nick = this.newString;
         this.menu_buttons.txtconsole.htmlText = "Welcome back, " + this.CMPG_name + "!";
         this.menu_buttons.txtconsole_out.htmlText = "";
         this.new_nick2 = this.new_nick + "@localhost:~$ ";
         this.new_nick += "@localhost:/# ";
         if(!this.stable)
         {
            this.new_nick += this.unstable;
         }
         this.blink_main = -100;
         this.i = 0;
         while(this.i < 30)
         {
            this.earth["sh" + this.i].gotoAndStop(1);
            this.earth["sh" + this.i].started = false;
            ++this.i;
         }
         this.MUSIC_START = getTimer();
         this.TROOPS_GONE = false;
         addEventListener(Event.ENTER_FRAME,this.onEnterFrame2);
         if(this.START_CUSTOM_MAP)
         {
            this.START_CUSTOM_MAP = false;
            this.GET_TRIES = 0;
            this.GotoMap(this.loaderInfo.parameters.custommap);
            this.darkness.alpha = 1;
            this.darkness.visible = true;
         }
         this.flike.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            try
            {
               navigateToURL(new URLRequest("https://discord.gg/plazmaburst"),"_blank");
            }
            catch(e:Error)
            {
            }
         });
         this.flike.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.flike.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.flikee.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            try
            {
               navigateToURL(new URLRequest("https://www.patreon.com/Eric_Gurt"),"_blank");
            }
            catch(e:Error)
            {
            }
         });
         this.flikee.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.flikee.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         if(this.loaderInfo.url.search("http") == -1 && this.pType == "External")
         {
            this.CMPG_name = ".:Eric Gurt:.";
         }
         if(ExternalInterface.available)
         {
            ExternalInterface.call("RedirectTester()");
         }
         this.menu_hue_timeout = -1;
         stage.addEventListener(MouseEvent.MOUSE_WHEEL,function(param1:*):*
         {
            var e:* = param1;
            if(currentFrameLabel == "menu")
            {
               if(menu_hue < 0 && menu_hue + e.delta > 0 || menu_hue > 0 && menu_hue + e.delta < 0)
               {
                  menu_hue = 0;
               }
               else
               {
                  menu_hue += e.delta;
               }
               if(menu_hue > 180)
               {
                  menu_hue = -180;
               }
               if(menu_hue < -180)
               {
                  menu_hue = 180;
               }
               UpdateMenuHue();
               menu_buttons.txtconsole_out.text = "menu_hue = " + menu_hue;
               if(menu_hue_timeout != -1)
               {
                  clearTimeout(menu_hue_timeout);
               }
               menu_hue_timeout = setTimeout(function():*
               {
                  menu_buttons.txtconsole_out.text = "";
               },1500);
            }
         });
         this.UpdateMenuHue();
         this.fetch_lobby_server();
      }
      
      internal function frame5() : *
      {
         this.darkness.visible = false;
         this.darkness.alpha = 0;
         this.mupd.visible = false;
         this.mupd.ttt.gotoAndStop(1);
         this.setTrapAllKeys(true);
         stage.scaleMode = this.proper_scale_mode;
         stage.align = this.proper_stage_align;
         this.ResetVol();
         this.UpdateGravitatorVol();
         stage.quality = "HIGH";
         stage.focus = stage;
         if(this.FORCE_CUSTOM_MAP && this.LAST_ERROR != "YOUR TEAMMATE DIED." && this.LAST_ERROR != "YOUR TEAMMATE IS CRITICALLY INJURED." && this.LAST_ERROR != "YOUR TEAM IS DEAD." && this.LAST_ERROR != "BAD LUCK, YOU DIED." && this.LAST_ERROR != "YOU ARE DEAD.")
         {
            this.txt.text = this.LAST_ERROR;
         }
         else
         {
            this.txt.text = this.LAST_ERROR + "\nTHAT DIDN\'T GO AS WELL AS EXPECTED...";
         }
         this.LAST_ERROR = "";
         this.menu_start2.addEventListener(MouseEvent.CLICK,function():*
         {
            stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space);
            PlaySound_full(ss_info_act);
            myCursor.gotoAndPlay("loading");
            gotoAndStop("loading");
         });
         this.menu_start2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.menu_start2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.menu_noback.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            try
            {
               navigateToURL(new URLRequest("http://www.coolbuddy.com"),"_blank");
            }
            catch(e:Error)
            {
            }
         });
         this.menu_noback.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.menu_noback.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.menu_back2.addEventListener(MouseEvent.CLICK,function():*
         {
            stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space);
            PlaySound_full(ss_info_act);
            gotoAndStop("menu");
         });
         this.menu_back2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.menu_back2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         stage.addEventListener(KeyboardEvent.KEY_DOWN,this.k_down_space);
         this.i = Math.floor(Math.random() * 6.9);
         if(this.i == 0)
         {
            this.cap.text = "Heavy Battlesuit makes you slower, but gives more stability and more hitpoints.";
         }
         if(this.i == 1)
         {
            this.cap.text = "When you slowdown time, your hero as well as your projectiles are moving faster than any others.";
         }
         if(this.i == 2)
         {
            this.cap.text = "Swords can make you jump higher and run faster.";
         }
         if(this.i == 3)
         {
            this.cap.text = "Headshots do the most damage to the enemy.";
         }
         if(this.i == 4)
         {
            this.cap.text = "Enemies can attack you when they are dying.";
         }
         if(this.i == 5)
         {
            this.cap.text = "Use covers to restore health.";
         }
         if(this.i == 6)
         {
            this.cap.text = "You can quickly restart failed mission by pressing R or SPACE key.";
         }
         this.menu_fail_mp.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space);
            LocateMeToMp();
         });
         this.menu_fail_mp.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.menu_fail_mp.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.flike2.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            try
            {
               navigateToURL(new URLRequest("https://discord.gg/plazmaburst"),"_blank");
            }
            catch(e:Error)
            {
            }
         });
         this.flike2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.flike2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.menu_pb1.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            try
            {
               navigateToURL(new URLRequest("http://www.coolbuddy.com/games/game.asp?gid=744"),"_blank");
            }
            catch(e:Error)
            {
            }
         });
         this.menu_pb1.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.menu_pb1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.menu_mold.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            try
            {
               navigateToURL(new URLRequest("http://www.coolbuddy.com/games/game.asp?gid=1485"),"_blank");
            }
            catch(e:Error)
            {
            }
         });
         this.menu_mold.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.menu_mold.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.menu_fail_faq.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space);
            gotoAndStop("custom");
         });
         this.menu_fail_faq.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.menu_fail_faq.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         if(this.ui_bg)
         {
            this.uibackground.visible = false;
         }
         else
         {
            this.uibackground.visible = true;
         }
      }
      
      internal function frame6() : *
      {
         this.darkness.visible = false;
         this.darkness.alpha = 0;
         this.mupd.visible = false;
         this.mupd.ttt.gotoAndStop(1);
         this.setTrapAllKeys(true);
         stage.scaleMode = this.proper_scale_mode;
         stage.align = this.proper_stage_align;
         this.ResetVol();
         this.UpdateGravitatorVol();
         stage.quality = "HIGH";
         stage.focus = stage;
         this.FORCE_CUSTOM_MAP = false;
         this.MP_mode = false;
         this.MP_spectator = false;
         this.GAMEPLAY_MODIFICATIONS = "singleplayer-custom-map";
         if(this.FUN_TIME_SPEND < 3)
         {
            this.camp_score.visible = false;
         }
         else
         {
            this.xx = Math.ceil(this.FUN_TIME_SPEND / 30);
            this.str = String(this.xx - Math.floor(this.xx / 60) * 60);
            if(this.xx - Math.floor(this.xx / 60) * 60 < 10)
            {
               this.str = "0" + this.str;
            }
            this.str = String(Math.floor(this.xx / 60) - Math.floor(this.xx / 60 / 60) * 60) + ":" + this.str;
            if(Math.floor(this.xx / 60) - Math.floor(this.xx / 60 / 60) * 60 < 10)
            {
               this.str = "0" + this.str;
            }
            this.str = String(Math.floor(this.xx / 60 / 60)) + ":" + this.str;
            this.camp_score.stts.text = this.str + "\n\n";
            this.camp_score.stts.text += this.FUN_ELEMINATED + "\n\n";
            this.camp_score.stts.text += this.FUN_HEADSHOTS_MADE + "\n\n";
            this.camp_score.stts.text += Math.round(this.FUN_DAMAGE_TAKEN) + "\n\n";
            this.camp_score.stts.text += Math.round(this.FUN_DAMAGE_MADE) + "\n\n";
            this.camp_score.stts.text += this.FUN_SPENT_BULLETS + "\n\n";
            if(this.FUN_SPENT_BULLETS == 0)
            {
               this.camp_score.stts.text += "0 %\n\n";
            }
            else
            {
               this.camp_score.stts.text += Math.round(this.FUN_NICE_BULLETS / this.FUN_SPENT_BULLETS * 1000) / 10 + " %\n\n";
            }
            this.i4 = 0;
            if(this.FUN_SPENT_BULLETS < 1 || this.FUN_DAMAGE_TAKEN < 1 || this.FUN_ELEMINATED < 1)
            {
               this.i4 += 300;
            }
            if(this.FUN_SPENT_BULLETS < 1)
            {
               this.FUN_SPENT_BULLETS = 1;
            }
            if(this.FUN_DAMAGE_TAKEN < 1)
            {
               this.FUN_DAMAGE_TAKEN = 1;
            }
            this.i4 += Math.ceil(this.FUN_ELEMINATED * 8 + this.FUN_HEADSHOTS_MADE + this.FUN_DAMAGE_MADE / this.FUN_DAMAGE_TAKEN * 80);
            if(this.i4 > 500)
            {
               this.i4 = 500;
            }
            if(!this.AWARD)
            {
               this.i4 = 0;
            }
            this.camp_score.stts.text += "$" + this.i4 + " ";
            if(this.AWARD)
            {
               this.SaveGame();
            }
            else
            {
               this.camp_score.stts.text += "(finished before)";
            }
            this.camp_score.txt.text = "CONGRATULATIONS! MISSION " + this.CMPG_THIS_LEVEL + " COMPLETE";
         }
         this.AWARD = false;
         this.back1.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            SaveGame();
            stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space2);
            gotoAndStop("menu");
         });
         this.back1.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.back1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.next_lev.addEventListener(MouseEvent.CLICK,function():*
         {
            SaveGame();
            NextLevel();
         });
         this.next_lev.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.next_lev.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.equipment.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            SaveGame();
            gotoAndStop("eq");
         });
         this.equipment.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.equipment.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.equipment2.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            SaveGame();
            gotoAndStop("eq2");
         });
         this.equipment2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.equipment2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.char0.text = this.CMPG_name;
         this.camp_btn = new Array();
         this.xx = 0;
         this.yy = 0;
         this.i2 = -1;
         is_firing = false;
         this.i = 0;
         while(this.i < this.LEVELS_TOTAL)
         {
            if(this.i == 0)
            {
               this.camp_btn[this.i] = this.camp_list.slot0;
            }
            else
            {
               this.camp_btn[this.i] = this.camp_list.addChild(new camp_slot());
            }
            this.camp_btn[this.i].x = this.xx;
            this.camp_btn[this.i].y = this.yy;
            if(this.i >= 29 && this.i <= 35)
            {
               this.camp_btn[this.i].gotoAndStop(2);
            }
            else if(this.i > 35 && this.i <= 40)
            {
               this.camp_btn[this.i].gotoAndStop(3);
            }
            else if(this.i == 41)
            {
               this.camp_btn[this.i].gotoAndStop(4);
            }
            else if(this.i >= 13 && this.i <= 17)
            {
               this.camp_btn[this.i].gotoAndStop(5);
            }
            else
            {
               this.camp_btn[this.i].gotoAndStop(1);
            }
            this.camp_btn[this.i].txt.text = this.i + 1;
            this.camp_btn[this.i].btn0.gotoAndStop(1);
            this.NoMouse2(this.camp_btn[this.i].txt);
            if(this.i <= this.LEVELS_PASSED)
            {
               this.camp_btn[this.i].alpha = 1;
            }
            else
            {
               this.camp_btn[this.i].alpha = 0.5 - Math.max(0,this.i - this.LEVELS_PASSED - 5) * 0.1;
            }
            this.xx += 35;
            if(this.xx > 730)
            {
               this.xx = 0;
               this.yy += 35;
            }
            ++this.i;
         }
         this.camp_list.addEventListener(MouseEvent.CLICK,function():*
         {
            AWARD = false;
            i = 0;
            while(i < LEVELS_TOTAL)
            {
               if(camp_btn[i].alpha == 1)
               {
                  if(camp_btn[i].hitTestPoint(mouseX,mouseY))
                  {
                     CMPG_THIS_LEVEL = i;
                     PlaySound_full(ss_info_act);
                     if(i == LEVELS_PASSED)
                     {
                        AWARD = true;
                     }
                     stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space2);
                     gotoAndStop("difch");
                  }
               }
               ++i;
            }
         });
         this.camp_list.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            i = 0;
            while(i < LEVELS_TOTAL)
            {
               if(camp_btn[i].alpha == 1)
               {
                  if(camp_btn[i].hitTestPoint(mouseX,mouseY))
                  {
                     camp_btn[i].btn0.gotoAndStop(3);
                     PlaySound_full(ss_info_off);
                  }
               }
               ++i;
            }
         });
         this.camp_list.addEventListener(MouseEvent.MOUSE_OUT,function():*
         {
            i2 = -1;
            i = 0;
            while(i < LEVELS_TOTAL)
            {
               if(camp_btn[i].alpha == 1)
               {
                  camp_btn[i].btn0.gotoAndStop(1);
               }
               ++i;
            }
         });
         this.camp_list.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            i = 0;
            while(i < LEVELS_TOTAL)
            {
               if(camp_btn[i].alpha == 1)
               {
                  if(camp_btn[i].hitTestPoint(mouseX,mouseY))
                  {
                     if(i2 == -1)
                     {
                        PlaySound_full(ss_info);
                     }
                     i2 = i;
                     camp_btn[i].btn0.gotoAndStop(2);
                  }
                  else
                  {
                     camp_btn[i].btn0.gotoAndStop(1);
                  }
               }
               ++i;
            }
         });
         this.UpdateSkinC(0);
         this.UpdateSkinC(1);
         this.head0_next.addEventListener(MouseEvent.CLICK,function():*
         {
            ++skin_color_head[0];
            UpdateSkinC(0);
         });
         this.head0_prev.addEventListener(MouseEvent.CLICK,function():*
         {
            --skin_color_head[0];
            UpdateSkinC(0);
         });
         this.body0_next.addEventListener(MouseEvent.CLICK,function():*
         {
            ++skin_color_body[0];
            UpdateSkinC(0);
         });
         this.body0_prev.addEventListener(MouseEvent.CLICK,function():*
         {
            --skin_color_body[0];
            UpdateSkinC(0);
         });
         this.arms0_next.addEventListener(MouseEvent.CLICK,function():*
         {
            ++skin_color_arms[0];
            UpdateSkinC(0);
         });
         this.arms0_prev.addEventListener(MouseEvent.CLICK,function():*
         {
            --skin_color_arms[0];
            UpdateSkinC(0);
         });
         this.legs0_next.addEventListener(MouseEvent.CLICK,function():*
         {
            ++skin_color_legs[0];
            UpdateSkinC(0);
         });
         this.legs0_prev.addEventListener(MouseEvent.CLICK,function():*
         {
            --skin_color_legs[0];
            UpdateSkinC(0);
         });
         this.head1_next.addEventListener(MouseEvent.CLICK,function():*
         {
            ++skin_color_head[1];
            UpdateSkinC(1);
         });
         this.head1_prev.addEventListener(MouseEvent.CLICK,function():*
         {
            --skin_color_head[1];
            UpdateSkinC(1);
         });
         this.body1_next.addEventListener(MouseEvent.CLICK,function():*
         {
            ++skin_color_body[1];
            UpdateSkinC(1);
         });
         this.body1_prev.addEventListener(MouseEvent.CLICK,function():*
         {
            --skin_color_body[1];
            UpdateSkinC(1);
         });
         this.arms1_next.addEventListener(MouseEvent.CLICK,function():*
         {
            ++skin_color_arms[1];
            UpdateSkinC(1);
         });
         this.arms1_prev.addEventListener(MouseEvent.CLICK,function():*
         {
            --skin_color_arms[1];
            UpdateSkinC(1);
         });
         this.legs1_next.addEventListener(MouseEvent.CLICK,function():*
         {
            ++skin_color_legs[1];
            UpdateSkinC(1);
         });
         this.legs1_prev.addEventListener(MouseEvent.CLICK,function():*
         {
            --skin_color_legs[1];
            UpdateSkinC(1);
         });
         this.char0_next.addEventListener(MouseEvent.CLICK,function():*
         {
            ++skin_model[0];
            if(skin_model[0] == 5)
            {
               ++skin_model[0];
            }
            RefrSkin(0);
            UpdateSkinC(0);
         });
         this.char0_prev.addEventListener(MouseEvent.CLICK,function():*
         {
            --skin_model[0];
            if(skin_model[0] == 5)
            {
               --skin_model[0];
            }
            RefrSkin(0);
            UpdateSkinC(0);
         });
         this.char1_next.addEventListener(MouseEvent.CLICK,function():*
         {
            ++skin_model[1];
            if(skin_model[1] == 5)
            {
               ++skin_model[1];
            }
            UpdateSkinC(1);
         });
         this.char1_prev.addEventListener(MouseEvent.CLICK,function():*
         {
            --skin_model[1];
            if(skin_model[1] == 5)
            {
               --skin_model[1];
            }
            UpdateSkinC(1);
         });
         this.creds.text = "$ " + this.CMPG_money;
         if(this.LEVELS_PASSED >= 30)
         {
            this.no_proxy.visible = false;
         }
         this.camp_score.back1.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            SaveGame();
            camp_score.visible = false;
         });
         this.camp_score.back1.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.camp_score.back1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.camp_score.menu_back2.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space2);
            gotoAndStop("menu");
         });
         this.camp_score.menu_back2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.camp_score.menu_back2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.camp_score.menu_noback.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_act);
            try
            {
               navigateToURL(new URLRequest("http://www.coolbuddy.com/games/games/Game_cat.asp?cat=Shooting"),"_blank");
            }
            catch(e:Error)
            {
            }
         });
         this.camp_score.menu_noback.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.camp_score.menu_noback.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.cust_m.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            SaveGame();
            stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space2);
            custompage = false;
            gotoAndStop("custom");
         });
         this.cust_m.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.cust_m.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.achives.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            SaveGame();
            stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space2);
            gotoAndStop("achiv");
         });
         this.achives.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.achives.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         stage.addEventListener(KeyboardEvent.KEY_DOWN,this.k_down_space2);
         this.camp_score.menu_play_cm2.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space2);
            gotoAndStop("custom");
         });
         this.camp_score.menu_play_cm2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.camp_score.menu_play_cm2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.camp_score.menu_win_mp.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space2);
            LocateMeToMp();
         });
         this.camp_score.menu_win_mp.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.camp_score.menu_win_mp.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.camp_score.flike3.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            try
            {
               navigateToURL(new URLRequest("http://www.facebook.com/pages/Coolbuddy-Games/177306910591"),"_blank");
            }
            catch(e:Error)
            {
            }
         });
         this.camp_score.flike3.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.camp_score.flike3.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.SaveGame();
         if(this.ui_bg)
         {
            this.uibackground.visible = false;
         }
         else
         {
            this.uibackground.visible = true;
         }
      }
      
      internal function frame7() : *
      {
         this.darkness.visible = false;
         this.darkness.alpha = 0;
         this.setTrapAllKeys(true);
         this.mupd.visible = false;
         this.mupd.ttt.gotoAndStop(1);
         this.ResetVol();
         this.UpdateGravitatorVol();
         stage.quality = "HIGH";
         this.FUN_TIME_SPEND = 0;
         this.back1e1.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            gotoAndStop("campaign");
         });
         this.back1e1.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.back1e1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.game.hero1tit.text = this.CMPG_name + "\'s equipment";
         this.gunsA = new Array();
         this.gunsAt = new Array();
         this.gunsAl = new Array();
         this.game.sample.visible = false;
         this.game.sample_no.visible = false;
         this.game.sample2.visible = false;
         this.game.sample3.visible = false;
         this.firstframe = true;
         this.UpdateTbl();
         if(this.skin_model[0] < 49)
         {
            this.bt_1.gotoAndStop(2);
            this.bt_2.gotoAndStop(1);
         }
         else
         {
            this.bt_1.gotoAndStop(1);
            this.bt_2.gotoAndStop(2);
         }
         this.bt_1.addEventListener(MouseEvent.CLICK,function():*
         {
            if(skin_model[0] == 49)
            {
               skin_model[0] = 40;
            }
            bt_2.gotoAndStop(1);
            bt_1.gotoAndStop(2);
            SaveGame();
         });
         this.bt_2.addEventListener(MouseEvent.CLICK,function():*
         {
            if(skin_model[0] != 49)
            {
               skin_model[0] = 49;
            }
            bt_2.gotoAndStop(2);
            bt_1.gotoAndStop(1);
            SaveGame();
         });
         this.eq_pcg.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            try
            {
               navigateToURL(new URLRequest("http://www.coolbuddy.com/games/games/Game_cat.asp?cat=New%20Addition"),"_blank");
            }
            catch(e:Error)
            {
            }
         });
         this.eq_pcg.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.eq_pcg.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         if(this.ui_bg)
         {
            this.uibackground.visible = false;
         }
         else
         {
            this.uibackground.visible = true;
         }
      }
      
      internal function frame8() : *
      {
         this.darkness.visible = false;
         this.darkness.alpha = 0;
         this.setTrapAllKeys(true);
         this.mupd.visible = false;
         this.mupd.ttt.gotoAndStop(1);
         this.ResetVol();
         this.UpdateGravitatorVol();
         stage.quality = "HIGH";
         this.FUN_TIME_SPEND = 0;
         this.back1e2.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            gotoAndStop("campaign");
         });
         this.back1e2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.back1e2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.game.hero1tit.text = this.PROXY_NAME + "\'s equipment";
         this.gunsB = new Array();
         this.gunsBt = new Array();
         this.gunsBl = new Array();
         this.game.sample.visible = false;
         this.game.sample_no.visible = false;
         this.game.sample2.visible = false;
         this.game.sample3.visible = false;
         this.firstframe = true;
         this.UpdateTblB();
         this.eq_pcg2.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            try
            {
               navigateToURL(new URLRequest("http://www.coolbuddy.com/games/games/Game_cat.asp?cat=New%20Addition"),"_blank");
            }
            catch(e:Error)
            {
            }
         });
         this.eq_pcg2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.eq_pcg2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         if(this.ui_bg)
         {
            this.uibackground.visible = false;
         }
         else
         {
            this.uibackground.visible = true;
         }
      }
      
      internal function frame9() : *
      {
         this.darkness.visible = false;
         this.darkness.alpha = 0;
         this.setTrapAllKeys(true);
         this.mupd.visible = false;
         this.mupd.ttt.gotoAndStop(1);
         stage.scaleMode = this.proper_scale_mode;
         stage.align = this.proper_stage_align;
         this.ResetVol();
         this.UpdateGravitatorVol();
         stage.quality = "HIGH";
         this.FUN_TIME_SPEND = 0;
         if(this.CREDITS_BY_GAME_END)
         {
            this.runner.finalbtn.visible = true;
         }
         else
         {
            this.runner.finalbtn.visible = false;
         }
         this.runner.finalbtn.final_start.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            removeEventListener(Event.ENTER_FRAME,onEnterFrameCredits);
            removeEventListener(MouseEvent.MOUSE_WHEEL,CreditsWheel);
            GotoMap("c41a");
         });
         this.runner.finalbtn.final_start.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.runner.finalbtn.final_start.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.cust_back1.addEventListener(MouseEvent.CLICK,function():*
         {
            removeEventListener(Event.ENTER_FRAME,onEnterFrameCredits);
            removeEventListener(MouseEvent.MOUSE_WHEEL,CreditsWheel);
            if(CREDITS_BY_GAME_END)
            {
               GotoMap("c41a");
            }
            else
            {
               gotoAndStop("menu");
            }
         });
         this.cust_back1.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
         });
         this.cust_back1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
         });
         this.STOP_SCROLL = true;
         this.runner.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            STOP_SCROLL = false;
         });
         this.runner.addEventListener(MouseEvent.CLICK,function():*
         {
            STOP_SCROLL = true;
         });
         this.runner.addEventListener(MouseEvent.MOUSE_OUT,function():*
         {
            STOP_SCROLL = true;
         });
         this.credits_low_limit = -this.runner.y - this.runner.finalbtn.y + 700;
         this.credits_high_limit = 388.8;
         this.credits_stop_frames = 0;
         this.credits_target_offset = 0;
         addEventListener(Event.ENTER_FRAME,this.onEnterFrameCredits);
         stage.addEventListener(MouseEvent.MOUSE_WHEEL,this.CreditsWheel);
         if(this.ui_bg)
         {
            this.uibackground.visible = false;
         }
         else
         {
            this.uibackground.visible = true;
         }
      }
      
      internal function frame10() : *
      {
         this.mupd.visible = false;
         this.mupd.ttt.gotoAndStop(1);
         this.setTrapAllKeys(true);
         this.nologin_cancel.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            gotoAndStop("menu");
         });
         this.nologin_cancel.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.nologin_cancel.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.nologin_start.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            try
            {
               navigateToURL(new URLRequest("http://www.plazmaburst2.com/index.php?s=6"),"_blank");
            }
            catch(e:Error)
            {
            }
         });
         this.nologin_start.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.nologin_start.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         if(this.ui_bg)
         {
            this.uibackground.visible = false;
         }
         else
         {
            this.uibackground.visible = true;
         }
      }
      
      internal function frame11() : *
      {
         if(!this.allow_mp_connect)
         {
            gotoAndStop("nologinform");
            throw new Error();
         }
         this.setTrapAllKeys(false);
         this.gameversion.text = "Game Version:" + this.GAME_VERSION_SIMPLE;
         this.darkness.visible = false;
         this.darkness.alpha = 0;
         this.ifupdated.visible = false;
         if(this.GAME_VERSION_SIMPLE == this.MP_gamever || this.MP_gamever == "await")
         {
            this.ifupdated.visible = false;
         }
         else
         {
            this.ifupdated.visible = true;
         }
         this.winupdateinfo.visible = false;
         this.winupdateinfo.title.htmlText = "<font color=\'#00FFFF\' size=\'16\'><b>This Version Released on 2025 / 03 / 24</b></font>\n" + "\n" + "<font color=\'#7CFC00\'>Game version: Plazma Burst 2 1.53</font>\n" + "\n" + "<font color=\'#00BFFF\'><b>Update Log:</b></font>\n" + "\n" + "<font color=\'#FFD700\'>I. Game & Multiplayer</font>  \n" + "<font color=\'#ADFF2F\'><i>Commands</i></font>  \n" + "<font color=\'#FFFFFF\'>1. Match Owner/Moderator/Event Staff</font>  \n" + "   <font color=\'#AAAAAA\'>1.1</font> <font color=\'#FFA500\'>-admin.restart</font>: restart the current round  \n" + "<font color=\'#FFFFFF\'>2. Event Staff/Moderator</font>  \n" + "   <font color=\'#AAAAAA\'>2.1</font> <font color=\'#FFA500\'>-admin.pause</font>: Pause the current round <font color=\'#888888\'>(duration: 10 minutes)</font>  \n" + "   <font color=\'#AAAAAA\'>2.2</font> <font color=\'#FFA500\'>-admin.resume</font>: Resume the current round <font color=\'#888888\'>(new round starts after 10 seconds)</font>  \n" + "   <font color=\'#AAAAAA\'>2.3</font> <font color=\'#FFA500\'>-admin.sc</font>: Display team IDs and scores in the current room  \n" + "   <font color=\'#AAAAAA\'>2.4</font> <font color=\'#FFA500\'>-admin.set [team ID] [score]</font>: Modify the score of the specified team  \n" + "\n" + "<font color=\'#FFD700\'>II. Spectator Mode Improvements</font>  \n" + "<font color=\'#ADFF2F\'><i>Enhanced Features</i></font>  \n" + "<font color=\'#AAAAAA\'>1.</font> Server commands are now supported in Spectator mode  \n" + "<font color=\'#AAAAAA\'>2.</font> Added cursor tracking for the observed player with optimized smoothing  \n" + "<font color=\'#AAAAAA\'>3.</font> Pressing directional keys activates free-view mode  \n" + "<font color=\'#AAAAAA\'>4.</font> Observed player is locked to the center of the screen  \n" + "<font color=\'#AAAAAA\'>5.</font> Fixed Zoom scaling bugs in advanced Spectator mode <font color=\'#888888\'>(Event Staff/Mod permission)</font>  \n" + "<font color=\'#AAAAAA\'>6.</font> Default spectator view is set to 50% Zoom, dynamically adjusted based on in-game field of view  \n" + "\n" + "<font color=\'#FFD700\'>III. Gameplay Optimization</font>  \n" + "<font color=\'#AAAAAA\'>1.</font> Improved synchronization issues  \n" + "<font color=\'#AAAAAA\'>2.</font> Enhanced skeletal positioning system  \n" + "\n" + "<font color=\'#FFD700\'>IV. Dedicated Tournament Server: Plazma League</font>  \n" + "<font color=\'#ADFF2F\'><i>Server Features</i></font>  \n" + "<font color=\'#AAAAAA\'>1.</font> Designed for tournaments, events, and advanced players, offering faster connection speeds and stability  \n" + "<font color=\'#AAAAAA\'>2.</font> No verification through the official website required  \n" + "<font color=\'#AAAAAA\'>3.</font> Server skins are synchronized with the official website account skins  \n" + "\n" + "<font color=\'#ADFF2F\'><i>Access Control</i></font>  \n" + "<font color=\'#AAAAAA\'>1.</font> Supports login with any account, but registered accounts require a password  \n" + "<font color=\'#AAAAAA\'>2.</font> Only registered players can access the following features:  \n" + "   <font color=\'#FFA500\'>2.1</font> Create matches  \n" + "   <font color=\'#FFA500\'>2.2</font> Join the matches  \n" + "   <font color=\'#FFA500\'>2.3</font> Use Lobbychat  \n" + "<font color=\'#AAAAAA\'>3.</font> Regular players are limited to Spectator mode  \n" + "\n" + "<font color=\'#FF6347\'>Note: Detailed registration requirements will be announced in a follow-up notice.</font>\n" + "\n\n\n" + "<font color=\'#00FFFF\'><b>Update information from previous versions:</b></font> \n\n" + "<font color=\'#FFFF00\'>1.52.2 Update info:</font>\n" + "<font color=\'#AAAAAA\'>1.</font> You can quickly view the messages you\'ve sent by using the up and down arrows in the chat input box. The history of messages sent by you will be automatically refreshed each time you join a match.\n" + "<font color=\'#AAAAAA\'>2.</font> The maximum decoration limit of the map has been changed to 2000.\n" + "<font color=\'#AAAAAA\'>3.</font> The [dead] death tag has been moved to the front of the username.\n" + "<font color=\'#AAAAAA\'>4.</font> Fixed tag display errors. \n\n\n\n" + "<font color=\'#FFFF00\'>1.52.1 Update info:</font>\n" + "<font color=\'#7CFC00\'>Game & Multiplayer</font>\n" + "- The in-game text input box/chat box now supports keyboard shortcuts for copy, paste, select all, etc. <font color=\'#888888\'>- Updated in 2025.02.23</font> \n\n\n\n" + "<font color=\'#FFFF00\'>1.52 Update info:</font>\n" + "<font color=\'#7CFC00\'>Interface:</font>\n" + "- Added update info in game\n\n" + "<font color=\'#7CFC00\'>Game & Multiplayer</font>\n" + "- Fixed the display issue with decorative text.\n" + "- Fixed the issue where PB2 map triggers would not work in the absence of a sound card driver.\n" + "- Added the command <font color=\'#FFA500\'>-fps</font>, example <font color=\'#FFA500\'>-fps 37</font> <font color=\'#888888\'>(Please note, the number should be within the range of 20-60)</font>.\n" + "\n" + "<font color=\'#FFD700\'>Triggers | Contributor Update : PB Dman</font>\n" + "\n" + "<font color=\'#ADFF2F\'><i>Trigger Commands</i></font>\n" + "<font color=\'#FFFFFF\'>Change the number of hit points of Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>to variable</font> <font color=\'#FFA500\'>\'B\'</font> <font color=\'#888888\'>percents</font>\n" + "<font color=\'#FFFFFF\'>Kill all Characters at Region</font> <font color=\'#FFA500\'>\'B\'</font> <font color=\'#FFFFFF\'>which are not allied to Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font>\n" + "<font color=\'#FFFFFF\'>Set current hit points of Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>to value of variable</font> <font color=\'#FFA500\'>\'B\'</font> <font color=\'#888888\'>(not set points of each limb)</font>\n" + "<font color=\'#FFFFFF\'>Clone Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>and spawn it in the centre of Region</font> <font color=\'#FFA500\'>\'B\'</font>\n" + "<font color=\'#FFFFFF\'>Clone Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>and spawn it in random place of Region</font> <font color=\'#FFA500\'>\'B\'</font>\n" + "<font color=\'#FFFFFF\'>Force all enemies of Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>who located in region</font> <font color=\'#FFA500\'>\'B\'</font> <font color=\'#FFFFFF\'>hunt for Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font>\n" + "<font color=\'#FFFFFF\'>Set</font> <font color=\'#FFA500\'>\'AI Behavior\'</font> <font color=\'#FFFFFF\'>parameter of computer-controlled Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>to value</font> <font color=\'#FFA500\'>\'B\'</font>\n" + "<font color=\'#FFFFFF\'>Change Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>nickname to variable</font> <font color=\'#FFA500\'>\'B\'</font>\n" + "<font color=\'#FFFFFF\'>Force Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>to drop all weapons,</font> <font color=\'#888888\'>string</font>\n" + "<font color=\'#FFFFFF\'>Multiply Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>speed by variable</font> <font color=\'#FFA500\'>\'B\'</font>\n" + "<font color=\'#FFFFFF\'>Change Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>mobility factor to variable</font> <font color=\'#FFA500\'>\'B\'</font>\n" + "<font color=\'#FFFFFF\'>Change Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>armor type to value</font> <font color=\'#FFA500\'>\'B\'</font>\n" + "<font color=\'#FFFFFF\'>Change blood color of Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>to HEX color</font> <font color=\'#FFA500\'>\'B\'</font>\n" + "<font color=\'#FFFFFF\'>Force Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>to look at random point in Region</font> <font color=\'#FFA500\'>\'B\'</font>\n" + "<font color=\'#FFFFFF\'>Force Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>to hunt Character slot-value variable</font> <font color=\'#FFA500\'>\'B\'</font>\n" + "<font color=\'#FFFFFF\'>Damage Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>head hitpoints by variable</font> <font color=\'#FFA500\'>\'B\'</font>\n" + "<font color=\'#FFFFFF\'>Damage Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>arms hitpoints by variable</font> <font color=\'#FFA500\'>\'B\'</font>\n" + "<font color=\'#FFFFFF\'>Damage Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>body hitpoints by variable</font> <font color=\'#FFA500\'>\'B\'</font>\n" + "<font color=\'#FFFFFF\'>Damage Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>legs hitpoints by variable</font> <font color=\'#FFA500\'>\'B\'</font>\n" + "<font color=\'#FFFFFF\'>Save inventory info of Character slot-value variable</font> <font color=\'#FFA500\'>\'B\'</font> <font color=\'#FFFFFF\'>to variable</font> <font color=\'#FFA500\'>\'A\'</font>\n" + "<font color=\'#FFFFFF\'>Spawn all weapons stored in variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>at position of Character slot-value variable</font> <font color=\'#FFA500\'>\'B\'</font>\n" + "<font color=\'#FFFFFF\'>Set Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>scale to variable</font> <font color=\'#FFA500\'>\'B\'</font>\n" + "<font color=\'#FFFFFF\'>Heal Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>by variable</font> <font color=\'#FFA500\'>\'B\'</font>\n" + "<font color=\'#FFFFFF\'>Set intensity of entity pushing force for Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>to variable</font> <font color=\'#FFA500\'>\'B\'</font> <font color=\'#888888\'>(default 0)</font>\n" + "<font color=\'#FFFFFF\'>Set radius of entity pushing force for Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>to variable</font> <font color=\'#FFA500\'>\'B\'</font>\n" + "<font color=\'#FFFFFF\'>Set Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>voice preset to</font> <font color=\'#FFA500\'>\'B\'</font><font color=\'#FFFFFF\'>,</font> <font color=\'#888888\'>string</font>\n" + "<font color=\'#FFFFFF\'>Apply damage-over-time-effect to Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>with power</font> <font color=\'#FFA500\'>\'B\'</font> <font color=\'#FFFFFF\'>and duration</font> <font color=\'#FFA500\'>\'B\'</font> <font color=\'#888888\'>(separated by commas)</font>\n" + "<font color=\'#FFFFFF\'>Remove all effects from Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font><font color=\'#FFFFFF\'>,</font> <font color=\'#888888\'>string</font>\n" + "<font color=\'#FFA500\'>0;</font> <font color=\'#FFFFFF\'>Spawn damage particles of Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>at the center of Region</font> <font color=\'#FFA500\'>\'B\'</font>\n" + "<font color=\'#FFFFFF\'>Set jump multiplier for Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>to variable</font> <font color=\'#FFA500\'>\'B\'</font>\n" + "<font color=\'#FFFFFF\'>Set Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>active weapon to Gun</font> <font color=\'#FFA500\'>\'B\'</font>\n" + "<font color=\'#FFFFFF\'>Make Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>drop weapon at current slot,</font> <font color=\'#888888\'>string</font>\n" + "<font color=\'#FFFFFF\'>Set variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>to 1 if Character slot-value variable</font> <font color=\'#FFA500\'>\'B\'</font> <font color=\'#FFFFFF\'>is dying</font>\n" + "<font color=\'#FFFFFF\'>Make Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>unhittable,</font> <font color=\'#888888\'>string</font>\n" + "<font color=\'#FFFFFF\'>Make Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>hittable,</font> <font color=\'#888888\'>string</font>\n" + "<font color=\'#FFFFFF\'>Disallow weapon drop for Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font><font color=\'#FFFFFF\'>,</font> <font color=\'#888888\'>string</font>\n" + "<font color=\'#FFFFFF\'>Allow weapon drop for Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font><font color=\'#FFFFFF\'>,</font> <font color=\'#888888\'>string</font>\n" + "<font color=\'#FFFFFF\'>Set disabling of Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>psi swords to parameter</font> <font color=\'#FFA500\'>\'B\'</font>\n" + "<font color=\'#FFFFFF\'>Show text bubble above Character slot-value variable</font> <font color=\'#FFA500\'>\'B\'</font> <font color=\'#FFFFFF\'>with text</font> <font color=\'#FFA500\'>\'A\'</font>\n" + "<font color=\'#FFFFFF\'>Set Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>active weapon to slot</font> <font color=\'#FFA500\'>\'B\'</font>\n" + "<font color=\'#FFFFFF\'>Set variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>to active weapon of Character slot-value variable</font> <font color=\'#FFA500\'>\'B\'</font>\n" + "<font color=\'#FFFFFF\'>Make Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>drop Gun</font> <font color=\'#FFA500\'>\'B\'</font>\n" + "<font color=\'#FFFFFF\'>Change Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>sword life to variable</font> <font color=\'#FFA500\'>\'B\'</font>\n" + "<font color=\'#FFFFFF\'>Set variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>to active gun model of Character slot-value variable</font> <font color=\'#FFA500\'>\'B\'</font>\n" + "<font color=\'#FFFFFF\'>Move Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>to random place in Region</font> <font color=\'#FFA500\'>\'B\'</font>\n" + "<font color=\'#FFFFFF\'>Teleport Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>to Region</font> <font color=\'#FFA500\'>\'B\'</font> <font color=\'#FFFFFF\'>and invert speed by X axis</font> <font color=\'#888888\'>(used to avoid loop teleportation)</font>\n" + "<font color=\'#FFFFFF\'>Teleport Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>to Region</font> <font color=\'#FFA500\'>\'B\'</font>\n" + "<font color=\'#FFFFFF\'>Silently teleport Character slot-value variable</font> <font color=\'#FFA500\'>\'A\'</font> <font color=\'#FFFFFF\'>to Region</font> <font color=\'#FFA500\'>\'B\'</font>\n";
         this.winupdateinfo.title.addEventListener(MouseEvent.MOUSE_WHEEL,this.UPDonMouseWheel);
         this.updateinfo.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            winupdateinfo.visible = true;
         });
         this.updateinfo.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.updateinfo.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.winupdateinfo.b_close2.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            winupdateinfo.visible = false;
         });
         this.winupdateinfo.b_close2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.winupdateinfo.b_close2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.mupd.visible = false;
         this.mupd.ttt.gotoAndStop(1);
         this.listVisible = false;
         this.server_list_box.addEventListener(MouseEvent.CLICK,function():*
         {
            if(listVisible)
            {
               MP_UpdateServerList(true);
            }
            else
            {
               MP_UpdateServerList(false);
            }
            listVisible = !listVisible;
         });
         this.coverup_active = false;
         if(this.MP_AUTO_LOGIN)
         {
            this.coverup_active = true;
            this.mpcoverup.visible = true;
            (function():*
            {
               var time:* = undefined;
               var appear:* = undefined;
               var appear_first:* = undefined;
               var time_start:* = undefined;
               var retry_A:* = undefined;
               var retry_B:* = undefined;
               var cover_up_tim:* = undefined;
               var Retry:* = function():Boolean
               {
                  if(MP_socket.connected)
                  {
                     MP_socket.close();
                     setTimeout(function():*
                     {
                        Security.loadPolicyFile("xmlsocket://" + MP_SERVER_IP + ":" + MP_SERVER_PORT);
                        MP_socket.connect(MP_SERVER_IP,MP_SERVER_PORT);
                        auto_proceed = true;
                     },100);
                     return true;
                  }
                  return false;
               };
               time = 0;
               appear = 0;
               mpcoverup.txt.alpha = 0;
               mpcoverup.txt.text = "Connecting";
               appear_first = true;
               time_start = getTimer();
               retry_A = true;
               retry_B = true;
               cover_up_tim = setInterval(function():*
               {
                  if(currentLabel != "loginform")
                  {
                     clearInterval(cover_up_tim);
                     return;
                  }
                  if(retry_A)
                  {
                     if(getTimer() > time_start + 2000)
                     {
                        if(Retry())
                        {
                           retry_A = false;
                        }
                     }
                  }
                  if(retry_B)
                  {
                     if(getTimer() > time_start + 6000)
                     {
                        if(Retry())
                        {
                           retry_B = false;
                        }
                     }
                  }
                  if(getTimer() > time_start + 15000 || errtxt.text != "" && errtxt.text.indexOf("PENDING") == -1 && errtxt.text.indexOf("MISMATCH") == -1 || !coverup_active)
                  {
                     if(mpcoverup.txt.text != "Uh-oh, here we go again...")
                     {
                        if(coverup_active)
                        {
                           mpcoverup.txt.alpha = 1;
                        }
                        mpcoverup.txt.text = "Uh-oh, here we go again...";
                     }
                     coverup_active = false;
                  }
                  else if(errtxt.text.indexOf("MISMATCH") != -1)
                  {
                     if(mpcoverup.txt.text != "Looks like new version of game is available - refresh page to get one")
                     {
                        mpcoverup.txt.text = "Looks like new version of game is available - refresh page to get one";
                     }
                  }
                  if(coverup_active || appear_first)
                  {
                     if(appear_first)
                     {
                        if(appear > 1)
                        {
                           appear_first = false;
                        }
                     }
                     time += 0.03;
                     appear += 0.04;
                     mpcoverup.txt.alpha = (0.5 + Math.sin(time) * 0.3) * Math.min(1,appear);
                  }
                  else if(mpcoverup.txt.alpha > -0.125)
                  {
                     mpcoverup.txt.alpha -= 0.005;
                     mpcoverup.connect_dots.alpha = mpcoverup.txt.alpha;
                  }
                  else
                  {
                     mpcoverup.visible = false;
                     clearInterval(cover_up_tim);
                  }
               },16);
            })();
         }
         else
         {
            this.mpcoverup.visible = false;
         }
         this.MP_login_auto_try = false;
         this.server_cur = -1;
         this.ResetVol();
         this.UpdateGravitatorVol();
         stage.quality = "HIGH";
         this.login_login.alpha = 0.2;
         this.login_login.enabled = false;
         this.login_guest.alpha = 0.2;
         this.login_guest.enabled = false;
         this.errtxt.text = "";
         try
         {
            if(this.mh.length < 3)
            {
               this.mh = this["ve" + "r" + "s" + "io" + "n_" + "ha" + "sh"]("De" + "ad" + "ly N" + "eu" + "ro" + "to" + "x" + "in.");
            }
         }
         catch(e:Error)
         {
         }
         if(this.def_login != undefined)
         {
            this.flogin.text = this.def_login;
         }
         if(this.def_password != undefined)
         {
            this.fpassword.text = this.def_password;
         }
         this.CUR_SERVER_NAME = "";
         this.temp = this.CUR_SERVER_NAME.split("(");
         this.CUR_SERVER_NAME = this.temp[0];
         this.login_warned = false;
         this.auto_proceed = false;
         this.login_login.addEventListener(MouseEvent.CLICK,function():*
         {
            if(MP_errored_out)
            {
               MP_ReconnectToServer(false);
            }
            GUEST_ACCESS = false;
            if(MP_socket.connected)
            {
               proceed();
            }
            else
            {
               auto_proceed = true;
            }
         });
         this.login_guest.addEventListener(MouseEvent.CLICK,function():*
         {
            if(MP_errored_out)
            {
               MP_ReconnectToServer(false);
            }
            GUEST_ACCESS = true;
            if(MP_socket.connected)
            {
               proceed();
            }
            else
            {
               auto_proceed = true;
            }
         });
         this.login_login.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            if(MP_socket.connected)
            {
               PlaySound_full(ss_info);
            }
         });
         this.login_guest.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            if(MP_socket.connected)
            {
               PlaySound_full(ss_info);
            }
         });
         this.login_login.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            if(MP_socket.connected)
            {
               PlaySound_full(ss_info_off);
            }
         });
         this.login_guest.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            if(MP_socket.connected)
            {
               PlaySound_full(ss_info_off);
            }
         });
         this.login_cancel.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            gotoAndStop("menu");
         });
         this.login_cancel.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.login_cancel.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.mpcoverup.login_cancel.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            gotoAndStop("menu");
         });
         this.mpcoverup.login_cancel.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.mpcoverup.login_cancel.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.last_loaded_sever_uid = -9999;
         this.servers_name = new Array();
         this.servers_ip = new Array();
         this.servers_port = new Array();
         this.PopulateServerList(this.last_server_list_str);
         if(this.online_players)
         {
            this.pnumbers.text = this.online_players;
         }
         if(this.MP_socket.connected)
         {
            this.MP_socket_send("rq=player_count");
         }
         this.ConnectToServer(0);
         this.mp_auto_con_1.gotoAndStop(1);
         this.mp_auto_con_2.gotoAndStop(1);
         if(this.MP_AUTO_LOGIN)
         {
            this.mp_auto_con_2.gotoAndStop(2);
         }
         else
         {
            this.mp_auto_con_1.gotoAndStop(2);
         }
         this.mp_auto_con_1.addEventListener(MouseEvent.CLICK,function():*
         {
            MP_AUTO_LOGIN = false;
            mp_auto_con_1.gotoAndStop(2);
            mp_auto_con_2.gotoAndStop(1);
         });
         this.mp_auto_con_2.addEventListener(MouseEvent.CLICK,function():*
         {
            MP_AUTO_LOGIN = true;
            mp_auto_con_2.gotoAndStop(2);
            mp_auto_con_1.gotoAndStop(1);
         });
         if(this.ui_bg)
         {
            this.uibackground.visible = false;
         }
         else
         {
            this.uibackground.visible = true;
         }
         this.MP_UpdateServerList(true);
         try
         {
            if(this.mh == "")
            {
               this.mh = this.version_hash("Deadly Neurotoxin.");
            }
            this.myRequest_parallel = new URLRequest(this.MP_server);
            this.myVariables_parallel = new URLVariables();
            this.myVariables_parallel.rq = "neurotoxin_delivery";
            this.myVariables_parallel.hash = this.mh;
            this.myVariables_parallel.v = this.GAME_VERSION;
            this.myVariables_parallel.lo = this.loaderInfo.parameters.l;
            this.myVariables_parallel.s = stage.loaderInfo.bytesLoaded;
            this.myVariables_parallel.cap = String(Capabilities.playerType);
            this.myVariables_parallel.adr = this.loaderInfo.url;
            this.myRequest_parallel.method = URLRequestMethod.POST;
            this.myRequest_parallel.data = this.myVariables_parallel;
            this.myLoader2.load(this.myRequest_parallel);
         }
         catch(er:Error)
         {
         }
      }
      
      internal function frame12() : *
      {
         stage.quality = "HIGH";
         this.UpdateGravitatorVol();
         this.darkness.visible = false;
         this.darkness.alpha = 0;
         this.setTrapAllKeys(true);
         this.mupd.visible = false;
         this.mupd.ttt.gotoAndStop(1);
         this.ResetVol();
         this.cont_back1.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            gotoAndStop("options");
         });
         this.cont_back1.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.cont_back1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         if(this.ui_bg)
         {
            this.uibackground.visible = false;
         }
         else
         {
            this.uibackground.visible = true;
         }
      }
      
      internal function frame13() : *
      {
         stage.quality = "HIGH";
         this.UpdateGravitatorVol();
         this.darkness.visible = false;
         this.darkness.alpha = 0;
         this.setTrapAllKeys(true);
         this.mupd.visible = false;
         this.mupd.ttt.gotoAndStop(1);
         this.ResetVol();
         if(this.ui_bg)
         {
            this.uibackground.visible = false;
         }
         else
         {
            this.uibackground.visible = true;
         }
         if(this.game_state_timer != -1)
         {
            clearInterval(this.game_state_timer);
         }
         this.back1.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            SaveGame();
            gotoAndStop("menu");
         });
         this.opt_controls.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            SaveGame();
            gotoAndStop("controls");
         });
         this.opt_export_progress.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            SaveGame();
            gotoAndStop("export_progress");
         });
         this.back1.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.back1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.opt_controls.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.opt_controls.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.opt_export_progress.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.opt_export_progress.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.dch_2.gotoAndStop(1);
         this.dch_1.gotoAndStop(1);
         this.dch_0.gotoAndStop(1);
         if(this.DISPLAY_CHAT == 2)
         {
            this.dch_2.gotoAndStop(2);
         }
         else if(this.DISPLAY_CHAT == 1)
         {
            this.dch_1.gotoAndStop(2);
         }
         else
         {
            this.dch_0.gotoAndStop(2);
         }
         this.exp_1.gotoAndStop(1);
         this.exp_2.gotoAndStop(1);
         this.exp_3.gotoAndStop(1);
         switch(this.SHOW_EXP_BAR)
         {
            case 3:
               this.exp_3.gotoAndStop(2);
               break;
            case 2:
               this.exp_2.gotoAndStop(2);
               break;
            case 1:
               this.exp_1.gotoAndStop(2);
         }
         this.exp_1.addEventListener(MouseEvent.CLICK,function():*
         {
            SHOW_EXP_BAR = 1;
            exp_1.gotoAndStop(2);
            exp_2.gotoAndStop(1);
            exp_3.gotoAndStop(1);
         });
         this.exp_2.addEventListener(MouseEvent.CLICK,function():*
         {
            SHOW_EXP_BAR = 2;
            exp_1.gotoAndStop(1);
            exp_2.gotoAndStop(2);
            exp_3.gotoAndStop(1);
         });
         this.exp_3.addEventListener(MouseEvent.CLICK,function():*
         {
            SHOW_EXP_BAR = 3;
            exp_1.gotoAndStop(1);
            exp_2.gotoAndStop(1);
            exp_3.gotoAndStop(2);
         });
         this.frr_1.gotoAndStop(1);
         this.frr_2.gotoAndStop(1);
         this.frr_3.gotoAndStop(1);
         if(this.FRAMERATE == 1)
         {
            this.frr_1.gotoAndStop(2);
         }
         if(this.FRAMERATE == 2)
         {
            this.frr_2.gotoAndStop(2);
         }
         if(this.FRAMERATE == 3)
         {
            this.frr_3.gotoAndStop(2);
         }
         this.frr_1.addEventListener(MouseEvent.CLICK,function():*
         {
            FRAMERATE = 1;
            frr_1.gotoAndStop(2);
            frr_2.gotoAndStop(1);
            frr_3.gotoAndStop(1);
            UpdateFramerate();
         });
         this.frr_2.addEventListener(MouseEvent.CLICK,function():*
         {
            FRAMERATE = 2;
            frr_2.gotoAndStop(2);
            frr_1.gotoAndStop(1);
            frr_3.gotoAndStop(1);
            UpdateFramerate();
         });
         this.frr_3.addEventListener(MouseEvent.CLICK,function():*
         {
            FRAMERATE = 3;
            frr_3.gotoAndStop(2);
            frr_1.gotoAndStop(1);
            frr_2.gotoAndStop(1);
            UpdateFramerate();
         });
         this.dch_2.addEventListener(MouseEvent.CLICK,function():*
         {
            DISPLAY_CHAT = 2;
            dch_2.gotoAndStop(2);
            dch_1.gotoAndStop(1);
            dch_0.gotoAndStop(1);
         });
         this.dch_1.addEventListener(MouseEvent.CLICK,function():*
         {
            DISPLAY_CHAT = 1;
            dch_1.gotoAndStop(2);
            dch_2.gotoAndStop(1);
            dch_0.gotoAndStop(1);
         });
         this.dch_0.addEventListener(MouseEvent.CLICK,function():*
         {
            DISPLAY_CHAT = 0;
            dch_0.gotoAndStop(2);
            dch_2.gotoAndStop(1);
            dch_1.gotoAndStop(1);
         });
         this.v_1.vv.x = (this.FX_VOLUME * 6 - 1) * 104;
         this.m_1.vv.x = (this.MUSIC_VOLUME * 6 - 1) * 104;
         this.m2_1.vv.x = (this.CUSTOM_MUSIC_VOLUME * 6 - 1) * 104;
         this.v_1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            v_1.vv.x = mouseX - (v_1.x - 36.3) - 104;
            FX_VOLUME = Math.round(Math.max(Math.min((mouseX - (v_1.x - 36.3)) / 104,1),0) * 100) / 100 / 6;
            vol = new SoundTransform(FX_VOLUME);
            PlaySound_full(s_test_sound);
            if(FX_VOLUME > 0)
            {
               v_1x.gotoAndStop(1);
            }
            else
            {
               v_1x.gotoAndStop(2);
            }
         });
         this.m_1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            m_1.vv.x = mouseX - (m_1.x - 36.3) - 104;
            MUSIC_VOLUME = Math.round(Math.max(Math.min((mouseX - (m_1.x - 36.3)) / 104,1),0) * 100) / 100 / 6;
            vol2 = new SoundTransform(MUSIC_VOLUME);
            UpdateGravitatorVol();
            if(MUSIC_VOLUME > 0)
            {
               m_1x.gotoAndStop(1);
            }
            else
            {
               m_1x.gotoAndStop(2);
            }
         });
         this.m2_1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            m2_1.vv.x = mouseX - (m2_1.x - 36.3) - 104;
            CUSTOM_MUSIC_VOLUME = Math.round(Math.max(Math.min((mouseX - (m2_1.x - 36.3)) / 104,1),0) * 100) / 100 / 6;
            vol2Custom = new SoundTransform(CUSTOM_MUSIC_VOLUME);
            UpdateGravitatorVol();
            if(CUSTOM_MUSIC_VOLUME > 0)
            {
               m2_1x.gotoAndStop(1);
            }
            else
            {
               m2_1x.gotoAndStop(2);
            }
         });
         if(this.FX_VOLUME > 0)
         {
            this.v_1x.gotoAndStop(1);
         }
         else
         {
            this.v_1x.gotoAndStop(2);
         }
         if(this.MUSIC_VOLUME > 0)
         {
            this.m_1x.gotoAndStop(1);
         }
         else
         {
            this.m_1x.gotoAndStop(2);
         }
         if(this.CUSTOM_MUSIC_VOLUME > 0)
         {
            this.m2_1x.gotoAndStop(1);
         }
         else
         {
            this.m2_1x.gotoAndStop(2);
         }
         this.v_1x.addEventListener(MouseEvent.CLICK,function():*
         {
            v_1.vv.x = -104;
            FX_VOLUME = 0;
            vol = new SoundTransform(FX_VOLUME);
            UpdateGravitatorVol();
            v_1x.gotoAndStop(2);
         });
         this.m_1x.addEventListener(MouseEvent.CLICK,function():*
         {
            m_1.vv.x = -104;
            MUSIC_VOLUME = 0;
            vol2 = new SoundTransform(MUSIC_VOLUME);
            UpdateGravitatorVol();
            m_1x.gotoAndStop(2);
         });
         this.m2_1x.addEventListener(MouseEvent.CLICK,function():*
         {
            m2_1.vv.x = -104;
            CUSTOM_MUSIC_VOLUME = 0;
            vol2Custom = new SoundTransform(CUSTOM_MUSIC_VOLUME);
            UpdateGravitatorVol();
            m2_1x.gotoAndStop(2);
         });
         this.ui_no.gotoAndStop(1);
         this.ui_mini.gotoAndStop(1);
         this.ui_full.gotoAndStop(1);
         if(this.ui_type == 0)
         {
            this.ui_full.gotoAndStop(2);
         }
         else if(this.ui_type == 1)
         {
            this.ui_mini.gotoAndStop(2);
         }
         else
         {
            this.ui_no.gotoAndStop(2);
         }
         this.ui_no.addEventListener(MouseEvent.CLICK,function():*
         {
            ui_type = 2;
            ui_no.gotoAndStop(2);
            ui_mini.gotoAndStop(1);
            ui_full.gotoAndStop(1);
         });
         this.ui_mini.addEventListener(MouseEvent.CLICK,function():*
         {
            ui_type = 1;
            ui_no.gotoAndStop(1);
            ui_mini.gotoAndStop(2);
            ui_full.gotoAndStop(1);
         });
         this.ui_full.addEventListener(MouseEvent.CLICK,function():*
         {
            ui_type = 0;
            ui_no.gotoAndStop(1);
            ui_mini.gotoAndStop(1);
            ui_full.gotoAndStop(2);
         });
         if(this.SCREEN_EFFECTS)
         {
            this.s_1.gotoAndStop(2);
         }
         else
         {
            this.s_1.gotoAndStop(1);
         }
         this.s_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            SCREEN_EFFECTS = !SCREEN_EFFECTS;
            if(SCREEN_EFFECTS)
            {
               s_1.gotoAndStop(2);
            }
            else
            {
               s_1.gotoAndStop(1);
            }
         });
         if(this.HQ)
         {
            this.q_1.gotoAndStop(2);
         }
         else
         {
            this.q_1.gotoAndStop(1);
         }
         this.q_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            HQ = !HQ;
            if(HQ)
            {
               q_1.gotoAndStop(2);
            }
            else
            {
               q_1.gotoAndStop(1);
            }
         });
         if(this.MQ)
         {
            this.mq_1.gotoAndStop(2);
         }
         else
         {
            this.mq_1.gotoAndStop(1);
         }
         this.mq_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            MQ = !MQ;
            if(MQ)
            {
               mq_1.gotoAndStop(2);
            }
            else
            {
               mq_1.gotoAndStop(1);
            }
         });
         if(this.SUPER_COMPUTER)
         {
            this.c_1.gotoAndStop(2);
         }
         else
         {
            this.c_1.gotoAndStop(1);
         }
         this.c_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            SUPER_COMPUTER = !SUPER_COMPUTER;
            RAGDOLL_COLLIDE = SUPER_COMPUTER;
            if(SUPER_COMPUTER)
            {
               c_1.gotoAndStop(2);
            }
            else
            {
               c_1.gotoAndStop(1);
            }
         });
         if(this.SCREEN_FADE_EFFECTS)
         {
            this.screenfade_1.gotoAndStop(2);
         }
         else
         {
            this.screenfade_1.gotoAndStop(1);
         }
         this.screenfade_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            SCREEN_FADE_EFFECTS = !SCREEN_FADE_EFFECTS;
            if(SCREEN_FADE_EFFECTS)
            {
               screenfade_1.gotoAndStop(2);
            }
            else
            {
               screenfade_1.gotoAndStop(1);
            }
         });
         if(this.ui_bg)
         {
            this.uibg_1.gotoAndStop(1);
         }
         else
         {
            this.uibg_1.gotoAndStop(2);
         }
         this.uibg_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            ui_bg = !ui_bg;
            if(ui_bg)
            {
               uibg_1.gotoAndStop(1);
            }
            else
            {
               uibg_1.gotoAndStop(2);
            }
         });
         this.ph_1.gotoAndStop(1);
         this.ph_2.gotoAndStop(1);
         if(!this.LITE_PHYS)
         {
            this.ph_2.gotoAndStop(2);
         }
         else
         {
            this.ph_1.gotoAndStop(2);
         }
         this.ph_2.addEventListener(MouseEvent.CLICK,function():*
         {
            LITE_PHYS = false;
            ph_2.gotoAndStop(2);
            ph_1.gotoAndStop(1);
         });
         this.ph_1.addEventListener(MouseEvent.CLICK,function():*
         {
            LITE_PHYS = true;
            ph_1.gotoAndStop(2);
            ph_2.gotoAndStop(1);
         });
         if(this.PSYCHOBLOOD_MODE == 1)
         {
            this.se_1.gotoAndStop(1);
         }
         else if(this.PSYCHOBLOOD_MODE == 2)
         {
            this.se_1.gotoAndStop(2);
         }
         this.se_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            if(PSYCHOBLOOD_MODE == 1)
            {
               PSYCHOBLOOD_MODE = 2;
            }
            else if(PSYCHOBLOOD_MODE == 2)
            {
               PSYCHOBLOOD_MODE = 1;
            }
            if(PSYCHOBLOOD_MODE == 1)
            {
               se_1.gotoAndStop(1);
            }
            else if(PSYCHOBLOOD_MODE == 2)
            {
               se_1.gotoAndStop(2);
            }
         });
         if(this.fps_counter)
         {
            this.fps_no.gotoAndStop(2);
         }
         else
         {
            this.fps_no.gotoAndStop(1);
         }
         this.fps_no.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            fps_counter = !fps_counter;
            if(fps_counter)
            {
               fps_no.gotoAndStop(2);
            }
            else
            {
               fps_no.gotoAndStop(1);
            }
         });
         if(this.AUTO_PICK_NEW_WEPS)
         {
            this.n_1.gotoAndStop(2);
         }
         else
         {
            this.n_1.gotoAndStop(1);
         }
         this.n_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            AUTO_PICK_NEW_WEPS = !AUTO_PICK_NEW_WEPS;
            if(AUTO_PICK_NEW_WEPS)
            {
               n_1.gotoAndStop(2);
            }
            else
            {
               n_1.gotoAndStop(1);
            }
         });
         if(this.ALTCUR)
         {
            this.cur_1.gotoAndStop(2);
         }
         else
         {
            this.cur_1.gotoAndStop(1);
         }
         this.cur_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            ALTCUR = !ALTCUR;
            if(ALTCUR)
            {
               cur_1.gotoAndStop(2);
               Mouse.hide();
            }
            else
            {
               cur_1.gotoAndStop(1);
               Mouse.show();
            }
         });
         if(TOOLTIPS)
         {
            this.tt_1.gotoAndStop(2);
         }
         else
         {
            this.tt_1.gotoAndStop(1);
         }
         this.tt_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            TOOLTIPS = !TOOLTIPS;
            if(TOOLTIPS)
            {
               tt_1.gotoAndStop(2);
            }
            else
            {
               tt_1.gotoAndStop(1);
            }
         });
         if(HINTS)
         {
            this.hi_1.gotoAndStop(2);
         }
         else
         {
            this.hi_1.gotoAndStop(1);
         }
         this.hi_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            HINTS = !HINTS;
            if(HINTS)
            {
               hi_1.gotoAndStop(2);
            }
            else
            {
               hi_1.gotoAndStop(1);
            }
         });
         if(this.MOUSE_WHEEL)
         {
            this.mw_1.gotoAndStop(2);
         }
         else
         {
            this.mw_1.gotoAndStop(1);
         }
         this.mw_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            MOUSE_WHEEL = !MOUSE_WHEEL;
            if(MOUSE_WHEEL)
            {
               mw_1.gotoAndStop(2);
            }
            else
            {
               mw_1.gotoAndStop(1);
            }
         });
         if(this.OVERSCROLL)
         {
            this.os_1.gotoAndStop(2);
         }
         else
         {
            this.os_1.gotoAndStop(1);
         }
         this.os_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            OVERSCROLL = !OVERSCROLL;
            if(OVERSCROLL)
            {
               os_1.gotoAndStop(2);
            }
            else
            {
               os_1.gotoAndStop(1);
            }
         });
         if(this.RECONNECT_ON_LOST_CONNECTION)
         {
            this.rec_1.gotoAndStop(2);
         }
         else
         {
            this.rec_1.gotoAndStop(1);
         }
         this.rec_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            RECONNECT_ON_LOST_CONNECTION = !RECONNECT_ON_LOST_CONNECTION;
            if(RECONNECT_ON_LOST_CONNECTION)
            {
               rec_1.gotoAndStop(2);
            }
            else
            {
               rec_1.gotoAndStop(1);
            }
         });
         if(this.SOFT_SCREEN)
         {
            this.cm_1.gotoAndStop(1);
         }
         else
         {
            this.cm_1.gotoAndStop(2);
         }
         this.cm_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            SOFT_SCREEN = !SOFT_SCREEN;
            if(SOFT_SCREEN)
            {
               cm_1.gotoAndStop(1);
            }
            else
            {
               cm_1.gotoAndStop(2);
            }
         });
         if(this.VIOLENCE)
         {
            this.vi_1.gotoAndStop(2);
         }
         else
         {
            this.vi_1.gotoAndStop(1);
         }
         this.vi_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            VIOLENCE = !VIOLENCE;
            if(VIOLENCE)
            {
               vi_1.gotoAndStop(2);
            }
            else
            {
               vi_1.gotoAndStop(1);
            }
         });
         if(this.MP_AUTO_LOGIN)
         {
            this.mp_auto_con_1.gotoAndStop(2);
         }
         else
         {
            this.mp_auto_con_1.gotoAndStop(1);
         }
         this.mp_auto_con_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            MP_AUTO_LOGIN = !MP_AUTO_LOGIN;
            if(MP_AUTO_LOGIN)
            {
               mp_auto_con_1.gotoAndStop(2);
            }
            else
            {
               mp_auto_con_1.gotoAndStop(1);
            }
         });
         if(this.BEEP_ON_DEATH)
         {
            this.beep_1.gotoAndStop(2);
         }
         else
         {
            this.beep_1.gotoAndStop(1);
         }
         this.beep_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            BEEP_ON_DEATH = !BEEP_ON_DEATH;
            if(BEEP_ON_DEATH)
            {
               beep_1.gotoAndStop(2);
            }
            else
            {
               beep_1.gotoAndStop(1);
            }
         });
         if(this.HIT_SOUNDS)
         {
            this.hit_1.gotoAndStop(2);
         }
         else
         {
            this.hit_1.gotoAndStop(1);
         }
         this.hit_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            HIT_SOUNDS = !HIT_SOUNDS;
            if(HIT_SOUNDS)
            {
               hit_1.gotoAndStop(2);
            }
            else
            {
               hit_1.gotoAndStop(1);
            }
         });
         if(this.CENSORESHIP)
         {
            this.csh_1.gotoAndStop(2);
         }
         else
         {
            this.csh_1.gotoAndStop(1);
         }
         this.csh_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            CENSORESHIP = !CENSORESHIP;
            if(CENSORESHIP)
            {
               csh_1.gotoAndStop(2);
            }
            else
            {
               csh_1.gotoAndStop(1);
            }
         });
         if(this.kd_counter)
         {
            this.kd_no.gotoAndStop(2);
         }
         else
         {
            this.kd_no.gotoAndStop(1);
         }
         this.kd_no.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            kd_counter = !kd_counter;
            if(kd_counter)
            {
               kd_no.gotoAndStop(2);
            }
            else
            {
               kd_no.gotoAndStop(1);
            }
            update_ui();
         });
      }
      
      internal function frame14() : *
      {
         this.darkness.visible = false;
         this.darkness.alpha = 0;
         this.setTrapAllKeys(true);
         this.mupd.visible = false;
         this.mupd.ttt.gotoAndStop(1);
         this.ResetVol();
         this.UpdateGravitatorVol();
         this.list.visible = false;
         stage.quality = "HIGH";
         this.MP_total = 0;
         this.ch_total = 0;
         if(this.MP_socket.connected)
         {
            this.MP_socket_send("rq=channel_list");
         }
         this.back1.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            gotoAndStop("loginform");
         });
         this.back1.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.back1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         if(this.ui_bg)
         {
            this.uibackground.visible = false;
         }
         else
         {
            this.uibackground.visible = true;
         }
      }
      
      internal function frame15() : *
      {
         if(this.MP_clan.length < 1)
         {
            gotoAndStop("main");
         }
         this.setTrapAllKeys(false);
         this.darkness.visible = false;
         this.darkness.alpha = 0;
         this.ggg.black1v1.visible = false;
         this.physics_win.visible = false;
         this.code_win.visible = false;
         this.errmenu_mp.visible = false;
         this.errmenu_mp.txt.text = "Can\'t connect to the match (Map not found?).";
         this.joinmenu_mp.visible = false;
         this.lobbywindow.visible = false;
         this.rmmatch.visible = false;
         this.lobbywindow.chatinput_glow.gotoAndStop(1);
         this.lobbywindow.chatmessages.htmlText = this.lobby_chat_log;
         this.lobbywindow.onlinelist.htmlText = "";
         if(this.lobbywindow.chatmessages.numLines > 13)
         {
            this.lobbywindow.chatmessages.scrollV = this.lobbywindow.chatmessages.numLines;
         }
         this.lobbywindow.chatinput.multiline = false;
         if(this.exp_mp_enter_once)
         {
            this.exp_mp_enter_once = false;
            this.ExpTask(this.EXP_TYPE_CHECK_OUT_MULTIPLAYER);
         }
         this.ExpTask(this.EXP_TYPE_SYNC_SKILL_POINTS,"",true);
         stage.scaleMode = this.proper_scale_mode;
         stage.align = this.proper_stage_align;
         this.errmenu_mp.b_close2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.errmenu_mp.b_close2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.errmenu_mp.b_close2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_act);
            errmenu_mp.visible = false;
         });
         this.joinmenu_mp.b_close2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.joinmenu_mp.b_close2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_act);
            joinmenu_mp.visible = false;
            if(MP_game_socket.connected)
            {
               MP_game_socket.close();
            }
            if(connectTimeIntervalId)
            {
               clearInterval(connectTimeIntervalId);
            }
            list2.addEventListener(MouseEvent.CLICK,gl_clk);
         });
         this.lobbyopen.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.lobbyopen.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            lobbywindow.visible = true;
            if(!lobby_chat_enabled)
            {
               enableLobbyChat();
            }
         });
         this.lobbyopen.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.lobbywindow.b_close3.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.lobbywindow.b_close3.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.lobbywindow.b_close3.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            lobbywindow.visible = false;
            if(lobby_chat_enabled)
            {
               disableLobbyChat();
            }
         });
         this.lobbywindow.chat_send.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.lobbywindow.chat_send.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.lobbywindow.chat_send.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            if(currentLabel == "channel")
            {
               sendLobbyMessage();
            }
         });
         this.rmmatch.b_yes.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.rmmatch.b_yes.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.rmmatch.b_yes.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            MP_socket_send("rq=game_del&match=" + MP_room);
            rmmatch.visible = false;
         });
         this.rmmatch.b_close2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.rmmatch.b_close2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.rmmatch.b_close2.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            rmmatch.visible = false;
         });
         this.opensimplegui.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            DefaultMP();
            simplegui.visible = true;
         });
         this.opensimplegui.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.opensimplegui.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.DEBUG_MODE = false;
         this.MP_half_bot = false;
         this.mupd.visible = false;
         this.mupd.ttt.gotoAndStop(1);
         this.ResetVol();
         this.UpdateGravitatorVol();
         stage.quality = "HIGH";
         this.back2.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            list2.removeEventListener(MouseEvent.CLICK,gl_clk);
            removeEventListener(Event.ENTER_FRAME,onEnterFrame_ac2);
            if(lobby_chat_enabled)
            {
               disableLobbyChat();
            }
            if(MP_socket.connected)
            {
               MP_socket.close();
            }
            if(MP_AUTO_LOGIN)
            {
               gotoAndStop("menu");
            }
            else
            {
               gotoAndStop("loginform");
            }
         });
         this.back2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.back2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.rrefresh.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            GL_Refresh();
         });
         this.rrefresh.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.rrefresh.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         if(this.GUEST_ACCESS)
         {
            if(this.MP_default_set == 1)
            {
               this.MP_default_set = 2;
            }
         }
         this.simplegui.simple_1.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            SetMPSets(1);
            GL_Refresh();
         });
         this.simplegui.simple_1.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.simplegui.simple_1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.simplegui.simple_2.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            SetMPSets(2);
            GL_Refresh();
         });
         this.simplegui.simple_2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.simplegui.simple_2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.simplegui.simple_3.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            SetMPSets(3);
            GL_Refresh();
         });
         this.simplegui.simple_3.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.simplegui.simple_3.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.simplegui.simple_4.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            DefaultMP();
            simplegui.visible = false;
         });
         this.simplegui.simple_4.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.simplegui.simple_4.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.ggg.visible = false;
         this.ggpp.visible = false;
         this.list2.ch0.visible = false;
         this.ch_n.text = this.MP_channel_name;
         this.list2.visible = false;
         this.ch_total = 0;
         this.ch_links = new Array();
         this.ch_names = new Array();
         this.ch_pass = new Array();
         this.ch_map = new Array();
         this.ch_app = new Array();
         this.ch_regions = new Array();
         this.ch_netcode = new Array();
         this.temp2 = new Array();
         this.MP_total = 0;
         this.gm_ranked = "true";
         this.gm_type = 1;
         this.gm_max = 4;
         this.nnew.addEventListener(MouseEvent.CLICK,function():*
         {
            if(GUEST_ACCESS)
            {
               ggg.visible = false;
               errmenu_mp.visible = true;
               errmenu_mp.txt.text = "Guests can\'t Create Matches.";
            }
            else
            {
               PlaySound_full(ss_info_act);
               MP_socket_send("rq=servers");
               MP_spectator = false;
               errmenu_mp.visible = false;
               ggg.visible = true;
               ggg.gtitle.text = "Game by " + MP_nick;
               ggg.gjoin1.gotoAndStop(1);
               gm_ranked = "false";
               ggg.gtype1.gotoAndStop(2);
               ggg.gtype2.gotoAndStop(1);
               ggg.gtype3.gotoAndStop(1);
               ggg.gtype4.gotoAndStop(1);
               gm_type = 1;
               ggg.gmax2.gotoAndStop(1);
               ggg.gmax3.gotoAndStop(1);
               ggg.gmax4.gotoAndStop(1);
               ggg.gmax5.gotoAndStop(1);
               ggg.gmax6.gotoAndStop(1);
               ggg.gmax8.gotoAndStop(2);
               ggg.gmax16.gotoAndStop(1);
               ggg.gmax24.gotoAndStop(1);
               ggg.gmax32.gotoAndStop(1);
               gm_max = 4;
               ggg.gmap.text = "random approved in rotation";
               ggg.gatt.text = "";
               ggg.gfps.text = "1000";
               ggg.gm_mods.text = "";
               ggg.codeold.gotoAndStop(2);
               ggg.phyold.gotoAndStop(2);
               ggg.server0.gotoAndStop(2);
               ggg.server1.gotoAndStop(1);
               ggg.server2.gotoAndStop(1);
               ggg.server3.gotoAndStop(1);
               ggg.server4.gotoAndStop(1);
               ggg.server5.gotoAndStop(1);
               if(lobby_chat_enabled)
               {
                  disableLobbyChat();
               }
            }
         });
         this.nnew.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.nnew.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.ggg.gjoin1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            if(ggg.gjoin1.currentFrame == 1)
            {
               ggg.gjoin1.gotoAndStop(2);
            }
            else if(ggg.gjoin1.currentFrame == 2)
            {
               ggg.gjoin1.gotoAndStop(1);
            }
         });
         this.ggg.gtype1.addEventListener(MouseEvent.CLICK,function():*
         {
            ggg.gtype1.gotoAndStop(2);
            ggg.gtype2.gotoAndStop(1);
            ggg.gtype3.gotoAndStop(1);
            ggg.gtype4.gotoAndStop(1);
            ggg.black1v1.visible = false;
         });
         this.ggg.gtype2.addEventListener(MouseEvent.CLICK,function():*
         {
            ggg.gtype1.gotoAndStop(1);
            ggg.gtype2.gotoAndStop(2);
            ggg.gtype3.gotoAndStop(1);
            ggg.gtype4.gotoAndStop(1);
            ggg.black1v1.visible = false;
         });
         this.ggg.gtype3.addEventListener(MouseEvent.CLICK,function():*
         {
            ggg.gtype1.gotoAndStop(1);
            ggg.gtype2.gotoAndStop(1);
            ggg.gtype3.gotoAndStop(2);
            ggg.gtype4.gotoAndStop(1);
            ggg.black1v1.visible = false;
         });
         this.ggg.gtype4.addEventListener(MouseEvent.CLICK,function():*
         {
            ggg.gtype1.gotoAndStop(1);
            ggg.gtype2.gotoAndStop(1);
            ggg.gtype3.gotoAndStop(1);
            ggg.gtype4.gotoAndStop(2);
            ggg.black1v1.visible = true;
            maxplayers_reset();
            ggg.gmax2.gotoAndStop(2);
         });
         this.ggg.gmax2.addEventListener(MouseEvent.CLICK,function():*
         {
            maxplayers_reset();
            ggg.gmax2.gotoAndStop(2);
         });
         this.ggg.gmax3.addEventListener(MouseEvent.CLICK,function():*
         {
            maxplayers_reset();
            ggg.gmax3.gotoAndStop(2);
         });
         this.ggg.gmax4.addEventListener(MouseEvent.CLICK,function():*
         {
            maxplayers_reset();
            ggg.gmax4.gotoAndStop(2);
         });
         this.ggg.gmax5.addEventListener(MouseEvent.CLICK,function():*
         {
            maxplayers_reset();
            ggg.gmax5.gotoAndStop(2);
         });
         this.ggg.gmax6.addEventListener(MouseEvent.CLICK,function():*
         {
            maxplayers_reset();
            ggg.gmax6.gotoAndStop(2);
         });
         this.ggg.gmax8.addEventListener(MouseEvent.CLICK,function():*
         {
            maxplayers_reset();
            ggg.gmax8.gotoAndStop(2);
         });
         this.ggg.gmax16.addEventListener(MouseEvent.CLICK,function():*
         {
            maxplayers_reset();
            ggg.gmax16.gotoAndStop(2);
         });
         this.ggg.gmax24.addEventListener(MouseEvent.CLICK,function():*
         {
            maxplayers_reset();
            ggg.gmax24.gotoAndStop(2);
         });
         this.ggg.gmax32.addEventListener(MouseEvent.CLICK,function():*
         {
            maxplayers_reset();
            ggg.gmax32.gotoAndStop(2);
         });
         this.ggg.codeold.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            if(ggg.codeold.currentFrame == 1)
            {
               ggg.codeold.gotoAndStop(2);
            }
            else if(ggg.codeold.currentFrame == 2)
            {
               ggg.codeold.gotoAndStop(1);
            }
         });
         this.ggg.phyold.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            if(ggg.phyold.currentFrame == 1)
            {
               ggg.phyold.gotoAndStop(2);
            }
            else if(ggg.phyold.currentFrame == 2)
            {
               ggg.phyold.gotoAndStop(1);
            }
         });
         this.ggg.server0.addEventListener(MouseEvent.CLICK,function():*
         {
            location_reset();
            ggg.server0.gotoAndStop(2);
         });
         this.ggg.server1.addEventListener(MouseEvent.CLICK,function():*
         {
            location_reset();
            ggg.server1.gotoAndStop(2);
         });
         this.ggg.server2.addEventListener(MouseEvent.CLICK,function():*
         {
            location_reset();
            ggg.server2.gotoAndStop(2);
         });
         this.ggg.server3.addEventListener(MouseEvent.CLICK,function():*
         {
            location_reset();
            ggg.server3.gotoAndStop(2);
         });
         this.ggg.server4.addEventListener(MouseEvent.CLICK,function():*
         {
            location_reset();
            ggg.server4.gotoAndStop(2);
         });
         this.ggg.server5.addEventListener(MouseEvent.CLICK,function():*
         {
            location_reset();
            ggg.server5.gotoAndStop(2);
         });
         this.ggg.gnew.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            gl_clk2();
         });
         this.ggg.gnew.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.ggg.gnew.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.ggg.gcancel.addEventListener(MouseEvent.CLICK,function():*
         {
            ggg.visible = false;
         });
         this.ggg.gcancel.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.ggg.gcancel.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.ggpp.gjoin.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            list2.removeEventListener(MouseEvent.CLICK,gl_clk);
            removeEventListener(Event.ENTER_FRAME,onEnterFrame_ac2);
            MP_pass = ggpp.gpas.text;
            connect_to_region();
         });
         this.ggpp.gjoin.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.ggpp.gjoin.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.ggpp.gcancel.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            ggpp.visible = false;
         });
         this.ggpp.gcancel.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.ggpp.gcancel.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.ggg.mapidget.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            try
            {
               navigateToURL(new URLRequest("http://www.plazmaburst2.com/index.php?s=1"),"_blank");
            }
            catch(e:Error)
            {
            }
         });
         this.ggg.mapidget.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.ggg.mapidget.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.ggg.app_mapidget.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            try
            {
               navigateToURL(new URLRequest("https://www.plazmaburst2.com/?a=&s=7&ac=www.PlazmaBurst2.com&id=663495"),"_blank");
            }
            catch(e:Error)
            {
            }
         });
         this.ggg.app_mapidget.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.ggg.app_mapidget.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.DefaultMP();
         this.a_1.gotoAndStop(1);
         this.a_2.gotoAndStop(1);
         this.a_3.gotoAndStop(1);
         this.a_6.gotoAndStop(1);
         if(this.MPLIST_MODE == 1)
         {
            this.a_1.gotoAndStop(2);
         }
         else if(this.MPLIST_MODE == 2)
         {
            this.a_2.gotoAndStop(2);
         }
         else if(this.MPLIST_MODE == 3)
         {
            this.a_3.gotoAndStop(2);
         }
         else
         {
            this.a_6.gotoAndStop(2);
         }
         this.a_1.addEventListener(MouseEvent.CLICK,function():*
         {
            MPLIST_MODE = 1;
            a_1.gotoAndStop(2);
            a_2.gotoAndStop(1);
            a_3.gotoAndStop(1);
            a_6.gotoAndStop(1);
         });
         this.a_2.addEventListener(MouseEvent.CLICK,function():*
         {
            MPLIST_MODE = 2;
            a_2.gotoAndStop(2);
            a_1.gotoAndStop(1);
            a_3.gotoAndStop(1);
            a_6.gotoAndStop(1);
         });
         this.a_3.addEventListener(MouseEvent.CLICK,function():*
         {
            MPLIST_MODE = 3;
            a_3.gotoAndStop(2);
            a_1.gotoAndStop(1);
            a_2.gotoAndStop(1);
            a_6.gotoAndStop(1);
         });
         this.a_6.addEventListener(MouseEvent.CLICK,function():*
         {
            MPLIST_MODE = 6;
            a_1.gotoAndStop(1);
            a_2.gotoAndStop(1);
            a_3.gotoAndStop(1);
            a_6.gotoAndStop(2);
         });
         this.p_1.gotoAndStop(1);
         this.p_2.gotoAndStop(1);
         if(this.MPLIST_MODE == 1)
         {
            this.p_1.gotoAndStop(2);
         }
         else
         {
            this.p_2.gotoAndStop(2);
         }
         this.p_1.addEventListener(MouseEvent.CLICK,function():*
         {
            MPLIST_PUBLIC = 1;
            p_1.gotoAndStop(2);
            p_2.gotoAndStop(1);
         });
         this.p_2.addEventListener(MouseEvent.CLICK,function():*
         {
            MPLIST_PUBLIC = 2;
            p_2.gotoAndStop(2);
            p_1.gotoAndStop(1);
         });
         this.ap_1.gotoAndStop(1);
         this.ap_2.gotoAndStop(1);
         if(this.MPLIST_APPROVED == 1)
         {
            this.ap_1.gotoAndStop(2);
         }
         else
         {
            this.ap_2.gotoAndStop(2);
         }
         this.ap_1.addEventListener(MouseEvent.CLICK,function():*
         {
            MPLIST_APPROVED = 1;
            ap_1.gotoAndStop(2);
            ap_2.gotoAndStop(1);
         });
         this.ap_2.addEventListener(MouseEvent.CLICK,function():*
         {
            MPLIST_APPROVED = 2;
            ap_2.gotoAndStop(2);
            ap_1.gotoAndStop(1);
         });
         this.ran_1.gotoAndStop(1);
         this.ran_2.gotoAndStop(1);
         if(this.MPLIST_RANKED == 1)
         {
            this.ran_1.gotoAndStop(2);
         }
         else
         {
            this.ran_2.gotoAndStop(2);
         }
         this.ran_1.addEventListener(MouseEvent.CLICK,function():*
         {
            MPLIST_RANKED = 1;
            ran_1.gotoAndStop(2);
            ran_2.gotoAndStop(1);
         });
         this.ran_2.addEventListener(MouseEvent.CLICK,function():*
         {
            MPLIST_RANKED = 2;
            ran_2.gotoAndStop(2);
            ran_1.gotoAndStop(1);
         });
         this.hf_1.gotoAndStop(1);
         this.hf_2.gotoAndStop(1);
         if(this.MPLIST_HIDE_FULL == 1)
         {
            this.hf_1.gotoAndStop(2);
         }
         else
         {
            this.hf_2.gotoAndStop(2);
         }
         this.hf_1.addEventListener(MouseEvent.CLICK,function():*
         {
            MPLIST_HIDE_FULL = 1;
            hf_1.gotoAndStop(2);
            hf_2.gotoAndStop(1);
         });
         this.hf_2.addEventListener(MouseEvent.CLICK,function():*
         {
            MPLIST_HIDE_FULL = 2;
            hf_2.gotoAndStop(2);
            hf_1.gotoAndStop(1);
         });
         this.gupd_gname.text = this.MPLIST_GAMENAME;
         this.gupd_mid.text = this.MPLIST_MAPID;
         this.yy = 0;
         this.xx = 0;
         this.ok = false;
         this.ok2 = false;
         (function():void
         {
            var scroll_drag:* = undefined;
            var scroll_timer:* = undefined;
            var scroll_offset_y:* = undefined;
            var scrolling:* = undefined;
            scrolling = function():void
            {
               if(!lobbywindow.visible)
               {
                  sc_scrool.y = scroll_offset_y + mouseY;
                  xx = (sc_scrool.y - 112) / (225 - 112) * (-ch_total * 32 + 220);
                  if(xx < -ch_total * 32 + 220)
                  {
                     xx = -ch_total * 32 + 220;
                  }
                  if(xx > 0)
                  {
                     xx = 0;
                  }
                  ok = false;
                  ok2 = false;
                  onEnterFrame_ac2(null);
               }
            };
            scroll_drag = false;
            scroll_timer = 0;
            scroll_offset_y = 0;
            sc_scrool.addEventListener(MouseEvent.MOUSE_DOWN,function():*
            {
               if(scroll_drag)
               {
                  return;
               }
               scroll_drag = true;
               scroll_timer = setInterval(scrolling,16);
               scroll_offset_y = sc_scrool.y - mouseY;
            });
            stage.addEventListener(MouseEvent.MOUSE_UP,function():*
            {
               if(!scroll_drag)
               {
                  return;
               }
               scroll_drag = false;
               clearInterval(scroll_timer);
            });
            stage.addEventListener(MouseEvent.MOUSE_WHEEL,function(param1:*):*
            {
               if(currentFrameLabel == "channel" || currentFrameLabel == "achiv")
               {
                  if(!lobbywindow.visible)
                  {
                     yy += param1.delta * 5;
                  }
               }
            });
         })();
         addEventListener(Event.ENTER_FRAME,this.onEnterFrame_ac2);
         this.sc_up1.addEventListener(MouseEvent.MOUSE_DOWN,this.sc_upB);
         this.sc_up1.addEventListener(MouseEvent.MOUSE_OUT,this.sc_upxB);
         this.sc_up1.addEventListener(MouseEvent.CLICK,this.sc_upxB);
         this.sc_up2.addEventListener(MouseEvent.MOUSE_DOWN,this.sc_upB);
         this.sc_up2.addEventListener(MouseEvent.MOUSE_OUT,this.sc_upxB);
         this.sc_up2.addEventListener(MouseEvent.CLICK,this.sc_upxB);
         this.sc_down1.addEventListener(MouseEvent.MOUSE_DOWN,this.sc_downB);
         this.sc_down1.addEventListener(MouseEvent.MOUSE_OUT,this.sc_downxB);
         this.sc_down1.addEventListener(MouseEvent.CLICK,this.sc_downxB);
         this.sc_down2.addEventListener(MouseEvent.MOUSE_DOWN,this.sc_downB);
         this.sc_down2.addEventListener(MouseEvent.MOUSE_OUT,this.sc_downxB);
         this.sc_down2.addEventListener(MouseEvent.CLICK,this.sc_downxB);
         this.SetMPSets(this.MP_default_set);
         this.MP_socket_send("rq=servers");
         setTimeout(this.GL_Refresh,100);
         this.ggg.gmap.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            CallQuickPick(316,156 + 18,2,ggg.gmap);
         });
         this.ggg.gtitle.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            CallQuickTitlePick(272,63,ggg.gtitle);
         });
         if(!this.stable)
         {
            this.myRequest = new URLRequest(this.MP_server);
            this.myVariables = new URLVariables();
            this.myVariables.rq = "unstable";
            this.myVariables.unstable = this.unstable;
            this.myVariables.unstable2 = this.unstable_m;
            this.myVariables.lo = this.loaderInfo.parameters.l;
            this.myRequest.method = URLRequestMethod.POST;
            this.myRequest.data = this.myVariables;
            this.myLoader.load(this.myRequest);
         }
         this.map_preview_big_lobby.visible = false;
         (function():*
         {
            var loader:* = undefined;
            var is_busy:* = undefined;
            var cur_img:* = undefined;
            var lobby_prev_interval:* = undefined;
            loader = new Loader();
            is_busy = false;
            loader.contentLoaderInfo.addEventListener(Event.COMPLETE,function(param1:Event):void
            {
               var _loc2_:* = undefined;
               is_busy = false;
               if(map_preview_big_lobby)
               {
                  _loc2_ = Bitmap(param1.target.content);
                  _loc2_.pixelSnapping = PixelSnapping.NEVER;
                  _loc2_.smoothing = true;
                  _loc2_.alpha = 1;
                  while(map_preview_big_lobby.numChildren > 2)
                  {
                     map_preview_big_lobby.removeChildAt(1);
                  }
                  map_preview_big_lobby.addChild(_loc2_);
                  map_preview_big_lobby.visible = true;
                  map_preview_big_lobby.alpha = 0.2;
               }
            });
            loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR,function(param1:IOErrorEvent):*
            {
               is_busy = false;
            });
            cur_img = "";
            lobby_prev_interval = setInterval(function():*
            {
               var _loc1_:* = undefined;
               if(currentLabel != "channel")
               {
                  clearInterval(lobby_prev_interval);
                  return;
               }
               _loc1_ = "";
               if(!ggg.visible)
               {
                  if(mouseX > 522 + 19 && mouseX < 522 + 19 + 100)
                  {
                     if(mouseY > 66 && mouseY < 66 + 228)
                     {
                        i = 0;
                        while(i < ch_total)
                        {
                           if(mouseX > list2.x)
                           {
                              if(mouseX < list2.x + 735)
                              {
                                 if(mouseY > list2.y + xx + i * 32)
                                 {
                                    if(mouseY < list2.y + xx + i * 32 + 32)
                                    {
                                       _loc1_ = ch_map[i];
                                       break;
                                    }
                                 }
                              }
                           }
                           ++i;
                        }
                     }
                  }
               }
               if(cur_img != _loc1_)
               {
                  if(map_preview_big_lobby.alpha > 0)
                  {
                     map_preview_big_lobby.alpha = Math.max(0,map_preview_big_lobby.alpha - 0.2);
                  }
                  else if(!is_busy)
                  {
                     cur_img = _loc1_;
                     if(map_preview_big_lobby.visible)
                     {
                        map_preview_big_lobby.visible = false;
                     }
                     if(_loc1_ != "")
                     {
                        is_busy = true;
                        if(https_probability >= http_probability)
                        {
                           loader.load(new URLRequest("https://www.plazmaburst2.com/map_preview_by_id.php?id=" + _loc1_));
                        }
                        else
                        {
                           loader.load(new URLRequest("http://www.plazmaburst2.com/map_preview_by_id.php?id=" + _loc1_));
                        }
                     }
                  }
               }
               else if(cur_img != "")
               {
                  if(map_preview_big_lobby.visible)
                  {
                     if(map_preview_big_lobby.alpha < 1)
                     {
                        map_preview_big_lobby.alpha = Math.min(1,map_preview_big_lobby.alpha + 0.2);
                     }
                  }
               }
            },16);
         })();
         this.ggg.physics_help.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            physics_win.visible = true;
         });
         this.ggg.physics_help.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.ggg.physics_help.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.physics_win.b_close2.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            physics_win.visible = false;
         });
         this.physics_win.b_close2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.physics_win.b_close2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.ggg.code_help.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            code_win.visible = true;
         });
         this.ggg.code_help.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.ggg.code_help.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.code_win.b_close2.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            code_win.visible = false;
         });
         this.code_win.b_close2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.code_win.b_close2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         if(this.ui_bg)
         {
            this.uibackground.visible = false;
         }
         else
         {
            this.uibackground.visible = true;
         }
         this.rech_started = false;
         this.rech_0();
      }
      
      internal function frame16() : *
      {
         this.darkness.visible = false;
         this.darkness.alpha = 0;
         this.setTrapAllKeys(true);
         this.mupd.visible = false;
         this.mupd.ttt.gotoAndStop(1);
         this.ResetVol();
         this.UpdateGravitatorVol();
         stage.quality = "HIGH";
         this.ch_n.text = this.MP_channel_name + " - " + this.MP_room_name + " (game " + this.MP_room + ")";
         this.rready.gotoAndStop(2);
         this.MP_ready = false;
         this.rready.useHandCursor = true;
         this.rready.buttonMode = true;
         this.list3.visible = false;
         this.MP_custom_events = "";
         this.MP_force_disconnect = false;
         this.MP_playerstotal = 0;
         this.MP_myid = -1;
         if(this.MP_spectator)
         {
            this.MP_myid = -2;
         }
         this.chat_lastid = -1;
         this.gamechatbox_text = "";
         this.temp2 = new Array();
         this.MP_slot_reset = false;
         this.MP_slot_try = 0;
         this.got_map_data = false;
         this.MP_slot_reset = false;
         this.MP_slot_try = 0;
         this.MP_get_pre();
         this.back3.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            rready.removeEventListener(MouseEvent.CLICK,ready_switch);
            gotoAndStop("channel");
         });
         this.back3.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.back3.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         stage.addEventListener(KeyboardEvent.KEY_DOWN,this.k_down3);
         this.rready.addEventListener(MouseEvent.CLICK,this.ready_switch);
         this.need_slot.addEventListener(MouseEvent.CLICK,function():*
         {
            if(!MP_ready)
            {
               PlaySound_full(ss_info_act);
               MP_slot_reset = true;
               MP_slot_try = MP_myid + 1;
            }
         });
         this.need_slot.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            if(!MP_ready)
            {
               PlaySound_full(ss_info);
            }
         });
         this.need_slot.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            if(!MP_ready)
            {
               PlaySound_full(ss_info_off);
            }
         });
         (function():*
         {
            var loader:* = undefined;
            loader = new Loader();
            loader.contentLoaderInfo.addEventListener(Event.COMPLETE,function(param1:Event):void
            {
               var bitmap:* = undefined;
               var img_inter:* = undefined;
               var event:Event = param1;
               if(map_preview_big)
               {
                  bitmap = Bitmap(LoaderInfo(event.target).content);
                  bitmap.pixelSnapping = PixelSnapping.NEVER;
                  bitmap.smoothing = true;
                  bitmap.alpha = 0.2;
                  img_inter = setInterval(function():*
                  {
                     if(bitmap.alpha < 1)
                     {
                        bitmap.alpha = Math.min(1,bitmap.alpha + 0.2);
                     }
                     else
                     {
                        clearInterval(img_inter);
                     }
                  },16);
                  map_preview_big.addChild(bitmap);
               }
            });
            loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR,function(param1:IOErrorEvent):*
            {
            });
            loader.load(new URLRequest("https://www.plazmaburst2.com/map_preview_by_id.php?id=" + MP_map_name));
         })();
         if(this.ui_bg)
         {
            this.uibackground.visible = false;
         }
         else
         {
            this.uibackground.visible = true;
         }
      }
      
      internal function frame17() : *
      {
         this.resetChatHistory();
         stage.scaleMode = this.proper_scale_mode;
         stage.align = this.proper_stage_align;
         this.setTrapAllKeys(true);
         this.darkness.visible = false;
         this.darkness.alpha = 0;
         this.mupd.visible = false;
         this.mupd.ttt.gotoAndStop(1);
         this.ResetVol();
         this.UpdateGravitatorVol();
         stage.quality = "HIGH";
         this.LAST_ERROR = "";
         this.myCursor.gotoAndStop("loading");
         this.myTimer_loading = new Timer(40,1);
         this.myTimer_loading.addEventListener(TimerEvent.TIMER,this.timerHandler_loading);
         this.myTimer_loading.start();
      }
      
      internal function frame18() : *
      {
         this.setTrapAllKeys(true);
         try
         {
            this.kedumb();
            if(ExternalInterface.available)
            {
               ExternalInterface.call("L1(" + this.MP_mode + ")");
            }
            if(AdLoader.cpmstar_loaded_object != null)
            {
               AdLoader.cpmstar_loaded_object.parent.removeChild(AdLoader.cpmstar_loaded_object);
            }
         }
         catch(e:*)
         {
         }
         this.lobbywindow.chatinput_glow.gotoAndStop(1);
         this.lobbywindow.chatmessages.htmlText = this.lobby_chat_log;
         if(this.lobbywindow.chatmessages.numLines > 13)
         {
            this.lobbywindow.chatmessages.scrollV = this.lobbywindow.chatmessages.numLines;
         }
         this.lobbywindow.chatinput.multiline = false;
         this.lobbywindow.onlinelist.htmlText = "";
         this.vc_fresh = true;
         this.KINETIC_MODULE_ENABLED = !this.MP_mode;
         this.MP_let_alive_players_hear_dead = true;
         this.MP_allow_leaderboard_details = true;
         this.ALLOW_TIMESHIFT = true;
         this.pspeed = 60;
         this.weapon_penetration_factor = 1;
         this.maxbulletlife = 30;
         this.rocket_speed_mult = 1;
         this.grenade_speed_mult = 1;
         this.plasma_speed_mult = 1;
         this.FREEZE_OFFSCREEN_ENTITIES = true;
         this.lock_camera_region = null;
         this.lock_camera_intensity = 0;
         this.trigger_to_key_binds_down = {};
         this.trigger_to_key_binds_up = {};
         this.ANONYMOUS_MODE = false;
         this.ALLOW_VAR_SYNC = false;
         this.ALLOW_LIGHT_BREAK = true;
         this.NAIVE_HIT_CONFIRMATION = false;
         this.GLOBAL_REGEN_SPEED = 1;
         this.GLOBAL_REGEN_DELAY = this.MP_mode && this.MP_giveguns ? 2 : 1;
         this.GLOBAL_FALL_DAMAGE_MULT = this.MP_mode && this.MP_giveguns ? 1 : 1;
         this.GLOBAL_FALL_SENSITIVITY_MULT = this.MP_mode && this.MP_giveguns ? 0.9 : 1;
         this.BOOST_MULT = 1;
         this.BOOST_HIGH_PHYSICS = this.MP_mode && this.MP_giveguns ? 2.8 : 1;
         this.BOOST_LOW_PHYSICS = 1;
         this.FIX_GUN_DESYNCHRONIZATION = false;
         if(this.MP_giveguns)
         {
            this.FIX_GUN_DESYNCHRONIZATION = true;
         }
         this.custom_songs = new Vector.<Object>();
         this.custom_images = new Vector.<Object>();
         this.temp_keep_dmg_belows = new Vector.<Object>();
         this.temp_ignore_gun_pick = new Vector.<Object>();
         this.possible_bullet_data = new Vector.<Object>();
         this.set_timeouts = new Vector.<Object>();
         this.images_expected = 0;
         this.images_loaded = 0;
         this.images_data_loaded = 0;
         this.images_ready_to_render = 0;
         this.images_finished_loading = 0;
         this.allow_screenshoting = true;
         this.WATER_NAME = "Water";
         this.ACID_NAME = "Acid";
         this.hintf.visible = false;
         this.hintf.alpha = true;
         this.CURRENT_HINT = "";
         this.THIS_HINT = "";
         this.MP_BAD_WORDS_SAID = Math.max(0,this.MP_BAD_WORDS_SAID - 1);
         this.MP_last_linked = -1;
         this.synonym_uid = new Array();
         this.synonym_id = new Array();
         this.ENEMY_SENDER_i = 0;
         this.team_blue.visible = false;
         this.team_red.visible = false;
         this.MP_last_message_patience = 0;
         this.mupd.visible = false;
         this.mupd.ttt.gotoAndStop(1);
         this.new_active.visible = false;
         this.new_active.gotoAndStop(1);
         this.PLAZMA_GAME = true;
         this.NOBASE = false;
         this.MP_startbarrels = new Array();
         this.MP_pbug = 0;
         this.MP_pwarn = false;
         this.death_cam = -1;
         this.INTRUDER_DATABASE = new Array();
         TraceLine_cache_x1 = new Array();
         TraceLine_cache_y1 = new Array();
         TraceLine_cache_x2 = new Array();
         TraceLine_cache_y2 = new Array();
         TraceLine_cache_res = new Array();
         TraceLine_cache_made = new Array();
         TraceLine_cache_total = 0;
         this.shnades = new Array();
         this.shnades_total = 0;
         this.shnades_next = 0;
         this.boxx = new Array();
         this.boxy = new Array();
         this.boxw = new Array();
         this.boxh = new Array();
         this.boxmat = new Array();
         this.bgx = new Array();
         this.bgy = new Array();
         this.bgw = new Array();
         this.bgh = new Array();
         this.bg_cast = new Array();
         this.pushx = new Array();
         this.pushy = new Array();
         this.pushtox = new Array();
         this.pushtoy = new Array();
         this.pushstab = new Array();
         this.pushdamage = new Array();
         this.pushw = new Array();
         this.pushh = new Array();
         this.flare = new Array();
         this.flare_power = new Array();
         this.wax = new Array();
         this.way = new Array();
         this.waw = new Array();
         this.wah = new Array();
         this.wadamage = new Array();
         this.wa_friction = new Array();
         this.ax = new Array();
         this.ay = new Array();
         this.atox = new Array();
         this.atoy = new Array();
         this.aio = new Array();
         this.aof = new Array();
         this.arad = new Array();
         this.around = new Array();
         this.amat = new Array();
         this.atim = new Array();
         this.acollided = new Array();
         this.ainwater = new Array();
         this.ainwater_shape = new Array();
         this.ablood = new Array();
         this.aactive = new Array();
         this.chtypa = new Array();
         this.chP = new Array();
         this.chC = new Array();
         this.chdef = new Array();
         this.chdamp = new Array();
         this.chio = new Array();
         this.chtsilp = new Array();
         this.barrels = new Array();
         this.guns = new Array();
         this.mens = new Array();
         this.vehicles = new Array();
         this.doors = new Array();
         this.decors = new Array();
         this.triggers = new Array();
         this.timers = new Array();
         this.regions = new Array();
         this.puls = new Array();
         dangerx = new Array();
         dangery = new Array();
         dangerrad = new Array();
         dangerteam = new Array();
         surf = new Array();
         this.surf_lnk = new Array();
         this.surf_lnk_to = new Array();
         this.ef = new Array();
         this.lamps_x = new Array();
         this.lamps_y = new Array();
         this.lamps_power = new Array();
         this.lamps_power2 = new Array();
         this.waters = new Array();
         addChild(this.debug_screen);
         this.CASUAL_MODE = false;
         this.STRICT_MODE = false;
         this.AUTO_REVIVE = true;
         this.MEAT_MODE = false;
         this.NO_PSI = false;
         this.step_size = 20;
         this.flarestotal = 0;
         this.Disable_next_click = false;
         this.rnd = 1;
         this.render_minX = 0;
         this.render_minY = 0;
         this.render_maxX = 0;
         this.render_maxY = 0;
         this.lastcurx = this.lastcury = this.lastcurmove = 0;
         this.last_psi = 1;
         this.MP_teamkills = 0;
         this.FORCE_SNOW = false;
         this.MP_gamestate = 0;
         this.tooltip_updated = false;
         this.gamechat_input_text = "";
         this.MP_force_disconnect = false;
         this.MP_chat_input = false;
         this.MP_custom_events = "";
         this.MP_deaths = 0;
         this.MP_kills = 0;
         this.hpwarning = false;
         this.grenades_total = 0;
         this.grenades_port_total = 0;
         this.grenades_sh_total = 0;
         this.MP_enc_deaths = 0;
         this.MP_real_deaths = 0;
         this.MP_enc_restarts = 0;
         this.MP_gbd = -1;
         this.mini_scenario_cur = -1;
         this.mini_scenario_phase = 0;
         this.system_non_stop = true;
         this.stoped_by_focus = false;
         this.OpenTop = true;
         this.firstframe = true;
         this.gravity = 0.5;
         this.regionstotal = 0;
         this.triggerstotal = 0;
         this.timerstotal = 0;
         this.doorstotal = 0;
         this.attachments = new Array();
         this.decorstotal = 0;
         this.bgstotal = 0;
         this.playerstotal = 0;
         this.boxestotal = 0;
         this.lampstotal = 0;
         this.watertotal = 0;
         this.gunstotal = 0;
         this.pushstotal = 0;
         this.vehiclestotal = 0;
         this.barrelstotal = 0;
         this.key_left = false;
         this.key_right = false;
         this.key_up = false;
         this.key_down = false;
         this.key_grenade = false;
         this.key_pick = false;
         this.key_alt = false;
         key_shift = false;
         this.key_grab = false;
         this.key_kinetic = false;
         this.key_fall = false;
         this.key_ctrl = false;
         this.cinetic_target = -1;
         is_firing = false;
         this.timeshift = 0;
         this.energy_max = 100;
         this.energy = 100;
         this.joint_align = -1;
         dangerstotal = 0;
         this.pulscur = 0;
         this.nextef = 0;
         this.lamps_skips = 1;
         this.atotal = 0;
         this.chtotal = 0;
         this.tracer_i4 = 0;
         this.tracer_i5 = 0;
         tracer_i3 = 0;
         this.myCursor.gotoAndStop("gaming");
         if(!this.MP_mode)
         {
            this.MP_fps = this.DEFAULT_FPS;
            this.MP_myid = 0;
            this.gamemenu.b_lobbychat.enabled = false;
            this.gamemenu.b_lobbychat.mouseEnabled = false;
            this.gamemenu.b_lobbychat.alpha = 0.5;
         }
         else
         {
            this.gamemenu.b_lobbychat.enabled = true;
            this.gamemenu.b_lobbychat.mouseEnabled = true;
            this.gamemenu.b_lobbychat.alpha = 1;
            this.gamemenu.b_lobbychat.addEventListener(MouseEvent.MOUSE_OVER,function():*
            {
               PlaySound_full(ss_info);
            });
            this.gamemenu.b_lobbychat.addEventListener(MouseEvent.CLICK,function():*
            {
               PlaySound_full(ss_info_act);
               lobbywindow.visible = true;
               if(!lobby_chat_enabled)
               {
                  enableLobbyChat();
               }
            });
            this.gamemenu.b_lobbychat.addEventListener(MouseEvent.MOUSE_DOWN,function():*
            {
               PlaySound_full(ss_info_off);
            });
            this.lobbywindow.b_close3.addEventListener(MouseEvent.MOUSE_OVER,function():*
            {
               PlaySound_full(ss_info);
            });
            this.lobbywindow.b_close3.addEventListener(MouseEvent.MOUSE_DOWN,function():*
            {
               PlaySound_full(ss_info_off);
            });
            this.lobbywindow.b_close3.addEventListener(MouseEvent.CLICK,function():*
            {
               PlaySound_full(ss_info_act);
               lobbywindow.visible = false;
               if(lobby_chat_enabled)
               {
                  disableLobbyChat();
               }
            });
            this.lobbywindow.chat_send.addEventListener(MouseEvent.MOUSE_OVER,function():*
            {
               PlaySound_full(ss_info);
            });
            this.lobbywindow.chat_send.addEventListener(MouseEvent.MOUSE_DOWN,function():*
            {
               PlaySound_full(ss_info_off);
            });
            this.lobbywindow.chat_send.addEventListener(MouseEvent.CLICK,function():*
            {
               PlaySound_full(ss_info_act);
               if(currentLabel == "gaming")
               {
                  sendLobbyMessage();
               }
            });
         }
         this.gamemenu.visible = false;
         this.herolist.visible = false;
         this.chat_win.visible = false;
         this.lobbywindow.visible = false;
         this.gamechatbox_text = "";
         if(this.LEVEL_END_FORCE == "" && this.MP_mode)
         {
            this.LEVEL_END_FORCE = "exit";
         }
         else
         {
            this.LEVEL_END_FORCE = "";
         }
         this.upd_weps_i = 0;
         while(this.upd_weps_i < 10)
         {
            this.weps["gi" + this.upd_weps_i].gotoAndStop(1);
            ++this.upd_weps_i;
         }
         if(this.MP_mode)
         {
            this.EASY_MODE = false;
            this.nrg.visible = false;
         }
         this.expl_hurt_full = false;
         this.vehhp.visible = false;
         this.pauze.visible = false;
         this.lags.visible = false;
         this.NoMouse(this.lags);
         this.NoMouse(this.pauze);
         if(this.MQ && this.HQ)
         {
            stage.quality = "HIGH";
         }
         else if(this.HQ && !this.MQ)
         {
            stage.quality = "MEDIUM";
         }
         else if(!this.HQ && this.MQ)
         {
            stage.quality = "MEDIUM";
         }
         else
         {
            stage.quality = "LOW";
         }
         this.game_scale = 1;
         this.lgame_scale = 1;
         this.darkness.visible = true;
         this.darkness.alpha = 1;
         this.darkness.scaleX = 1;
         this.darkness.scaleY = 1;
         this.whitness.visible = false;
         this.whitness.alpha = 0;
         this.game.joint.visible = false;
         this.rx = undefined;
         this.ry = undefined;
         if(this.HQ)
         {
            this.maxef = 224;
         }
         else
         {
            this.maxef = 128;
         }
         this.i4 = 0;
         while(this.i4 < 4)
         {
            this._root["pb" + this.i4].alpha = 0;
            this._root["pb" + this.i4].visible = false;
            ++this.i4;
         }
         this.i = 0;
         while(this.i < 11)
         {
            this.gamechatbox2["item" + this.i].alpha = 0;
            this.gamechatbox2["item" + this.i].visible = false;
            this.gamechatbox2["item" + this.i].timer = 0;
            ++this.i;
         }
         stage.focus = stage;
         this.click_reg.addEventListener(MouseEvent.MOUSE_DOWN,this.m_press);
         this.click_reg.addEventListener(MouseEvent.MOUSE_UP,this.m_release);
         if(!this.USE_HTML_WHEEL_EVENTS)
         {
            this.click_reg.addEventListener(MouseEvent.MOUSE_WHEEL,this.onMouseWheelEvent);
         }
         this.click_reg.addEventListener(MouseEvent.MOUSE_OVER,this.mov2);
         stage.addEventListener(Event.ACTIVATE,this.mouseMoveListener);
         stage.addEventListener(Event.DEACTIVATE,this.mouseLeaveListener);
         this.gamemenu.b_exit.addEventListener(MouseEvent.CLICK,function():*
         {
            if(lobby_chat_enabled)
            {
               disableLobbyChat();
            }
            VarChangePreventStart();
            PlaySound_full(ss_info_act);
            if(MP_myid < playerstotal)
            {
               MP_force_disconnect = true;
               MP_type = 0;
               mens[MP_myid].dead = true;
               darkness.visible = true;
               darkness.alpha = 1;
               LEVEL_END_FORCE = "exit";
               gamemenu.visible = false;
               if(myCursor.visible)
               {
                  Mouse.hide();
               }
               setTrapAllKeys(true);
               isGameScaleSet = false;
            }
            else
            {
               talkerch.stop();
               DropGameTimer();
               LAST_ERROR = "Error: Player does not exists at this map";
               FUN_TIME_SPEND = 0;
               if(MP_mode)
               {
                  MP_mode = false;
                  gotoAndStop("channel");
               }
               else
               {
                  gotoAndStop("menu");
               }
            }
            resetChatHistory();
            VarChangePreventEnd();
         });
         this.gamemenu.b_exit.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.gamemenu.b_restart.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.gamemenu.b_exit.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.gamemenu.b_restart.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.gamemenu.b_close.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.gamemenu.b_close.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.gamemenu.b_close.addEventListener(MouseEvent.CLICK,function():*
         {
            if(!MP_mode)
            {
               system_non_stop = true;
               if(!mens[MP_myid].dead)
               {
                  pauze.visible = false;
               }
            }
            gamemenu.visible = false;
            if(myCursor.visible)
            {
               Mouse.hide();
            }
            setTrapAllKeys(true);
         });
         this.conmenu.visible = false;
         this.conmenu_set.visible = false;
         this.conmenu.b_close2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.conmenu.b_close2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.conmenu.b_close2.addEventListener(MouseEvent.CLICK,function():*
         {
            conmenu.visible = false;
         });
         this.conmenu_set.b_close2.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.conmenu_set.b_close2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.conmenu_set.b_close2.addEventListener(MouseEvent.CLICK,function():*
         {
            conmenu_set.visible = false;
            SaveGame();
         });
         this.conmenu_set.exp_1.gotoAndStop(1);
         this.conmenu_set.exp_2.gotoAndStop(1);
         this.conmenu_set.exp_3.gotoAndStop(1);
         switch(this.SHOW_EXP_BAR)
         {
            case 3:
               this.conmenu_set.exp_3.gotoAndStop(2);
               break;
            case 2:
               this.conmenu_set.exp_2.gotoAndStop(2);
               break;
            case 1:
               this.conmenu_set.exp_1.gotoAndStop(2);
         }
         this.conmenu_set.exp_1.addEventListener(MouseEvent.CLICK,function():*
         {
            SHOW_EXP_BAR = 1;
            exp_first_sync_await = true;
            conmenu_set.exp_1.gotoAndStop(2);
            conmenu_set.exp_2.gotoAndStop(1);
            conmenu_set.exp_3.gotoAndStop(1);
         });
         this.conmenu_set.exp_2.addEventListener(MouseEvent.CLICK,function():*
         {
            SHOW_EXP_BAR = 2;
            exp_first_sync_await = true;
            conmenu_set.exp_1.gotoAndStop(1);
            conmenu_set.exp_2.gotoAndStop(2);
            conmenu_set.exp_3.gotoAndStop(1);
         });
         this.conmenu_set.exp_3.addEventListener(MouseEvent.CLICK,function():*
         {
            SHOW_EXP_BAR = 3;
            exp_first_sync_await = true;
            conmenu_set.exp_1.gotoAndStop(1);
            conmenu_set.exp_2.gotoAndStop(1);
            conmenu_set.exp_3.gotoAndStop(2);
         });
         this.conmenu_set.frr_1.gotoAndStop(1);
         this.conmenu_set.frr_2.gotoAndStop(1);
         this.conmenu_set.frr_3.gotoAndStop(1);
         if(this.FRAMERATE == 1)
         {
            this.conmenu_set.frr_1.gotoAndStop(2);
         }
         else if(this.FRAMERATE == 2)
         {
            this.conmenu_set.frr_2.gotoAndStop(2);
         }
         else if(this.FRAMERATE == 3)
         {
            this.conmenu_set.frr_3.gotoAndStop(2);
         }
         this.conmenu_set.frr_1.addEventListener(MouseEvent.CLICK,function():*
         {
            FRAMERATE = 1;
            conmenu_set.frr_1.gotoAndStop(2);
            conmenu_set.frr_2.gotoAndStop(1);
            conmenu_set.frr_3.gotoAndStop(1);
            UpdateFramerate();
         });
         this.conmenu_set.frr_2.addEventListener(MouseEvent.CLICK,function():*
         {
            FRAMERATE = 2;
            conmenu_set.frr_2.gotoAndStop(2);
            conmenu_set.frr_1.gotoAndStop(1);
            conmenu_set.frr_3.gotoAndStop(1);
            UpdateFramerate();
         });
         this.conmenu_set.frr_3.addEventListener(MouseEvent.CLICK,function():*
         {
            FRAMERATE = 3;
            conmenu_set.frr_3.gotoAndStop(2);
            conmenu_set.frr_1.gotoAndStop(1);
            conmenu_set.frr_2.gotoAndStop(1);
            UpdateFramerate();
         });
         this.conmenu_set.ui_no.gotoAndStop(1);
         this.conmenu_set.ui_mini.gotoAndStop(1);
         this.conmenu_set.ui_full.gotoAndStop(1);
         if(this.ui_type == 0)
         {
            this.conmenu_set.ui_full.gotoAndStop(2);
         }
         else if(this.ui_type == 1)
         {
            this.conmenu_set.ui_mini.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.ui_no.gotoAndStop(2);
         }
         this.conmenu_set.dch_2.gotoAndStop(1);
         this.conmenu_set.dch_1.gotoAndStop(1);
         this.conmenu_set.dch_0.gotoAndStop(1);
         if(this.DISPLAY_CHAT == 2)
         {
            this.conmenu_set.dch_2.gotoAndStop(2);
         }
         else if(this.DISPLAY_CHAT == 1)
         {
            this.conmenu_set.dch_1.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.dch_0.gotoAndStop(2);
         }
         this.conmenu_set.dch_2.addEventListener(MouseEvent.CLICK,function():*
         {
            DISPLAY_CHAT = 2;
            conmenu_set.dch_2.gotoAndStop(2);
            conmenu_set.dch_1.gotoAndStop(1);
            conmenu_set.dch_0.gotoAndStop(1);
         });
         this.conmenu_set.dch_1.addEventListener(MouseEvent.CLICK,function():*
         {
            DISPLAY_CHAT = 1;
            conmenu_set.dch_1.gotoAndStop(2);
            conmenu_set.dch_2.gotoAndStop(1);
            conmenu_set.dch_0.gotoAndStop(1);
         });
         this.conmenu_set.dch_0.addEventListener(MouseEvent.CLICK,function():*
         {
            DISPLAY_CHAT = 0;
            conmenu_set.dch_0.gotoAndStop(2);
            conmenu_set.dch_2.gotoAndStop(1);
            conmenu_set.dch_1.gotoAndStop(1);
         });
         this.conmenu_set.v_1.vv.x = (this.FX_VOLUME * 6 - 1) * 104;
         this.conmenu_set.m_1.vv.x = (this.MUSIC_VOLUME * 6 - 1) * 104;
         this.conmenu_set.m2_1.vv.x = (this.CUSTOM_MUSIC_VOLUME * 6 - 1) * 104;
         this.conmenu_set.v_1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            conmenu_set.v_1.vv.x = mouseX - (conmenu_set.v_1.x - 36.3) - 104;
            FX_VOLUME = Math.round(Math.max(Math.min((mouseX - (conmenu_set.v_1.x - 36.3)) / 104,1),0) * 100) / 100 / 6;
            vol = new SoundTransform(FX_VOLUME);
            PlaySound_full(s_test_sound);
            if(FX_VOLUME > 0)
            {
               conmenu_set.v_1x.gotoAndStop(1);
            }
            else
            {
               conmenu_set.v_1x.gotoAndStop(2);
            }
         });
         this.conmenu_set.m_1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            conmenu_set.m_1.vv.x = mouseX - (conmenu_set.m_1.x - 36.3) - 104;
            MUSIC_VOLUME = Math.round(Math.max(Math.min((mouseX - (conmenu_set.m_1.x - 36.3)) / 104,1),0) * 100) / 100 / 6;
            vol2 = new SoundTransform(MUSIC_VOLUME);
            UpdateGravitatorVol();
            if(MUSIC_VOLUME > 0)
            {
               conmenu_set.m_1x.gotoAndStop(1);
            }
            else
            {
               conmenu_set.m_1x.gotoAndStop(2);
            }
            CustomSongUpdateVolumes();
         });
         this.conmenu_set.m2_1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            conmenu_set.m2_1.vv.x = mouseX - (conmenu_set.m2_1.x - 36.3) - 104;
            CUSTOM_MUSIC_VOLUME = Math.round(Math.max(Math.min((mouseX - (conmenu_set.m2_1.x - 36.3)) / 104,1),0) * 100) / 100 / 6;
            vol2Custom = new SoundTransform(CUSTOM_MUSIC_VOLUME);
            UpdateGravitatorVol();
            if(CUSTOM_MUSIC_VOLUME > 0)
            {
               conmenu_set.m2_1x.gotoAndStop(1);
            }
            else
            {
               conmenu_set.m2_1x.gotoAndStop(2);
            }
            CustomSongUpdateVolumes();
         });
         if(this.FX_VOLUME > 0)
         {
            this.conmenu_set.v_1x.gotoAndStop(1);
         }
         else
         {
            this.conmenu_set.v_1x.gotoAndStop(2);
         }
         if(this.MUSIC_VOLUME > 0)
         {
            this.conmenu_set.m_1x.gotoAndStop(1);
         }
         else
         {
            this.conmenu_set.m_1x.gotoAndStop(2);
         }
         if(this.CUSTOM_MUSIC_VOLUME > 0)
         {
            this.conmenu_set.m2_1x.gotoAndStop(1);
         }
         else
         {
            this.conmenu_set.m2_1x.gotoAndStop(2);
         }
         this.conmenu_set.v_1x.addEventListener(MouseEvent.CLICK,function():*
         {
            conmenu_set.v_1.vv.x = -104;
            FX_VOLUME = 0;
            vol = new SoundTransform(FX_VOLUME);
            UpdateGravitatorVol();
            conmenu_set.v_1x.gotoAndStop(2);
         });
         this.conmenu_set.m_1x.addEventListener(MouseEvent.CLICK,function():*
         {
            conmenu_set.m_1.vv.x = -104;
            MUSIC_VOLUME = 0;
            vol2 = new SoundTransform(MUSIC_VOLUME);
            UpdateGravitatorVol();
            conmenu_set.m_1x.gotoAndStop(2);
            CustomSongUpdateVolumes();
         });
         this.conmenu_set.m2_1x.addEventListener(MouseEvent.CLICK,function():*
         {
            conmenu_set.m2_1.vv.x = -104;
            CUSTOM_MUSIC_VOLUME = 0;
            vol2Custom = new SoundTransform(CUSTOM_MUSIC_VOLUME);
            UpdateGravitatorVol();
            conmenu_set.m2_1x.gotoAndStop(2);
            CustomSongUpdateVolumes();
         });
         this.gamemenu.b_con.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.gamemenu.b_con.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.gamemenu.b_con.addEventListener(MouseEvent.CLICK,function():*
         {
            conmenu.visible = true;
         });
         this.gamemenu.b_settings.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.gamemenu.b_settings.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.gamemenu.b_settings.addEventListener(MouseEvent.CLICK,function():*
         {
            conmenu_set.visible = true;
         });
         this.gamemenu.b_restart.addEventListener(MouseEvent.CLICK,function():*
         {
            VarChangePreventStart();
            PlaySound_full(ss_info_act);
            if(MP_mode)
            {
               mens[MP_myid].hea = 0;
            }
            else if(def_login && CUR_LOADING.toLowerCase().indexOf(def_login.toLowerCase() + "-") == 0)
            {
               GotoMap(CUR_LOADING);
            }
            else
            {
               MP_force_disconnect = true;
               mens[MP_myid].dead = true;
               darkness.visible = true;
               darkness.alpha = 1;
               LEVEL_END_FORCE = "restart";
            }
            gamemenu.visible = false;
            if(myCursor.visible)
            {
               Mouse.hide();
            }
            setTrapAllKeys(true);
            VarChangePreventEnd();
         });
         this.vol.volume = this.FX_VOLUME;
         this.vol2.volume = this.MUSIC_VOLUME;
         this.SHAKEAMMOUT = 0;
         if(!TOOLTIPS)
         {
            this.myCursor.txt.htmlText = "";
         }
         this.FUN_NICE_BULLETS = 0;
         this.FUN_SPENT_BULLETS = 0;
         this.FUN_DAMAGE_MADE = 0;
         this.FUN_HEADSHOTS_MADE = 0;
         this.FUN_DAMAGE_TAKEN = 0;
         this.FUN_TIME_SPEND = 0;
         this.FUN_ELEMINATED = 0;
         this.whitesimple.visible = false;
         this.whitesimple.alpha = 0;
         this.BADGES_ENABLED = true;
         this.MP_start_grenades_count = 0;
         this.MP_start_grenades_port_count = 0;
         this.MP_start_grenades_sh_count = 0;
         this.MP_myspecials = new Array();
         this.MP_myspecials_total = 0;
         this.MP_assigning_special = -1;
         this.MP_specials = new Array();
         MP_specials_total = 0;
         this.pcg.gotoAndStop(1);
         this.qmenu.gotoAndStop(1);
         this.team_blue.visible = false;
         this.team_red.visible = false;
         this.team_blue.txtscore.text = "0";
         this.team_red.txtscore.text = "0";
         this.LoadMap();
         this.MP_ping1 = getTimer();
         if(!this.SCREEN_FADE_EFFECTS)
         {
            setTimeout(function():*
            {
               darkness.scaleX = 0;
               darkness.scaleY = 0;
            },100);
         }
         this.hero_list_frame_offset = 0;
         if(this.MP_mode)
         {
            this.MP_get();
            this.hero_list_scale = 1;
            if(this.MP_playerstotal > 8)
            {
               this.hero_list_scale = 0.5;
               this.hero_list_frame_offset = 3;
            }
            if(this.MP_playerstotal > 16)
            {
               this.hero_list_scale = 0.345;
               this.hero_list_frame_offset = 6;
            }
            if(this.MP_playerstotal > 24)
            {
               this.hero_list_scale = 0.25;
               this.hero_list_frame_offset = 6;
            }
            this.i = 0;
            while(this.i < this.MP_playerstotal)
            {
               if(this.i == 0)
               {
                  this.temp = this.herolist.p0;
               }
               else
               {
                  this.temp = this.herolist.addChild(new hero_list());
               }
               if(this.i == this.MP_myid)
               {
                  this.temp.gotoAndStop(2 + this.hero_list_frame_offset);
               }
               else
               {
                  this.temp.gotoAndStop(1 + this.hero_list_frame_offset);
               }
               this.hero[this.i] = this.temp;
               this.temp.y = this.herolist.p0.y + this.i * 20 * this.hero_list_scale;
               this.temp.x = this.herolist.p0.x;
               this.temp.f1.text = "";
               this.temp.f2.text = "";
               this.temp.f3.text = "";
               this.temp.f4.text = "";
               this.temp.f5.text = "";
               this.temp.vbtn1.tabEnabled = false;
               this.temp.vbtn2.tabEnabled = false;
               this.temp.vbtn3.tabEnabled = false;
               this.format = new TextFormat();
               this.format.size = 10 * this.hero_list_scale;
               this.temp.f1.setTextFormat(this.format);
               this.temp.f2.setTextFormat(this.format);
               this.temp.f3.setTextFormat(this.format);
               this.temp.f4.setTextFormat(this.format);
               this.temp.f5.setTextFormat(this.format);
               if(this.i == this.MP_myid)
               {
                  this.temp.f1.text = this.MP_nick;
                  this.str = "Team " + String(this.MP_team + 1);
                  if(this.MP_team == 0)
                  {
                     this.str = "Alpha";
                  }
                  if(this.MP_team == 1)
                  {
                     this.str = "Beta";
                  }
                  if(this.MP_team == 2)
                  {
                     this.str = "Gamma";
                  }
                  if(this.MP_team == 3)
                  {
                     this.str = "Delta";
                  }
                  if(this.MP_team == 4)
                  {
                     this.str = "Zeta";
                  }
                  if(this.MP_team == 5)
                  {
                     this.str = "Lambda";
                  }
                  if(this.MP_team == 6)
                  {
                     this.str = "Sigma";
                  }
                  if(this.MP_team == 7)
                  {
                     this.str = "Omega";
                  }
                  this.temp.f2.text = this.str;
                  this.temp.f3.text = 0;
                  this.temp.f4.text = 0;
               }
               ++this.i;
            }
         }
         this.death_cam = this.MP_myid;
         this.spawn = true;
         this.TIME_PLAYED_MULTI = getTimer();
         if(this.MP_mode)
         {
            this.herolist.f1.text = this.MP_room_name;
            this.herolist.f2.text = this.MP_map_name;
            this.herolist.f3.text = this.MP_region_name;
            this.herolist.f4.text = "";
            this.herolist.f5.text = "";
            this.herolist.f6.text = "00:00:00";
         }
         this.gamemenu.lvli.text = this.MP_map_name;
         this.need_heal.visible = false;
         this.nonblockrate = true;
         if(this.FORCE_CUSTOM_MAP || this.MP_mode)
         {
            this.gamemenu.mapinfos.visible = true;
            this.gamemenu.mapinfos.rate1.gotoAndStop(1);
            this.gamemenu.mapinfos.rate2.gotoAndStop(1);
            this.gamemenu.mapinfos.rate3.gotoAndStop(1);
            this.gamemenu.mapinfos.rate4.gotoAndStop(1);
            this.gamemenu.mapinfos.rate5.gotoAndStop(1);
            this.gamemenu.mapinfos.rate1.addEventListener(MouseEvent.MOUSE_OVER,function():*
            {
               PlaySound_full(ss_info);
               gamemenu.mapinfos.rate1.gotoAndStop(2);
               gamemenu.mapinfos.rate2.gotoAndStop(1);
               gamemenu.mapinfos.rate3.gotoAndStop(1);
               gamemenu.mapinfos.rate4.gotoAndStop(1);
               gamemenu.mapinfos.rate5.gotoAndStop(1);
            });
            this.gamemenu.mapinfos.rate1.addEventListener(MouseEvent.MOUSE_OUT,function():*
            {
               PlaySound_full(ss_info);
               gamemenu.mapinfos.rate1.gotoAndStop(1);
               gamemenu.mapinfos.rate2.gotoAndStop(1);
               gamemenu.mapinfos.rate3.gotoAndStop(1);
               gamemenu.mapinfos.rate4.gotoAndStop(1);
               gamemenu.mapinfos.rate5.gotoAndStop(1);
            });
            this.gamemenu.mapinfos.rate1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
            {
               PlaySound_full(ss_info_off);
               RateMap(1);
            });
            this.gamemenu.mapinfos.rate2.addEventListener(MouseEvent.MOUSE_OVER,function():*
            {
               PlaySound_full(ss_info);
               gamemenu.mapinfos.rate1.gotoAndStop(2);
               gamemenu.mapinfos.rate2.gotoAndStop(2);
               gamemenu.mapinfos.rate3.gotoAndStop(1);
               gamemenu.mapinfos.rate4.gotoAndStop(1);
               gamemenu.mapinfos.rate5.gotoAndStop(1);
            });
            this.gamemenu.mapinfos.rate2.addEventListener(MouseEvent.MOUSE_OUT,function():*
            {
               PlaySound_full(ss_info);
               gamemenu.mapinfos.rate1.gotoAndStop(1);
               gamemenu.mapinfos.rate2.gotoAndStop(1);
               gamemenu.mapinfos.rate3.gotoAndStop(1);
               gamemenu.mapinfos.rate4.gotoAndStop(1);
               gamemenu.mapinfos.rate5.gotoAndStop(1);
            });
            this.gamemenu.mapinfos.rate2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
            {
               PlaySound_full(ss_info_off);
               RateMap(2);
            });
            this.gamemenu.mapinfos.rate3.addEventListener(MouseEvent.MOUSE_OVER,function():*
            {
               PlaySound_full(ss_info);
               gamemenu.mapinfos.rate1.gotoAndStop(2);
               gamemenu.mapinfos.rate2.gotoAndStop(2);
               gamemenu.mapinfos.rate3.gotoAndStop(2);
               gamemenu.mapinfos.rate4.gotoAndStop(1);
               gamemenu.mapinfos.rate5.gotoAndStop(1);
            });
            this.gamemenu.mapinfos.rate3.addEventListener(MouseEvent.MOUSE_OUT,function():*
            {
               PlaySound_full(ss_info);
               gamemenu.mapinfos.rate1.gotoAndStop(1);
               gamemenu.mapinfos.rate2.gotoAndStop(1);
               gamemenu.mapinfos.rate3.gotoAndStop(1);
               gamemenu.mapinfos.rate4.gotoAndStop(1);
               gamemenu.mapinfos.rate5.gotoAndStop(1);
            });
            this.gamemenu.mapinfos.rate3.addEventListener(MouseEvent.MOUSE_DOWN,function():*
            {
               PlaySound_full(ss_info_off);
               RateMap(3);
            });
            this.gamemenu.mapinfos.rate4.addEventListener(MouseEvent.MOUSE_OVER,function():*
            {
               PlaySound_full(ss_info);
               gamemenu.mapinfos.rate1.gotoAndStop(2);
               gamemenu.mapinfos.rate2.gotoAndStop(2);
               gamemenu.mapinfos.rate3.gotoAndStop(2);
               gamemenu.mapinfos.rate4.gotoAndStop(2);
               gamemenu.mapinfos.rate5.gotoAndStop(1);
            });
            this.gamemenu.mapinfos.rate4.addEventListener(MouseEvent.MOUSE_OUT,function():*
            {
               PlaySound_full(ss_info);
               gamemenu.mapinfos.rate1.gotoAndStop(1);
               gamemenu.mapinfos.rate2.gotoAndStop(1);
               gamemenu.mapinfos.rate3.gotoAndStop(1);
               gamemenu.mapinfos.rate4.gotoAndStop(1);
               gamemenu.mapinfos.rate5.gotoAndStop(1);
            });
            this.gamemenu.mapinfos.rate4.addEventListener(MouseEvent.MOUSE_DOWN,function():*
            {
               PlaySound_full(ss_info_off);
               RateMap(4);
            });
            this.gamemenu.mapinfos.rate5.addEventListener(MouseEvent.MOUSE_OVER,function():*
            {
               PlaySound_full(ss_info);
               gamemenu.mapinfos.rate1.gotoAndStop(2);
               gamemenu.mapinfos.rate2.gotoAndStop(2);
               gamemenu.mapinfos.rate3.gotoAndStop(2);
               gamemenu.mapinfos.rate4.gotoAndStop(2);
               gamemenu.mapinfos.rate5.gotoAndStop(2);
            });
            this.gamemenu.mapinfos.rate5.addEventListener(MouseEvent.MOUSE_OUT,function():*
            {
               PlaySound_full(ss_info);
               gamemenu.mapinfos.rate1.gotoAndStop(1);
               gamemenu.mapinfos.rate2.gotoAndStop(1);
               gamemenu.mapinfos.rate3.gotoAndStop(1);
               gamemenu.mapinfos.rate4.gotoAndStop(1);
               gamemenu.mapinfos.rate5.gotoAndStop(1);
            });
            this.gamemenu.mapinfos.rate5.addEventListener(MouseEvent.MOUSE_DOWN,function():*
            {
               PlaySound_full(ss_info_off);
               RateMap(5);
            });
            this.gamemenu.mapinfos.mappage.addEventListener(MouseEvent.MOUSE_OVER,function():*
            {
               PlaySound_full(ss_info);
            });
            this.gamemenu.mapinfos.mappage.addEventListener(MouseEvent.MOUSE_DOWN,function():*
            {
               PlaySound_full(ss_info_off);
            });
            this.gamemenu.mapinfos.mappage.addEventListener(MouseEvent.CLICK,function():*
            {
               try
               {
                  DialogSay("Visiting page of map \'\'" + CUR_CUSTOM_MAP + "\'\'...","#FFFF00");
                  navigateToURL(new URLRequest("https://www.plazmaburst2.com/index.php?s=9&m=" + CUR_CUSTOM_MAP),"_blank");
               }
               catch(e:Error)
               {
               }
            });
         }
         else
         {
            this.gamemenu.mapinfos.visible = false;
         }
         this.NoMouse(this.game);
         this.NoMouse(this.graphics_3d_front);
         this.TakeScreenShot_allow = true;
         this.TakeScreenShot_delay = 1000;
         this.can_get_exp_for_level = true;
         this.conmenu_set.ui_no.addEventListener(MouseEvent.CLICK,function():*
         {
            ui_type = 2;
            conmenu_set.ui_no.gotoAndStop(2);
            conmenu_set.ui_mini.gotoAndStop(1);
            conmenu_set.ui_full.gotoAndStop(1);
            update_ui();
         });
         this.conmenu_set.ui_mini.addEventListener(MouseEvent.CLICK,function():*
         {
            ui_type = 1;
            conmenu_set.ui_no.gotoAndStop(1);
            conmenu_set.ui_mini.gotoAndStop(2);
            conmenu_set.ui_full.gotoAndStop(1);
            update_ui();
         });
         this.conmenu_set.ui_full.addEventListener(MouseEvent.CLICK,function():*
         {
            ui_type = 0;
            conmenu_set.ui_no.gotoAndStop(1);
            conmenu_set.ui_mini.gotoAndStop(1);
            conmenu_set.ui_full.gotoAndStop(2);
            update_ui();
         });
         if(this.FORCE_CUSTOM_MAP)
         {
            if(!this.MP_mode)
            {
               if(this.exp_tried_custom_maps[this.CUR_CUSTOM_MAP] == undefined || this.CUR_CUSTOM_MAP == "dm0")
               {
                  this.exp_tried_custom_maps[this.CUR_CUSTOM_MAP] = true;
                  this.ExpTask(this.EXP_TYPE_TRY_CUSTOM);
               }
            }
         }
         this.update_ui();
         if(this.SCREEN_EFFECTS)
         {
            this.conmenu_set.s_1.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.s_1.gotoAndStop(1);
         }
         this.conmenu_set.s_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            SCREEN_EFFECTS = !SCREEN_EFFECTS;
            if(SCREEN_EFFECTS)
            {
               conmenu_set.s_1.gotoAndStop(2);
            }
            else
            {
               conmenu_set.s_1.gotoAndStop(1);
            }
         });
         if(this.SUPER_COMPUTER)
         {
            this.conmenu_set.c_1.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.c_1.gotoAndStop(1);
         }
         this.conmenu_set.c_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            SUPER_COMPUTER = !SUPER_COMPUTER;
            RAGDOLL_COLLIDE = SUPER_COMPUTER;
            if(SUPER_COMPUTER)
            {
               conmenu_set.c_1.gotoAndStop(2);
            }
            else
            {
               conmenu_set.c_1.gotoAndStop(1);
            }
         });
         if(this.SCREEN_FADE_EFFECTS)
         {
            this.conmenu_set.screenfade_1.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.screenfade_1.gotoAndStop(1);
         }
         this.conmenu_set.screenfade_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            SCREEN_FADE_EFFECTS = !SCREEN_FADE_EFFECTS;
            if(SCREEN_FADE_EFFECTS)
            {
               conmenu_set.screenfade_1.gotoAndStop(2);
               darkness.scaleX = 1;
               darkness.scaleY = 1;
            }
            else
            {
               conmenu_set.screenfade_1.gotoAndStop(1);
               darkness.scaleX = 0;
               darkness.scaleY = 0;
            }
         });
         this.conmenu_set.ph_1.gotoAndStop(1);
         this.conmenu_set.ph_2.gotoAndStop(1);
         if(!this.LITE_PHYS)
         {
            this.conmenu_set.ph_2.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.ph_1.gotoAndStop(2);
         }
         this.conmenu_set.ph_2.addEventListener(MouseEvent.CLICK,function():*
         {
            LITE_PHYS = false;
            conmenu_set.ph_2.gotoAndStop(2);
            conmenu_set.ph_1.gotoAndStop(1);
         });
         this.conmenu_set.ph_1.addEventListener(MouseEvent.CLICK,function():*
         {
            LITE_PHYS = true;
            conmenu_set.ph_1.gotoAndStop(2);
            conmenu_set.ph_2.gotoAndStop(1);
            i = 0;
            while(i < atotal)
            {
               if(aio[i] != -1)
               {
                  lax[i] = ax[i];
                  lay[i] = ay[i];
               }
               ++i;
            }
         });
         if(this.fps_counter)
         {
            this.conmenu_set.fps_no.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.fps_no.gotoAndStop(1);
         }
         this.conmenu_set.fps_no.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            fps_counter = !fps_counter;
            if(fps_counter)
            {
               conmenu_set.fps_no.gotoAndStop(2);
            }
            else
            {
               conmenu_set.fps_no.gotoAndStop(1);
            }
            update_ui();
         });
         if(this.AUTO_PICK_NEW_WEPS)
         {
            this.conmenu_set.n_1.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.n_1.gotoAndStop(1);
         }
         this.conmenu_set.n_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            AUTO_PICK_NEW_WEPS = !AUTO_PICK_NEW_WEPS;
            if(AUTO_PICK_NEW_WEPS)
            {
               conmenu_set.n_1.gotoAndStop(2);
            }
            else
            {
               conmenu_set.n_1.gotoAndStop(1);
            }
         });
         if(this.ALTCUR)
         {
            this.conmenu_set.cur_1.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.cur_1.gotoAndStop(1);
         }
         this.conmenu_set.cur_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            ALTCUR = !ALTCUR;
            if(ALTCUR)
            {
               conmenu_set.cur_1.gotoAndStop(2);
               Mouse.hide();
            }
            else
            {
               conmenu_set.cur_1.gotoAndStop(1);
               Mouse.show();
            }
         });
         if(HINTS)
         {
            this.conmenu_set.hi_1.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.hi_1.gotoAndStop(1);
         }
         this.conmenu_set.hi_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            HINTS = !HINTS;
            if(HINTS)
            {
               conmenu_set.hi_1.gotoAndStop(2);
            }
            else
            {
               conmenu_set.hi_1.gotoAndStop(1);
            }
         });
         if(this.MOUSE_WHEEL)
         {
            this.conmenu_set.mw_1.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.mw_1.gotoAndStop(1);
         }
         this.conmenu_set.mw_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            MOUSE_WHEEL = !MOUSE_WHEEL;
            if(MOUSE_WHEEL)
            {
               conmenu_set.mw_1.gotoAndStop(2);
            }
            else
            {
               conmenu_set.mw_1.gotoAndStop(1);
            }
         });
         if(this.OVERSCROLL)
         {
            this.conmenu_set.os_1.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.os_1.gotoAndStop(1);
         }
         this.conmenu_set.os_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            OVERSCROLL = !OVERSCROLL;
            if(OVERSCROLL)
            {
               conmenu_set.os_1.gotoAndStop(2);
            }
            else
            {
               conmenu_set.os_1.gotoAndStop(1);
            }
         });
         if(this.RECONNECT_ON_LOST_CONNECTION)
         {
            this.conmenu_set.rec_1.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.rec_1.gotoAndStop(1);
         }
         this.conmenu_set.rec_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            RECONNECT_ON_LOST_CONNECTION = !RECONNECT_ON_LOST_CONNECTION;
            if(RECONNECT_ON_LOST_CONNECTION)
            {
               conmenu_set.rec_1.gotoAndStop(2);
            }
            else
            {
               conmenu_set.rec_1.gotoAndStop(1);
            }
         });
         if(this.SOFT_SCREEN)
         {
            this.conmenu_set.cm_1.gotoAndStop(1);
         }
         else
         {
            this.conmenu_set.cm_1.gotoAndStop(2);
         }
         this.conmenu_set.cm_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            SOFT_SCREEN = !SOFT_SCREEN;
            if(SOFT_SCREEN)
            {
               conmenu_set.cm_1.gotoAndStop(1);
            }
            else
            {
               conmenu_set.cm_1.gotoAndStop(2);
            }
         });
         if(this.VIOLENCE)
         {
            this.conmenu_set.vi_1.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.vi_1.gotoAndStop(1);
         }
         this.conmenu_set.vi_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            VIOLENCE = !VIOLENCE;
            if(VIOLENCE)
            {
               conmenu_set.vi_1.gotoAndStop(2);
            }
            else
            {
               conmenu_set.vi_1.gotoAndStop(1);
            }
         });
         if(this.BEEP_ON_DEATH)
         {
            this.conmenu_set.beep_1.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.beep_1.gotoAndStop(1);
         }
         this.conmenu_set.beep_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            BEEP_ON_DEATH = !BEEP_ON_DEATH;
            if(BEEP_ON_DEATH)
            {
               conmenu_set.beep_1.gotoAndStop(2);
            }
            else
            {
               conmenu_set.beep_1.gotoAndStop(1);
            }
         });
         if(this.HIT_SOUNDS)
         {
            this.conmenu_set.hit_1.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.hit_1.gotoAndStop(1);
         }
         this.conmenu_set.hit_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            HIT_SOUNDS = !HIT_SOUNDS;
            if(HIT_SOUNDS)
            {
               conmenu_set.hit_1.gotoAndStop(2);
            }
            else
            {
               conmenu_set.hit_1.gotoAndStop(1);
            }
         });
         if(this.CENSORESHIP)
         {
            this.conmenu_set.csh_1.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.csh_1.gotoAndStop(1);
         }
         this.conmenu_set.csh_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            CENSORESHIP = !CENSORESHIP;
            if(CENSORESHIP)
            {
               conmenu_set.csh_1.gotoAndStop(2);
            }
            else
            {
               conmenu_set.csh_1.gotoAndStop(1);
            }
         });
         if(TOOLTIPS)
         {
            this.conmenu_set.tt_1.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.tt_1.gotoAndStop(1);
         }
         this.conmenu_set.tt_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            TOOLTIPS = !TOOLTIPS;
            if(TOOLTIPS)
            {
               conmenu_set.tt_1.gotoAndStop(2);
            }
            else
            {
               conmenu_set.tt_1.gotoAndStop(1);
            }
         });
         if(this.kd_counter)
         {
            this.conmenu_set.kd_no.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.kd_no.gotoAndStop(1);
         }
         this.conmenu_set.kd_no.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            kd_counter = !kd_counter;
            if(kd_counter)
            {
               conmenu_set.kd_no.gotoAndStop(2);
            }
            else
            {
               conmenu_set.kd_no.gotoAndStop(1);
            }
            update_ui();
         });
         if(this.HQ)
         {
            this.conmenu_set.q_1.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.q_1.gotoAndStop(1);
         }
         if(this.MQ)
         {
            this.conmenu_set.mq_1.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.mq_1.gotoAndStop(1);
         }
         if(this.MQ)
         {
            this.conmenu_set.mq_1.gotoAndStop(2);
         }
         else
         {
            this.conmenu_set.mq_1.gotoAndStop(1);
         }
         this.conmenu_set.mq_1.addEventListener(MouseEvent.CLICK,function(param1:MouseEvent):*
         {
            MQ = !MQ;
            if(MQ)
            {
               conmenu_set.mq_1.gotoAndStop(2);
            }
            else
            {
               conmenu_set.mq_1.gotoAndStop(1);
            }
         });
         if(this.PSYCHOBLOOD_MODE == 1)
         {
            this.conmenu_set.se_1.gotoAndStop(1);
         }
         else if(this.PSYCHOBLOOD_MODE == 2)
         {
            this.conmenu_set.se_1.gotoAndStop(2);
         }
         if(this.MP_type == 2 || this.MP_type == 3)
         {
            this.herolist.listteam.visible = true;
         }
         else
         {
            this.herolist.listteam.visible = false;
         }
      }
      
      internal function frame19() : *
      {
         this.stop();
      }
      
      internal function frame20() : *
      {
         stop();
         this.setTrapAllKeys(true);
         this.darkness.visible = false;
         this.darkness.alpha = 0;
         this.ResetVol();
         this.UpdateGravitatorVol();
         stage.quality = "HIGH";
         stage.focus = stage;
         this.FUN_TIME_SPEND = 0;
         this.MP_spectator = false;
         if(this.FORCE_CUSTOM_MAP)
         {
            this.tooltip_dif2.text = "MAP " + this.CUR_CUSTOM_MAP;
            this.MP_map_name = "Custom Map: " + this.CUR_CUSTOM_MAP;
         }
         else
         {
            this.tooltip_dif2.text = "LEVEL " + (this.CMPG_THIS_LEVEL + 1);
            this.MP_map_name = "Level: " + (this.CMPG_THIS_LEVEL + 1);
         }
         this.uncncld = true;
         this.nodif_cancel.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space3);
            gotoAndStop("campaign");
         });
         this.nodif_cancel.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.nodif_cancel.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.NoMouse2(this.dif_extreme_text);
         this.tooltip_dif3.text = "PRESS \"SPACE\" BUTTON TO CONTINUE WITH " + (this.LOW_HPS ? "\"IMPOSSIBLE\"" : (this.EASY_MODE ? "\"EASY\"" : (this.PRO_BOTS ? "\"HARD\"" : "\"NORMAL\""))) + " LEVEL OF DIFFICULTY";
         this.dif_extreme.addEventListener(MouseEvent.CLICK,function():*
         {
            if(uncncld)
            {
               stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space3);
               uncncld = false;
            }
            PlaySound_full(ss_info_act);
            EASY_MODE = false;
            PRO_BOTS = true;
            LOW_HPS = true;
            if(FORCE_CUSTOM_MAP)
            {
               GET_TRIES = 0;
               GotoMap(CUR_CUSTOM_MAP);
            }
            else
            {
               SaveGame();
               GET_TRIES = 0;
               GotoMap("c" + CMPG_THIS_LEVEL + "a");
            }
         });
         this.dif_extreme.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
            tooltip_dif.text = "IMPOSSIBLE - JUST LIKE OLD TIMES.";
         });
         this.dif_extreme.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.dif_extreme.addEventListener(MouseEvent.MOUSE_OUT,function():*
         {
            if(currentLabel == "difch")
            {
               tooltip_dif.text = "";
            }
         });
         this.dif_hard.addEventListener(MouseEvent.CLICK,function():*
         {
            if(uncncld)
            {
               stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space3);
               uncncld = false;
            }
            PlaySound_full(ss_info_act);
            EASY_MODE = false;
            PRO_BOTS = true;
            LOW_HPS = false;
            if(FORCE_CUSTOM_MAP)
            {
               GET_TRIES = 0;
               GotoMap(CUR_CUSTOM_MAP);
            }
            else
            {
               SaveGame();
               GET_TRIES = 0;
               GotoMap("c" + CMPG_THIS_LEVEL + "a");
            }
         });
         this.dif_hard.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
            tooltip_dif.text = "HARD - ENEMIES HAVE A REGENERATION MODULE, MORE HEALTH AT THE FIRST MISSIONS, THEY ARE MUCH SMARTER, THEY CAN SEE YOU THROUGH WALLS AND THEY NEVER FIGHT THEIR OWN TEAMMATES.";
         });
         this.dif_hard.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.dif_hard.addEventListener(MouseEvent.MOUSE_OUT,function():*
         {
            if(currentLabel == "difch")
            {
               tooltip_dif.text = "";
            }
         });
         this.dif_normal.addEventListener(MouseEvent.CLICK,function():*
         {
            if(uncncld)
            {
               stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space3);
               uncncld = false;
            }
            PlaySound_full(ss_info_act);
            EASY_MODE = false;
            PRO_BOTS = false;
            LOW_HPS = false;
            if(FORCE_CUSTOM_MAP)
            {
               GET_TRIES = 0;
               GotoMap(CUR_CUSTOM_MAP);
            }
            else
            {
               SaveGame();
               GET_TRIES = 0;
               GotoMap("c" + CMPG_THIS_LEVEL + "a");
            }
         });
         this.dif_normal.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
            tooltip_dif.text = "NORMAL - ENEMIES ACT LIKE REAL HUMANS, WHICH DO NOT HAVE DEVICES WHICH LET THEM SEE THEIR ENEMIES THROUGH WALLS.";
         });
         this.dif_normal.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.dif_normal.addEventListener(MouseEvent.MOUSE_OUT,function():*
         {
            if(currentLabel == "difch")
            {
               tooltip_dif.text = "";
            }
         });
         this.dif_easy.addEventListener(MouseEvent.CLICK,function():*
         {
            if(uncncld)
            {
               stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space3);
               uncncld = false;
            }
            PlaySound_full(ss_info_act);
            EASY_MODE = true;
            PRO_BOTS = false;
            LOW_HPS = false;
            if(FORCE_CUSTOM_MAP)
            {
               GET_TRIES = 0;
               GotoMap(CUR_CUSTOM_MAP);
            }
            else
            {
               SaveGame();
               GET_TRIES = 0;
               GotoMap("c" + CMPG_THIS_LEVEL + "a");
            }
         });
         this.dif_easy.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
            tooltip_dif.text = "EASY - ENOUGH TO TEST YOUR SKILLS! CHOOSE THIS DIFFICULTY IF IT\'S FIRST TIME YOU PLAYING A SHOOTER GAME.";
         });
         this.dif_easy.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.dif_easy.addEventListener(MouseEvent.MOUSE_OUT,function():*
         {
            if(currentLabel == "difch")
            {
               tooltip_dif.text = "";
            }
         });
         stage.addEventListener(KeyboardEvent.KEY_DOWN,this.k_down_space3);
         this.flike4.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            try
            {
               navigateToURL(new URLRequest("https://discord.gg/plazmaburst"),"_blank");
            }
            catch(e:Error)
            {
            }
         });
         this.flike4.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.flike4.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         if(this.ui_bg)
         {
            this.uibackground.visible = false;
         }
         else
         {
            this.uibackground.visible = true;
         }
      }
      
      internal function frame21() : *
      {
         stop();
         this.setTrapAllKeys(false);
         this.darkness.visible = false;
         this.darkness.alpha = 0;
         this.ResetVol();
         this.UpdateGravitatorVol();
         stage.quality = "HIGH";
         this.FUN_TIME_SPEND = 0;
         this.FORCE_CUSTOM_MAP = true;
         if(this.loaderInfo.parameters.custommap != undefined)
         {
            this.cmid.text = this.loaderInfo.parameters.custommap;
         }
         else
         {
            this.cmid.text = "";
         }
         this.cmap_pl.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            RememberMapID(cmid.text,1);
            CUR_CUSTOM_MAP = cmid.text;
            gotoAndStop("difch");
         });
         this.cmap_pl.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.cmap_pl.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.cmap_crt.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            try
            {
               navigateToURL(new URLRequest("http://www.plazmaburst2.com/index.php?s=1"),"_blank");
            }
            catch(e:Error)
            {
            }
         });
         this.cmap_crt.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.cmap_crt.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.cmap_canc.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            if(!custompage)
            {
               gotoAndStop("campaign");
            }
            else
            {
               gotoAndStop("menu");
            }
         });
         this.cmap_canc.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.cmap_canc.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         stage.focus = this.cmid;
         this.cmid.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            CallQuickPick(272,205 - 18,1,cmid);
         });
         if(this.ui_bg)
         {
            this.uibackground.visible = false;
         }
         else
         {
            this.uibackground.visible = true;
         }
      }
      
      internal function frame22() : *
      {
         stop();
         this.darkness.visible = false;
         this.darkness.alpha = 0;
         this.ResetVol();
         this.UpdateGravitatorVol();
         stage.quality = "HIGH";
         this.setTrapAllKeys(true);
         this.FUN_TIME_SPEND = 0;
         this.i4 = 0;
         this.achive_obj = new Array();
         this.i = 0;
         while(this.i < this.BADGES_TOTAL)
         {
            if(this.i == 0)
            {
               this.temp = this.game.it0;
            }
            else
            {
               this.temp = this.game.addChild(new achive_item());
            }
            this.temp.y = 32 * this.i;
            if(this.BADGE_REACHED[this.i])
            {
               this.temp.gotoAndStop(1);
               ++this.i4;
            }
            else if(this.BADGE_STAT[this.i] > 0)
            {
               this.temp.gotoAndStop(3);
            }
            else
            {
               this.temp.gotoAndStop(2);
            }
            this.temp.txt.text = this.BADGE_TITLE[this.i];
            this.temp.txt2.text = this.BADGE_STAT[this.i] + " / " + this.BADGE_STAT_MAX[this.i];
            this.achive_obj[this.i] = this.temp;
            ++this.i;
         }
         this.ach_txt.text = "Achivements (unlocked " + this.i4 + " of " + this.BADGES_TOTAL + ")";
         this.yy = 0;
         this.xx = 0;
         this.ok = false;
         this.ok2 = false;
         (function():void
         {
            var scroll_drag:* = undefined;
            var scroll_timer:* = undefined;
            var scroll_offset_y:* = undefined;
            var scrolling2:* = undefined;
            scrolling2 = function():void
            {
               sc_scrool.y = scroll_offset_y + mouseY;
               xx = (sc_scrool.y - 98) / (282 - 98) * (-BADGES_TOTAL * 32 + 296);
               if(xx < -BADGES_TOTAL * 32 + 296)
               {
                  xx = -BADGES_TOTAL * 32 + 296;
               }
               if(xx > 0)
               {
                  xx = 0;
               }
               ok = false;
               ok2 = false;
               onEnterFrame_ac(null);
            };
            scroll_drag = false;
            scroll_timer = 0;
            scroll_offset_y = 0;
            sc_scrool.addEventListener(MouseEvent.MOUSE_DOWN,function():*
            {
               if(scroll_drag)
               {
                  return;
               }
               scroll_drag = true;
               scroll_timer = setInterval(scrolling2,16);
               scroll_offset_y = sc_scrool.y - mouseY;
            });
            stage.addEventListener(MouseEvent.MOUSE_UP,function():*
            {
               if(!scroll_drag)
               {
                  return;
               }
               scroll_drag = false;
               clearInterval(scroll_timer);
            });
            stage.addEventListener(MouseEvent.MOUSE_WHEEL,function(param1:*):*
            {
               if(currentFrameLabel == "channel" || currentFrameLabel == "achiv")
               {
                  yy += param1.delta * 5;
               }
            });
         })();
         this.sc_up1.addEventListener(MouseEvent.MOUSE_DOWN,this.sc_up);
         this.sc_up1.addEventListener(MouseEvent.MOUSE_OUT,this.sc_upx);
         this.sc_up1.addEventListener(MouseEvent.CLICK,this.sc_upx);
         this.sc_up2.addEventListener(MouseEvent.MOUSE_DOWN,this.sc_up);
         this.sc_up2.addEventListener(MouseEvent.MOUSE_OUT,this.sc_upx);
         this.sc_up2.addEventListener(MouseEvent.CLICK,this.sc_upx);
         this.sc_down1.addEventListener(MouseEvent.MOUSE_DOWN,this.sc_down);
         this.sc_down1.addEventListener(MouseEvent.MOUSE_OUT,this.sc_downx);
         this.sc_down1.addEventListener(MouseEvent.CLICK,this.sc_downx);
         this.sc_down2.addEventListener(MouseEvent.MOUSE_DOWN,this.sc_down);
         this.sc_down2.addEventListener(MouseEvent.MOUSE_OUT,this.sc_downx);
         this.sc_down2.addEventListener(MouseEvent.CLICK,this.sc_downx);
         this.ach_done.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            removeEventListener(Event.ENTER_FRAME,onEnterFrame_ac);
            gotoAndStop("campaign");
         });
         this.ach_done.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.ach_done.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         addEventListener(Event.ENTER_FRAME,this.onEnterFrame_ac);
         if(this.ui_bg)
         {
            this.uibackground.visible = false;
         }
         else
         {
            this.uibackground.visible = true;
         }
      }
      
      internal function frame23() : *
      {
         stop();
         this.darkness.visible = false;
         this.darkness.alpha = 0;
         this.ResetVol();
         stage.quality = "HIGH";
         this.setTrapAllKeys(true);
         if(this.ALTCUR)
         {
            Mouse.hide();
         }
         this.INTRO_DONE = false;
         this.intro_graph.coollogo.pushme.addEventListener(MouseEvent.CLICK,function():*
         {
            var q4_request:URLRequest = null;
            q4_request = new URLRequest("http://www.coolbuddy.com");
            try
            {
               navigateToURL(q4_request,"_blank");
            }
            catch(e:Error)
            {
            }
         });
         this.intro_graph.useHandCursor = false;
         this.intro_graph.addEventListener(MouseEvent.CLICK,function():*
         {
            intro_done();
         });
         this.intro_graph.coollogo.pushme.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.intro_graph.coollogo.pushme.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.PlaySound_full(this.s_coolbuddy2);
      }
      
      internal function frame24() : *
      {
         this.setTrapAllKeys(false);
         this.test = this.ProduceSaveString(false);
         if(this.test != this.decode_game_state(this.encode_game_state(this.test)))
         {
            this.game_state_text.text = "test";
            throw new Error("Encoding failed");
         }
         this.game_state_text.text = this.encode_game_state(this.ProduceSaveString(false));
         this.inter_progress = setInterval(function():*
         {
            if(currentFrameLabel != "export_progress")
            {
               clearInterval(inter_progress);
               return;
            }
            stage.focus = game_state_text;
            game_state_text.setSelection(0,game_state_text.text.length);
         },100);
         this.cont_back_progress.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            gotoAndStop("options");
         });
         this.cont_apply_state.addEventListener(MouseEvent.CLICK,function():*
         {
            PlaySound_full(ss_info_act);
            try
            {
               LoadSaveDataFromString(decode_game_state(game_state_text.text),false);
               LoadGame();
               SaveGame();
               GameStateAlert("Success!");
            }
            catch(e:*)
            {
               GameStateAlert("Error has occoured");
            }
         });
         this.game_state_timer = -1;
         this.cont_back_progress.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.cont_back_progress.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.cont_apply_state.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.cont_apply_state.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.back1e1.addEventListener(MouseEvent.MOUSE_OVER,function():*
         {
            PlaySound_full(ss_info);
         });
         this.back1e1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
         {
            PlaySound_full(ss_info_off);
         });
         this.back1e1.addEventListener(MouseEvent.CLICK,function():*
         {
            var time_left:int = 0;
            var StateTick:* = function():void
            {
               --time_left;
               error_game_state.text = "Clearing all save data in...  " + time_left + " (you still have time to click \"Cancel\")";
               game_state_timer = setTimeout(function():*
               {
                  var _loc1_:* = undefined;
                  var _loc2_:* = undefined;
                  if(currentFrameLabel == "export_progress")
                  {
                     if(time_left > 0)
                     {
                        game_state_timer = -1;
                        StateTick();
                     }
                     else
                     {
                        game_state_timer = -1;
                        _loc1_ = my_so.data["first_login"];
                        _loc2_ = my_so.data["first_uid"];
                        PlaySound_full(ss_info_act);
                        my_so.clear();
                        LoadGame();
                        gotoAndStop("controls");
                        gotoAndStop("export_progress");
                        my_so.data["first_login"] = _loc1_;
                        my_so.data["first_uid"] = _loc2_;
                     }
                  }
                  else
                  {
                     game_state_timer = -1;
                  }
               },1000);
            };
            if(game_state_timer != -1)
            {
               clearInterval(game_state_timer);
            }
            time_left = 6;
            StateTick();
         });
      }
   }
}

